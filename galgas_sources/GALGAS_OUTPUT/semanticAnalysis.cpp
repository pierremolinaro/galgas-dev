//-----------------------------------------------------------------------------*
//                                                                             *
//                        File 'semanticAnalysis.cpp'                          *
//                         Generated by version 2.7.0                          *
//                       july 16th, 2014, at 10h13'20"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "templateGrammar.h"
#include "semanticAnalysis.h"


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'checkMethodSignatures'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkMethodSignatures (const GALGAS_formalParameterListForGeneration constinArgument_inTestedSignature,
                                    const GALGAS_location constinArgument_inErrorLocation,
                                    const GALGAS_formalParameterSignature constinArgument_inReferenceSignature,
                                    const GALGAS_location constinArgument_inReferenceLocation,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 37)).objectCompare (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 37)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("this method declares ").operator_concat (constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 38))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).operator_concat (GALGAS_string (" formal parameter(s), but overriden method declares ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)).operator_concat (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 39)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 39))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 39))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 38)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 41)) ;
  }else if (kBoolFalse == test_0) {
    cEnumerator_formalParameterSignature enumerator_2533 (constinArgument_inReferenceSignature, kEnumeration_up) ;
    cEnumerator_formalParameterListForGeneration enumerator_2559 (constinArgument_inTestedSignature, kEnumeration_up) ;
    while (enumerator_2533.hasCurrentObject () && enumerator_2559.hasCurrentObject ()) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_2533.current_mFormalArgumentPassingMode (HERE).objectCompare (enumerator_2559.current_mFormalArgumentPassingMode (HERE))).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_location location_2 (enumerator_2559.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_2, GALGAS_string ("the '").operator_concat (enumerator_2559.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 45))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (GALGAS_string ("' formal parameter is declared as ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (categoryReader_formalArgumentMessage (enumerator_2559.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)).operator_concat (GALGAS_string (", but overriden method declares it as ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46)).operator_concat (categoryReader_formalArgumentMessage (enumerator_2533.current_mFormalArgumentPassingMode (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 47))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 46))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 45)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 48)) ;
      }
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_2559.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 50)).objectCompare (enumerator_2533.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 50)))).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (enumerator_2559.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the '").operator_concat (enumerator_2559.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 51))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)).operator_concat (GALGAS_string ("' formal parameter has the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)).operator_concat (enumerator_2559.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 52))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)).operator_concat (GALGAS_string ("' type, but overriden method declares with the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 52)).operator_concat (enumerator_2533.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 53))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 52)).operator_concat (GALGAS_string ("' type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 53))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 51)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden method is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 54)) ;
      }
      enumerator_2533.gotoNextObject () ;
      enumerator_2559.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'checkReaderSignatures'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkReaderSignatures (const GALGAS_formalInputParameterListForGeneration constinArgument_inTestedSignature,
                                    const GALGAS_unifiedTypeMapProxy constinArgument_inReturnType,
                                    const GALGAS_location constinArgument_inErrorLocation,
                                    const GALGAS_unifiedTypeMapProxyAndParameterList constinArgument_inReferenceSignature,
                                    const GALGAS_unifiedTypeMapProxy constinArgument_inInheritedReturnType,
                                    const GALGAS_location constinArgument_inReferenceLocation,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 74)).objectCompare (constinArgument_inInheritedReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 74)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("the return type is '@").operator_concat (constinArgument_inReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 76))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 75)).operator_concat (GALGAS_string ("', but overriden reader names '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 76)).operator_concat (constinArgument_inInheritedReturnType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 77))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 76)).operator_concat (GALGAS_string ("' as return type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 77))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 75)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden reader is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 78)) ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 80)).objectCompare (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 80)))).boolEnum () ;
  if (kBoolTrue == test_1) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("this reader declares ").operator_concat (constinArgument_inTestedSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 81)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 81))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 81)).operator_concat (GALGAS_string (" formal parameter(s), but overriden reader declares ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 81)).operator_concat (constinArgument_inReferenceSignature.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 82)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 82))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 82))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 81)) ;
    inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden reader is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 84)) ;
  }else if (kBoolFalse == test_1) {
    cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_4829 (constinArgument_inReferenceSignature, kEnumeration_up) ;
    cEnumerator_formalInputParameterListForGeneration enumerator_4855 (constinArgument_inTestedSignature, kEnumeration_up) ;
    while (enumerator_4829.hasCurrentObject () && enumerator_4855.hasCurrentObject ()) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_4855.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 87)).objectCompare (enumerator_4829.current_mType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 87)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_location location_3 (enumerator_4855.current_mFormalArgumentName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_3, GALGAS_string ("the '").operator_concat (enumerator_4855.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 88))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 88)).operator_concat (GALGAS_string ("' formal parameter has the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 88)).operator_concat (enumerator_4855.current_mFormalArgumentType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 89))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 88)).operator_concat (GALGAS_string ("' type, but overriden reader declares with the '@")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 89)).operator_concat (enumerator_4829.current_mType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 90))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 89)).operator_concat (GALGAS_string ("' type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 90))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 88)) ;
        inCompiler->emitSemanticError (constinArgument_inReferenceLocation, GALGAS_string ("overriden reader is declared here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 91)) ;
      }
      enumerator_4829.gotoNextObject () ;
      enumerator_4855.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*

cMapElement_attributeIndexMap::cMapElement_attributeIndexMap (const GALGAS_lstring & inKey,
                                                              const GALGAS_unifiedTypeMapProxy & in_mAttributeTypeIndex
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mAttributeTypeIndex (in_mAttributeTypeIndex) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_attributeIndexMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mAttributeTypeIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_attributeIndexMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_attributeIndexMap (mAttribute_lkey, mAttribute_mAttributeTypeIndex COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_attributeIndexMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mAttributeTypeIndex" ":" ;
  mAttribute_mAttributeTypeIndex.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_attributeIndexMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_attributeIndexMap * operand = (cMapElement_attributeIndexMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mAttributeTypeIndex.objectCompare (operand->mAttribute_mAttributeTypeIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap::GALGAS_attributeIndexMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap::GALGAS_attributeIndexMap (const GALGAS_attributeIndexMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap & GALGAS_attributeIndexMap::operator = (const GALGAS_attributeIndexMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::constructor_mapWithMapToOverride (const GALGAS_attributeIndexMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_attributeIndexMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   GALGAS_unifiedTypeMapProxy inArgument0,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_attributeIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_attributeIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' attribute is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_attributeIndexMap_searchKey = "the '%K' attribute is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::method_searchKey (GALGAS_lstring inKey,
                                                 GALGAS_unifiedTypeMapProxy & outArgument0,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) performSearch (inKey,
                                                                                                     inCompiler,
                                                                                                     kSearchErrorMessage_attributeIndexMap_searchKey
                                                                                                     COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    outArgument0 = p->mAttribute_mAttributeTypeIndex ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_attributeIndexMap::reader_mAttributeTypeIndexForKey (const GALGAS_string & inKey,
                                                                                       C_Compiler * inCompiler
                                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) attributes ;
  GALGAS_unifiedTypeMapProxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    result = p->mAttribute_mAttributeTypeIndex ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap::modifier_setMAttributeTypeIndexForKey (GALGAS_unifiedTypeMapProxy inAttributeValue,
                                                                      GALGAS_string inKey,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_attributeIndexMap * p = (cMapElement_attributeIndexMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
    p->mAttribute_mAttributeTypeIndex = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_attributeIndexMap * GALGAS_attributeIndexMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                    const GALGAS_string & inKey
                                                                                                    COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_attributeIndexMap * result = (cMapElement_attributeIndexMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_attributeIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_attributeIndexMap * GALGAS_attributeIndexMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                       const GALGAS_lstring & inKey
                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_attributeIndexMap_searchKey COMMA_THERE) ;
  cMapElement_attributeIndexMap * result = (cMapElement_attributeIndexMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_attributeIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_attributeIndexMap::cEnumerator_attributeIndexMap (const GALGAS_attributeIndexMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element cEnumerator_attributeIndexMap::current (LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
  return GALGAS_attributeIndexMap_2E_element (p->mAttribute_lkey, p->mAttribute_mAttributeTypeIndex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_attributeIndexMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy cEnumerator_attributeIndexMap::current_mAttributeTypeIndex (LOCATION_ARGS) const {
  const cMapElement_attributeIndexMap * p = (const cMapElement_attributeIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_attributeIndexMap) ;
  return p->mAttribute_mAttributeTypeIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @attributeIndexMap type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeIndexMap ("attributeIndexMap",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeIndexMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeIndexMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeIndexMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeIndexMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap GALGAS_attributeIndexMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap result ;
  const GALGAS_attributeIndexMap * p = (const GALGAS_attributeIndexMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeIndexMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeIndexMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                   Once function 'forbiddenKeysForStruct'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

static GALGAS_stringset onceFunction_forbiddenKeysForStruct (C_Compiler * /* inCompiler */
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset result_outResult ; // Returned variable
  result_outResult = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 232)) ;
  result_outResult.addAssign_operation (GALGAS_string ("description")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 233)) ;
  result_outResult.addAssign_operation (GALGAS_string ("object")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 234)) ;
//---
  return result_outResult ;
}



//-----------------------------------------------------------------------------*
//  Function implementation                                                    *
//-----------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_forbiddenKeysForStruct = false ;
static GALGAS_stringset gOnceFunctionResult_forbiddenKeysForStruct ;

//-----------------------------------------------------------------------------*

GALGAS_stringset function_forbiddenKeysForStruct (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_forbiddenKeysForStruct) {
    gOnceFunctionResult_forbiddenKeysForStruct = onceFunction_forbiddenKeysForStruct (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_forbiddenKeysForStruct = true ;
  }
  return gOnceFunctionResult_forbiddenKeysForStruct ;
}

//-----------------------------------------------------------------------------*

static void releaseOnceFunctionResult_forbiddenKeysForStruct (void) {
  gOnceFunctionResult_forbiddenKeysForStruct.drop () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_forbiddenKeysForStruct (NULL,
                                                                    releaseOnceFunctionResult_forbiddenKeysForStruct) ;

//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_forbiddenKeysForStruct [1] = {
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_forbiddenKeysForStruct (C_Compiler * inCompiler,
                                                                       const cObjectArray & /* inEffectiveParameterArray */,
                                                                       const GALGAS_location & /* inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  return function_forbiddenKeysForStruct (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_forbiddenKeysForStruct ("forbiddenKeysForStruct",
                                                                        functionWithGenericHeader_forbiddenKeysForStruct,
                                                                        & kTypeDescriptor_GALGAS_stringset,
                                                                        0,
                                                                        functionArgs_forbiddenKeysForStruct) ;

//-----------------------------------------------------------------------------*

cMapElement_constantIndexMap::cMapElement_constantIndexMap (const GALGAS_lstring & inKey,
                                                            const GALGAS_uint & in_mIndex
                                                            COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mIndex (in_mIndex) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_constantIndexMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_constantIndexMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_constantIndexMap (mAttribute_lkey, mAttribute_mIndex COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_constantIndexMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mIndex" ":" ;
  mAttribute_mIndex.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_constantIndexMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_constantIndexMap * operand = (cMapElement_constantIndexMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mIndex.objectCompare (operand->mAttribute_mIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap::GALGAS_constantIndexMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap::GALGAS_constantIndexMap (const GALGAS_constantIndexMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap & GALGAS_constantIndexMap::operator = (const GALGAS_constantIndexMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::constructor_mapWithMapToOverride (const GALGAS_constantIndexMap & inMapToOverride
                                                                                   COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  GALGAS_constantIndexMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::modifier_insertKey (GALGAS_lstring inKey,
                                                  GALGAS_uint inArgument0,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  cMapElement_constantIndexMap * p = NULL ;
  macroMyNew (p, cMapElement_constantIndexMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' constant is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_constantIndexMap_searchKey = "the '%K' constant is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::method_searchKey (GALGAS_lstring inKey,
                                                GALGAS_uint & outArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) performSearch (inKey,
                                                                                                   inCompiler,
                                                                                                   kSearchErrorMessage_constantIndexMap_searchKey
                                                                                                   COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    outArgument0 = p->mAttribute_mIndex ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_constantIndexMap::reader_mIndexForKey (const GALGAS_string & inKey,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) attributes ;
  GALGAS_uint result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    result = p->mAttribute_mIndex ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap::modifier_setMIndexForKey (GALGAS_uint inAttributeValue,
                                                        GALGAS_string inKey,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constantIndexMap * p = (cMapElement_constantIndexMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_constantIndexMap) ;
    p->mAttribute_mIndex = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_constantIndexMap * GALGAS_constantIndexMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                  const GALGAS_string & inKey
                                                                                                  COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_constantIndexMap * result = (cMapElement_constantIndexMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_constantIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_constantIndexMap * GALGAS_constantIndexMap::readWriteAccessForWithInstruction_searchKey (C_Compiler * inCompiler,
                                                                                                     const GALGAS_lstring & inKey
                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_constantIndexMap_searchKey COMMA_THERE) ;
  cMapElement_constantIndexMap * result = (cMapElement_constantIndexMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_constantIndexMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_constantIndexMap::cEnumerator_constantIndexMap (const GALGAS_constantIndexMap & inEnumeratedObject,
                                                            const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element cEnumerator_constantIndexMap::current (LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constantIndexMap) ;
  return GALGAS_constantIndexMap_2E_element (p->mAttribute_lkey, p->mAttribute_mIndex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_constantIndexMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint cEnumerator_constantIndexMap::current_mIndex (LOCATION_ARGS) const {
  const cMapElement_constantIndexMap * p = (const cMapElement_constantIndexMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_constantIndexMap) ;
  return p->mAttribute_mIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @constantIndexMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantIndexMap ("constantIndexMap",
                                         NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantIndexMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantIndexMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantIndexMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantIndexMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap GALGAS_constantIndexMap::extractObject (const GALGAS_object & inObject,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap result ;
  const GALGAS_constantIndexMap * p = (const GALGAS_constantIndexMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantIndexMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantIndexMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_insertMethodMap::cMapElement_insertMethodMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_insertMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_insertMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_insertMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_insertMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_insertMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_insertMethodMap * operand = (cMapElement_insertMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap::GALGAS_insertMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap::GALGAS_insertMethodMap (const GALGAS_insertMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap & GALGAS_insertMethodMap::operator = (const GALGAS_insertMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::constructor_mapWithMapToOverride (const GALGAS_insertMethodMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_insertMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_insertMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_insertMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' insert modifier is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_insertMethodMap * GALGAS_insertMethodMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                const GALGAS_string & inKey
                                                                                                COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_insertMethodMap * result = (cMapElement_insertMethodMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_insertMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_insertMethodMap::cEnumerator_insertMethodMap (const GALGAS_insertMethodMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element cEnumerator_insertMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_insertMethodMap * p = (const cMapElement_insertMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_insertMethodMap) ;
  return GALGAS_insertMethodMap_2E_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_insertMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @insertMethodMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_insertMethodMap ("insertMethodMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_insertMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_insertMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_insertMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_insertMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap GALGAS_insertMethodMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap result ;
  const GALGAS_insertMethodMap * p = (const GALGAS_insertMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_insertMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("insertMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_searchMethodMap::cMapElement_searchMethodMap (const GALGAS_lstring & inKey
                                                          COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_searchMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_searchMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_searchMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_searchMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_searchMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_searchMethodMap * operand = (cMapElement_searchMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap::GALGAS_searchMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap::GALGAS_searchMethodMap (const GALGAS_searchMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap & GALGAS_searchMethodMap::operator = (const GALGAS_searchMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::constructor_mapWithMapToOverride (const GALGAS_searchMethodMap & inMapToOverride
                                                                                 COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) const {
  GALGAS_searchMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                 C_Compiler * inCompiler
                                                 COMMA_LOCATION_ARGS) {
  cMapElement_searchMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_searchMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' search method is already declared" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_searchMethodMap * GALGAS_searchMethodMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                const GALGAS_string & inKey
                                                                                                COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_searchMethodMap * result = (cMapElement_searchMethodMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_searchMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_searchMethodMap::cEnumerator_searchMethodMap (const GALGAS_searchMethodMap & inEnumeratedObject,
                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element cEnumerator_searchMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_searchMethodMap * p = (const cMapElement_searchMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_searchMethodMap) ;
  return GALGAS_searchMethodMap_2E_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_searchMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @searchMethodMap type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_searchMethodMap ("searchMethodMap",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_searchMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_searchMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_searchMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_searchMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap GALGAS_searchMethodMap::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap result ;
  const GALGAS_searchMethodMap * p = (const GALGAS_searchMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_searchMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("searchMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                     Routine 'check_K_escapeCharacters'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_check_5F_K_5F_escapeCharacters (GALGAS_lstring inArgument_inString,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_stringlist enumerator_18228 (inArgument_inString.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 448)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 448)), kEnumeration_up) ;
  while (enumerator_18228.hasCurrentObject ()) {
    GALGAS_stringlist var_explodedArray = enumerator_18228.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 449)) ;
    {
    GALGAS_string joker_18340_0 ; // Joker input parameter
    var_explodedArray.modifier_popFirst (joker_18340_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 450)) ;
    }
    cEnumerator_stringlist enumerator_18370 (var_explodedArray, kEnumeration_up) ;
    while (enumerator_18370.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, enumerator_18370.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 452)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_char var_c = enumerator_18370.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 453)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (inArgument_inString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("only '%K' and '%%' escape sequences are allowed in this error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 455)) ;
        }
      }
      enumerator_18370.gotoNextObject () ;
    }
    enumerator_18228.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                    Routine 'check_K_L_escapeCharacters'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_check_5F_K_5F_L_5F_escapeCharacters (GALGAS_lstring inArgument_inString,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_stringlist enumerator_18917 (inArgument_inString.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 468)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 468)), kEnumeration_up) ;
  while (enumerator_18917.hasCurrentObject ()) {
    GALGAS_stringlist var_explodedArray = enumerator_18917.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 469)) ;
    {
    GALGAS_string joker_19029_0 ; // Joker input parameter
    var_explodedArray.modifier_popFirst (joker_19029_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 470)) ;
    }
    cEnumerator_stringlist enumerator_19059 (var_explodedArray, kEnumeration_up) ;
    while (enumerator_19059.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, enumerator_19059.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 472)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_char var_c = enumerator_19059.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 473)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 474)).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (inArgument_inString.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in this error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 475)) ;
        }
      }
      enumerator_19059.gotoNextObject () ;
    }
    enumerator_18917.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                     Once function 'forbiddenKeysForMap'                     *
//                                                                             *
//-----------------------------------------------------------------------------*

static GALGAS_stringset onceFunction_forbiddenKeysForMap (C_Compiler * /* inCompiler */
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset result_outResult ; // Returned variable
  result_outResult = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 485)) ;
  result_outResult.addAssign_operation (GALGAS_string ("lkey")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 486)) ;
  result_outResult.addAssign_operation (GALGAS_string ("description")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 487)) ;
  result_outResult.addAssign_operation (GALGAS_string ("object")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 488)) ;
//---
  return result_outResult ;
}



//-----------------------------------------------------------------------------*
//  Function implementation                                                    *
//-----------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_forbiddenKeysForMap = false ;
static GALGAS_stringset gOnceFunctionResult_forbiddenKeysForMap ;

//-----------------------------------------------------------------------------*

GALGAS_stringset function_forbiddenKeysForMap (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_forbiddenKeysForMap) {
    gOnceFunctionResult_forbiddenKeysForMap = onceFunction_forbiddenKeysForMap (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_forbiddenKeysForMap = true ;
  }
  return gOnceFunctionResult_forbiddenKeysForMap ;
}

//-----------------------------------------------------------------------------*

static void releaseOnceFunctionResult_forbiddenKeysForMap (void) {
  gOnceFunctionResult_forbiddenKeysForMap.drop () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_forbiddenKeysForMap (NULL,
                                                                 releaseOnceFunctionResult_forbiddenKeysForMap) ;

//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_forbiddenKeysForMap [1] = {
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_forbiddenKeysForMap (C_Compiler * inCompiler,
                                                                    const cObjectArray & /* inEffectiveParameterArray */,
                                                                    const GALGAS_location & /* inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  return function_forbiddenKeysForMap (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_forbiddenKeysForMap ("forbiddenKeysForMap",
                                                                     functionWithGenericHeader_forbiddenKeysForMap,
                                                                     & kTypeDescriptor_GALGAS_stringset,
                                                                     0,
                                                                     functionArgs_forbiddenKeysForMap) ;

//-----------------------------------------------------------------------------*

cMapElement_declaredMethodMap::cMapElement_declaredMethodMap (const GALGAS_lstring & inKey
                                                              COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_declaredMethodMap::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_declaredMethodMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_declaredMethodMap (mAttribute_lkey COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_declaredMethodMap::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_declaredMethodMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_declaredMethodMap * operand = (cMapElement_declaredMethodMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap::GALGAS_declaredMethodMap (void) :
AC_GALGAS_map () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap::GALGAS_declaredMethodMap (const GALGAS_declaredMethodMap & inSource) :
AC_GALGAS_map (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap & GALGAS_declaredMethodMap::operator = (const GALGAS_declaredMethodMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::constructor_mapWithMapToOverride (const GALGAS_declaredMethodMap & inMapToOverride
                                                                                     COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  GALGAS_declaredMethodMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}
//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap::modifier_insertKey (GALGAS_lstring inKey,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
  cMapElement_declaredMethodMap * p = NULL ;
  macroMyNew (p, cMapElement_declaredMethodMap (inKey COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' method is already declared in %L for this class" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

cMapElement_declaredMethodMap * GALGAS_declaredMethodMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                    const GALGAS_string & inKey
                                                                                                    COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_declaredMethodMap * result = (cMapElement_declaredMethodMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_declaredMethodMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_declaredMethodMap::cEnumerator_declaredMethodMap (const GALGAS_declaredMethodMap & inEnumeratedObject,
                                                              const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element cEnumerator_declaredMethodMap::current (LOCATION_ARGS) const {
  const cMapElement_declaredMethodMap * p = (const cMapElement_declaredMethodMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_declaredMethodMap) ;
  return GALGAS_declaredMethodMap_2E_element (p->mAttribute_lkey) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_declaredMethodMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                           @declaredMethodMap type                           *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredMethodMap ("declaredMethodMap",
                                          NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredMethodMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredMethodMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredMethodMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredMethodMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap GALGAS_declaredMethodMap::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap result ;
  const GALGAS_declaredMethodMap * p = (const GALGAS_declaredMethodMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredMethodMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredMethodMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                 Routine 'buildLocalVariableMapAndSignature'                 *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                const GALGAS_formalParameterListAST constinArgument_inRoutineSignatureAST,
                                                GALGAS_variableMap & ioArgument_ioVariableMap,
                                                GALGAS_formalParameterListForGeneration & outArgument_outRoutineSignature,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outRoutineSignature.drop () ; // Release 'out' argument
  outArgument_outRoutineSignature = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 977)) ;
  cEnumerator_formalParameterListAST enumerator_39217 (constinArgument_inRoutineSignatureAST, kEnumeration_up) ;
  while (enumerator_39217.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_39217.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 979)) ;
    GALGAS_string var_formalArgumentCppName ;
    if (enumerator_39217.current_mFormalArgumentPassingMode (HERE).isValid ()) {
      switch (enumerator_39217.current_mFormalArgumentPassingMode (HERE).enumValue ()) {
      case GALGAS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentIn: {
        var_formalArgumentCppName = GALGAS_string ("inArgument_").operator_concat (enumerator_39217.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 983)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 983))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 983)) ;
        const enumGalgasBool test_0 = enumerator_39217.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_0) {
          {
          ioArgument_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 985)) ;
          }
        }else if (kBoolFalse == test_0) {
          {
          ioArgument_ioVariableMap.modifier_insertInputFormalArgument (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 987)) ;
          }
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentOut: {
        var_formalArgumentCppName = GALGAS_string ("outArgument_").operator_concat (enumerator_39217.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 990)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 990))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 990)) ;
        {
        ioArgument_ioVariableMap.modifier_insertOutputFormalArgument (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 991)) ;
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentInOut: {
        var_formalArgumentCppName = GALGAS_string ("ioArgument_").operator_concat (enumerator_39217.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 993)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 993))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 993)) ;
        const enumGalgasBool test_1 = enumerator_39217.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_1) {
          {
          ioArgument_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 995)) ;
          }
        }else if (kBoolFalse == test_1) {
          {
          ioArgument_ioVariableMap.modifier_insertInputOutputFormalArgument (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 997)) ;
          }
        }
        } break ;
      case GALGAS_formalArgumentPassingModeAST::kEnum_argumentConstantIn: {
        var_formalArgumentCppName = GALGAS_string ("constinArgument_").operator_concat (enumerator_39217.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1000)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1000))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1000)) ;
        const enumGalgasBool test_2 = enumerator_39217.current_mIsUnused (HERE).boolEnum () ;
        if (kBoolTrue == test_2) {
          {
          ioArgument_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1002)) ;
          }
        }else if (kBoolFalse == test_2) {
          {
          ioArgument_ioVariableMap.modifier_insertConstantInputFormalArgument (enumerator_39217.current_mFormalArgumentName (HERE), var_type, var_formalArgumentCppName, var_formalArgumentCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1004)) ;
          }
        }
        } break ;
      }
    }
    outArgument_outRoutineSignature.addAssign_operation (enumerator_39217.current_mFormalArgumentPassingMode (HERE), var_type, enumerator_39217.current_mFormalArgumentName (HERE), var_formalArgumentCppName  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1007)) ;
    enumerator_39217.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'analyzeRoutineBody'                         *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_analyzeRoutineBody (const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                 const GALGAS_formalParameterListAST constinArgument_inRoutineSignatureAST,
                                 const GALGAS_localConstantList constinArgument_inLocalConstantList,
                                 const GALGAS_typedAttributeList constinArgument_inNonMutableTypedAttributeList,
                                 const GALGAS_typedAttributeList constinArgument_inMutableTypedAttributeList,
                                 const GALGAS_string constinArgument_inAttributeVariableNamePrefix,
                                 const GALGAS_semanticInstructionListAST constinArgument_inInstructionList,
                                 const GALGAS_location constinArgument_inEndOfMethodLocation,
                                 GALGAS_semanticInstructionListForGeneration & outArgument_outSemanticInstructionListForGeneration,
                                 GALGAS_formalParameterListForGeneration & outArgument_outRoutineSignature,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticInstructionListForGeneration.drop () ; // Release 'out' argument
  outArgument_outRoutineSignature.drop () ; // Release 'out' argument
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1025)) ;
  cEnumerator_localConstantList enumerator_41908 (constinArgument_inLocalConstantList, kEnumeration_up) ;
  while (enumerator_41908.hasCurrentObject ()) {
    const enumGalgasBool test_0 = enumerator_41908.current_mNoWarningIfUnused (HERE).boolEnum () ;
    if (kBoolTrue == test_0) {
      {
      var_variableMap.modifier_insertUsedLocalConstant (enumerator_41908.current_mName (HERE), enumerator_41908.current_mType (HERE), enumerator_41908.current_mCppName (HERE), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1029)) ;
      }
    }else if (kBoolFalse == test_0) {
      {
      var_variableMap.modifier_insertLocalConstant (enumerator_41908.current_mName (HERE), enumerator_41908.current_mType (HERE), enumerator_41908.current_mCppName (HERE), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1031)) ;
      }
    }
    enumerator_41908.gotoNextObject () ;
  }
  cEnumerator_typedAttributeList enumerator_42282 (constinArgument_inNonMutableTypedAttributeList, kEnumeration_up) ;
  while (enumerator_42282.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertNonMutableAttribute (enumerator_42282.current_mAttributeName (HERE), enumerator_42282.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1039)).operator_concat (enumerator_42282.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1039)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1039))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1039)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1036)) ;
    }
    enumerator_42282.gotoNextObject () ;
  }
  cEnumerator_typedAttributeList enumerator_42630 (constinArgument_inMutableTypedAttributeList, kEnumeration_up) ;
  while (enumerator_42630.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertMutableAttribute (enumerator_42630.current_mAttributeName (HERE), enumerator_42630.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1048)).operator_concat (enumerator_42630.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1048)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1048))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1048)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1045)) ;
    }
    enumerator_42630.gotoNextObject () ;
  }
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inAnalysisContext.mAttribute_mSemanticContext, constinArgument_inRoutineSignatureAST, var_variableMap, outArgument_outRoutineSignature, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1053)) ;
  }
  outArgument_outSemanticInstructionListForGeneration = GALGAS_semanticInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1060)) ;
  cEnumerator_semanticInstructionListAST enumerator_43233 (constinArgument_inInstructionList, kEnumeration_up) ;
  while (enumerator_43233.hasCurrentObject ()) {
    callCategoryMethod_analyzeSemanticInstruction ((const cPtr_semanticInstructionAST *) enumerator_43233.current_mInstruction (HERE).ptr (), constinArgument_inAnalysisContext, outArgument_outSemanticInstructionListForGeneration, var_variableMap, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1062)) ;
    enumerator_43233.gotoNextObject () ;
  }
  var_variableMap.method_checkAutomatonStates (constinArgument_inEndOfMethodLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1069)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'analyzeFunctionBody'                        *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_analyzeFunctionBody (const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                  const GALGAS_formalInputParameterListAST constinArgument_inFunctionSignature,
                                  const GALGAS_typedAttributeList constinArgument_inTypedAttributeList,
                                  const GALGAS_string constinArgument_inAttributeVariableNamePrefix,
                                  const GALGAS_semanticInstructionListAST constinArgument_inInstructionList,
                                  const GALGAS_lstring constinArgument_inReturnVariableName,
                                  const GALGAS_lstring constinArgument_inResultTypeName,
                                  const GALGAS_location constinArgument_inEndOfFunctionLocation,
                                  GALGAS_formalInputParameterListForGeneration & outArgument_outSignatureForGeneration,
                                  GALGAS_unifiedTypeMapProxy & outArgument_outReturnedType,
                                  GALGAS_string & outArgument_outResultVariableCppName,
                                  GALGAS_semanticInstructionListForGeneration & outArgument_outSemanticInstructionListForGeneration,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSignatureForGeneration.drop () ; // Release 'out' argument
  outArgument_outReturnedType.drop () ; // Release 'out' argument
  outArgument_outResultVariableCppName.drop () ; // Release 'out' argument
  outArgument_outSemanticInstructionListForGeneration.drop () ; // Release 'out' argument
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1287)) ;
  cEnumerator_typedAttributeList enumerator_50975 (constinArgument_inTypedAttributeList, kEnumeration_up) ;
  while (enumerator_50975.hasCurrentObject ()) {
    {
    var_variableMap.modifier_insertNonMutableAttribute (enumerator_50975.current_mAttributeName (HERE), enumerator_50975.current_mAttributeTypeProxy (HERE), constinArgument_inAttributeVariableNamePrefix.operator_concat (GALGAS_string ("mAttribute_")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1293)).operator_concat (enumerator_50975.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1293)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1293))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1293)), constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1290)) ;
    }
    enumerator_50975.gotoNextObject () ;
  }
  outArgument_outSignatureForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1298)) ;
  cEnumerator_formalInputParameterListAST enumerator_51389 (constinArgument_inFunctionSignature, kEnumeration_up) ;
  while (enumerator_51389.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_parameterType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, enumerator_51389.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1300)) ;
    const enumGalgasBool test_0 = enumerator_51389.current_mIsConstant (HERE).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_cppName = GALGAS_string ("constinArgument_").operator_concat (enumerator_51389.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1302)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1302))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1302)) ;
      outArgument_outSignatureForGeneration.addAssign_operation (var_parameterType, var_cppName, enumerator_51389.current_mFormalArgumentName (HERE), enumerator_51389.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1303)) ;
      const enumGalgasBool test_1 = enumerator_51389.current_mIsUnused (HERE).boolEnum () ;
      if (kBoolTrue == test_1) {
        {
        var_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (enumerator_51389.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1310)) ;
        }
      }else if (kBoolFalse == test_1) {
        {
        var_variableMap.modifier_insertConstantInputFormalArgument (enumerator_51389.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1312)) ;
        }
      }
    }else if (kBoolFalse == test_0) {
      GALGAS_string var_cppName = GALGAS_string ("inArgument_").operator_concat (enumerator_51389.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1315)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1315))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1315)) ;
      outArgument_outSignatureForGeneration.addAssign_operation (var_parameterType, var_cppName, enumerator_51389.current_mFormalArgumentName (HERE), enumerator_51389.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1316)) ;
      const enumGalgasBool test_2 = enumerator_51389.current_mIsUnused (HERE).boolEnum () ;
      if (kBoolTrue == test_2) {
        {
        var_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (enumerator_51389.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1323)) ;
        }
      }else if (kBoolFalse == test_2) {
        {
        var_variableMap.modifier_insertInputFormalArgument (enumerator_51389.current_mFormalArgumentName (HERE), var_parameterType, var_cppName, var_cppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1325)) ;
        }
      }
    }
    enumerator_51389.gotoNextObject () ;
  }
  outArgument_outReturnedType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, constinArgument_inResultTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1330)) ;
  outArgument_outResultVariableCppName = GALGAS_string ("result_").operator_concat (constinArgument_inReturnVariableName.mAttribute_string.reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1331))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1331)) ;
  {
  var_variableMap.modifier_insertOutputFormalArgument (constinArgument_inReturnVariableName, outArgument_outReturnedType, outArgument_outResultVariableCppName, outArgument_outResultVariableCppName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1332)) ;
  }
  outArgument_outSemanticInstructionListForGeneration = GALGAS_semanticInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1334)) ;
  cEnumerator_semanticInstructionListAST enumerator_53175 (constinArgument_inInstructionList, kEnumeration_up) ;
  while (enumerator_53175.hasCurrentObject ()) {
    callCategoryMethod_analyzeSemanticInstruction ((const cPtr_semanticInstructionAST *) enumerator_53175.current_mInstruction (HERE).ptr (), constinArgument_inAnalysisContext, outArgument_outSemanticInstructionListForGeneration, var_variableMap, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1336)) ;
    enumerator_53175.gotoNextObject () ;
  }
  var_variableMap.method_checkAutomatonStates (constinArgument_inEndOfFunctionLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1343)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                       Function 'buildPredefinedTypes'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes function_buildPredefinedTypes (const GALGAS_semanticContext & constinArgument_inSemanticContext,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_predefinedTypes result_outPredefinedTypes ; // Returned variable
  result_outPredefinedTypes = GALGAS_predefinedTypes::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("location"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2285)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2285)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("bool"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2286)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2286)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("char"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2287)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2287)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("string"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2288)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2288)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("uint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2289)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2289)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("sint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2290)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2290)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("uint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2291)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2291)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("sint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2292)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2292)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("double"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2293)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2293)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lbool"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2294)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2294)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lchar"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2295)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2295)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lstring"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2296)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2296)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("luint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2297)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2297)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lsint"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2298)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2298)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("luint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2299)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2299)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("lsint64"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2300)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2300)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("ldouble"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2301)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2301))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2284)) ;
//---
  return result_outPredefinedTypes ;
}


//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_buildPredefinedTypes [2] = {
  & kTypeDescriptor_GALGAS_semanticContext,
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_buildPredefinedTypes (C_Compiler * inCompiler,
                                                                     const cObjectArray & inEffectiveParameterArray,
                                                                     const GALGAS_location & /* §§ inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  const GALGAS_semanticContext operand0 = GALGAS_semanticContext::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  return function_buildPredefinedTypes (operand0,
                                        inCompiler
                                        COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_buildPredefinedTypes ("buildPredefinedTypes",
                                                                      functionWithGenericHeader_buildPredefinedTypes,
                                                                      & kTypeDescriptor_GALGAS_predefinedTypes,
                                                                      1,
                                                                      functionArgs_buildPredefinedTypes) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Routine 'performSemanticAnalysis'                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_performSemanticAnalysis (const GALGAS_semanticDeclarationListAST constinArgument_inDeclarationList,
                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                      GALGAS_semanticDeclarationSortedListForGeneration & outArgument_outDecoratedDeclarationListForGeneration,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outDecoratedDeclarationListForGeneration.drop () ; // Release 'out' argument
  cEnumerator_lstringlist enumerator_92321 (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_unsolvedProxyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2317)), kEnumeration_up) ;
  while (enumerator_92321.hasCurrentObject ()) {
    GALGAS_location location_0 (enumerator_92321.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_0, GALGAS_string ("the '").operator_concat (enumerator_92321.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2318))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2318)).operator_concat (GALGAS_string ("' type is undefined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2318))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2318)) ;
    enumerator_92321.gotoNextObject () ;
  }
  GALGAS_semanticDeclarationListAST var_semanticDeclarationList = constinArgument_inDeclarationList ;
  cEnumerator_semanticDeclarationListAST enumerator_92575 (constinArgument_inDeclarationList, kEnumeration_up) ;
  while (enumerator_92575.hasCurrentObject ()) {
    callCategoryMethod_addAssociatedElement ((const cPtr_semanticDeclarationAST *) enumerator_92575.current_mSemanticDeclaration (HERE).ptr (), var_semanticDeclarationList, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2323)) ;
    enumerator_92575.gotoNextObject () ;
  }
  outArgument_outDecoratedDeclarationListForGeneration = GALGAS_semanticDeclarationSortedListForGeneration::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2326)) ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("semanticAnalysis.gSemantics", 2327)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_predefinedTypes var_predefinedTypes = function_buildPredefinedTypes (constinArgument_inSemanticContext, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2328)) ;
    cEnumerator_semanticDeclarationListAST enumerator_92945 (var_semanticDeclarationList, kEnumeration_up) ;
    while (enumerator_92945.hasCurrentObject ()) {
      callCategoryMethod_semanticAnalysis ((const cPtr_semanticDeclarationAST *) enumerator_92945.current_mSemanticDeclaration (HERE).ptr (), constinArgument_inSemanticContext, var_predefinedTypes, outArgument_outDecoratedDeclarationListForGeneration, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2330)) ;
      enumerator_92945.gotoNextObject () ;
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//     Abstract category method '@semanticDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_semanticDeclarationAST_semanticAnalysis> gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_semanticAnalysis (const int32_t inClassIndex,
                                           categoryMethodSignature_semanticDeclarationAST_semanticAnalysis inMethod) {
  gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_semanticDeclarationAST_semanticAnalysis (void) {
  gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_semanticDeclarationAST_semanticAnalysis (NULL,
                                                                    freeCategoryMethod_semanticDeclarationAST_semanticAnalysis) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                          const GALGAS_semanticContext constin_inSemanticContext,
                                          const GALGAS_predefinedTypes constin_inPredefinedTypes,
                                          GALGAS_semanticDeclarationSortedListForGeneration & io_ioSemanticDeclarationListForGeneration,
                                          C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_semanticDeclarationAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_semanticDeclarationAST_semanticAnalysis f = NULL ;
    if (classIndex < gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.count ()) {
      f = gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.count ()) {
           f = gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_semanticDeclarationAST_semanticAnalysis.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inSemanticContext, constin_inPredefinedTypes, io_ioSemanticDeclarationListForGeneration, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@predefinedTypeAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_predefinedTypeAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_predefinedTypeAST * object = (const cPtr_predefinedTypeAST *) inObject ;
  macroValidSharedObject (object, cPtr_predefinedTypeAST) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_primitiveTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mPredefinedTypeName, inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 119)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 119)), object->mAttribute_mPredefinedTypeName, object->mAttribute_mKind  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 118)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 116)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_predefinedTypeAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_predefinedTypeAST.mSlotID,
                                        categoryMethod_predefinedTypeAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_predefinedTypeAST_semanticAnalysis (defineCategoryMethod_predefinedTypeAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@listDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_listDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                C_Compiler * inCompiler
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_listDeclarationAST * object = (const cPtr_listDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_listDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 143)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 144)) ;
  cEnumerator_attributeInCollectionListAST enumerator_7240 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_7240.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_7240.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 146)) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    cEnumerator_lstringlist enumerator_7421 (enumerator_7240.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_7421.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, enumerator_7421.current_mValue (HERE).mAttribute_string.objectCompare (GALGAS_string ("nogetter"))).boolEnum () ;
      if (kBoolTrue == test_0) {
        const enumGalgasBool test_1 = var_hasGetter.operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 151)).boolEnum () ;
        if (kBoolTrue == test_1) {
          GALGAS_location location_2 (enumerator_7421.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_2, GALGAS_string ("duplicate feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 152)) ;
        }
        var_hasGetter = GALGAS_bool (false) ;
      }else if (kBoolFalse == test_0) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_7421.current_mValue (HERE).mAttribute_string.objectCompare (GALGAS_string ("setter"))).boolEnum () ;
        if (kBoolTrue == test_3) {
          const enumGalgasBool test_4 = var_hasSetter.boolEnum () ;
          if (kBoolTrue == test_4) {
            GALGAS_location location_5 (enumerator_7421.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_5, GALGAS_string ("duplicate feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 157)) ;
          }
          var_hasSetter = GALGAS_bool (true) ;
        }else if (kBoolFalse == test_3) {
          GALGAS_location location_6 (enumerator_7421.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_6, GALGAS_string ("unknown feature; the features available here are: 'nogetter', 'setter'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 161)) ;
        }
      }
      enumerator_7421.gotoNextObject () ;
    }
    var_typedAttributeList.addAssign_operation (var_t, enumerator_7240.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 164)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_7240.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 170)) ;
    }
    enumerator_7240.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_listTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 175)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 176))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 176)), object->mAttribute_mListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 176)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 176)), var_typedAttributeList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 174)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 173)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_listDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_listDeclarationAST.mSlotID,
                                        categoryMethod_listDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_listDeclarationAST_semanticAnalysis (defineCategoryMethod_listDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@sortedListDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_sortedListDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                      const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                      GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_sortedListDeclarationAST * object = (const cPtr_sortedListDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_sortedListDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 191)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 192)) ;
  cEnumerator_attributeInCollectionListAST enumerator_8889 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_8889.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_8889.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 194)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_8889.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 197)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_8889.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 203)) ;
    }
    enumerator_8889.gotoNextObject () ;
  }
  GALGAS_stringset var_attributesUsedForSorting = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 206)) ;
  GALGAS_sortDescriptorListForGeneration var_sortDescriptorList = GALGAS_sortDescriptorListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 207)) ;
  cEnumerator_sortedListSortDescriptorListAST enumerator_9386 (object->mAttribute_mSortDescriptorList, kEnumeration_up) ;
  while (enumerator_9386.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_type ;
    var_attributeMap.method_searchKey (enumerator_9386.current_mSortedAttributeName (HERE), var_type, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 209)) ;
    var_sortDescriptorList.addAssign_operation (var_type, enumerator_9386.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 210)), enumerator_9386.current_mAscending (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 210)) ;
    const enumGalgasBool test_0 = var_attributesUsedForSorting.reader_hasKey (enumerator_9386.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 211)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 211)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (enumerator_9386.current_mSortedAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_9386.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 212))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 212)).operator_concat (GALGAS_string ("' is already used for sorting")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 212))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 212)) ;
    }
    var_attributesUsedForSorting.addAssign_operation (enumerator_9386.current_mSortedAttributeName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 214))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 214)) ;
    enumerator_9386.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_sortedListTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mSortedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 219)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mSortedListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 220))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 220)), object->mAttribute_mSortedListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 220)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 220)), var_typedAttributeList, var_sortDescriptorList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 218)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 217)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_sortedListDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_sortedListDeclarationAST.mSlotID,
                                        categoryMethod_sortedListDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_sortedListDeclarationAST_semanticAnalysis (defineCategoryMethod_sortedListDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@structDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_structDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                  const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                  const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                  GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_structDeclarationAST * object = (const cPtr_structDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_structDeclarationAST) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mAttributeList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 244)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mStructTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("a structure cannot be empty: it must have at least one field")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 245)) ;
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 247)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 248)) ;
  cEnumerator_attributeInCollectionListAST enumerator_11090 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_11090.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_11090.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 250)) ;
    cEnumerator_lstringlist enumerator_11217 (enumerator_11090.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_11217.hasCurrentObject ()) {
      GALGAS_location location_2 (enumerator_11217.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("a struct attribute does not accept any feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 252)) ;
      enumerator_11217.gotoNextObject () ;
    }
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (false) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_11090.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 256)) ;
    const enumGalgasBool test_3 = function_forbiddenKeysForStruct (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 262)).reader_hasKey (enumerator_11090.current_mAttributeName (HERE).mAttribute_string COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 262)).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_string var_m = GALGAS_string ("an attribute cannot be named:") ;
      cEnumerator_stringset enumerator_11647 (function_forbiddenKeysForStruct (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 264)), kEnumeration_up) ;
      while (enumerator_11647.hasCurrentObject ()) {
        var_m.dotAssign_operation (GALGAS_string (" ").operator_concat (enumerator_11647.current (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 265))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 265)) ;
        enumerator_11647.gotoNextObject () ;
      }
      var_m.dotAssign_operation (GALGAS_string ("; theses names are reserved")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 267)) ;
      GALGAS_location location_4 (enumerator_11090.current_mAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, var_m  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 268)) ;
    }
    {
    var_attributeMap.modifier_insertKey (enumerator_11090.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 270)) ;
    }
    enumerator_11090.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_structTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mStructTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 274)), var_typedAttributeList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 273)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 272)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_structDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_structDeclarationAST.mSlotID,
                                        categoryMethod_structDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_structDeclarationAST_semanticAnalysis (defineCategoryMethod_structDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@graphDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_graphDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_graphDeclarationAST * object = (const cPtr_graphDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_graphDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_graphTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mGraphTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 288)) ;
  GALGAS_unifiedTypeMapProxy var_associatedListTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 289)) ;
  GALGAS_unifiedTypeMapProxy var_associatedListElementTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mAssociatedListTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 292))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 292)), object->mAttribute_mAssociatedListTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 292)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 290)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_associatedListTypeProxy.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 294)).objectCompare (GALGAS_typeKindEnum::constructor_listType (SOURCE_FILE ("semanticAnalysis.gSemantics", 294)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAssociatedListTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the '@").operator_concat (object->mAttribute_mAssociatedListTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 295))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 295)).operator_concat (GALGAS_string ("' type should be a list")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 295))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 295)) ;
  }
  GALGAS_stringset var_reservedModifierNames = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 298)) ;
  var_reservedModifierNames.addAssign_operation (GALGAS_string ("noteNode")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 299)) ;
  var_reservedModifierNames.addAssign_operation (GALGAS_string ("addArc")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 300)) ;
  cEnumerator_graphInsertModifierList enumerator_13208 (object->mAttribute_mInsertModifierList, kEnumeration_up) ;
  while (enumerator_13208.hasCurrentObject ()) {
    const enumGalgasBool test_2 = var_reservedModifierNames.reader_hasKey (enumerator_13208.current_mInsertModifierName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 302)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 302)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (enumerator_13208.current_mInsertModifierName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("the '").operator_concat (enumerator_13208.current_mInsertModifierName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 303))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 303)).operator_concat (GALGAS_string ("' modifier name is reserved for a graph type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 303))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 303)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_13208.current_mInsertErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 305)) ;
    }
    enumerator_13208.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_graphDeclarationForGeneration::constructor_new (var_graphTypeProxy, var_associatedListTypeProxy, var_associatedListElementTypeProxy, object->mAttribute_mInsertModifierList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 310)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 308)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_graphDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_graphDeclarationAST.mSlotID,
                                        categoryMethod_graphDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_graphDeclarationAST_semanticAnalysis (defineCategoryMethod_graphDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@externTypeDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externTypeDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                      const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                      const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                      GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externTypeDeclarationAST * object = (const cPtr_externTypeDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externTypeDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_externTypeProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mExternTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 327)) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_externTypeDeclarationForGeneration::constructor_new (var_externTypeProxy, object->mAttribute_mExternTypeName.mAttribute_string, object->mAttribute_mCppPreDeclarationCode, object->mAttribute_mCppClassCode  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 331)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 329)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externTypeDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externTypeDeclarationAST.mSlotID,
                                        categoryMethod_externTypeDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externTypeDeclarationAST_semanticAnalysis (defineCategoryMethod_externTypeDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@enumDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_enumDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                C_Compiler * inCompiler
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_enumDeclarationAST * object = (const cPtr_enumDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_enumDeclarationAST) ;
  GALGAS_stringlist var_constantList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 357)) ;
  GALGAS_constantIndexMap var_constantMap = GALGAS_constantIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 358)) ;
  cEnumerator_lstringlist enumerator_15120 (object->mAttribute_mConstantList, kEnumeration_up) ;
  while (enumerator_15120.hasCurrentObject ()) {
    var_constantList.addAssign_operation (enumerator_15120.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 360))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 360)) ;
    {
    var_constantMap.modifier_insertKey (enumerator_15120.current_mValue (HERE), var_constantMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 361)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 361)) ;
    }
    enumerator_15120.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_enumTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mEnumTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 367)), var_constantList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 366)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 364)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_enumDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_enumDeclarationAST.mSlotID,
                                        categoryMethod_enumDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_enumDeclarationAST_semanticAnalysis (defineCategoryMethod_enumDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@arrayDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_arrayDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_arrayDeclarationAST * object = (const cPtr_arrayDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_arrayDeclarationAST) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_arrayTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mArrayTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 385)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mElementTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 386)), object->mAttribute_mDimension.reader_uint (SOURCE_FILE ("semanticAnalysis.gSemantics", 387))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 384)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 382)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_arrayDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_arrayDeclarationAST.mSlotID,
                                        categoryMethod_arrayDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_arrayDeclarationAST_semanticAnalysis (defineCategoryMethod_arrayDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@listmapDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_listmapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                   const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                   GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_listmapDeclarationAST * object = (const cPtr_listmapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_listmapDeclarationAST) ;
  GALGAS_typeKindEnum var_typeKindEnum ;
  GALGAS_typedAttributeList var_listTypeAttributeList ;
  GALGAS_bool joker_16638_3 ; // Joker input parameter
  GALGAS_bool joker_16638_2 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_16638_1 ; // Joker input parameter
  GALGAS_attributeMap joker_16727_21 ; // Joker input parameter
  GALGAS_typedAttributeList joker_16727_20 ; // Joker input parameter
  GALGAS_constructorMap joker_16727_19 ; // Joker input parameter
  GALGAS_readerMap joker_16727_18 ; // Joker input parameter
  GALGAS_modifierMap joker_16727_17 ; // Joker input parameter
  GALGAS_instanceMethodMap joker_16727_16 ; // Joker input parameter
  GALGAS_classMethodMap joker_16727_15 ; // Joker input parameter
  GALGAS_enumerationDescriptorList joker_16727_14 ; // Joker input parameter
  GALGAS_stringlist joker_16727_13 ; // Joker input parameter
  GALGAS_uint joker_16727_12 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxyAndParameterList joker_16727_11 ; // Joker input parameter
  GALGAS_stringset joker_16727_10 ; // Joker input parameter
  GALGAS_lstringlist joker_16727_9 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_16727_8 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_16727_7 ; // Joker input parameter
  GALGAS_withAccessorMap joker_16727_6 ; // Joker input parameter
  GALGAS_bool joker_16727_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_16727_4 ; // Joker input parameter
  GALGAS_string joker_16727_3 ; // Joker input parameter
  GALGAS_string joker_16727_2 ; // Joker input parameter
  GALGAS_headerKind joker_16727_1 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mTypeMap.method_searchKey (object->mAttribute_mAssociatedListTypeName, joker_16638_3, joker_16638_2, joker_16638_1, var_typeKindEnum, var_listTypeAttributeList, joker_16727_21, joker_16727_20, joker_16727_19, joker_16727_18, joker_16727_17, joker_16727_16, joker_16727_15, joker_16727_14, joker_16727_13, joker_16727_12, joker_16727_11, joker_16727_10, joker_16727_9, joker_16727_8, joker_16727_7, joker_16727_6, joker_16727_5, joker_16727_4, joker_16727_3, joker_16727_2, joker_16727_1, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 403)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_typeKindEnum.objectCompare (GALGAS_typeKindEnum::constructor_listType (SOURCE_FILE ("semanticAnalysis.gSemantics", 411)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAssociatedListTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("associated type should be a list type")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 412)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_listmapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mListmapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 417)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedListTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 418)), var_listTypeAttributeList, GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mListmapTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 420))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 420)), object->mAttribute_mListmapTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 420)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 420))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 416)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 415)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_listmapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_listmapDeclarationAST.mSlotID,
                                        categoryMethod_listmapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_listmapDeclarationAST_semanticAnalysis (defineCategoryMethod_listmapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@mapDeclarationAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_mapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_mapDeclarationAST * object = (const cPtr_mapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_mapDeclarationAST) ;
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 499)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 500)) ;
  cEnumerator_attributeInCollectionListAST enumerator_20094 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_20094.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_20094.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 502)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_20094.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 505)) ;
    const enumGalgasBool test_0 = function_forbiddenKeysForMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 511)).reader_hasKey (enumerator_20094.current_mAttributeName (HERE).mAttribute_string COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 511)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_m = GALGAS_string ("an attribute cannot be named:") ;
      cEnumerator_stringset enumerator_20504 (function_forbiddenKeysForMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 513)), kEnumeration_up) ;
      while (enumerator_20504.hasCurrentObject ()) {
        var_m.dotAssign_operation (GALGAS_string (" ").operator_concat (enumerator_20504.current (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 514))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 514)) ;
        enumerator_20504.gotoNextObject () ;
      }
      var_m.dotAssign_operation (GALGAS_string ("; theses names are reserved")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 516)) ;
      GALGAS_location location_1 (enumerator_20094.current_mAttributeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, var_m  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 517)) ;
    }
    {
    var_attributeMap.modifier_insertKey (enumerator_20094.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 519)) ;
    }
    enumerator_20094.gotoNextObject () ;
  }
  GALGAS_insertMethodMap var_insertMethodMap = GALGAS_insertMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 522)) ;
  cEnumerator_insertMethodListAST enumerator_20805 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_20805.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_20805.current_mInsertMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 524)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_20805.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 525)) ;
    }
    {
    routine_check_5F_K_5F_L_5F_escapeCharacters (enumerator_20805.current_mShadowErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 526)) ;
    }
    enumerator_20805.gotoNextObject () ;
  }
  GALGAS_searchMethodMap var_searchMethodMap = GALGAS_searchMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 529)) ;
  cEnumerator_mapSearchMethodListAST enumerator_21083 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_21083.hasCurrentObject ()) {
    {
    var_searchMethodMap.modifier_insertKey (enumerator_21083.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 531)) ;
    }
    {
    routine_check_5F_K_5F_escapeCharacters (enumerator_21083.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 532)) ;
    }
    enumerator_21083.gotoNextObject () ;
  }
  cEnumerator_mapRemoveMethodListAST enumerator_21257 (object->mAttribute_mRemoveMethodList, kEnumeration_up) ;
  while (enumerator_21257.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_21257.current_mMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 536)) ;
    }
    {
    routine_check_5F_K_5F_escapeCharacters (enumerator_21257.current_mErrorMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 537)) ;
    }
    enumerator_21257.gotoNextObject () ;
  }
  cEnumerator_insertOrReplaceDeclarationListAST enumerator_21484 (object->mAttribute_mInsertOrReplaceDeclarationListAST, kEnumeration_up) ;
  GALGAS_uint index_21449 ((uint32_t) 0) ;
  while (enumerator_21484.hasCurrentObject ()) {
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, index_21449.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      inCompiler->emitSemanticWarning (enumerator_21484.current_mInsertOrReplaceDeclarationLocation (HERE), GALGAS_string ("the 'insertOrReplace' modifier is already declared")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 542)) ;
    }
    enumerator_21484.gotoNextObject () ;
    index_21449.increment_operation (inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 540)) ;
  }
  GALGAS_bool var_hasInsertOrReplaceModifier = GALGAS_bool (kIsStrictSup, object->mAttribute_mInsertOrReplaceDeclarationListAST.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 545)).objectCompare (GALGAS_uint ((uint32_t) 0U))) ;
  const enumGalgasBool test_3 = var_hasInsertOrReplaceModifier.operator_and (var_insertMethodMap.reader_hasKey (GALGAS_string ("insertOrReplace") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 546)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 546)).boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_location var_insertOrReplaceDeclarationLocation ;
    object->mAttribute_mInsertOrReplaceDeclarationListAST.method_first (var_insertOrReplaceDeclarationLocation, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 548)) ;
    inCompiler->emitSemanticError (var_insertOrReplaceDeclarationLocation, GALGAS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 549)) ;
  }
  GALGAS_withAccessorMap var_withAccessorMap = GALGAS_withAccessorMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 552)) ;
  {
  var_withAccessorMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("hasKey"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 553)), constinArgument_inPredefinedTypes.mAttribute_mStringType, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 553)) ;
  }
  cEnumerator_mapSearchMethodListAST enumerator_22353 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_22353.hasCurrentObject ()) {
    {
    var_withAccessorMap.modifier_insertKey (enumerator_22353.current_mSearchMethodName (HERE), constinArgument_inPredefinedTypes.mAttribute_mLStringType, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 555)) ;
    }
    enumerator_22353.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_mapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 563)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (object->mAttribute_mMapTypeName.mAttribute_string.operator_concat (function_elementTypeNameSuffix (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 564))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 564)), object->mAttribute_mMapTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 564)), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 564)), object->mAttribute_mMapTypeName, var_typedAttributeList, object->mAttribute_mInsertMethodList, object->mAttribute_mSearchMethodList, object->mAttribute_mRemoveMethodList, var_hasInsertOrReplaceModifier, var_withAccessorMap  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 562)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 561)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_mapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_mapDeclarationAST.mSlotID,
                                        categoryMethod_mapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_mapDeclarationAST_semanticAnalysis (defineCategoryMethod_mapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@uniqueMapDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_uniqueMapDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                     const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                     const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                     GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_uniqueMapDeclarationAST * object = (const cPtr_uniqueMapDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_uniqueMapDeclarationAST) ;
  GALGAS_stringset var_initialStateSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 585)) ;
  cEnumerator_insertMethodListAST enumerator_23436 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_23436.hasCurrentObject ()) {
    const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 587)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_0) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, enumerator_23436.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 588)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_location location_2 (enumerator_23436.current_mInsertMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_2, GALGAS_string ("the '").operator_concat (enumerator_23436.current_mInsertMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 589))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 589)).operator_concat (GALGAS_string ("' insert method should name an automaton state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 589))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 589)) ;
      }else if (kBoolFalse == test_1) {
        var_initialStateSet.addAssign_operation (enumerator_23436.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 591))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 591)) ;
      }
    }else if (kBoolFalse == test_0) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_23436.current_mInitialStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 593)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (enumerator_23436.current_mInsertMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the '").operator_concat (enumerator_23436.current_mInsertMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 594))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 594)).operator_concat (GALGAS_string ("' insert method should not name an automaton state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 594))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 594)) ;
      }
    }
    enumerator_23436.gotoNextObject () ;
  }
  GALGAS_mapAutomatonActionMap var_mapAutomatonActionMap = GALGAS_mapAutomatonActionMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 598)) ;
  cEnumerator_mapSearchMethodListAST enumerator_24039 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_24039.hasCurrentObject ()) {
    const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 600)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_5) {
      const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, enumerator_24039.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 601)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (enumerator_24039.current_mSearchMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("the '").operator_concat (enumerator_24039.current_mSearchMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 602))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 602)).operator_concat (GALGAS_string ("' search method should name an automaton action")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 602))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 602)) ;
      }else if (kBoolFalse == test_6) {
        const enumGalgasBool test_8 = var_mapAutomatonActionMap.reader_hasKey (enumerator_24039.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 603)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 603)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 603)).boolEnum () ;
        if (kBoolTrue == test_8) {
          {
          var_mapAutomatonActionMap.modifier_insertKey (enumerator_24039.current_mActionName (HERE), var_mapAutomatonActionMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 605)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 605)) ;
          }
        }
      }
    }else if (kBoolFalse == test_5) {
      const enumGalgasBool test_9 = GALGAS_bool (kIsNotEqual, enumerator_24039.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 609)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_9) {
        GALGAS_location location_10 (enumerator_24039.current_mSearchMethodName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_10, GALGAS_string ("the '").operator_concat (enumerator_24039.current_mSearchMethodName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 610))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 610)).operator_concat (GALGAS_string ("' search method should not name an automaton action")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 610))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 610)) ;
      }
    }
    enumerator_24039.gotoNextObject () ;
  }
  GALGAS_mapAutomatonStateMap var_mapAutomatonStateMap = GALGAS_mapAutomatonStateMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 614)) ;
  cEnumerator_mapStateList enumerator_24852 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_24852.hasCurrentObject ()) {
    {
    var_mapAutomatonStateMap.modifier_insertKey (enumerator_24852.current_mStateName (HERE), var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 616)), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 616)) ;
    }
    enumerator_24852.gotoNextObject () ;
  }
  cEnumerator_mapStateList enumerator_24978 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_24978.hasCurrentObject ()) {
    cEnumerator_mapStateTransitionList enumerator_25009 (enumerator_24978.current_mTransitionList (HERE), kEnumeration_up) ;
    while (enumerator_25009.hasCurrentObject ()) {
      GALGAS_uint joker_25070_0 ; // Joker input parameter
      var_mapAutomatonStateMap.method_searchKey (enumerator_25009.current_mTargetStateName (HERE), joker_25070_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 620)) ;
      enumerator_25009.gotoNextObject () ;
    }
    enumerator_24978.gotoNextObject () ;
  }
  GALGAS_stringset var_allActions = var_mapAutomatonActionMap.reader_keySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 624)) ;
  GALGAS_mapStateSortedList var_mapStateSortedList = GALGAS_mapStateSortedList::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 625)) ;
  cEnumerator_mapStateList enumerator_25304 (object->mAttribute_mMapStateList, kEnumeration_up) ;
  while (enumerator_25304.hasCurrentObject ()) {
    GALGAS_stringset var_actionsForCurrentState = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 627)) ;
    GALGAS_mapStateTransitionSortedList var_mapStateTransitionSortedList = GALGAS_mapStateTransitionSortedList::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 628)) ;
    cEnumerator_mapStateTransitionList enumerator_25469 (enumerator_25304.current_mTransitionList (HERE), kEnumeration_up) ;
    while (enumerator_25469.hasCurrentObject ()) {
      GALGAS_uint var_actionIndex ;
      var_mapAutomatonActionMap.method_searchKey (enumerator_25469.current_mActionName (HERE), var_actionIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 631)) ;
      const enumGalgasBool test_11 = var_actionsForCurrentState.reader_hasKey (enumerator_25469.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 632)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 632)).boolEnum () ;
      if (kBoolTrue == test_11) {
        GALGAS_location location_12 (enumerator_25469.current_mActionName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_12, GALGAS_string ("the '").operator_concat (enumerator_25469.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 633))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 633)).operator_concat (GALGAS_string ("' action is already used for this state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 633))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 633)) ;
      }
      var_actionsForCurrentState.addAssign_operation (enumerator_25469.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 635))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 635)) ;
      GALGAS_uint var_targetStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_25469.current_mTargetStateName (HERE), var_targetStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 637)) ;
      var_mapStateTransitionSortedList.addAssign_operation (var_actionIndex, enumerator_25469.current_mActionName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 640)), var_targetStateIndex, enumerator_25469.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 642)), enumerator_25469.current_mTransitionMessageKind (HERE), enumerator_25469.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 644))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 638)) ;
      enumerator_25469.gotoNextObject () ;
    }
    GALGAS_uint var_stateIndex ;
    var_mapAutomatonStateMap.method_searchKey (enumerator_25304.current_mStateName (HERE), var_stateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 648)) ;
    var_mapStateSortedList.addAssign_operation (var_stateIndex, enumerator_25304.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 651)), enumerator_25304.current_mStateMessageKind (HERE), enumerator_25304.current_mStateMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 653)), var_mapStateTransitionSortedList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 649)) ;
    GALGAS_stringset var_missingActions = var_allActions.substract_operation (var_actionsForCurrentState, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 656)) ;
    const enumGalgasBool test_13 = GALGAS_bool (kIsStrictSup, var_missingActions.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 657)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_13) {
      GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_26571 (var_missingActions, kEnumeration_up) ;
      while (enumerator_26571.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("'").operator_concat (enumerator_26571.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 660)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 660))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 660)) ;
        if (enumerator_26571.hasNextObject ()) {
          var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 661)) ;
        }
        enumerator_26571.gotoNextObject () ;
      }
      GALGAS_location location_14 (enumerator_25304.current_mStateName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_14, GALGAS_string ("the following actions are not named in a transition from this state: ").operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 663))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 663)) ;
    }
    enumerator_25304.gotoNextObject () ;
  }
  GALGAS_stringset var_accessibleStates = var_initialStateSet ;
  GALGAS_bool var_progress = GALGAS_bool (true) ;
  if (object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 669)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 669)).isValid ()) {
    uint32_t variant_26909 = object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 669)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 669)).uintValue () ;
    bool loop_26909 = true ;
    while (loop_26909) {
      loop_26909 = var_progress.isValid () ;
      if (loop_26909) {
        loop_26909 = var_progress.boolValue () ;
      }
      if (loop_26909 && (0 == variant_26909)) {
        loop_26909 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 669)) ;
      }
      if (loop_26909) {
        variant_26909 -- ;
        var_progress = GALGAS_bool (false) ;
        cEnumerator_mapStateList enumerator_27006 (object->mAttribute_mMapStateList, kEnumeration_up) ;
        while (enumerator_27006.hasCurrentObject ()) {
          const enumGalgasBool test_15 = var_accessibleStates.reader_hasKey (enumerator_27006.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 672)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 672)).boolEnum () ;
          if (kBoolTrue == test_15) {
            cEnumerator_mapStateTransitionList enumerator_27102 (enumerator_27006.current_mTransitionList (HERE), kEnumeration_up) ;
            while (enumerator_27102.hasCurrentObject ()) {
              const enumGalgasBool test_16 = var_accessibleStates.reader_hasKey (enumerator_27102.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 674)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 674)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 674)).boolEnum () ;
              if (kBoolTrue == test_16) {
                var_accessibleStates.addAssign_operation (enumerator_27102.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 675))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 675)) ;
                var_progress = GALGAS_bool (true) ;
              }
              enumerator_27102.gotoNextObject () ;
            }
          }
          enumerator_27006.gotoNextObject () ;
        }
      }
    }
  }
  GALGAS_stringset var_uselessStates = var_mapAutomatonStateMap.reader_keySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 682)).substract_operation (var_accessibleStates, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 682)) ;
  const enumGalgasBool test_17 = GALGAS_bool (kIsStrictSup, var_uselessStates.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 683)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_17) {
    GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
    cEnumerator_stringset enumerator_27530 (var_uselessStates, kEnumeration_up) ;
    while (enumerator_27530.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("'").operator_concat (enumerator_27530.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 686)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 686))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 686)) ;
      if (enumerator_27530.hasNextObject ()) {
        var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 687)) ;
      }
      enumerator_27530.gotoNextObject () ;
    }
    inCompiler->emitSemanticWarning (inCompiler->here (), GALGAS_string ("the following map automaton states are useless: ").operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 689))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 689)) ;
  }
  GALGAS_stringset var_neededAssociations = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 693)) ;
  GALGAS_stringset var_accessibilityGraph = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 694)) ;
  cEnumerator_mapAutomatonStateMap enumerator_27900 (var_mapAutomatonStateMap, kEnumeration_up) ;
  while (enumerator_27900.hasCurrentObject ()) {
    GALGAS_stringset var_reachableStates = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 696)) ;
    var_reachableStates.addAssign_operation (enumerator_27900.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 697))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 697)) ;
    GALGAS_bool var_progress = GALGAS_bool (true) ;
    if (var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 699)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 699)).isValid ()) {
      uint32_t variant_28025 = var_mapAutomatonStateMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 699)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 699)).uintValue () ;
      bool loop_28025 = true ;
      while (loop_28025) {
        loop_28025 = var_progress.isValid () ;
        if (loop_28025) {
          loop_28025 = var_progress.boolValue () ;
        }
        if (loop_28025 && (0 == variant_28025)) {
          loop_28025 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 699)) ;
        }
        if (loop_28025) {
          variant_28025 -- ;
          var_progress = GALGAS_bool (false) ;
          cEnumerator_mapStateList enumerator_28132 (object->mAttribute_mMapStateList, kEnumeration_up) ;
          while (enumerator_28132.hasCurrentObject ()) {
            const enumGalgasBool test_18 = var_reachableStates.reader_hasKey (enumerator_28132.current_mStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 702)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 702)).boolEnum () ;
            if (kBoolTrue == test_18) {
              cEnumerator_mapStateTransitionList enumerator_28231 (enumerator_28132.current_mTransitionList (HERE), kEnumeration_up) ;
              while (enumerator_28231.hasCurrentObject ()) {
                const enumGalgasBool test_19 = var_reachableStates.reader_hasKey (enumerator_28231.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 704)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 704)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 704)).boolEnum () ;
                if (kBoolTrue == test_19) {
                  var_reachableStates.addAssign_operation (enumerator_28231.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 705))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 705)) ;
                  var_accessibilityGraph.addAssign_operation (enumerator_27900.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 706)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 706)).operator_concat (enumerator_28231.current_mTargetStateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 706))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 706))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 706)) ;
                  var_progress = GALGAS_bool (true) ;
                }
                enumerator_28231.gotoNextObject () ;
              }
            }
            enumerator_28132.gotoNextObject () ;
          }
        }
      }
    }
    cEnumerator_stringset enumerator_28617 (var_reachableStates, kEnumeration_up) ;
    while (enumerator_28617.hasCurrentObject ()) {
      const enumGalgasBool test_20 = GALGAS_bool (kIsNotEqual, enumerator_27900.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 714)).objectCompare (enumerator_28617.current_key (HERE))).boolEnum () ;
      if (kBoolTrue == test_20) {
        var_neededAssociations.addAssign_operation (enumerator_27900.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 715)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 715)).operator_concat (enumerator_28617.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 715))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 715)) ;
      }
      enumerator_28617.gotoNextObject () ;
    }
    enumerator_27900.gotoNextObject () ;
  }
  GALGAS_mapOverrideList var_mapOverrideList = GALGAS_mapOverrideList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 720)) ;
  cEnumerator_mapOverrideBlockListAST enumerator_28852 (object->mAttribute_mMapOverrideBlockListAST, kEnumeration_up) ;
  while (enumerator_28852.hasCurrentObject ()) {
    GALGAS_stringset var_handledAssociations = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 722)) ;
    GALGAS_stringset var_neededCombinaisons = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 723)) ;
    GALGAS_branchBehaviourSortedListForMapOverride var_branchBehaviourSortedListForMapOverride_31_ = GALGAS_branchBehaviourSortedListForMapOverride::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 724)) ;
    cEnumerator_mapOverrideBlockDescriptorAST enumerator_29100 (enumerator_28852.current_mMapOverrideBlockDescriptor_31_AST (HERE), kEnumeration_up) ;
    while (enumerator_29100.hasCurrentObject ()) {
      GALGAS_uint var_startStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29100.current_mLeftState (HERE), var_startStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 727)) ;
      GALGAS_uint var_currentStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29100.current_mRightState (HERE), var_currentStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 729)) ;
      GALGAS_string var_association = enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 730)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 730)).operator_concat (enumerator_29100.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 730))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 730)) ;
      const enumGalgasBool test_21 = var_neededAssociations.reader_hasKey (var_association COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 731)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 731)).boolEnum () ;
      if (kBoolTrue == test_21) {
        GALGAS_location location_22 (enumerator_29100.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticWarning (location_22, GALGAS_string ("the '").operator_concat (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 732)).operator_concat (GALGAS_string ("' association is useless")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 732))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 732)) ;
      }
      const enumGalgasBool test_23 = var_handledAssociations.reader_hasKey (var_association COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 734)).boolEnum () ;
      if (kBoolTrue == test_23) {
        GALGAS_location location_24 (enumerator_29100.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_24, GALGAS_string ("the '").operator_concat (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 736)).operator_concat (GALGAS_string ("' association is already defined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 736))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 735)) ;
      }
      var_handledAssociations.addAssign_operation (var_association  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 738)) ;
      GALGAS_uint var_finalStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_29100.current_mResultingState (HERE), var_finalStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 740)) ;
      const enumGalgasBool test_25 = GALGAS_bool (kIsNotEqual, enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 741)).objectCompare (enumerator_29100.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 741)))).boolEnum () ;
      if (kBoolTrue == test_25) {
        var_neededCombinaisons.addAssign_operation (enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 742)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 742)).operator_concat (enumerator_29100.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 742))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 742))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 742)) ;
        var_neededCombinaisons.addAssign_operation (enumerator_29100.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 743)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 743)).operator_concat (enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 743))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 743))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 743)) ;
        const enumGalgasBool test_26 = var_accessibilityGraph.reader_hasKey (enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 744)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744)).operator_concat (enumerator_29100.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 744))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 744)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 744)).boolEnum () ;
        if (kBoolTrue == test_26) {
          GALGAS_location location_27 (enumerator_29100.current_mResultingState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_27, GALGAS_string ("the '").operator_concat (enumerator_29100.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 746))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 746)).operator_concat (GALGAS_string ("' state is not reachable from '")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 746)).operator_concat (enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 746))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 746)).operator_concat (GALGAS_string ("' state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 746))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 745)) ;
        }
      }
      {
      routine_check_5F_K_5F_escapeCharacters (enumerator_29100.current_mTransitionMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 750)) ;
      }
      var_branchBehaviourSortedListForMapOverride_31_.addAssign_operation (var_startStateNameIndex, enumerator_29100.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 753)), var_currentStateNameIndex, enumerator_29100.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 755)), var_finalStateNameIndex, enumerator_29100.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 757)), enumerator_29100.current_mMessageKind (HERE), enumerator_29100.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 759))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 751)) ;
      enumerator_29100.gotoNextObject () ;
    }
    GALGAS_stringset var_forgottenAssociations = var_neededAssociations.substract_operation (var_handledAssociations, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 762)) ;
    const enumGalgasBool test_28 = GALGAS_bool (kIsStrictSup, var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 763)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_28) {
      GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_30956 (var_forgottenAssociations, kEnumeration_up) ;
      while (enumerator_30956.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "  - ").operator_concat (enumerator_30956.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 766))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 766)) ;
        enumerator_30956.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (inCompiler->here (), var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 768)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 768)).operator_concat (GALGAS_string (" associations should be defined:")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 768)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 768))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 768)) ;
    }
    GALGAS_stringset var_definedCombinaisons = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("semanticAnalysis.gSemantics", 770)) ;
    GALGAS_branchBehaviourSortedListForMapOverride var_branchBehaviourSortedListForMapOverride_32_ = GALGAS_branchBehaviourSortedListForMapOverride::constructor_emptySortedList (SOURCE_FILE ("semanticAnalysis.gSemantics", 771)) ;
    cEnumerator_mapOverrideBlockDescriptorAST enumerator_31320 (enumerator_28852.current_mMapOverrideBlockDescriptor_32_AST (HERE), kEnumeration_up) ;
    while (enumerator_31320.hasCurrentObject ()) {
      GALGAS_uint var_leftStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_31320.current_mLeftState (HERE), var_leftStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 774)) ;
      GALGAS_uint var_rightStateIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_31320.current_mRightState (HERE), var_rightStateIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 776)) ;
      GALGAS_string var_combinaison = enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 777)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 777)).operator_concat (enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 777))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 777)) ;
      const enumGalgasBool test_29 = var_neededCombinaisons.reader_hasKey (var_combinaison COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 778)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 778)).boolEnum () ;
      if (kBoolTrue == test_29) {
        GALGAS_location location_30 (enumerator_31320.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_30, GALGAS_string ("the '").operator_concat (enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 780))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).operator_concat (enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 780))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780)).operator_concat (GALGAS_string ("' combinaison is useless")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 780))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 779)) ;
      }
      const enumGalgasBool test_31 = var_definedCombinaisons.reader_hasKey (var_combinaison COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 782)).boolEnum () ;
      if (kBoolTrue == test_31) {
        GALGAS_location location_32 (enumerator_31320.current_mRightState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_32, GALGAS_string ("the '").operator_concat (enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 784))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 784)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 784)).operator_concat (enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 784))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 784)).operator_concat (GALGAS_string ("' combinaison is already defined")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 784))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 783)) ;
      }
      var_definedCombinaisons.addAssign_operation (var_combinaison  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 786)) ;
      GALGAS_uint var_resultingStateNameIndex ;
      var_mapAutomatonStateMap.method_searchKey (enumerator_31320.current_mResultingState (HERE), var_resultingStateNameIndex, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 788)) ;
      const enumGalgasBool test_33 = GALGAS_bool (kIsNotEqual, enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 789)).objectCompare (enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 789)))).operator_and (GALGAS_bool (kIsNotEqual, enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 790)).objectCompare (enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 790)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 789)).operator_and (var_accessibilityGraph.reader_hasKey (enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 791)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 791)).operator_concat (enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 791))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 791)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 791)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 791)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 790)).boolEnum () ;
      if (kBoolTrue == test_33) {
        GALGAS_location location_34 (enumerator_31320.current_mResultingState (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_34, GALGAS_string ("the '").operator_concat (enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 793))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 793)).operator_concat (GALGAS_string ("' state cannot be reached from the '")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 793)).operator_concat (enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 793))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 793)).operator_concat (GALGAS_string ("' state")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 793))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 792)) ;
      }
      {
      routine_check_5F_K_5F_escapeCharacters (enumerator_31320.current_mTransitionMessage (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 795)) ;
      }
      const enumGalgasBool test_35 = GALGAS_bool (kIsEqual, enumerator_31320.current_mMessageKind (HERE).objectCompare (GALGAS_mapAutomatonMessageKind::constructor_noMessage (SOURCE_FILE ("semanticAnalysis.gSemantics", 796)))).boolEnum () ;
      if (kBoolTrue == test_35) {
        var_definedCombinaisons.addAssign_operation (enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 797)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 797)).operator_concat (enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 797))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 797))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 797)) ;
        var_branchBehaviourSortedListForMapOverride_32_.addAssign_operation (var_rightStateIndex, enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 800)), var_leftStateIndex, enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 802)), var_resultingStateNameIndex, enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 804)), enumerator_31320.current_mMessageKind (HERE), enumerator_31320.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 806))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 798)) ;
      }
      var_branchBehaviourSortedListForMapOverride_32_.addAssign_operation (var_leftStateIndex, enumerator_31320.current_mLeftState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 811)), var_rightStateIndex, enumerator_31320.current_mRightState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 813)), var_resultingStateNameIndex, enumerator_31320.current_mResultingState (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 815)), enumerator_31320.current_mMessageKind (HERE), enumerator_31320.current_mTransitionMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 817))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 809)) ;
      enumerator_31320.gotoNextObject () ;
    }
    const enumGalgasBool test_36 = GALGAS_bool (kIsEqual, var_forgottenAssociations.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 820)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_36) {
      GALGAS_stringset var_forgottenCombinaisons = var_neededCombinaisons.substract_operation (var_definedCombinaisons, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 821)) ;
      const enumGalgasBool test_37 = GALGAS_bool (kIsStrictSup, var_forgottenCombinaisons.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 822)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_37) {
        GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
        cEnumerator_stringset enumerator_33641 (var_forgottenCombinaisons, kEnumeration_up) ;
        while (enumerator_33641.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("\n"
            "  - ").operator_concat (enumerator_33641.current_key (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 825))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 825)) ;
          enumerator_33641.gotoNextObject () ;
        }
        inCompiler->emitSemanticError (inCompiler->here (), var_forgottenCombinaisons.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 827)).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 827)).operator_concat (GALGAS_string (" combinaisons are forgotten:")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 827)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 827))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 827)) ;
      }
    }
    var_mapOverrideList.addAssign_operation (enumerator_28852.current_mOverrideBlockName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 831)), var_branchBehaviourSortedListForMapOverride_31_, var_branchBehaviourSortedListForMapOverride_32_  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 830)) ;
    enumerator_28852.gotoNextObject () ;
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 837)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 838)) ;
  cEnumerator_attributeInCollectionListAST enumerator_34152 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_34152.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_34152.current_mAttributeTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 840)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (true) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    var_typedAttributeList.addAssign_operation (var_t, enumerator_34152.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 843)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_34152.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 849)) ;
    }
    enumerator_34152.gotoNextObject () ;
  }
  GALGAS_insertMethodMap var_insertMethodMap = GALGAS_insertMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 852)) ;
  cEnumerator_insertMethodListAST enumerator_34574 (object->mAttribute_mInsertMethodList, kEnumeration_up) ;
  while (enumerator_34574.hasCurrentObject ()) {
    {
    var_insertMethodMap.modifier_insertKey (enumerator_34574.current_mInsertMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 854)) ;
    }
    cEnumerator_stringlist enumerator_34767 (enumerator_34574.current_mErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 856)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 856)), kEnumeration_up) ;
    while (enumerator_34767.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_34767.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 857)) ;
      {
      GALGAS_string joker_34883_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_34883_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 858)) ;
      }
      cEnumerator_stringlist enumerator_34915 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_34915.hasCurrentObject ()) {
        const enumGalgasBool test_38 = GALGAS_bool (kIsStrictSup, enumerator_34915.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 860)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_38) {
          GALGAS_char var_c = enumerator_34915.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 861)) ;
          const enumGalgasBool test_39 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 862)).boolEnum () ;
          if (kBoolTrue == test_39) {
            GALGAS_location location_40 (enumerator_34574.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_40, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 863)) ;
          }
        }
        enumerator_34915.gotoNextObject () ;
      }
      enumerator_34767.gotoNextObject () ;
    }
    cEnumerator_stringlist enumerator_35394 (enumerator_34574.current_mShadowErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 869)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 869)), kEnumeration_up) ;
    while (enumerator_35394.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_35394.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 870)) ;
      {
      GALGAS_string joker_35510_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_35510_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 871)) ;
      }
      cEnumerator_stringlist enumerator_35542 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_35542.hasCurrentObject ()) {
        const enumGalgasBool test_41 = GALGAS_bool (kIsStrictSup, enumerator_35542.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 873)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_41) {
          GALGAS_char var_c = enumerator_35542.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 874)) ;
          const enumGalgasBool test_42 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).operator_and (GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (76)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 875)).boolEnum () ;
          if (kBoolTrue == test_42) {
            GALGAS_location location_43 (enumerator_34574.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_43, GALGAS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 876)) ;
          }
        }
        enumerator_35542.gotoNextObject () ;
      }
      enumerator_35394.gotoNextObject () ;
    }
    enumerator_34574.gotoNextObject () ;
  }
  GALGAS_searchMethodMap var_searchMethodMap = GALGAS_searchMethodMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 883)) ;
  cEnumerator_mapSearchMethodListAST enumerator_35990 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_35990.hasCurrentObject ()) {
    const enumGalgasBool test_44 = GALGAS_bool (kIsEqual, object->mAttribute_mMapStateList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 885)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_44) {
      {
      var_searchMethodMap.modifier_insertKey (enumerator_35990.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 886)) ;
      }
    }else if (kBoolFalse == test_44) {
      {
      var_searchMethodMap.modifier_insertKey (enumerator_35990.current_mSearchMethodName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 888)) ;
      }
    }
    cEnumerator_stringlist enumerator_36304 (enumerator_35990.current_mErrorMessage (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 891)).reader_componentsSeparatedByString (GALGAS_string ("%%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 891)), kEnumeration_up) ;
    while (enumerator_36304.hasCurrentObject ()) {
      GALGAS_stringlist var_explodedArray = enumerator_36304.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string ("%") COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 892)) ;
      {
      GALGAS_string joker_36420_0 ; // Joker input parameter
      var_explodedArray.modifier_popFirst (joker_36420_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 893)) ;
      }
      cEnumerator_stringlist enumerator_36452 (var_explodedArray, kEnumeration_up) ;
      while (enumerator_36452.hasCurrentObject ()) {
        const enumGalgasBool test_45 = GALGAS_bool (kIsStrictSup, enumerator_36452.current_mValue (HERE).reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 895)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_45) {
          GALGAS_char var_c = enumerator_36452.current_mValue (HERE).reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 896)) ;
          const enumGalgasBool test_46 = GALGAS_bool (kIsNotEqual, var_c.objectCompare (GALGAS_char (TO_UNICODE (75)))).boolEnum () ;
          if (kBoolTrue == test_46) {
            GALGAS_location location_47 (enumerator_35990.current_mErrorMessage (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_47, GALGAS_string ("only '%K' and '%%' escape sequences are allowed in a search error message")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 898)) ;
          }
        }
        enumerator_36452.gotoNextObject () ;
      }
      enumerator_36304.gotoNextObject () ;
    }
    enumerator_35990.gotoNextObject () ;
  }
  GALGAS_withAccessorMap var_withAccessorMap = GALGAS_withAccessorMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 905)) ;
  {
  var_withAccessorMap.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("hasKey"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 906)), constinArgument_inPredefinedTypes.mAttribute_mStringType, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 906)) ;
  }
  cEnumerator_mapSearchMethodListAST enumerator_36979 (object->mAttribute_mSearchMethodList, kEnumeration_up) ;
  while (enumerator_36979.hasCurrentObject ()) {
    {
    var_withAccessorMap.modifier_insertKey (enumerator_36979.current_mSearchMethodName (HERE), constinArgument_inPredefinedTypes.mAttribute_mLStringType, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 908)) ;
    }
    enumerator_36979.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_uniqueMapTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 917)), object->mAttribute_mMapTypeName, var_typedAttributeList, object->mAttribute_mInsertMethodList, object->mAttribute_mSearchMethodList, var_withAccessorMap, var_mapAutomatonStateMap, var_mapAutomatonActionMap, var_mapStateSortedList, var_mapOverrideList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 916)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 914)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_uniqueMapDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_uniqueMapDeclarationAST.mSlotID,
                                        categoryMethod_uniqueMapDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_uniqueMapDeclarationAST_semanticAnalysis (defineCategoryMethod_uniqueMapDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@mapProxyDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_mapProxyDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                    const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                    const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                    GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_mapProxyDeclarationAST * object = (const cPtr_mapProxyDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_mapProxyDeclarationAST) ;
  GALGAS_typedAttributeList var_listTypeAttributeList ;
  GALGAS_mapSearchMethodListAST var_searchMethodList ;
  GALGAS_bool joker_38091_6 ; // Joker input parameter
  GALGAS_bool joker_38091_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_38091_4 ; // Joker input parameter
  GALGAS_typeKindEnum joker_38091_3 ; // Joker input parameter
  GALGAS_typedAttributeList joker_38091_2 ; // Joker input parameter
  GALGAS_attributeMap joker_38091_1 ; // Joker input parameter
  GALGAS_constructorMap joker_38126_11 ; // Joker input parameter
  GALGAS_readerMap joker_38126_10 ; // Joker input parameter
  GALGAS_modifierMap joker_38126_9 ; // Joker input parameter
  GALGAS_instanceMethodMap joker_38126_8 ; // Joker input parameter
  GALGAS_classMethodMap joker_38126_7 ; // Joker input parameter
  GALGAS_enumerationDescriptorList joker_38126_6 ; // Joker input parameter
  GALGAS_stringlist joker_38126_5 ; // Joker input parameter
  GALGAS_uint joker_38126_4 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxyAndParameterList joker_38126_3 ; // Joker input parameter
  GALGAS_stringset joker_38126_2 ; // Joker input parameter
  GALGAS_lstringlist joker_38126_1 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_38157_7 ; // Joker input parameter
  GALGAS_withAccessorMap joker_38157_6 ; // Joker input parameter
  GALGAS_bool joker_38157_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_38157_4 ; // Joker input parameter
  GALGAS_string joker_38157_3 ; // Joker input parameter
  GALGAS_string joker_38157_2 ; // Joker input parameter
  GALGAS_headerKind joker_38157_1 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mTypeMap.method_searchKey (object->mAttribute_mAssociatedMapTypeName, joker_38091_6, joker_38091_5, joker_38091_4, joker_38091_3, joker_38091_2, joker_38091_1, var_listTypeAttributeList, joker_38126_11, joker_38126_10, joker_38126_9, joker_38126_8, joker_38126_7, joker_38126_6, joker_38126_5, joker_38126_4, joker_38126_3, joker_38126_2, joker_38126_1, var_searchMethodList, joker_38157_7, joker_38157_6, joker_38157_5, joker_38157_4, joker_38157_3, joker_38157_2, joker_38157_1, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 942)) ;
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_mapProxyTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mMapProxyTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 954)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAssociatedMapTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 955)), var_listTypeAttributeList, var_searchMethodList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 953)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 951)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_mapProxyDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_mapProxyDeclarationAST.mSlotID,
                                        categoryMethod_mapProxyDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_mapProxyDeclarationAST_semanticAnalysis (defineCategoryMethod_mapProxyDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@externFunctionDeclarationAST semanticAnalysis' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externFunctionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                          const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                          const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                          GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externFunctionDeclarationAST * object = (const cPtr_externFunctionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externFunctionDeclarationAST) ;
  GALGAS_formalInputParameterListForGeneration var_formalArgumentList = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1079)) ;
  cEnumerator_formalInputParameterListAST enumerator_43901 (object->mAttribute_mFormalArgumentList, kEnumeration_up) ;
  while (enumerator_43901.hasCurrentObject ()) {
    var_formalArgumentList.addAssign_operation (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_43901.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1082)), enumerator_43901.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1083)), enumerator_43901.current_mFormalArgumentName (HERE), enumerator_43901.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1081)) ;
    enumerator_43901.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_functionPrototypeDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1092))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1092)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1093)), var_formalArgumentList, GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mResultTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1095))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1090)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1088)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externFunctionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externFunctionDeclarationAST.mSlotID,
                                        categoryMethod_externFunctionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externFunctionDeclarationAST_semanticAnalysis (defineCategoryMethod_externFunctionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@externRoutineDeclarationAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_externRoutineDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_externRoutineDeclarationAST * object = (const cPtr_externRoutineDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_externRoutineDeclarationAST) ;
  GALGAS_formalParameterListForGeneration var_formalArgumentList = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1108)) ;
  cEnumerator_formalParameterListAST enumerator_44904 (object->mAttribute_mFormalArgumentList, kEnumeration_up) ;
  while (enumerator_44904.hasCurrentObject ()) {
    var_formalArgumentList.addAssign_operation (enumerator_44904.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_44904.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1112)), enumerator_44904.current_mFormalArgumentName (HERE), enumerator_44904.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1114))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1110)) ;
    enumerator_44904.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_routinePrototypeDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("proc-").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1121))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1121)), object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1122)), var_formalArgumentList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1119)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1117)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_externRoutineDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_externRoutineDeclarationAST.mSlotID,
                                        categoryMethod_externRoutineDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_externRoutineDeclarationAST_semanticAnalysis (defineCategoryMethod_externRoutineDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@routineDeclarationAST semanticAnalysis'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_routineDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                   const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                   GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_routineDeclarationAST * object = (const cPtr_routineDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_routineDeclarationAST) ;
  GALGAS_formalParameterListForGeneration var_formalArgumentList = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1137)) ;
  GALGAS_semanticInstructionListForGeneration var_instructionList ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1142)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1144))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1139)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mFormalArgumentList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1149)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1150)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1151)), GALGAS_string::makeEmptyString (), object->mAttribute_mRoutineInstructionList, object->mAttribute_mEndOfRoutineInstructionList, var_instructionList, var_formalArgumentList, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1146)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_routineImplementationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("proc-").operator_concat (object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1163))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1163)), object->mAttribute_mRoutineName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1164)), var_formalArgumentList, var_instructionList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1161)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1159)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_routineDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_routineDeclarationAST.mSlotID,
                                        categoryMethod_routineDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_routineDeclarationAST_semanticAnalysis (defineCategoryMethod_routineDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@classDeclarationAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_classDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_classDeclarationAST * object = (const cPtr_classDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_classDeclarationAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mClassTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1180)) ;
  GALGAS_unifiedTypeMapProxy var_superClassProxy ;
  GALGAS_typedAttributeList var_allAttributeList ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mSuperClassName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1186)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_superClassProxy = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1187)) ;
    var_allAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1188)) ;
    GALGAS_bool var_generatedInSeparateFileFeature = GALGAS_bool (false) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, object->mAttribute_mClassFeatureList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 1190)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_1) {
      cEnumerator_lstringlist enumerator_47612 (object->mAttribute_mClassFeatureList, kEnumeration_up) ;
      while (enumerator_47612.hasCurrentObject ()) {
        const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_47612.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1192)).objectCompare (GALGAS_string ("generatedInSeparateFile"))).boolEnum () ;
        if (kBoolTrue == test_2) {
          const enumGalgasBool test_3 = var_generatedInSeparateFileFeature.boolEnum () ;
          if (kBoolTrue == test_3) {
            GALGAS_location location_4 (enumerator_47612.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, GALGAS_string ("the 'generatedInSeparateFile' is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1194)) ;
          }
          var_generatedInSeparateFileFeature = GALGAS_bool (true) ;
        }else if (kBoolFalse == test_2) {
          GALGAS_location location_5 (enumerator_47612.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("only the 'generatedInSeparateFile' feature is allowed here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1198)) ;
        }
        enumerator_47612.gotoNextObject () ;
      }
    }
  }else if (kBoolFalse == test_0) {
    var_superClassProxy = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mSuperClassName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1203)) ;
    var_allAttributeList = var_superClassProxy.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1204)) ;
    const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, object->mAttribute_mClassFeatureList.reader_length (SOURCE_FILE ("semanticAnalysis.gSemantics", 1205)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_6) {
      cEnumerator_lstringlist enumerator_48273 (object->mAttribute_mClassFeatureList, kEnumeration_up) ;
      while (enumerator_48273.hasCurrentObject ()) {
        GALGAS_location location_7 (enumerator_48273.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, GALGAS_string ("a class that has a super class does not accept any feature")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1207)) ;
        enumerator_48273.gotoNextObject () ;
      }
    }
  }
  GALGAS_typedAttributeList var_typedAttributeList = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1212)) ;
  GALGAS_attributeIndexMap var_attributeMap = GALGAS_attributeIndexMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1213)) ;
  cEnumerator_attributeInCollectionListAST enumerator_48556 (object->mAttribute_mAttributeList, kEnumeration_up) ;
  while (enumerator_48556.hasCurrentObject ()) {
    GALGAS_unifiedTypeMapProxy var_t = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_48556.current_mAttributeTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1215)) ;
    GALGAS_bool var_hasSetter = GALGAS_bool (false) ;
    GALGAS_bool var_hasGetter = GALGAS_bool (true) ;
    cEnumerator_lstringlist enumerator_48744 (enumerator_48556.current_mFeatureList (HERE), kEnumeration_up) ;
    while (enumerator_48744.hasCurrentObject ()) {
      const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_48744.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1219)).objectCompare (GALGAS_string ("setter"))).boolEnum () ;
      if (kBoolTrue == test_8) {
        const enumGalgasBool test_9 = var_hasSetter.boolEnum () ;
        if (kBoolTrue == test_9) {
          GALGAS_location location_10 (enumerator_48744.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_10, GALGAS_string ("the 'setter' feature is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1221)) ;
        }
        var_hasSetter = GALGAS_bool (true) ;
      }else if (kBoolFalse == test_8) {
        const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_48744.current_mValue (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1224)).objectCompare (GALGAS_string ("nogetter"))).boolEnum () ;
        if (kBoolTrue == test_11) {
          const enumGalgasBool test_12 = var_hasGetter.operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1225)).boolEnum () ;
          if (kBoolTrue == test_12) {
            GALGAS_location location_13 (enumerator_48744.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_13, GALGAS_string ("the 'nogetter' feature is already named")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1226)) ;
          }
          var_hasGetter = GALGAS_bool (false) ;
        }else if (kBoolFalse == test_11) {
          GALGAS_location location_14 (enumerator_48744.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_14, GALGAS_string ("only the 'setter' or 'nogetter' are allowed here")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1230)) ;
        }
      }
      enumerator_48744.gotoNextObject () ;
    }
    var_typedAttributeList.addAssign_operation (var_t, enumerator_48556.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1233)) ;
    var_allAttributeList.addAssign_operation (var_t, enumerator_48556.current_mAttributeName (HERE), var_hasSetter, var_hasGetter  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1239)) ;
    {
    var_attributeMap.modifier_insertKey (enumerator_48556.current_mAttributeName (HERE), var_t, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1245)) ;
    }
    enumerator_48556.gotoNextObject () ;
  }
  GALGAS_string var_sortString = var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1248)) ;
  GALGAS_unifiedTypeMapProxy var_t = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1249)) ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1250)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1250)).isValid ()) {
    uint32_t variant_49661 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1250)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1250)).uintValue () ;
    bool loop_49661 = true ;
    while (loop_49661) {
      loop_49661 = var_t.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1251)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1251)).isValid () ;
      if (loop_49661) {
        loop_49661 = var_t.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1251)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1251)).boolValue () ;
      }
      if (loop_49661 && (0 == variant_49661)) {
        loop_49661 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1250)) ;
      }
      if (loop_49661) {
        variant_49661 -- ;
        var_sortString = var_t.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1252)).operator_concat (GALGAS_string (".")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1252)).operator_concat (var_sortString  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1252)) ;
        var_t = var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1253)) ;
      }
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_classTypeForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mClassTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1259)), object->mAttribute_mIsAbstract, object->mAttribute_mClassTypeName, var_superClassProxy, var_allAttributeList, var_typedAttributeList, var_selfType.reader_mGenerateHeaderInSeparateFile (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1265))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1258)), var_sortString  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1256)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_classDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_classDeclarationAST.mSlotID,
                                        categoryMethod_classDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_classDeclarationAST_semanticAnalysis (defineCategoryMethod_classDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//    Overriding category method '@functionDeclarationAST semanticAnalysis'    *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_functionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                    const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                    const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                    GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_functionDeclarationAST * object = (const cPtr_functionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_functionDeclarationAST) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_formalInputParameterListForGeneration var_formalInputParameterList ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_resultVariableCppName ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1361)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1363))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1358)) ;
  {
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mFormalArgumentList, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1368)), GALGAS_string::makeEmptyString (), object->mAttribute_mFunctionInstructionList, object->mAttribute_mResultVariableName, object->mAttribute_mResultTypeName, object->mAttribute_mEndOfFunctionInstructionList, var_formalInputParameterList, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1365)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_functionImplementationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1384))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1384)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1385)), var_formalInputParameterList, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1382)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1380)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_functionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_functionDeclarationAST.mSlotID,
                                        categoryMethod_functionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_functionDeclarationAST_semanticAnalysis (defineCategoryMethod_functionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@onceFunctionDeclarationAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_onceFunctionDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                        const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                        const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                        GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_onceFunctionDeclarationAST * object = (const cPtr_onceFunctionDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_onceFunctionDeclarationAST) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_resultVariableCppName ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1409)), GALGAS_string::makeEmptyString (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1411))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1406)) ;
  {
  GALGAS_formalInputParameterListForGeneration joker_55774_0 ; // Joker input parameter
  routine_analyzeFunctionBody (var_analysisContext, GALGAS_formalInputParameterListAST::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1415)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1416)), GALGAS_string::makeEmptyString (), object->mAttribute_mFunctionInstructionList, object->mAttribute_mResultVariableName, object->mAttribute_mResultTypeName, object->mAttribute_mEndOfFunctionInstructionList, joker_55774_0, var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1413)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_onceFunctionDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("func-").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1432))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1432)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1433)), var_returnType, var_resultVariableCppName, var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1430)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1428)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_onceFunctionDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_onceFunctionDeclarationAST.mSlotID,
                                        categoryMethod_onceFunctionDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_onceFunctionDeclarationAST_semanticAnalysis (defineCategoryMethod_onceFunctionDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@filewrapperDeclarationAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_filewrapperDeclarationAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_filewrapperDeclarationAST * object = (const cPtr_filewrapperDeclarationAST *) inObject ;
  macroValidSharedObject (object, cPtr_filewrapperDeclarationAST) ;
  GALGAS_wrapperFileMap var_wrapperFileMap ;
  GALGAS_wrapperDirectoryMap var_wrapperDirectoryMap ;
  GALGAS_lstring joker_57008_0 ; // Joker input parameter
  GALGAS_lstringlist joker_57015_0 ; // Joker input parameter
  GALGAS_filewrapperTemplateMap joker_57067_0 ; // Joker input parameter
  constinArgument_inSemanticContext.mAttribute_mFilewrapperMap.method_searchKey (object->mAttribute_mFilewrapperName, joker_57008_0, joker_57015_0, var_wrapperFileMap, var_wrapperDirectoryMap, joker_57067_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1456)) ;
  GALGAS_string var_absoluteSourcePath ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mFilewrapperPath.mAttribute_string.reader_firstCharacterOrNul (SOURCE_FILE ("semanticAnalysis.gSemantics", 1466)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_absoluteSourcePath = object->mAttribute_mFilewrapperPath.mAttribute_string ;
  }else if (kBoolFalse == test_0) {
    var_absoluteSourcePath = object->mAttribute_mSourceFileAbsolutePath.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("semanticAnalysis.gSemantics", 1469)).operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1469)).operator_concat (object->mAttribute_mFilewrapperPath.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1469))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1469)) ;
  }
  const enumGalgasBool test_1 = var_absoluteSourcePath.reader_directoryExists (SOURCE_FILE ("semanticAnalysis.gSemantics", 1471)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1471)).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_location location_2 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_2, GALGAS_string ("The '").operator_concat (var_absoluteSourcePath  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1472)).operator_concat (GALGAS_string ("' directory does not exist")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1472))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1472)) ;
  }else if (kBoolFalse == test_1) {
    GALGAS_filewrapperTemplateListForGeneration var_filewrapperTemplateListForGeneration = GALGAS_filewrapperTemplateListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1475)) ;
    cEnumerator_filewrapperTemplateListAST enumerator_57703 (object->mAttribute_mFilewrapperTemplateList, kEnumeration_up) ;
    while (enumerator_57703.hasCurrentObject ()) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, enumerator_57703.current_mFilewrapperTemplatePath (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1477)).reader_firstCharacterOrNul (SOURCE_FILE ("semanticAnalysis.gSemantics", 1477)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (enumerator_57703.current_mFilewrapperTemplatePath (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the path should not begin with a '/'; it is relative to filewrapper path '").operator_concat (var_absoluteSourcePath  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1478)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1478))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1478)) ;
      }
      GALGAS_string var_absoluteTemplatePath = var_absoluteSourcePath.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1480)).operator_concat (enumerator_57703.current_mFilewrapperTemplatePath (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1480))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1480)) ;
      GALGAS_templateInstructionListAST var_resultingInstructionList ;
      var_resultingInstructionList.drop () ;
      cGrammar_templateGrammar::_performSourceFileParsing_ (inCompiler, GALGAS_lstring::constructor_new (var_absoluteTemplatePath, enumerator_57703.current_mFilewrapperTemplatePath (HERE).reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1483))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1483)), var_resultingInstructionList  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1483)) ;
      GALGAS_templateVariableMap var_templateVariableMap = GALGAS_templateVariableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1485)) ;
      GALGAS_formalInputParameterListForGeneration var_filewrapperTemplateFormalInputParameters = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1486)) ;
      cEnumerator_formalTemplateInputParameterListAST enumerator_58516 (enumerator_57703.current_mFilewrapperTemplateFormalInputParameters (HERE), kEnumeration_up) ;
      while (enumerator_58516.hasCurrentObject ()) {
        GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_58516.current_mFormalArgumentTypeName (HERE), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1488)) ;
        GALGAS_string var_cppVarName = GALGAS_string ("in_").operator_concat (enumerator_58516.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1489)).reader_identifierRepresentation (SOURCE_FILE ("semanticAnalysis.gSemantics", 1489))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1489)) ;
        {
        var_templateVariableMap.modifier_insertKey (enumerator_58516.current_mFormalArgumentName (HERE), var_type, var_cppVarName, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1490)) ;
        }
        var_filewrapperTemplateFormalInputParameters.addAssign_operation (var_type, var_cppVarName, enumerator_58516.current_mFormalArgumentName (HERE), GALGAS_bool (true)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1491)) ;
        enumerator_58516.gotoNextObject () ;
      }
      GALGAS_templateInstructionListForGeneration var_templateInstructionListForGeneration = GALGAS_templateInstructionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1494)) ;
      GALGAS_templateAnalysisContext var_templateAnalysisContext = GALGAS_templateAnalysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_templateVariableMap  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1495)) ;
      {
      routine_templateInstructionListAnalysis (var_templateAnalysisContext, var_resultingInstructionList, var_templateInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1500)) ;
      }
      var_filewrapperTemplateListForGeneration.addAssign_operation (enumerator_57703.current_mFilewrapperTemplateName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1503)), var_filewrapperTemplateFormalInputParameters, var_templateInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1502)) ;
      enumerator_57703.gotoNextObject () ;
    }
    ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_filewrapperDeclarationForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("filewrapper-").operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1513))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1513)), object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1514)), object->mAttribute_mFilewrapperPath.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1515)), var_wrapperFileMap, var_wrapperDirectoryMap, var_filewrapperTemplateListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1511)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1509)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_filewrapperDeclarationAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_filewrapperDeclarationAST.mSlotID,
                                        categoryMethod_filewrapperDeclarationAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_filewrapperDeclarationAST_semanticAnalysis (defineCategoryMethod_filewrapperDeclarationAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@abstractCategoryMethodAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryMethodAST * object = (const cPtr_abstractCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1533)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1535)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1535)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1536))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1536)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1536))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1536)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1537)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1538))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1538)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1538))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1538)) ;
    }
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1541)) ;
  cEnumerator_formalParameterListAST enumerator_61061 (object->mAttribute_mAbstractCategoryMethodFormalParameterList, kEnumeration_up) ;
  while (enumerator_61061.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (enumerator_61061.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_61061.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1545)), enumerator_61061.current_mFormalArgumentName (HERE), enumerator_61061.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1547))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1543)) ;
    enumerator_61061.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_abstractCategoryMethodForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1554))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1554)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1554)).operator_concat (object->mAttribute_mAbstractCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1554))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1554)), var_selfType, object->mAttribute_mAbstractCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1556)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1552)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1551)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryMethodAST.mSlotID,
                                        categoryMethod_abstractCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryMethodAST_semanticAnalysis (defineCategoryMethod_abstractCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@categoryMethodAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryMethodAST * object = (const cPtr_categoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1571)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1576)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1576)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("inObject") ;
    var_selfObjectAccessor = GALGAS_string ("inObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1586)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1593))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1588)) ;
  {
  GALGAS_typedAttributeList temp_1 ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1599)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1599)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1599)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1599)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1599)).boolEnum () ;
  if (kBoolTrue == test_2) {
    temp_1 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1600)) ;
  }else if (kBoolFalse == test_2) {
    temp_1 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1601)) ;
  }
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mCategoryMethodFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1598)), temp_1, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1603)), var_selfObjectAccessor, object->mAttribute_mCategoryMethodInstructionList, object->mAttribute_mEndOfMethodLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1595)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_categoryMethodForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1615))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1615)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1615)).operator_concat (object->mAttribute_mCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1615))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1615)), var_selfType, object->mAttribute_mCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1617)), var_implementedAsFunction, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1620)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1613)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1611)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryMethodAST.mSlotID,
                                        categoryMethod_categoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryMethodAST_semanticAnalysis (defineCategoryMethod_categoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@overridingCategoryMethodAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryMethodAST * object = (const cPtr_overridingCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1635)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1637)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1637)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1638))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1638)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1638))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1638)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1642)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1643)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1645)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1645)).isValid ()) {
    uint32_t variant_64874 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1645)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1645)).uintValue () ;
    bool loop_64874 = true ;
    while (loop_64874) {
      loop_64874 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).isValid () ;
      if (loop_64874) {
        loop_64874 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1646)).boolValue () ;
      }
      if (loop_64874 && (0 == variant_64874)) {
        loop_64874 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1645)) ;
      }
      if (loop_64874) {
        variant_64874 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1647)).reader_hasKey (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1647)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1647)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_65183_0 ; // Joker input parameter
          GALGAS_bool joker_65236_0 ; // Joker input parameter
          GALGAS_string joker_65250_0 ; // Joker input parameter
          var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1649)).method_searchKey (object->mAttribute_mOverridingCategoryMethodName, joker_65183_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_65236_0, var_qualifier, joker_65250_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1649)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1650)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1651)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1654)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this method is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1657)) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1660)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 1667))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1662)) ;
  {
  GALGAS_typedAttributeList temp_6 ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1673)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1673)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1673)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1673)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1673)).boolEnum () ;
  if (kBoolTrue == test_7) {
    temp_6 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1674)) ;
  }else if (kBoolFalse == test_7) {
    temp_6 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1675)) ;
  }
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mOverridingCategoryMethodFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1672)), temp_6, GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1677)), GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryMethodInstructionList, object->mAttribute_mEndOfMethodLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1669)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryMethodName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1688)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1686)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_overridingCategoryMethodForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("method-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1698))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1698)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1698)).operator_concat (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1698))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1698)), var_selfType, var_baseTypeName, object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1701)), var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1703)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1696)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1694)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryMethodAST.mSlotID,
                                        categoryMethod_overridingCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryMethodAST_semanticAnalysis (defineCategoryMethod_overridingCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryMethodAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                 GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryMethodAST * object = (const cPtr_overridingAbstractCategoryMethodAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryMethodAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1718)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1720)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1720)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1721))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1721)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1721))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1721)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1722)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category method: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1723))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1723)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1723))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1723)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1727)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1728)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1730)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1730)).isValid ()) {
    uint32_t variant_68359 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1730)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1730)).uintValue () ;
    bool loop_68359 = true ;
    while (loop_68359) {
      loop_68359 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).isValid () ;
      if (loop_68359) {
        loop_68359 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1731)).boolValue () ;
      }
      if (loop_68359 && (0 == variant_68359)) {
        loop_68359 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1730)) ;
      }
      if (loop_68359) {
        variant_68359 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1732)).reader_hasKey (object->mAttribute_mOverridingCategoryMethodName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1732)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1732)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_68668_0 ; // Joker input parameter
          GALGAS_bool joker_68721_0 ; // Joker input parameter
          GALGAS_string joker_68735_0 ; // Joker input parameter
          var_superType.reader_mInstanceMethodMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1734)).method_searchKey (object->mAttribute_mOverridingCategoryMethodName, joker_68668_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_68721_0, var_qualifier, joker_68735_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1734)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1735)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1736)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1739)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mOverridingCategoryMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this reader is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1742)) ;
  }
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1745)) ;
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration ;
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inSemanticContext, object->mAttribute_mOverridingCategoryMethodFormalParameterList, var_variableMap, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1747)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryMethodName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1757)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1755)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryMethodAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryMethodAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryMethodAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@abstractCategoryModifierAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryModifierAST * object = (const cPtr_abstractCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1772)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1774)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1774)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1775))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1775)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1775))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1775)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1776)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1777))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1777)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1777))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1777)) ;
    }
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1780)) ;
  cEnumerator_formalParameterListAST enumerator_70656 (object->mAttribute_mAbstractCategoryModifierFormalParameterList, kEnumeration_up) ;
  while (enumerator_70656.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (enumerator_70656.current_mFormalArgumentPassingMode (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_70656.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1784)), enumerator_70656.current_mFormalArgumentName (HERE), enumerator_70656.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1786))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1782)) ;
    enumerator_70656.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_abstractCategoryModifierForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("setter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1794))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1794)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1794)).operator_concat (object->mAttribute_mAbstractCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1794))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1794)), var_selfType, object->mAttribute_mAbstractCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1796)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1792)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1790)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryModifierAST.mSlotID,
                                        categoryMethod_abstractCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryModifierAST_semanticAnalysis (defineCategoryMethod_abstractCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@categoryModifierAST semanticAnalysis'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                 const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                 GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryModifierAST * object = (const cPtr_categoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1811)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1816)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1816)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("ioObject") ;
    var_selfObjectAccessor = GALGAS_string ("ioObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1826)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, var_selfType  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1828)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mCategoryModifierFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1838)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1839)), var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1840)), var_selfObjectAccessor, object->mAttribute_mCategoryModifierInstructionList, object->mAttribute_mEndOfModifierLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1835)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_categoryModifierForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("setter-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1852))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1852)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1852)).operator_concat (object->mAttribute_mCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1852))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1852)), var_selfType, object->mAttribute_mCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1854)), var_implementedAsFunction, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1857)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1850)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1848)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryModifierAST.mSlotID,
                                        categoryMethod_categoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryModifierAST_semanticAnalysis (defineCategoryMethod_categoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingCategoryModifierAST semanticAnalysis' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                           const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                           const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                           GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                           C_Compiler * inCompiler
                                                                           COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryModifierAST * object = (const cPtr_overridingCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1872)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1874)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1874)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1875))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1875)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1875))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1875)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1879)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1880)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1882)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1882)).isValid ()) {
    uint32_t variant_74308 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1882)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1882)).uintValue () ;
    bool loop_74308 = true ;
    while (loop_74308) {
      loop_74308 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).isValid () ;
      if (loop_74308) {
        loop_74308 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1883)).boolValue () ;
      }
      if (loop_74308 && (0 == variant_74308)) {
        loop_74308 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1882)) ;
      }
      if (loop_74308) {
        variant_74308 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1884)).reader_hasKey (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1884)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1884)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_74609_0 ; // Joker input parameter
          GALGAS_bool joker_74632_0 ; // Joker input parameter
          GALGAS_string joker_74646_0 ; // Joker input parameter
          var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1886)).method_searchKey (object->mAttribute_mOverridingCategoryModifierName, joker_74609_0, var_inheritedSignature, joker_74632_0, var_qualifier, joker_74646_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1886)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1887)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1888)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1891)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this modifier is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1894)) ;
  }
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1897)) ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), var_selfType  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1899)) ;
  {
  routine_analyzeRoutineBody (var_analysisContext, object->mAttribute_mOverridingCategoryModifierFormalParameterList, GALGAS_localConstantList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1909)), GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1910)), var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1911)), GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryModifierInstructionList, object->mAttribute_mEndOfModifierLocation, var_semanticInstructionListForGeneration, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1906)) ;
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryModifierName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1922)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1920)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_overridingCategoryModifierForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("setter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1932))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1932)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1932)).operator_concat (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1932))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1932)), object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1933)), var_baseTypeName, object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1935)), var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1937)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1930)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1928)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryModifierAST.mSlotID,
                                        categoryMethod_overridingCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryModifierAST_semanticAnalysis (defineCategoryMethod_overridingCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryModifierAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                   const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                   const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                   GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryModifierAST * object = (const cPtr_overridingAbstractCategoryModifierAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryModifierAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1952)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1954)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 1954)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1955))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1955)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1955))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1955)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1956)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category modifier: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1957))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1957)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1957))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1957)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1961)) ;
  GALGAS_formalParameterSignature var_inheritedSignature = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 1962)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1964)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1964)).isValid ()) {
    uint32_t variant_77586 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 1964)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1964)).uintValue () ;
    bool loop_77586 = true ;
    while (loop_77586) {
      loop_77586 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).isValid () ;
      if (loop_77586) {
        loop_77586 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1965)).boolValue () ;
      }
      if (loop_77586 && (0 == variant_77586)) {
        loop_77586 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 1964)) ;
      }
      if (loop_77586) {
        variant_77586 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1966)).reader_hasKey (object->mAttribute_mOverridingCategoryModifierName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 1966)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1966)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_77887_0 ; // Joker input parameter
          GALGAS_bool joker_77910_0 ; // Joker input parameter
          GALGAS_string joker_77924_0 ; // Joker input parameter
          var_superType.reader_mModifierMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1968)).method_searchKey (object->mAttribute_mOverridingCategoryModifierName, joker_77887_0, var_inheritedSignature, joker_77910_0, var_qualifier, joker_77924_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1968)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 1969)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1970)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1973)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mOverridingCategoryModifierName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this modifier is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1976)) ;
  }
  GALGAS_variableMap var_variableMap = GALGAS_variableMap::constructor_emptyMap (SOURCE_FILE ("semanticAnalysis.gSemantics", 1979)) ;
  GALGAS_formalParameterListForGeneration var_formalParameterListForGeneration ;
  {
  routine_buildLocalVariableMapAndSignature (constinArgument_inSemanticContext, object->mAttribute_mOverridingCategoryModifierFormalParameterList, var_variableMap, var_formalParameterListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1981)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkMethodSignatures (var_formalParameterListForGeneration, object->mAttribute_mOverridingCategoryModifierName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 1991)), var_inheritedSignature, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 1989)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryModifierAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryModifierAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryModifierAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@abstractCategoryReaderAST semanticAnalysis'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_abstractCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                       const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                       const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                       GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_abstractCategoryReaderAST * object = (const cPtr_abstractCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_abstractCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2006)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2008)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2008)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2009))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2009)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2009))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2009)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2010)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2011))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2011)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2011))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2011)) ;
    }
  }
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2014)) ;
  cEnumerator_formalInputParameterListAST enumerator_79849 (object->mAttribute_mAbstractCategoryReaderFormalInputParameterList, kEnumeration_up) ;
  while (enumerator_79849.hasCurrentObject ()) {
    var_formalParameterListForGeneration.addAssign_operation (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_79849.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2017)), enumerator_79849.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2018)), enumerator_79849.current_mFormalArgumentName (HERE), enumerator_79849.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2016)) ;
    enumerator_79849.gotoNextObject () ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_abstractCategoryReaderForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("getter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2028))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2028)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2028)).operator_concat (object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2028))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2028)), var_selfType, object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2030)), GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAbstractCategoryReaderReturnedTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2031)), var_formalParameterListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2026)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2024)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_abstractCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_abstractCategoryReaderAST.mSlotID,
                                        categoryMethod_abstractCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCategoryReaderAST_semanticAnalysis (defineCategoryMethod_abstractCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Overriding category method '@categoryReaderAST semanticAnalysis'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_categoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                               const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                               GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                               C_Compiler * inCompiler
                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_categoryReaderAST * object = (const cPtr_categoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_categoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2048)) ;
  GALGAS_string var_selfObjectName ;
  GALGAS_string var_selfObjectAccessor ;
  GALGAS_bool var_implementedAsFunction ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2053)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2053)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_selfObjectName = GALGAS_string ("object") ;
    var_selfObjectAccessor = GALGAS_string ("object->") ;
    var_implementedAsFunction = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    var_selfObjectName = GALGAS_string ("inObject") ;
    var_selfObjectAccessor = GALGAS_string ("inObject.") ;
    var_implementedAsFunction = GALGAS_bool (true) ;
  }
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, var_selfObjectName, GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2068))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2063)) ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_returnVariableCppName ;
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  {
  GALGAS_typedAttributeList temp_1 ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2077)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2077)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2077)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2077)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2077)).boolEnum () ;
  if (kBoolTrue == test_2) {
    temp_1 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2078)) ;
  }else if (kBoolFalse == test_2) {
    temp_1 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2079)) ;
  }
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mCategoryReaderFormalInputParameterList, temp_1, var_selfObjectAccessor, object->mAttribute_mCategoryReaderInstructionList, object->mAttribute_mCategoryReaderReturnedVariableName, object->mAttribute_mCategoryReaderReturnedTypeName, object->mAttribute_mEndOfReaderLocation, var_formalParameterListForGeneration, var_returnType, var_returnVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2074)) ;
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_categoryReaderForGeneration::constructor_new (GALGAS_bool (true), GALGAS_string ("getter-").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2096))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2096)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2096)).operator_concat (object->mAttribute_mCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2096))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2096)), var_selfType, object->mAttribute_mCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2098)), var_implementedAsFunction, var_returnType, var_returnVariableCppName, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2103)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2094)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2092)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_categoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_categoryReaderAST.mSlotID,
                                        categoryMethod_categoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_categoryReaderAST_semanticAnalysis (defineCategoryMethod_categoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@overridingCategoryReaderAST semanticAnalysis'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                         const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                         const GALGAS_predefinedTypes constinArgument_inPredefinedTypes,
                                                                         GALGAS_semanticDeclarationSortedListForGeneration & ioArgument_ioSemanticDeclarationListForGeneration,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingCategoryReaderAST * object = (const cPtr_overridingCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2118)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2120)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2120)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mOverridingCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2121))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2121)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2121))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2121)) ;
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2125)) ;
  GALGAS_unifiedTypeMapProxyAndParameterList var_inheritedSignature = GALGAS_unifiedTypeMapProxyAndParameterList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2126)) ;
  GALGAS_unifiedTypeMapProxy var_inheritedReturnType = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2127)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2129)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2129)).isValid ()) {
    uint32_t variant_84002 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2129)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2129)).uintValue () ;
    bool loop_84002 = true ;
    while (loop_84002) {
      loop_84002 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).isValid () ;
      if (loop_84002) {
        loop_84002 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2130)).boolValue () ;
      }
      if (loop_84002 && (0 == variant_84002)) {
        loop_84002 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 2129)) ;
      }
      if (loop_84002) {
        variant_84002 -- ;
        const enumGalgasBool test_2 = var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2131)).reader_hasKey (object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2131)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2131)).boolEnum () ;
        if (kBoolTrue == test_2) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_84276_0 ; // Joker input parameter
          GALGAS_bool joker_84353_0 ; // Joker input parameter
          GALGAS_string joker_84430_0 ; // Joker input parameter
          var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2132)).method_searchKey (object->mAttribute_mOverridingCategoryReaderName, joker_84276_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_84353_0, var_inheritedReturnType, var_qualifier, joker_84430_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2132)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 2142)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2143)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2146)) ;
      }
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    GALGAS_location location_5 (object->mAttribute_mOverridingCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_5, GALGAS_string ("this reader is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2149)) ;
  }
  GALGAS_analysisContext var_analysisContext = GALGAS_analysisContext::constructor_new (constinArgument_inSemanticContext, constinArgument_inPredefinedTypes, var_selfType, GALGAS_string ("object"), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2157))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2152)) ;
  GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration ;
  GALGAS_unifiedTypeMapProxy var_returnType ;
  GALGAS_string var_returnVariableCppName ;
  GALGAS_semanticInstructionListForGeneration var_semanticInstructionListForGeneration ;
  {
  GALGAS_typedAttributeList temp_6 ;
  const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2163)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2163)))).operator_or (GALGAS_bool (kIsEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2163)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2163)))) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2163)).boolEnum () ;
  if (kBoolTrue == test_7) {
    temp_6 = var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2164)) ;
  }else if (kBoolFalse == test_7) {
    temp_6 = GALGAS_typedAttributeList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2165)) ;
  }
  routine_analyzeFunctionBody (var_analysisContext, object->mAttribute_mOverridingCategoryReaderFormalInputParameterList, temp_6, GALGAS_string ("object->"), object->mAttribute_mOverridingCategoryReaderInstructionList, object->mAttribute_mOverridingCategoryReaderReturnedVariableName, object->mAttribute_mOverridingCategoryReaderReturnedTypeName, object->mAttribute_mEndOfReaderLocation, var_formalParameterListForGeneration, var_returnType, var_returnVariableCppName, var_semanticInstructionListForGeneration, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2159)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    {
    routine_checkReaderSignatures (var_formalParameterListForGeneration, var_returnType, object->mAttribute_mOverridingCategoryReaderName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 2182)), var_inheritedSignature, var_inheritedReturnType, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2179)) ;
    }
  }
  ioArgument_ioSemanticDeclarationListForGeneration.addAssign_operation (GALGAS_overrideCategoryReaderForGeneration::constructor_new (GALGAS_bool (false), GALGAS_string ("getter-").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2193))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2193)).operator_concat (GALGAS_string ("-")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2193)).operator_concat (object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2193))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2193)), var_selfType, var_baseTypeName, object->mAttribute_mOverridingCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2196)), var_returnType, var_returnVariableCppName, var_formalParameterListForGeneration, var_selfType.reader_mAllTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2200)), var_semanticInstructionListForGeneration  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2191)), GALGAS_string ("~")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2189)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingCategoryReaderAST.mSlotID,
                                        categoryMethod_overridingCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingCategoryReaderAST_semanticAnalysis (defineCategoryMethod_overridingCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@overridingAbstractCategoryReaderAST semanticAnalysis'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (const cPtr_semanticDeclarationAST * inObject,
                                                                                 const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                                                 const GALGAS_predefinedTypes /* constinArgument_inPredefinedTypes */,
                                                                                 GALGAS_semanticDeclarationSortedListForGeneration & /* ioArgument_ioSemanticDeclarationListForGeneration */,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_overridingAbstractCategoryReaderAST * object = (const cPtr_overridingAbstractCategoryReaderAST *) inObject ;
  macroValidSharedObject (object, cPtr_overridingAbstractCategoryReaderAST) ;
  GALGAS_unifiedTypeMapProxy var_selfType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2215)) ;
  GALGAS_unifiedTypeMapProxy var_returnType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, object->mAttribute_mAbstractCategoryReaderReturnedTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2217)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_selfType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2219)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticAnalysis.gSemantics", 2219)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("cannot declare a category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2220))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2220)).operator_concat (GALGAS_string ("' is not a class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2220))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2220)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = var_selfType.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2221)).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("cannot declare an abstract category reader: '@").operator_concat (var_selfType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2222))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2222)).operator_concat (GALGAS_string ("' is not an abstract class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2222))  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2222)) ;
    }
  }
  GALGAS_string var_baseTypeName = GALGAS_string::makeEmptyString () ;
  GALGAS_unifiedTypeMapProxy var_superType = var_selfType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2226)) ;
  GALGAS_unifiedTypeMapProxyAndParameterList var_inheritedSignature = GALGAS_unifiedTypeMapProxyAndParameterList::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2227)) ;
  GALGAS_unifiedTypeMapProxy var_inheritedReturnType = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticAnalysis.gSemantics", 2228)) ;
  GALGAS_location var_inheritedDeclarationLocation = inCompiler->here () ;
  if (constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)).isValid ()) {
    uint32_t variant_87917 = constinArgument_inSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)).uintValue () ;
    bool loop_87917 = true ;
    while (loop_87917) {
      loop_87917 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).isValid () ;
      if (loop_87917) {
        loop_87917 = var_superType.reader_isNull (SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).operator_not (SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).operator_and (GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2231)).boolValue () ;
      }
      if (loop_87917 && (0 == variant_87917)) {
        loop_87917 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticAnalysis.gSemantics", 2230)) ;
      }
      if (loop_87917) {
        variant_87917 -- ;
        const enumGalgasBool test_4 = var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2232)).reader_hasKey (object->mAttribute_mAbstractCategoryReaderName.reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2232)) COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2232)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_methodQualifier var_qualifier ;
          GALGAS_methodKind joker_88222_0 ; // Joker input parameter
          GALGAS_bool joker_88299_0 ; // Joker input parameter
          GALGAS_string joker_88358_0 ; // Joker input parameter
          var_superType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2234)).method_searchKey (object->mAttribute_mAbstractCategoryReaderName, joker_88222_0, var_inheritedSignature, var_inheritedDeclarationLocation, joker_88299_0, var_inheritedReturnType, var_qualifier, joker_88358_0, inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2234)) ;
          const enumGalgasBool test_5 = GALGAS_bool (kIsInfOrEqual, var_qualifier.objectCompare (GALGAS_methodQualifier::constructor_isBasicFinal (SOURCE_FILE ("semanticAnalysis.gSemantics", 2244)))).boolEnum () ;
          if (kBoolTrue == test_5) {
            var_baseTypeName = var_superType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2245)) ;
          }
        }
        var_superType = var_superType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2248)) ;
      }
    }
  }
  const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_location location_7 (object->mAttribute_mAbstractCategoryReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("this reader is not declared by a super class")  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2251)) ;
  }
  const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_baseTypeName.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_8) {
    GALGAS_formalInputParameterListForGeneration var_formalParameterListForGeneration = GALGAS_formalInputParameterListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticAnalysis.gSemantics", 2255)) ;
    cEnumerator_formalInputParameterListAST enumerator_88880 (object->mAttribute_mAbstractCategoryReaderFormalInputParameterList, kEnumeration_up) ;
    while (enumerator_88880.hasCurrentObject ()) {
      var_formalParameterListForGeneration.addAssign_operation (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inSemanticContext.mAttribute_mTypeMap, enumerator_88880.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2258)), enumerator_88880.current_mFormalArgumentName (HERE).reader_string (SOURCE_FILE ("semanticAnalysis.gSemantics", 2259)), enumerator_88880.current_mFormalArgumentName (HERE), enumerator_88880.current_mIsConstant (HERE)  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2257)) ;
      enumerator_88880.gotoNextObject () ;
    }
    {
    routine_checkReaderSignatures (var_formalParameterListForGeneration, var_returnType, object->mAttribute_mAbstractCategoryReaderName.reader_location (SOURCE_FILE ("semanticAnalysis.gSemantics", 2267)), var_inheritedSignature, var_inheritedReturnType, var_inheritedDeclarationLocation, inCompiler  COMMA_SOURCE_FILE ("semanticAnalysis.gSemantics", 2264)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (void) {
  enterCategoryMethod_semanticAnalysis (kTypeDescriptor_GALGAS_overridingAbstractCategoryReaderAST.mSlotID,
                                        categoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_overridingAbstractCategoryReaderAST_semanticAnalysis (defineCategoryMethod_overridingAbstractCategoryReaderAST_semanticAnalysis, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element::GALGAS_attributeIndexMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mAttributeTypeIndex () {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element::~ GALGAS_attributeIndexMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element::GALGAS_attributeIndexMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                          const GALGAS_unifiedTypeMapProxy & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mAttributeTypeIndex (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element GALGAS_attributeIndexMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_attributeIndexMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                              GALGAS_unifiedTypeMapProxy::constructor_null (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element GALGAS_attributeIndexMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                          const GALGAS_unifiedTypeMapProxy & inOperand1 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeIndexMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_attributeIndexMap_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_attributeIndexMap_2E_element::objectCompare (const GALGAS_attributeIndexMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mAttributeTypeIndex.objectCompare (inOperand.mAttribute_mAttributeTypeIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_attributeIndexMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mAttributeTypeIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mAttributeTypeIndex.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_attributeIndexMap_2E_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @attributeIndexMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mAttributeTypeIndex.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_attributeIndexMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_attributeIndexMap_2E_element::reader_mAttributeTypeIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mAttributeTypeIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @attributeIndexMap.element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_attributeIndexMap_2E_element ("attributeIndexMap.element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_attributeIndexMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_attributeIndexMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_attributeIndexMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_attributeIndexMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_attributeIndexMap_2E_element GALGAS_attributeIndexMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_attributeIndexMap_2E_element result ;
  const GALGAS_attributeIndexMap_2E_element * p = (const GALGAS_attributeIndexMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_attributeIndexMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("attributeIndexMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element::GALGAS_constantIndexMap_2E_element (void) :
mAttribute_lkey (),
mAttribute_mIndex () {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element::~ GALGAS_constantIndexMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element::GALGAS_constantIndexMap_2E_element (const GALGAS_lstring & inOperand0,
                                                                        const GALGAS_uint & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mIndex (inOperand1) {
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element GALGAS_constantIndexMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_constantIndexMap_2E_element (GALGAS_lstring::constructor_default (HERE),
                                             GALGAS_uint::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element GALGAS_constantIndexMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                        const GALGAS_uint & inOperand1 
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_constantIndexMap_2E_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_constantIndexMap_2E_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_constantIndexMap_2E_element::objectCompare (const GALGAS_constantIndexMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mIndex.objectCompare (inOperand.mAttribute_mIndex) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_constantIndexMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mIndex.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mIndex.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_constantIndexMap_2E_element::description (C_String & ioString,
                                                      const int32_t inIndentation) const {
  ioString << "<struct @constantIndexMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mIndex.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_constantIndexMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_uint GALGAS_constantIndexMap_2E_element::reader_mIndex (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mIndex ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @constantIndexMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_constantIndexMap_2E_element ("constantIndexMap.element",
                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_constantIndexMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_constantIndexMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_constantIndexMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_constantIndexMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_constantIndexMap_2E_element GALGAS_constantIndexMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_constantIndexMap_2E_element result ;
  const GALGAS_constantIndexMap_2E_element * p = (const GALGAS_constantIndexMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_constantIndexMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("constantIndexMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element::GALGAS_insertMethodMap_2E_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element::~ GALGAS_insertMethodMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element::GALGAS_insertMethodMap_2E_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element GALGAS_insertMethodMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_insertMethodMap_2E_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element GALGAS_insertMethodMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_insertMethodMap_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_insertMethodMap_2E_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_insertMethodMap_2E_element::objectCompare (const GALGAS_insertMethodMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_insertMethodMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_insertMethodMap_2E_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @insertMethodMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_insertMethodMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @insertMethodMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_insertMethodMap_2E_element ("insertMethodMap.element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_insertMethodMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_insertMethodMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_insertMethodMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_insertMethodMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_insertMethodMap_2E_element GALGAS_insertMethodMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_insertMethodMap_2E_element result ;
  const GALGAS_insertMethodMap_2E_element * p = (const GALGAS_insertMethodMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_insertMethodMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("insertMethodMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element::GALGAS_searchMethodMap_2E_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element::~ GALGAS_searchMethodMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element::GALGAS_searchMethodMap_2E_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element GALGAS_searchMethodMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_searchMethodMap_2E_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element GALGAS_searchMethodMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_searchMethodMap_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_searchMethodMap_2E_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_searchMethodMap_2E_element::objectCompare (const GALGAS_searchMethodMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_searchMethodMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_searchMethodMap_2E_element::description (C_String & ioString,
                                                     const int32_t inIndentation) const {
  ioString << "<struct @searchMethodMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_searchMethodMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                        @searchMethodMap.element type                        *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_searchMethodMap_2E_element ("searchMethodMap.element",
                                                   NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_searchMethodMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_searchMethodMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_searchMethodMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_searchMethodMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_searchMethodMap_2E_element GALGAS_searchMethodMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                    C_Compiler * inCompiler
                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_searchMethodMap_2E_element result ;
  const GALGAS_searchMethodMap_2E_element * p = (const GALGAS_searchMethodMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_searchMethodMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("searchMethodMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element::GALGAS_declaredMethodMap_2E_element (void) :
mAttribute_lkey () {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element::~ GALGAS_declaredMethodMap_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element::GALGAS_declaredMethodMap_2E_element (const GALGAS_lstring & inOperand0) :
mAttribute_lkey (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element GALGAS_declaredMethodMap_2E_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_declaredMethodMap_2E_element (GALGAS_lstring::constructor_default (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element GALGAS_declaredMethodMap_2E_element::constructor_new (const GALGAS_lstring & inOperand0 
                                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_declaredMethodMap_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_declaredMethodMap_2E_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_declaredMethodMap_2E_element::objectCompare (const GALGAS_declaredMethodMap_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_declaredMethodMap_2E_element::isValid (void) const {
  return mAttribute_lkey.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap_2E_element::drop (void) {
  mAttribute_lkey.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_declaredMethodMap_2E_element::description (C_String & ioString,
                                                       const int32_t inIndentation) const {
  ioString << "<struct @declaredMethodMap.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring GALGAS_declaredMethodMap_2E_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                       @declaredMethodMap.element type                       *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_declaredMethodMap_2E_element ("declaredMethodMap.element",
                                                     NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_declaredMethodMap_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_declaredMethodMap_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_declaredMethodMap_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_declaredMethodMap_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_declaredMethodMap_2E_element GALGAS_declaredMethodMap_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_declaredMethodMap_2E_element result ;
  const GALGAS_declaredMethodMap_2E_element * p = (const GALGAS_declaredMethodMap_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_declaredMethodMap_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("declaredMethodMap.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


