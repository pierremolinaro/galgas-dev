//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       march 29th, 2010, at 14h3'8"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_Compiler & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2501 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2501.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (38))) COMMA_SOURCE_FILE_AT_LINE (40)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (41)) ;
  }else if (cond_2501.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2534 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2534 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2569 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2569 = NULL ;
      while (((operand_2534 = enumerator_2534.nextObject ()))
          && ((operand_2569 = enumerator_2569.nextObject ()))) {
        macroValidPointer (operand_2534) ;
        macroValidPointer (operand_2569) ;
        const GGS_bool cond_3012 = (operand_2534->mFormalParameterPassingMode).operator_isNotEqual (operand_2569->mFormalParameterPassingMode) ;
        if (cond_3012.isBuiltAndTrue ()) {
          operand_2569->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2569->mFormalParameterName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2569->mFormalParameterPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (45)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2534->mFormalParameterPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (46))) COMMA_SOURCE_FILE_AT_LINE (47)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (48)) ;
        }
        const GGS_bool cond_3428 = (operand_2569->mFormalParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))).operator_isNotEqual (operand_2534->mParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) ;
        if (cond_3428.isBuiltAndTrue ()) {
          operand_2569->mFormalParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2569->mFormalParameterName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2569->mFormalParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2534->mParameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (52)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_3923,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticDeclarationListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3923 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_4211,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4211 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_4211->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (77))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_4681,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4681 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_4883 (operand_4681->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_4883 = NULL ;
      while (((operand_4883 = enumerator_4883.nextObject ()))) {
        macroValidPointer (operand_4883) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4883->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (92)), operand_4883->mAttributeName) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4681->mListTypeName COMMA_SOURCE_FILE_AT_LINE (97)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (96))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_attributeIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_attributeIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_5662,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5662 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeIndexMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_5931 (operand_5662->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_5931 = NULL ;
      while (((operand_5931 = enumerator_5931.nextObject ()))) {
        macroValidPointer (operand_5931) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5931->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (122)), operand_5931->mAttributeName) ;
        var_cas_attributeIndexMap.modifier_insertKey (inLexique, operand_5931->mAttributeName, var_cas_attributeIndexMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (125)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_6344 (operand_5662->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_6344 = NULL ;
      while (((operand_6344 = enumerator_6344.nextObject ()))) {
        macroValidPointer (operand_6344) ;
        GGS_uint  var_cas_attributeIndex ;
        const GGS_attributeIndexMap  temp_6407 = var_cas_attributeIndexMap ;
        if (temp_6407.isBuilt ()) {
          temp_6407 (HERE)->method_searchKey (inLexique, operand_6344->mSortedAttributeName, var_cas_attributeIndex COMMA_SOURCE_FILE_AT_LINE (132)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_attributeIndex, operand_6344->mAscending) ;
        const GGS_bool cond_6691 = var_cas_attributesUsedForSorting.reader_hasKey (operand_6344->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        if (cond_6691.isBuiltAndTrue ()) {
          operand_6344->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_6344->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (136)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_6344->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5662->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (141)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (140))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_7173,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7173 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_7375 (operand_7173->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_7375 = NULL ;
      while (((operand_7375 = enumerator_7375.nextObject ()))) {
        macroValidPointer (operand_7375) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7375->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (157)), operand_7375->mAttributeName) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7173->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (162)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (161))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@genericTypeTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_genericTypeTypeAST * operand_7879,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7879 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_genericTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_7879->mTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (173))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_8337,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8337 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8564 (operand_8337->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8564 = NULL ;
      while (((operand_8564 = enumerator_8564.nextObject ()))) {
        macroValidPointer (operand_8564) ;
        var_cas_typedAttributeList.addAssign_operation (GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8564->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (188)), operand_8564->mAttributeName) ;
      }
    }
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_8925 = (operand_8337->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))).operator_isEqual (GGS_string ("")) ;
    if (cond_8925.isBuiltAndTrue ()) {
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
    }else if (cond_8925.isBuiltAndFalse ()) {
      GGS_bool automatic_var_9022_0 ;
      GGS_unifiedTypeMapIndex  automatic_var_9022_1 ;
      GGS_typeKindEnum automatic_var_9022_2 ;
      GGS_typedAttributeList  automatic_var_9022_3 ;
      GGS_typedAttributeList  automatic_var_9022_4 ;
      GGS_constructorMap  automatic_var_9022_5 ;
      GGS_readerMap  automatic_var_9022_6 ;
      GGS_modifierMap  automatic_var_9022_7 ;
      GGS_classMethodMap  automatic_var_9022_8 ;
      GGS_enumerationDescriptorList  automatic_var_9022_9 ;
      GGS_uint  automatic_var_9022_10 ;
      GGS_unifiedTypeMapIndexList  automatic_var_9022_11 ;
      GGS_unifiedTypeMapIndexList  automatic_var_9022_12 ;
      GGS_nativeAttributeList  automatic_var_9022_13 ;
      const GGS_unifiedTypeMap  temp_8968 = var_cas_inSemanticContext.mTypeMap ;
      if (temp_8968.isBuilt ()) {
        temp_8968 (HERE)->method_searchKey (inLexique, operand_8337->mSuperClassName, automatic_var_9022_0, automatic_var_9022_1, automatic_var_9022_2, automatic_var_9022_3, automatic_var_9022_4, automatic_var_9022_5, automatic_var_9022_6, automatic_var_9022_7, var_cas_inheritedInstanceMethodMap, automatic_var_9022_8, automatic_var_9022_9, automatic_var_9022_10, automatic_var_9022_11, automatic_var_9022_12, automatic_var_9022_13 COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
    GGS_unifiedTypeMapIndex  var_cas_superClassIndex ;
    const GGS_bool cond_9261 = (operand_8337->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (201))).operator_isEqual (GGS_string ("")) ;
    if (cond_9261.isBuiltAndTrue ()) {
      var_cas_superClassIndex = GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (202)) COMMA_SOURCE_FILE_AT_LINE (202)) ;
    }else if (cond_9261.isBuiltAndFalse ()) {
      var_cas_superClassIndex = GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8337->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_9509 (operand_8337->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_9509 = NULL ;
      while (((operand_9509 = enumerator_9509.nextObject ()))) {
        macroValidPointer (operand_9509) ;
        const GGS_bool cond_9695 = (operand_8337->mIsAbstract).operator_not () ;
        if (cond_9695.isBuiltAndTrue ()) {
          operand_9509->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (212)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_9840 (operand_9509->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_9840 = NULL ;
          while (((operand_9840 = enumerator_9840.nextObject ()))) {
            macroValidPointer (operand_9840) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_9840->mFormalParameterPassingMode, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9840->mFormalParameterTypeName COMMA_SOURCE_FILE_AT_LINE (218)), operand_9840->mFormalParameterName, operand_9840->mIsUnused) ;
          }
        }
        const GGS_bool cond_10559 = operand_9509->mIsOverriding ;
        if (cond_10559.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_10371_0 ;
          const GGS_instanceMethodMap  temp_10304 = var_cas_inheritedInstanceMethodMap ;
          if (temp_10304.isBuilt ()) {
            temp_10304 (HERE)->method_searchInheritedKey (inLexique, operand_9509->mMethodName, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_10371_0 COMMA_SOURCE_FILE_AT_LINE (227)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_9509->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (230)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (228)) ;
        }else if (cond_10559.isBuiltAndFalse ()) {
          const GGS_bool cond_10742 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_9509->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234))) ;
          if (cond_10742.isBuiltAndTrue ()) {
            operand_9509->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (236)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_9509->mIsOverriding, operand_9509->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_10958 (operand_8337->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_10958 = NULL ;
      while (((operand_10958 = enumerator_10958.nextObject ()))) {
        macroValidPointer (operand_10958) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_11101 (operand_10958->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_11101 = NULL ;
          while (((operand_11101 = enumerator_11101.nextObject ()))) {
            macroValidPointer (operand_11101) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_11101->mFormalParameterPassingMode, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_11101->mFormalParameterTypeName COMMA_SOURCE_FILE_AT_LINE (247)), operand_11101->mFormalParameterName, operand_11101->mIsUnused) ;
          }
        }
        const GGS_bool cond_11820 = operand_10958->mIsOverriding ;
        if (cond_11820.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_11632_0 ;
          const GGS_instanceMethodMap  temp_11565 = var_cas_inheritedInstanceMethodMap ;
          if (temp_11565.isBuilt ()) {
            temp_11565 (HERE)->method_searchInheritedKey (inLexique, operand_10958->mMethodName, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_11632_0 COMMA_SOURCE_FILE_AT_LINE (256)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_10958->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (259)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (257)) ;
        }else if (cond_11820.isBuiltAndFalse ()) {
          const GGS_bool cond_12003 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_10958->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263))) ;
          if (cond_12003.isBuiltAndTrue ()) {
            operand_10958->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (265)) ;
          }
        }
        var_cas_methodList.addAssign_operation (operand_10958->mIsOverriding, operand_10958->mMethodName, var_cas_formalParameterListForGeneration, GGS_semanticInstructionListForGeneration ::constructor_emptyList ()) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classDeclarationForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapIndex ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8337->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (275)), operand_8337->mIsAbstract, operand_8337->mClassTypeName, var_cas_superClassIndex, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList COMMA_SOURCE_FILE_AT_LINE (274))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_13224 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_13224 = NULL ;
    while (((operand_13224 = enumerator_13224.nextObject ()))) {
      macroValidPointer (operand_13224) ;
      const GGS_semanticDeclarationAST  temp_13277 = operand_13224->mSemanticDeclaration ;
      if (temp_13277.isBuilt ()) {
        typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (temp_13277.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_13277 (HERE), var_cas_inSemanticContext, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (299)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__genericTypeTypeAST__performSemanticAnalysis, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

