//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 29th, 2010, at 14h3'39"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "templateGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkMethodSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_CompilerEx & inLexique,
                                const GGS_formalParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_formalParameterSignature   var_cas_inReferenceSignature,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMethodSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2809 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_2809.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this method declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).operator_concat (GGS_string (" formal parameter(s), but overriden method declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (47)) ;
  }else if (cond_2809.isBuiltAndFalse ()) {
    {
      GGS_formalParameterSignature::cEnumerator enumerator_2842 (var_cas_inReferenceSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_2842 = NULL ;
      GGS_formalParameterListForGeneration::cEnumerator enumerator_2877 (var_cas_inTestedSignature, true) ;
      const GGS_formalParameterListForGeneration::cElement * operand_2877 = NULL ;
      while (((operand_2842 = enumerator_2842.nextObject ()))
          && ((operand_2877 = enumerator_2877.nextObject ()))) {
        macroValidPointer (operand_2842) ;
        macroValidPointer (operand_2877) ;
        const GGS_bool cond_3314 = (operand_2842->mFormalArgumentPassingMode).operator_isNotEqual (operand_2877->mFormalArgumentPassingMode) ;
        if (cond_3314.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter is declared as "))).operator_concat (operand_2877->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string (", but overriden method declares it as "))).operator_concat (operand_2842->mFormalArgumentPassingMode.reader_formalArgumentMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (54)) ;
        }
        const GGS_bool cond_3718 = (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))).operator_isNotEqual (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (55))) ;
        if (cond_3718.isBuiltAndTrue ()) {
          operand_2877->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_2877->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_2877->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (57)))).operator_concat (GGS_string ("' type, but overriden method declares with the '@"))).operator_concat (operand_2842->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (58)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (59)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden method is declared here") COMMA_SOURCE_FILE_AT_LINE (60)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMethodSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "checkReaderSignatures"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkReaderSignatures (C_CompilerEx & inLexique,
                                const GGS_formalInputParameterListForGeneration   var_cas_inTestedSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inReturnType,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_unifiedTypeMapProxyList   var_cas_inReferenceSignature,
                                const GGS_unifiedTypeMapProxy   var_cas_inInheritedReturnType,
                                const GGS_location   var_cas_inReferenceLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkReaderSignatures at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4756 = (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_isNotEqual (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
  if (cond_4756.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the return type is '@")).operator_concat (var_cas_inReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string ("', but overriden reader names '@"))).operator_concat (var_cas_inInheritedReturnType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (82)))).operator_concat (GGS_string ("' as return type")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  const GGS_bool cond_5102 = (var_cas_inTestedSignature.reader_length ()).operator_isNotEqual (var_cas_inReferenceSignature.reader_length ()) ;
  if (cond_5102.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this reader declares ")).operator_concat (var_cas_inTestedSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (86)))).operator_concat (GGS_string (" formal parameter(s), but overriden reader declares "))).operator_concat (var_cas_inReferenceSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) COMMA_SOURCE_FILE_AT_LINE (89)) ;
    var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }else if (cond_5102.isBuiltAndFalse ()) {
    {
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5135 (var_cas_inReferenceSignature, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_5135 = NULL ;
      GGS_formalInputParameterListForGeneration::cEnumerator enumerator_5170 (var_cas_inTestedSignature, true) ;
      const GGS_formalInputParameterListForGeneration::cElement * operand_5170 = NULL ;
      while (((operand_5135 = enumerator_5135.nextObject ()))
          && ((operand_5170 = enumerator_5170.nextObject ()))) {
        macroValidPointer (operand_5135) ;
        macroValidPointer (operand_5170) ;
        const GGS_bool cond_5544 = (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isNotEqual (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
        if (cond_5544.isBuiltAndTrue ()) {
          operand_5170->mFormalArgumentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_5170->mFormalArgumentName)).operator_concat (GGS_string ("' formal parameter has the '@"))).operator_concat (operand_5170->mFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string ("' type, but overriden reader declares with the '@"))).operator_concat (operand_5135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (95)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
          var_cas_inReferenceLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("overriden reader is declared here") COMMA_SOURCE_FILE_AT_LINE (97)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkReaderSignatures\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__performSemanticAnalysis (C_CompilerEx &,
                                const cPtr_semanticDeclarationAST * operand_6039,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6039 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis> gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_predefinedTypeAST * operand_6379,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6379 != NULL) {
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_primitiveTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_6379->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_SOURCE_FILE_AT_LINE (123)), operand_6379->mPredefinedTypeName, operand_6379->mKind COMMA_SOURCE_FILE_AT_LINE (122)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_attributeIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_attributeIndexMap::e_attributeIndexMap (void) :
mAttributeTypeIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@attributeIndexMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ("attributeIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_attributeIndexMap::
elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_attributeIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_attributeIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mAttributeTypeIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_attributeIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_attributeIndexMap * ptr = dynamic_cast <const elementOf_GGS_attributeIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mAttributeTypeIndex.operator_isEqual (ptr->mInfo.mAttributeTypeIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_attributeIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_attributeIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_attributeIndexMap * info = (e_attributeIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_attributeIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_attributeIndexMap::
operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_attributeIndexMap info  ;
    info.mAttributeTypeIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mAttributeTypeIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_attributeIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_attributeIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_attributeIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_attributeIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_attributeIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_attributeIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @attributeIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_attributeIndexMap::cEnumerator::_mAttributeTypeIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mAttributeTypeIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_attributeIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_attributeIndexMap * p = NULL ;
    macroMyNew (p, GGS_attributeIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_attributeIndexMap * p = dynamic_cast <const GGS_attributeIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_attributeIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_attributeIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_attributeIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_attributeIndexMap GGS_attributeIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_attributeIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listDeclarationAST * operand_7245,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7245 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_7546 (operand_7245->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_7546 = NULL ;
      while (((operand_7546 = enumerator_7546.nextObject ()))) {
        macroValidPointer (operand_7546) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7546->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (150)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_7546->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_7546->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (155)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7245->mListTypeName COMMA_SOURCE_FILE_AT_LINE (158)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (157)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.performSemanticAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_8123,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8123 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_8439 (operand_8123->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_8439 = NULL ;
      while (((operand_8439 = enumerator_8439.nextObject ()))) {
        macroValidPointer (operand_8439) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8439->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (177)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_8439->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_8439->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }
    }
    GGS_stringset  var_cas_attributesUsedForSorting = GGS_stringset ::constructor_emptySet () ;
    GGS_sortDescriptorListForGeneration  var_cas_sortDescriptorList = GGS_sortDescriptorListForGeneration ::constructor_emptyList () ;
    {
      GGS_sortedListSortDescriptorListAST::cEnumerator enumerator_8833 (operand_8123->mSortDescriptorList, true) ;
      const GGS_sortedListSortDescriptorListAST::cElement * operand_8833 = NULL ;
      while (((operand_8833 = enumerator_8833.nextObject ()))) {
        macroValidPointer (operand_8833) ;
        GGS_unifiedTypeMapProxy  var_cas_type ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_8833->mSortedAttributeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (189)) ;
        }
        var_cas_sortDescriptorList.addAssign_operation (var_cas_type, operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)), operand_8833->mAscending) ;
        const GGS_bool cond_9191 = var_cas_attributesUsedForSorting.reader_hasKey (operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191))) ;
        if (cond_9191.isBuiltAndTrue ()) {
          operand_8833->mSortedAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_8833->mSortedAttributeName)).operator_concat (GGS_string ("' is already used for sorting")) COMMA_SOURCE_FILE_AT_LINE (193)) ;
        }
        var_cas_attributesUsedForSorting.addAssign_operation (operand_8833->mSortedAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_sortedListTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8123->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (198)), var_cas_typedAttributeList, var_cas_sortDescriptorList COMMA_SOURCE_FILE_AT_LINE (197)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_structDeclarationAST * operand_9681,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9681 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_9982 (operand_9681->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_9982 = NULL ;
      while (((operand_9982 = enumerator_9982.nextObject ()))) {
        macroValidPointer (operand_9982) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9982->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (217)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_9982->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_9982->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (222)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_structTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_9681->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (225)), var_cas_typedAttributeList COMMA_SOURCE_FILE_AT_LINE (224)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_constantIndexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_constantIndexMap::e_constantIndexMap (void) :
mIndex () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@constantIndexMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ("constantIndexMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_constantIndexMap::
elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_constantIndexMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_constantIndexMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mIndex.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_constantIndexMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_constantIndexMap * ptr = dynamic_cast <const elementOf_GGS_constantIndexMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mIndex.operator_isEqual (ptr->mInfo.mIndex)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_constantIndexMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_constantIndexMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_constantIndexMap * info = (e_constantIndexMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_constantIndexMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_constantIndexMap::
operator_isNotEqual (const GGS_constantIndexMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_uint & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_constantIndexMap info  ;
    info.mIndex = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mIndex ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_constantIndexMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_constantIndexMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_constantIndexMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_constantIndexMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_constantIndexMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_constantIndexMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @constantIndexMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_constantIndexMap::cEnumerator::_mIndex (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mIndex ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_constantIndexMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_constantIndexMap * p = NULL ;
    macroMyNew (p, GGS_constantIndexMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_constantIndexMap * p = dynamic_cast <const GGS_constantIndexMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_constantIndexMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_constantIndexMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_constantIndexMap ;
}

//---------------------------------------------------------------------------*

GGS_constantIndexMap GGS_constantIndexMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_uint & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_constantIndexMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_enumDeclarationAST * operand_10825,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10825 != NULL) {
    GGS_stringlist  var_cas_constantList = GGS_stringlist ::constructor_emptyList () ;
    GGS_constantIndexMap  var_cas_constantMap = GGS_constantIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_11128 (operand_10825->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_11128 = NULL ;
      while (((operand_11128 = enumerator_11128.nextObject ()))) {
        macroValidPointer (operand_11128) ;
        var_cas_constantList.addAssign_operation (operand_11128->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251))) ;
        var_cas_constantMap.modifier_insertKey (inLexique, operand_11128->mValue, var_cas_constantMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (252)) ;
      }
    }
    const GGS_stringset  var_cas_constantSet = var_cas_constantMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ;
    GGS_enumMessageListForGeneration  var_cas_enumMessageList = GGS_enumMessageListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_messageNameSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_enumMessageListAST::cEnumerator enumerator_11449 (operand_10825->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_11449 = NULL ;
      while (((operand_11449 = enumerator_11449.nextObject ()))) {
        macroValidPointer (operand_11449) ;
        const GGS_bool cond_11610 = var_cas_messageNameSet.reader_hasKey (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
        if (cond_11610.isBuiltAndTrue ()) {
          operand_11449->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this message is already declared for this enum type") COMMA_SOURCE_FILE_AT_LINE (261)) ;
        }
        var_cas_messageNameSet.addAssign_operation (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
        GGS_enumMessageAssociationSortedListForGeneration  var_cas_enumMessageAssociationSortedListForGeneration = GGS_enumMessageAssociationSortedListForGeneration ::constructor_emptySortedList () ;
        GGS_stringset  var_cas_usedConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationListAST::cEnumerator enumerator_11900 (operand_11449->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationListAST::cElement * operand_11900 = NULL ;
          while (((operand_11900 = enumerator_11900.nextObject ()))) {
            macroValidPointer (operand_11900) ;
            GGS_uint  var_cas_constantIndex ;
            if (var_cas_constantMap.isBuilt ()) {
              var_cas_constantMap (HERE)->method_searchKey (inLexique, operand_11900->mConstantName, var_cas_constantIndex COMMA_SOURCE_FILE_AT_LINE (267)) ;
            }
            var_cas_usedConstantSet.addAssign_operation (operand_11900->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))) ;
            var_cas_enumMessageAssociationSortedListForGeneration.addAssign_operation (var_cas_constantIndex, operand_11900->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), operand_11900->mMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
          }
        }
        const GGS_stringset  var_cas_missedConstantSet = var_cas_constantSet.substract_operation (inLexique, var_cas_usedConstantSet COMMA_SOURCE_FILE_AT_LINE (275)) ;
        {
          GGS_stringset::cEnumerator enumerator_12311 (var_cas_missedConstantSet, true) ;
          while (enumerator_12311.hasCurrentObject ()) {
            operand_11449->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_11449->mEnumMessageName)).operator_concat (GGS_string ("' message definition does not name the '"))).operator_concat (enumerator_12311._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (279)) ;
            enumerator_12311.next () ;
          }
        }
        var_cas_enumMessageList.addAssign_operation (operand_11449->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)), var_cas_enumMessageAssociationSortedListForGeneration) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_enumTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_10825->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (284)), var_cas_constantList, var_cas_enumMessageList COMMA_SOURCE_FILE_AT_LINE (283)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_listmapDeclarationAST * operand_12950,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12950 != NULL) {
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_bool automatic_var_13360_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_13360_1 ;
    GGS_attributeMap  automatic_var_13360_2 ;
    GGS_typedAttributeList  automatic_var_13360_3 ;
    GGS_constructorMap  automatic_var_13360_4 ;
    GGS_readerMap  automatic_var_13360_5 ;
    GGS_modifierMap  automatic_var_13360_6 ;
    GGS_instanceMethodMap  automatic_var_13360_7 ;
    GGS_classMethodMap  automatic_var_13360_8 ;
    GGS_enumerationDescriptorList  automatic_var_13360_9 ;
    GGS_uint  automatic_var_13360_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_13360_11 ;
    GGS_nativeAttributeList  automatic_var_13360_12 ;
    GGS_stringset  automatic_var_13360_13 ;
    GGS_lstringlist  automatic_var_13360_14 ;
    GGS_typedAttributeList  automatic_var_13360_15 ;
    GGS_mapSearchMethodListAST  automatic_var_13360_16 ;
    GGS_mapSearchMethodListAST  automatic_var_13360_17 ;
    GGS_withAccessorMap  automatic_var_13360_18 ;
    GGS_bool automatic_var_13360_19 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_12950->mAssociatedListTypeName, automatic_var_13360_0, automatic_var_13360_1, var_cas_typeKindEnum, var_cas_listTypeAttributeList, automatic_var_13360_2, automatic_var_13360_3, automatic_var_13360_4, automatic_var_13360_5, automatic_var_13360_6, automatic_var_13360_7, automatic_var_13360_8, automatic_var_13360_9, automatic_var_13360_10, automatic_var_13360_11, automatic_var_13360_12, automatic_var_13360_13, automatic_var_13360_14, automatic_var_13360_15, automatic_var_13360_16, automatic_var_13360_17, automatic_var_13360_18, automatic_var_13360_19 COMMA_SOURCE_FILE_AT_LINE (302)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_listmapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12950->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (305)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_12950->mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (306)), var_cas_listTypeAttributeList COMMA_SOURCE_FILE_AT_LINE (304)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@insertMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_insertMethodMap ("insertMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_insertMethodMap::
elementOf_GGS_insertMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_insertMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_insertMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_insertMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_insertMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_insertMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_insertMethodMap * info = (e_insertMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_insertMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_insertMethodMap::
operator_isNotEqual (const GGS_insertMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_insertMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_insertMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_insertMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_insertMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_insertMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_insertMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_insertMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @insertMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_insertMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_insertMethodMap * p = NULL ;
    macroMyNew (p, GGS_insertMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_insertMethodMap * p = dynamic_cast <const GGS_insertMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_insertMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_insertMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_insertMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_insertMethodMap GGS_insertMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_insertMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@searchMethodMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_searchMethodMap ("searchMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_searchMethodMap::
elementOf_GGS_searchMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_searchMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_searchMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_searchMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_searchMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_searchMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_searchMethodMap * info = (e_searchMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_searchMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_searchMethodMap::
operator_isNotEqual (const GGS_searchMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_searchMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_searchMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_searchMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_searchMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_searchMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_searchMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_searchMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @searchMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_searchMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_searchMethodMap * p = NULL ;
    macroMyNew (p, GGS_searchMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_searchMethodMap * p = dynamic_cast <const GGS_searchMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_searchMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_searchMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_searchMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_searchMethodMap GGS_searchMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_searchMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapDeclarationAST * operand_14185,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14185 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (334)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_14504 (operand_14185->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_14504 = NULL ;
      while (((operand_14504 = enumerator_14504.nextObject ()))) {
        macroValidPointer (operand_14504) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_14504->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (336)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_14504->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_14504->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (341)) ;
      }
    }
    GGS_insertMethodMap  var_cas_insertMethodMap = GGS_insertMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
    {
      GGS_insertMethodListAST::cEnumerator enumerator_14832 (operand_14185->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_14832 = NULL ;
      while (((operand_14832 = enumerator_14832.nextObject ()))) {
        macroValidPointer (operand_14832) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_14832->mMethodName COMMA_SOURCE_FILE_AT_LINE (346)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14962 (operand_14832->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_14962 = NULL ;
          while (((operand_14962 = enumerator_14962.nextObject ()))) {
            macroValidPointer (operand_14962) ;
            GGS_stringlist  var_cas_explodedArray = operand_14962->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_15137_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_15137_0 COMMA_SOURCE_FILE_AT_LINE (350)) ;
            {
              GGS_stringlist::cEnumerator enumerator_15167 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_15167 = NULL ;
              while (((operand_15167 = enumerator_15167.nextObject ()))) {
                macroValidPointer (operand_15167) ;
                const GGS_bool cond_15455 = (operand_15167->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_15455.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_15167->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (353)) ;
                  const GGS_bool cond_15438 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_15438.isBuiltAndTrue ()) {
                    operand_14832->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in an insert error message") COMMA_SOURCE_FILE_AT_LINE (356)) ;
                  }
                }
              }
            }
          }
        }
        {
          GGS_stringlist::cEnumerator enumerator_15583 (operand_14832->mShadowErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_15583 = NULL ;
          while (((operand_15583 = enumerator_15583.nextObject ()))) {
            macroValidPointer (operand_15583) ;
            GGS_stringlist  var_cas_explodedArray = operand_15583->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_15764_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_15764_0 COMMA_SOURCE_FILE_AT_LINE (363)) ;
            {
              GGS_stringlist::cEnumerator enumerator_15794 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_15794 = NULL ;
              while (((operand_15794 = enumerator_15794.nextObject ()))) {
                macroValidPointer (operand_15794) ;
                const GGS_bool cond_16081 = (operand_15794->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_16081.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_15794->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (366)) ;
                  const GGS_bool cond_16064 = ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K')))).operator_and ((var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('L')))) ;
                  if (cond_16064.isBuiltAndTrue ()) {
                    operand_14832->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message") COMMA_SOURCE_FILE_AT_LINE (369)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    GGS_searchMethodMap  var_cas_searchMethodMap = GGS_searchMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_16242 (operand_14185->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_16242 = NULL ;
      while (((operand_16242 = enumerator_16242.nextObject ()))) {
        macroValidPointer (operand_16242) ;
        const GGS_bool cond_16345 = (operand_14185->mMapStateList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_16345.isBuiltAndTrue ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_16242->mMethodName COMMA_SOURCE_FILE_AT_LINE (378)) ;
        }else if (cond_16345.isBuiltAndFalse ()) {
          var_cas_searchMethodMap.modifier_insertKey (inLexique, operand_16242->mMethodName COMMA_SOURCE_FILE_AT_LINE (380)) ;
        }
        {
          GGS_stringlist::cEnumerator enumerator_16483 (operand_16242->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (383)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_16483 = NULL ;
          while (((operand_16483 = enumerator_16483.nextObject ()))) {
            macroValidPointer (operand_16483) ;
            GGS_stringlist  var_cas_explodedArray = operand_16483->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_16658_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_16658_0 COMMA_SOURCE_FILE_AT_LINE (385)) ;
            {
              GGS_stringlist::cEnumerator enumerator_16688 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_16688 = NULL ;
              while (((operand_16688 = enumerator_16688.nextObject ()))) {
                macroValidPointer (operand_16688) ;
                const GGS_bool cond_16954 = (operand_16688->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_16954.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_16688->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (388)) ;
                  const GGS_bool cond_16937 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_16937.isBuiltAndTrue ()) {
                    operand_16242->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a search error message") COMMA_SOURCE_FILE_AT_LINE (391)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_17067 (operand_14185->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_17067 = NULL ;
      while (((operand_17067 = enumerator_17067.nextObject ()))) {
        macroValidPointer (operand_17067) ;
        var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_17067->mMethodName COMMA_SOURCE_FILE_AT_LINE (398)) ;
        {
          GGS_stringlist::cEnumerator enumerator_17193 (operand_17067->mErrorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (400)).reader_componentsSeparatedByString (GGS_string ("%%")), true) ;
          const GGS_stringlist::cElement * operand_17193 = NULL ;
          while (((operand_17193 = enumerator_17193.nextObject ()))) {
            macroValidPointer (operand_17193) ;
            GGS_stringlist  var_cas_explodedArray = operand_17193->mValue.reader_componentsSeparatedByString (GGS_string ("%")) ;
            GGS_string automatic_var_17368_0 ;
            var_cas_explodedArray.modifier_popFirst (inLexique, automatic_var_17368_0 COMMA_SOURCE_FILE_AT_LINE (402)) ;
            {
              GGS_stringlist::cEnumerator enumerator_17398 (var_cas_explodedArray, true) ;
              const GGS_stringlist::cElement * operand_17398 = NULL ;
              while (((operand_17398 = enumerator_17398.nextObject ()))) {
                macroValidPointer (operand_17398) ;
                const GGS_bool cond_17664 = (operand_17398->mValue.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                if (cond_17664.isBuiltAndTrue ()) {
                  const GGS_char var_cas_c = operand_17398->mValue.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (405)) ;
                  const GGS_bool cond_17647 = (var_cas_c).operator_isNotEqual (GGS_char (TO_UNICODE ('K'))) ;
                  if (cond_17647.isBuiltAndTrue ()) {
                    operand_17067->mErrorMessage.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only '%K' and '%%' escape sequences are allowed in a remove error message") COMMA_SOURCE_FILE_AT_LINE (408)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_insertOrReplaceDeclarationListAST::cEnumerator enumerator_17836 (operand_14185->mInsertOrReplaceDeclarationListAST, true) ;
      const GGS_insertOrReplaceDeclarationListAST::cElement * operand_17836 = NULL ;
      while (((operand_17836 = enumerator_17836.nextObject ()))) {
        macroValidPointer (operand_17836) ;
        const GGS_bool cond_17983 = (var_cas_IDX).operator_strictSup (GGS_uint (0U)) ;
        if (cond_17983.isBuiltAndTrue ()) {
          operand_17836->mInsertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("the 'insertOrReplace' modifier is already declared") COMMA_SOURCE_FILE_AT_LINE (416)) ;
        }
        var_cas_IDX.mValue ++ ;
      }
    }
    const GGS_bool var_cas_hasInsertOrReplaceModifier = (operand_14185->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    const GGS_bool cond_18498 = (var_cas_hasInsertOrReplaceModifier).operator_and (var_cas_insertMethodMap.reader_hasKey (GGS_string ("insertOrReplace"))) ;
    if (cond_18498.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceDeclarationLocation ;
      if (operand_14185->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_14185->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (422)) ;
      }
      var_cas_insertOrReplaceDeclarationLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name") COMMA_SOURCE_FILE_AT_LINE (424)) ;
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (427)), var_cas_inPredefinedTypes.mStringType COMMA_SOURCE_FILE_AT_LINE (427)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_18705 (operand_14185->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_18705 = NULL ;
      while (((operand_18705 = enumerator_18705.nextObject ()))) {
        macroValidPointer (operand_18705) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_18705->mMethodName, var_cas_inPredefinedTypes.mLStringType COMMA_SOURCE_FILE_AT_LINE (429)) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_14185->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (436)), operand_14185->mMapTypeName, var_cas_typedAttributeList, operand_14185->mInsertMethodList, operand_14185->mSearchMethodList, operand_14185->mRemoveMethodList, var_cas_hasInsertOrReplaceModifier, var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (435)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_19338,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19338 != NULL) {
    GGS_typedAttributeList  var_cas_listTypeAttributeList ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_19765_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_19765_1 ;
    GGS_typeKindEnum automatic_var_19765_2 ;
    GGS_typedAttributeList  automatic_var_19765_3 ;
    GGS_attributeMap  automatic_var_19765_4 ;
    GGS_constructorMap  automatic_var_19765_5 ;
    GGS_readerMap  automatic_var_19765_6 ;
    GGS_modifierMap  automatic_var_19765_7 ;
    GGS_instanceMethodMap  automatic_var_19765_8 ;
    GGS_classMethodMap  automatic_var_19765_9 ;
    GGS_enumerationDescriptorList  automatic_var_19765_10 ;
    GGS_uint  automatic_var_19765_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_19765_12 ;
    GGS_nativeAttributeList  automatic_var_19765_13 ;
    GGS_stringset  automatic_var_19765_14 ;
    GGS_lstringlist  automatic_var_19765_15 ;
    GGS_typedAttributeList  automatic_var_19765_16 ;
    GGS_mapSearchMethodListAST  automatic_var_19765_17 ;
    GGS_withAccessorMap  automatic_var_19765_18 ;
    GGS_bool automatic_var_19765_19 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_19338->mAssociatedMapTypeName, automatic_var_19765_0, automatic_var_19765_1, automatic_var_19765_2, automatic_var_19765_3, automatic_var_19765_4, var_cas_listTypeAttributeList, automatic_var_19765_5, automatic_var_19765_6, automatic_var_19765_7, automatic_var_19765_8, automatic_var_19765_9, automatic_var_19765_10, automatic_var_19765_11, automatic_var_19765_12, automatic_var_19765_13, automatic_var_19765_14, automatic_var_19765_15, automatic_var_19765_16, var_cas_searchMethodList, automatic_var_19765_17, automatic_var_19765_18, automatic_var_19765_19 COMMA_SOURCE_FILE_AT_LINE (459)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_mapProxyTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_19338->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (462)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_19338->mAssociatedMapTypeName COMMA_SOURCE_FILE_AT_LINE (463)), var_cas_listTypeAttributeList, var_cas_searchMethodList COMMA_SOURCE_FILE_AT_LINE (461)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@declaredMethodMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_declaredMethodMap ("declaredMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_declaredMethodMap::
elementOf_GGS_declaredMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_declaredMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_declaredMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_declaredMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_declaredMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_declaredMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_declaredMethodMap * info = (e_declaredMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_declaredMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_declaredMethodMap::
operator_isNotEqual (const GGS_declaredMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_declaredMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_declaredMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_declaredMethodMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_declaredMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_declaredMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_declaredMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_declaredMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @declaredMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_declaredMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_declaredMethodMap * p = NULL ;
    macroMyNew (p, GGS_declaredMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_declaredMethodMap * p = dynamic_cast <const GGS_declaredMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_declaredMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_declaredMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_declaredMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_declaredMethodMap GGS_declaredMethodMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_declaredMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "buildLocalVariableMapAndSignature"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLocalVariableMapAndSignature (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLocalVariableMapAndSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outRoutineSignature = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_20782 (var_cas_inRoutineSignatureAST, true) ;
    const GGS_formalParameterListAST::cElement * operand_20782 = NULL ;
    while (((operand_20782 = enumerator_20782.nextObject ()))) {
      macroValidPointer (operand_20782) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_20782->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (487)) ;
      GGS_string var_cas_formalArgumentCppName ;
      switch (operand_20782->mFormalArgumentPassingMode.enumValue ()) {
      case GGS_formalArgumentPassingModeAST::enum_argumentIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("inArgument_")).operator_concat (operand_20782->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_21268 = operand_20782->mIsUnused ;
        if (cond_21268.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (493)) ;
        }else if (cond_21268.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputFormalArgument (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (495)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("outArgument_")).operator_concat (operand_20782->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (498)).reader_identifierRepresentation ()) ;
        var_cas_ioVariableMap.modifier_insertOutputFormalArgument (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (499)) ;
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentInOut:
        {
        var_cas_formalArgumentCppName = (GGS_string ("ioArgument_")).operator_concat (operand_20782->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_21979 = operand_20782->mIsUnused ;
        if (cond_21979.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgumentDeclaredAsUnused (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (503)) ;
        }else if (cond_21979.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertInputOutputFormalArgument (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (505)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::enum_argumentConstantIn:
        {
        var_cas_formalArgumentCppName = (GGS_string ("constinArgument_")).operator_concat (operand_20782->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (508)).reader_identifierRepresentation ()) ;
        const GGS_bool cond_22453 = operand_20782->mIsUnused ;
        if (cond_22453.isBuiltAndTrue ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (510)) ;
        }else if (cond_22453.isBuiltAndFalse ()) {
          var_cas_ioVariableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_20782->mFormalArgumentName, var_cas_type, var_cas_formalArgumentCppName, var_cas_formalArgumentCppName COMMA_SOURCE_FILE_AT_LINE (512)) ;
        }
        }
        break ;
      case GGS_formalArgumentPassingModeAST::kNotBuilt:
        break ;
      }
      var_cas_outRoutineSignature.addAssign_operation (operand_20782->mFormalArgumentPassingMode, var_cas_type, operand_20782->mFormalArgumentName, var_cas_formalArgumentCppName) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLocalVariableMapAndSignature\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "analyzeRoutineBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalParameterListAST   var_cas_inRoutineSignatureAST,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_location   var_cas_inEndOfMethodLocation,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration,
                                GGS_formalParameterListForGeneration  & var_cas_outRoutineSignature
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (532)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_23408 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_23408 = NULL ;
    while (((operand_23408 = enumerator_23408.nextObject ()))) {
      macroValidPointer (operand_23408) ;
      const GGS_bool cond_23540 = operand_23408->mNoWarningIfUnused ;
      if (cond_23540.isBuiltAndTrue ()) {
        var_cas_variableMap.modifier_insertUsedLocalConstant (inLexique, operand_23408->mName, operand_23408->mType, operand_23408->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (536)) COMMA_SOURCE_FILE_AT_LINE (536)) ;
      }else if (cond_23540.isBuiltAndFalse ()) {
        var_cas_variableMap.modifier_insertLocalConstant (inLexique, operand_23408->mName, operand_23408->mType, operand_23408->mCppName, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (538)) COMMA_SOURCE_FILE_AT_LINE (538)) ;
      }
    }
  }
  {
    GGS_typedAttributeList::cEnumerator enumerator_23716 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_23716 = NULL ;
    while (((operand_23716 = enumerator_23716.nextObject ()))) {
      macroValidPointer (operand_23716) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_23716->mAttributeName, operand_23716->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_23716->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (546)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (547)) COMMA_SOURCE_FILE_AT_LINE (543)) ;
    }
  }
  ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inAnalysisContext.mSemanticContext,  var_cas_inRoutineSignatureAST,  var_cas_variableMap,  var_cas_outRoutineSignature COMMA_SOURCE_FILE_AT_LINE (551)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_24300 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_24300 = NULL ;
    while (((operand_24300 = enumerator_24300.nextObject ()))) {
      macroValidPointer (operand_24300) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_24300->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_24300->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (560)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfMethodLocation COMMA_SOURCE_FILE_AT_LINE (567)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_24697,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24697 != NULL) {
    GGS_formalInputParameterListForGeneration  var_cas_formalArgumentList = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_24975 (operand_24697->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_24975 = NULL ;
      while (((operand_24975 = enumerator_24975.nextObject ()))) {
        macroValidPointer (operand_24975) ;
        var_cas_formalArgumentList.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24975->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (580)), operand_24975->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (581)), operand_24975->mFormalArgumentName, operand_24975->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionPrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_24697->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (587)), var_cas_formalArgumentList, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24697->mResultTypeName COMMA_SOURCE_FILE_AT_LINE (589)) COMMA_SOURCE_FILE_AT_LINE (586)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_25605,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25605 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_25878 (operand_25605->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_25878 = NULL ;
      while (((operand_25878 = enumerator_25878.nextObject ()))) {
        macroValidPointer (operand_25878) ;
        var_cas_formalArgumentList.addAssign_operation (operand_25878->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25878->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (606)), operand_25878->mFormalArgumentName, operand_25878->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (608))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routinePrototypeDeclarationForGeneration ::constructor_new (inLexique, operand_25605->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (612)), var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (611)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@routineDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_routineDeclarationAST * operand_26433,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26433 != NULL) {
    GGS_formalParameterListForGeneration  var_cas_formalArgumentList = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (632)), GGS_string ("")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_26433->mFormalArgumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_26433->mRoutineInstructionList,  operand_26433->mEndOfRoutineInstructionList,  var_cas_instructionList,  var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (635)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, operand_26433->mRoutineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (648)), var_cas_formalArgumentList, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (647)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.performSemanticAnalysis'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_classDeclarationAST * operand_27479,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27479 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27479->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (664)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassProxy ;
    GGS_typedAttributeList  var_cas_allAttributeList ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    const GGS_bool cond_28845 = (operand_27479->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (671))).operator_isEqual (GGS_string ("")) ;
    if (cond_28845.isBuiltAndTrue ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (672)) ;
      var_cas_allAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) ;
      GGS_bool var_cas_generatedInSeparateFileFeature = GGS_bool (false) ;
      const GGS_bool cond_28833 = (operand_27479->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_28833.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_28430 (operand_27479->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_28430 = NULL ;
          while (((operand_28430 = enumerator_28430.nextObject ()))) {
            macroValidPointer (operand_28430) ;
            const GGS_bool cond_28702 = (operand_28430->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (678))).operator_isEqual (GGS_string ("generatedInSeparateFile")) ;
            if (cond_28702.isBuiltAndTrue ()) {
              const GGS_bool cond_28633 = var_cas_generatedInSeparateFileFeature ;
              if (cond_28633.isBuiltAndTrue ()) {
                operand_28430->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'generatedInSeparateFile' is already named") COMMA_SOURCE_FILE_AT_LINE (681)) ;
              }
              var_cas_generatedInSeparateFileFeature = GGS_bool (true) ;
            }else if (cond_28702.isBuiltAndFalse ()) {
              operand_28430->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'generatedInSeparateFile' feature is allowed here") COMMA_SOURCE_FILE_AT_LINE (685)) ;
            }
          }
        }
      }
    }else if (cond_28845.isBuiltAndFalse ()) {
      var_cas_superClassProxy = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27479->mSuperClassName COMMA_SOURCE_FILE_AT_LINE (689)) ;
      var_cas_allAttributeList = var_cas_superClassProxy.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (690)) ;
      var_cas_inheritedInstanceMethodMap = var_cas_superClassProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (691)) ;
      const GGS_bool cond_29270 = (operand_27479->mClassFeatureList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_29270.isBuiltAndTrue ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_29164 (operand_27479->mClassFeatureList, true) ;
          const GGS_lstringlist::cElement * operand_29164 = NULL ;
          while (((operand_29164 = enumerator_29164.nextObject ()))) {
            macroValidPointer (operand_29164) ;
            operand_29164->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a class that has a super may not have any feature") COMMA_SOURCE_FILE_AT_LINE (695)) ;
          }
        }
      }
    }
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_attributeIndexMap  var_cas_attributeMap = GGS_attributeIndexMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_29438 (operand_27479->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_29438 = NULL ;
      while (((operand_29438 = enumerator_29438.nextObject ()))) {
        macroValidPointer (operand_29438) ;
        GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_29438->mAttributeTypeName COMMA_SOURCE_FILE_AT_LINE (702)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_t, operand_29438->mAttributeName) ;
        var_cas_allAttributeList.addAssign_operation (var_cas_t, operand_29438->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_29438->mAttributeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (711)) ;
      }
    }
    GGS_declaredMethodMap  var_cas_classMethodMap = GGS_declaredMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_29854 (operand_27479->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_29854 = NULL ;
      while (((operand_29854 = enumerator_29854.nextObject ()))) {
        macroValidPointer (operand_29854) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_29854->mMethodName COMMA_SOURCE_FILE_AT_LINE (716)) ;
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_29942 (operand_27479->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_29942 = NULL ;
      while (((operand_29942 = enumerator_29942.nextObject ()))) {
        macroValidPointer (operand_29942) ;
        var_cas_classMethodMap.modifier_insertKey (inLexique, operand_29942->mMethodName COMMA_SOURCE_FILE_AT_LINE (719)) ;
      }
    }
    GGS_abstractMethodDefinitionListForGeneration  var_cas_abstractMethodList = GGS_abstractMethodDefinitionListForGeneration ::constructor_emptyList () ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_30141 (operand_27479->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_30141 = NULL ;
      while (((operand_30141 = enumerator_30141.nextObject ()))) {
        macroValidPointer (operand_30141) ;
        const GGS_bool cond_30327 = (operand_27479->mIsAbstract).operator_not () ;
        if (cond_30327.isBuiltAndTrue ()) {
          operand_30141->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class cannot declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (727)) ;
        }
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_30472 (operand_30141->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_30472 = NULL ;
          while (((operand_30472 = enumerator_30472.nextObject ()))) {
            macroValidPointer (operand_30472) ;
            var_cas_formalParameterListForGeneration.addAssign_operation (operand_30472->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_30472->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (733)), operand_30472->mFormalArgumentName, operand_30472->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (735))) ;
          }
        }
        const GGS_bool cond_31211 = operand_30141->mIsOverriding ;
        if (cond_31211.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool automatic_var_31023_0 ;
          GGS_bool automatic_var_31023_1 ;
          GGS_methodQualifier automatic_var_31023_2 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_30141->mMethodName, automatic_var_31023_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_31023_1, automatic_var_31023_2 COMMA_SOURCE_FILE_AT_LINE (742)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_30141->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (745)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (743)) ;
        }else if (cond_31211.isBuiltAndFalse ()) {
          const GGS_bool cond_31394 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_30141->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (749))) ;
          if (cond_31394.isBuiltAndTrue ()) {
            operand_30141->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method cannot be declared as abstract, it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (751)) ;
          }
        }
        var_cas_abstractMethodList.addAssign_operation (operand_30141->mIsOverriding, operand_30141->mMethodName, var_cas_formalParameterListForGeneration) ;
      }
    }
    GGS_methodDefinitionListForGeneration  var_cas_methodList = GGS_methodDefinitionListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_definedMethodSet = GGS_stringset ::constructor_emptySet () ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("this")) ;
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_31772 (operand_27479->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_31772 = NULL ;
      while (((operand_31772 = enumerator_31772.nextObject ()))) {
        macroValidPointer (operand_31772) ;
        GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
        GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
        ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_31772->mSignature,  GGS_localConstantList ::constructor_emptyList (),  var_cas_allAttributeList,  GGS_string (""),  operand_31772->mInstructionList,  operand_31772->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (767)) ;
        const GGS_bool cond_32911 = operand_31772->mIsOverriding ;
        if (cond_32911.isBuiltAndTrue ()) {
          GGS_formalParameterSignature  var_cas_inheritedSignature ;
          GGS_location  var_cas_inheritedDeclarationLocation ;
          GGS_bool var_cas_inheritedIsCategory ;
          GGS_bool automatic_var_32559_0 ;
          GGS_methodQualifier automatic_var_32559_1 ;
          if (var_cas_inheritedInstanceMethodMap.isBuilt ()) {
            var_cas_inheritedInstanceMethodMap (HERE)->method_searchInheritedKey (inLexique, operand_31772->mMethodName, var_cas_inheritedIsCategory, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_32559_0, automatic_var_32559_1 COMMA_SOURCE_FILE_AT_LINE (783)) ;
          }
          ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_31772->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (786)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (784)) ;
          const GGS_bool cond_32896 = var_cas_inheritedIsCategory ;
          if (cond_32896.isBuiltAndTrue ()) {
            operand_31772->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method is declared in class, but overriden method is declared as multi-method") COMMA_SOURCE_FILE_AT_LINE (792)) ;
          }
        }else if (cond_32911.isBuiltAndFalse ()) {
          const GGS_bool cond_33100 = var_cas_inheritedInstanceMethodMap.reader_hasKey (operand_31772->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (793))) ;
          if (cond_33100.isBuiltAndTrue ()) {
            operand_31772->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this method should be declared as overridding, as it is already declared in super class") COMMA_SOURCE_FILE_AT_LINE (795)) ;
          }
        }
        var_cas_definedMethodSet.addAssign_operation (operand_31772->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (797))) ;
        var_cas_methodList.addAssign_operation (operand_31772->mIsOverriding, operand_31772->mMethodName, var_cas_formalParameterListForGeneration, var_cas_semanticInstructionListForGeneration) ;
      }
    }
    const GGS_bool cond_33845 = (operand_27479->mIsAbstract).operator_not () ;
    if (cond_33845.isBuiltAndTrue ()) {
      {
        GGS_instanceMethodMap::cEnumerator enumerator_33443 (var_cas_inheritedInstanceMethodMap, true) ;
        const GGS_instanceMethodMap::cElement * operand_33443 = NULL ;
        while (((operand_33443 = enumerator_33443.nextObject ()))) {
          macroValidPointer (operand_33443) ;
          const GGS_bool cond_33816 = ((operand_33443->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (808)))).operator_or ((operand_33443->mInfo.mQualifier).operator_isEqual (GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (808)))) ;
          if (cond_33816.isBuiltAndTrue ()) {
            const GGS_bool cond_33797 = (var_cas_definedMethodSet.reader_hasKey (operand_33443->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (809)))).operator_not () ;
            if (cond_33797.isBuiltAndTrue ()) {
              operand_33443->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_27479->mClassTypeName)).operator_concat (GGS_string ("' class is declared concrete, but the '"))).operator_concat (operand_33443->mKey)).operator_concat (GGS_string ("' method declared in a super class is not implemented")) COMMA_SOURCE_FILE_AT_LINE (811)) ;
            }
          }
        }
      }
    }
    GGS_string var_cas_sortString = var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) ;
    GGS_unifiedTypeMapProxy  var_cas_t = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) ;
    GGS_uint _variant_34159 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (818)) ;
    GGS_bool _condition_34159 (_variant_34159.isBuilt (), true) ;
    while (_condition_34159.isBuiltAndTrue ()) {
      _condition_34159 = (var_cas_t.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (819))).operator_not () ;
      if (_condition_34159.isBuiltAndTrue ()) {
        if (_variant_34159.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (822)) ;
          _condition_34159 = GGS_bool (false) ;
        }else{
          _variant_34159.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_sortString = ((var_cas_t.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (820))).operator_concat (GGS_string ("."))).operator_concat (var_cas_sortString) ;
          var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (821)) ;
        }
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_classTypeForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27479->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (825)), operand_27479->mIsAbstract, operand_27479->mClassTypeName, var_cas_superClassProxy, var_cas_allAttributeList, var_cas_typedAttributeList, var_cas_abstractMethodList, var_cas_methodList, var_cas_selfType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (833)), var_cas_selfType.reader_mGenerateHeaderInSeparateFile (inLexique COMMA_SOURCE_FILE_AT_LINE (834)) COMMA_SOURCE_FILE_AT_LINE (824)), var_cas_sortString) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "analyzeFunctionBody"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeFunctionBody (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_formalInputParameterListAST   var_cas_inFunctionSignature,
                                const GGS_typedAttributeList   var_cas_inTypedAttributeList,
                                const GGS_string  var_cas_inAttributeVariableNamePrefix,
                                const GGS_semanticInstructionListAST   var_cas_inInstructionList,
                                const GGS_lstring   var_cas_inReturnVariableName,
                                const GGS_lstring   var_cas_inResultTypeName,
                                const GGS_location   var_cas_inEndOfFunctionLocation,
                                GGS_formalInputParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_string & var_cas_outResultVariableCppName,
                                GGS_semanticInstructionListForGeneration  & var_cas_outSemanticInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeFunctionBody at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) ;
  {
    GGS_typedAttributeList::cEnumerator enumerator_35359 (var_cas_inTypedAttributeList, true) ;
    const GGS_typedAttributeList::cElement * operand_35359 = NULL ;
    while (((operand_35359 = enumerator_35359.nextObject ()))) {
      macroValidPointer (operand_35359) ;
      var_cas_variableMap.modifier_insertNonMutableAttribute (inLexique, operand_35359->mAttributeName, operand_35359->mAttributeTypeProxy, ((var_cas_inAttributeVariableNamePrefix).operator_concat (GGS_string ("mAttribute_"))).operator_concat (operand_35359->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (862)).reader_identifierRepresentation ()), function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (863)) COMMA_SOURCE_FILE_AT_LINE (859)) ;
    }
  }
  var_cas_outSignatureForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
  {
    GGS_formalInputParameterListAST::cEnumerator enumerator_35751 (var_cas_inFunctionSignature, true) ;
    const GGS_formalInputParameterListAST::cElement * operand_35751 = NULL ;
    while (((operand_35751 = enumerator_35751.nextObject ()))) {
      macroValidPointer (operand_35751) ;
      const GGS_unifiedTypeMapProxy  var_cas_parameterType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_35751->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (869)) ;
      const GGS_bool cond_36453 = operand_35751->mIsConstant ;
      if (cond_36453.isBuiltAndTrue ()) {
        const GGS_string var_cas_cppName = (GGS_string ("constinArgument_")).operator_concat (operand_35751->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (871)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_35751->mFormalArgumentName, operand_35751->mIsUnused) ;
        const GGS_bool cond_36315 = operand_35751->mIsUnused ;
        if (cond_36315.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgumentDeclaredAsUnused (inLexique, operand_35751->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (879)) ;
        }else if (cond_36315.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertConstantInputFormalArgument (inLexique, operand_35751->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (881)) ;
        }
      }else if (cond_36453.isBuiltAndFalse ()) {
        const GGS_string var_cas_cppName = (GGS_string ("inArgument_")).operator_concat (operand_35751->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (884)).reader_identifierRepresentation ()) ;
        var_cas_outSignatureForGeneration.addAssign_operation (var_cas_parameterType, var_cas_cppName, operand_35751->mFormalArgumentName, operand_35751->mIsUnused) ;
        const GGS_bool cond_36846 = operand_35751->mIsUnused ;
        if (cond_36846.isBuiltAndTrue ()) {
          var_cas_variableMap.modifier_insertInputFormalArgumentDeclaredAsUnused (inLexique, operand_35751->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (892)) ;
        }else if (cond_36846.isBuiltAndFalse ()) {
          var_cas_variableMap.modifier_insertInputFormalArgument (inLexique, operand_35751->mFormalArgumentName, var_cas_parameterType, var_cas_cppName, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (894)) ;
        }
      }
    }
  }
  var_cas_outReturnedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inResultTypeName COMMA_SOURCE_FILE_AT_LINE (899)) ;
  var_cas_outResultVariableCppName = (GGS_string ("result_")).operator_concat (var_cas_inResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (900)).reader_identifierRepresentation ()) ;
  var_cas_variableMap.modifier_insertOutputFormalArgument (inLexique, var_cas_inReturnVariableName, var_cas_outReturnedType, var_cas_outResultVariableCppName, var_cas_outResultVariableCppName COMMA_SOURCE_FILE_AT_LINE (901)) ;
  var_cas_outSemanticInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_37535 (var_cas_inInstructionList, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_37535 = NULL ;
    while (((operand_37535 = enumerator_37535.nextObject ()))) {
      macroValidPointer (operand_37535) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_37535->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_37535->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outSemanticInstructionListForGeneration, var_cas_variableMap COMMA_SOURCE_FILE_AT_LINE (905)) ;
        }
      }
    }
  }
  if (var_cas_variableMap.isBuilt ()) {
    var_cas_variableMap (HERE)->method_checkAutomatonStates (inLexique, var_cas_inEndOfFunctionLocation COMMA_SOURCE_FILE_AT_LINE (912)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeFunctionBody\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@functionDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_functionDeclarationAST * operand_37928,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37928 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_formalInputParameterListForGeneration  var_cas_formalInputParameterList ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (930)), GGS_string ("")) ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_37928->mFormalArgumentList,  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_37928->mFunctionInstructionList,  operand_37928->mResultVariableName,  operand_37928->mResultTypeName,  operand_37928->mEndOfFunctionInstructionList,  var_cas_formalInputParameterList,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (933)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_functionImplementationForGeneration ::constructor_new (inLexique, operand_37928->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (949)), var_cas_formalInputParameterList, var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (948)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@onceFunctionDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_39233,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39233 != NULL) {
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_resultVariableCppName ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (973)), GGS_string ("")) ;
    GGS_formalInputParameterListForGeneration  automatic_var_40058_0 ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  GGS_formalInputParameterListAST ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  GGS_string (""),  operand_39233->mFunctionInstructionList,  operand_39233->mResultVariableName,  operand_39233->mResultTypeName,  operand_39233->mEndOfFunctionInstructionList,  automatic_var_40058_0,  var_cas_returnType,  var_cas_resultVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (976)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_onceFunctionDeclarationForGeneration ::constructor_new (inLexique, operand_39233->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (992)), var_cas_returnType, var_cas_resultVariableCppName, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (991)), GGS_string ("")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@filewrapperDeclarationAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_40750,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40750 != NULL) {
    GGS_wrapperFileMap  var_cas_wrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_wrapperDirectoryMap ;
    GGS_lstring  automatic_var_41167_0 ;
    GGS_lstringlist  automatic_var_41167_1 ;
    GGS_filewrapperTemplateMap  automatic_var_41167_2 ;
    if (var_cas_inSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_40750->mFilewrapperName, automatic_var_41167_0, automatic_var_41167_1, var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, automatic_var_41167_2 COMMA_SOURCE_FILE_AT_LINE (1015)) ;
    }
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_41351 = (operand_40750->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1025)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_41351.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = operand_40750->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) ;
    }else if (cond_41351.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((var_cas_inSemanticContext.reader_mSourceFileAbsolutePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_40750->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1028))) ;
    }
    const GGS_bool cond_41652 = (var_cas_absoluteSourcePath.reader_directoryExists ()).operator_not () ;
    if (cond_41652.isBuiltAndTrue ()) {
      operand_40750->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (1032)) ;
    }else if (cond_41652.isBuiltAndFalse ()) {
      GGS_filewrapperTemplateListForGeneration  var_cas_filewrapperTemplateListForGeneration = GGS_filewrapperTemplateListForGeneration ::constructor_emptyList () ;
      {
        GGS_filewrapperTemplateListAST::cEnumerator enumerator_41820 (operand_40750->mFilewrapperTemplateList, true) ;
        const GGS_filewrapperTemplateListAST::cElement * operand_41820 = NULL ;
        while (((operand_41820 = enumerator_41820.nextObject ()))) {
          macroValidPointer (operand_41820) ;
          const GGS_bool cond_42057 = (operand_41820->mFilewrapperTemplatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)).reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
          if (cond_42057.isBuiltAndTrue ()) {
            operand_41820->mFilewrapperTemplatePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the path should not begin with a '/'; it is relative to filewrapper path '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1038)) ;
          }
          const GGS_string var_cas_absoluteTemplatePath = ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_41820->mFilewrapperTemplatePath) ;
          GGS_templateInstructionListAST  var_cas_resultingInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            C_Grammar_templateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          GGS_lstring ::constructor_new (inLexique, var_cas_absoluteTemplatePath, operand_41820->mFilewrapperTemplatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1042)),
                                          var_cas_resultingInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
          GGS_templateVariableMap  var_cas_templateVariableMap = GGS_templateVariableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1044)) ;
          GGS_formalInputParameterListForGeneration  var_cas_filewrapperTemplateFormalInputParameters = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
          {
            GGS_formalTemplateInputParameterListAST::cEnumerator enumerator_42633 (operand_41820->mFilewrapperTemplateFormalInputParameters, true) ;
            const GGS_formalTemplateInputParameterListAST::cElement * operand_42633 = NULL ;
            while (((operand_42633 = enumerator_42633.nextObject ()))) {
              macroValidPointer (operand_42633) ;
              GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_42633->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1047)) ;
              const GGS_string var_cas_cppVarName = (GGS_string ("in_")).operator_concat (operand_42633->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)).reader_identifierRepresentation ()) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, operand_42633->mFormalArgumentName, var_cas_type, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (1049)) ;
              var_cas_filewrapperTemplateFormalInputParameters.addAssign_operation (var_cas_type, var_cas_cppVarName, operand_42633->mFormalArgumentName, GGS_bool (true)) ;
            }
          }
          GGS_templateInstructionListForGeneration  var_cas_templateInstructionListForGeneration = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
          const GGS_templateAnalysisContext var_cas_templateAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_templateVariableMap) ;
          ::routine_templateInstructionListAnalysis (inLexique,  var_cas_templateAnalysisContext,  var_cas_resultingInstructionList,  var_cas_templateInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1059)) ;
          var_cas_filewrapperTemplateListForGeneration.addAssign_operation (operand_41820->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)), var_cas_filewrapperTemplateFormalInputParameters, var_cas_templateInstructionListForGeneration) ;
        }
      }
      var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_filewrapperDeclarationForGeneration ::constructor_new (inLexique, operand_40750->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1069)), operand_40750->mFilewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)), var_cas_wrapperFileMap, var_cas_wrapperDirectoryMap, var_cas_filewrapperTemplateListForGeneration COMMA_SOURCE_FILE_AT_LINE (1068)), GGS_string ("")) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryMethodAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_44176,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44176 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_44176->mTypeName COMMA_SOURCE_FILE_AT_LINE (1088)) ;
    const GGS_bool cond_44713 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))) ;
    if (cond_44713.isBuiltAndTrue ()) {
      operand_44176->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
    }else if (cond_44713.isBuiltAndFalse ()) {
      const GGS_bool cond_44885 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)) ;
      if (cond_44885.isBuiltAndTrue ()) {
        operand_44176->mAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1094)) ;
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_45056 (operand_44176->mAbstractCategoryMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_45056 = NULL ;
      while (((operand_45056 = enumerator_45056.nextObject ()))) {
        macroValidPointer (operand_45056) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (operand_45056->mFormalArgumentPassingMode, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_45056->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1100)), operand_45056->mFormalArgumentName, operand_45056->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1102))) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryMethodForGeneration ::constructor_new (inLexique, operand_44176->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1107)), operand_44176->mAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1106)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1111))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryMethodAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryMethodAST * operand_45686,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45686 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_45686->mTypeName COMMA_SOURCE_FILE_AT_LINE (1123)) ;
    const GGS_bool cond_46196 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1125))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1125))) ;
    if (cond_46196.isBuiltAndTrue ()) {
      operand_45686->mCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1127)) ;
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_45686->mCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1141)),  GGS_string ("object->"),  operand_45686->mCategoryMethodInstructionList,  operand_45686->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1137)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryMethodForGeneration ::constructor_new (inLexique, operand_45686->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)), operand_45686->mCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1149)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1156))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryMethodAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_47287,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47287 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_47287->mTypeName COMMA_SOURCE_FILE_AT_LINE (1168)) ;
    const GGS_bool cond_47807 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1170))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1170))) ;
    if (cond_47807.isBuiltAndTrue ()) {
      operand_47287->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1172)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_48601 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1178)) ;
    GGS_bool _condition_48601 (_variant_48601.isBuilt (), true) ;
    while (_condition_48601.isBuiltAndTrue ()) {
      _condition_48601 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1179))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_48601.isBuiltAndTrue ()) {
        if (_variant_48601.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1188)) ;
          _condition_48601 = GGS_bool (false) ;
        }else{
          _variant_48601.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_48548 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1180)).reader_hasKey (operand_47287->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1180))) ;
          if (cond_48548.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_48422_0 ;
            GGS_bool automatic_var_48422_1 ;
            const GGS_instanceMethodMap  temp_48323 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1182)) ;
            if (temp_48323.isBuilt ()) {
              temp_48323 (HERE)->method_searchKey (inLexique, operand_47287->mOverridingCategoryMethodName, automatic_var_48422_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_48422_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1182)) ;
            }
            const GGS_bool cond_48535 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1183))) ;
            if (cond_48535.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1184)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ;
        }
      }
    }
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    ::routine_analyzeRoutineBody (inLexique,  var_cas_analysisContext,  operand_47287->mOverridingCategoryMethodFormalParameterList,  GGS_localConstantList ::constructor_emptyList (),  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1202)),  GGS_string ("object->"),  operand_47287->mOverridingCategoryMethodInstructionList,  operand_47287->mEndOfMethodLocation,  var_cas_semanticInstructionListForGeneration,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1198)) ;
    const GGS_bool cond_49503 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_49503.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_47287->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1211)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overridingCategoryMethodForGeneration ::constructor_new (inLexique, operand_47287->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)), var_cas_baseTypeName, operand_47287->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)), var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1219)), GGS_string ("{override}")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_50001,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50001 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_50001->mTypeName COMMA_SOURCE_FILE_AT_LINE (1239)) ;
    const GGS_bool cond_50542 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1241))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1241))) ;
    if (cond_50542.isBuiltAndTrue ()) {
      operand_50001->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1242)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
    }else if (cond_50542.isBuiltAndFalse ()) {
      const GGS_bool cond_50716 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      if (cond_50716.isBuiltAndTrue ()) {
        operand_50001->mOverridingCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category method: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1248)) ;
    GGS_formalParameterSignature  var_cas_inheritedSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_51510 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1251)) ;
    GGS_bool _condition_51510 (_variant_51510.isBuilt (), true) ;
    while (_condition_51510.isBuiltAndTrue ()) {
      _condition_51510 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1252))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_51510.isBuiltAndTrue ()) {
        if (_variant_51510.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1261)) ;
          _condition_51510 = GGS_bool (false) ;
        }else{
          _variant_51510.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_51457 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1253)).reader_hasKey (operand_50001->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1253))) ;
          if (cond_51457.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_51331_0 ;
            GGS_bool automatic_var_51331_1 ;
            const GGS_instanceMethodMap  temp_51232 = var_cas_superType.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1255)) ;
            if (temp_51232.isBuilt ()) {
              temp_51232 (HERE)->method_searchKey (inLexique, operand_50001->mOverridingCategoryMethodName, automatic_var_51331_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_51331_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1255)) ;
            }
            const GGS_bool cond_51444 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1256))) ;
            if (cond_51444.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1260)) ;
        }
      }
    }
    GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1263)) ;
    GGS_formalParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    ::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  operand_50001->mOverridingCategoryMethodFormalParameterList,  var_cas_variableMap,  var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1265)) ;
    const GGS_bool cond_52069 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_52069.isBuiltAndTrue ()) {
      ::routine_checkMethodSignatures (inLexique,  var_cas_formalParameterListForGeneration,  operand_50001->mOverridingCategoryMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)),  var_cas_inheritedSignature,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1273)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@abstractCategoryReaderAST.performSemanticAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_52234,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52234 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_52234->mTypeName COMMA_SOURCE_FILE_AT_LINE (1290)) ;
    const GGS_bool cond_52771 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1292))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1292))) ;
    if (cond_52771.isBuiltAndTrue ()) {
      operand_52234->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1294)) ;
    }else if (cond_52771.isBuiltAndFalse ()) {
      const GGS_bool cond_52943 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
      if (cond_52943.isBuiltAndTrue ()) {
        operand_52234->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1296)) ;
      }
    }
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_53124 (operand_52234->mAbstractCategoryReaderFormalInputParameterList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_53124 = NULL ;
      while (((operand_53124 = enumerator_53124.nextObject ()))) {
        macroValidPointer (operand_53124) ;
        var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_53124->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1301)), operand_53124->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1302)), operand_53124->mFormalArgumentName, operand_53124->mIsUnused) ;
      }
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_abstractCategoryReaderForGeneration ::constructor_new (inLexique, operand_52234->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1309)), operand_52234->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1310)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_52234->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1311)), var_cas_formalParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1308)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1314))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@categoryReaderAST.performSemanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_categoryReaderAST * operand_53846,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53846 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_53846->mTypeName COMMA_SOURCE_FILE_AT_LINE (1328)) ;
    const GGS_bool cond_54357 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1330))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1330))) ;
    if (cond_54357.isBuiltAndTrue ()) {
      operand_53846->mCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1332)) ;
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_53846->mCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)),  GGS_string ("object->"),  operand_53846->mCategoryReaderInstructionList,  operand_53846->mCategoryReaderReturnedVariableName,  operand_53846->mCategoryReaderReturnedTypeName,  operand_53846->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1344)) ;
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_categoryReaderForGeneration ::constructor_new (inLexique, operand_53846->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)), operand_53846->mCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1359)), var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1368))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@overridingCategoryReaderAST.performSemanticAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_55645,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55645 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_55645->mTypeName COMMA_SOURCE_FILE_AT_LINE (1380)) ;
    const GGS_bool cond_56165 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1382))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1382))) ;
    if (cond_56165.isBuiltAndTrue ()) {
      operand_55645->mOverridingCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1384)) ;
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_57015 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1391)) ;
    GGS_bool _condition_57015 (_variant_57015.isBuilt (), true) ;
    while (_condition_57015.isBuiltAndTrue ()) {
      _condition_57015 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1392))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_57015.isBuiltAndTrue ()) {
        if (_variant_57015.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1401)) ;
          _condition_57015 = GGS_bool (false) ;
        }else{
          _variant_57015.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_56962 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)).reader_hasKey (operand_55645->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1393))) ;
          if (cond_56962.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_56836_0 ;
            GGS_bool automatic_var_56836_1 ;
            const GGS_readerMap  temp_56716 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)) ;
            if (temp_56716.isBuilt ()) {
              temp_56716 (HERE)->method_searchKey (inLexique, operand_55645->mOverridingCategoryReaderName, automatic_var_56836_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_56836_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1395)) ;
            }
            const GGS_bool cond_56949 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1396))) ;
            if (cond_56949.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1400)) ;
        }
      }
    }
    const GGS_analysisContext var_cas_analysisContext = GGS_analysisContext::constructor_new (var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_selfType, GGS_string ("object")) ;
    GGS_unifiedTypeMapProxy  var_cas_returnType ;
    GGS_string var_cas_returnVariableCppName ;
    GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration ;
    GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
    ::routine_analyzeFunctionBody (inLexique,  var_cas_analysisContext,  operand_55645->mOverridingCategoryReaderFormalInputParameterList,  var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)),  GGS_string ("object->"),  operand_55645->mOverridingCategoryReaderInstructionList,  operand_55645->mOverridingCategoryReaderReturnedVariableName,  operand_55645->mOverridingCategoryReaderReturnedTypeName,  operand_55645->mEndOfReaderLocation,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  var_cas_returnVariableCppName,  var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1413)) ;
    const GGS_bool cond_58136 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_58136.isBuiltAndTrue ()) {
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_55645->mOverridingCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1432)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1429)) ;
    }
    var_cas_ioSemanticDeclarationListForGeneration.addAssign_operation (GGS_overrideCategoryReaderForGeneration ::constructor_new (inLexique, operand_55645->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)), var_cas_baseTypeName, operand_55645->mOverridingCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1442)), var_cas_returnType, var_cas_returnVariableCppName, var_cas_formalParameterListForGeneration, var_cas_selfType.reader_mAllTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1439)), GGS_string ("{override}")) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryReaderAST.performSemanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryReaderAST * operand_58675,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticDeclarationSortedListForGeneration  & /* var_cas_ioSemanticDeclarationListForGeneration */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58675 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_selfType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_58675->mTypeName COMMA_SOURCE_FILE_AT_LINE (1461)) ;
    const GGS_unifiedTypeMapProxy  var_cas_returnType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_58675->mAbstractCategoryReaderReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (1463)) ;
    const GGS_bool cond_59379 = (var_cas_selfType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1465))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1465))) ;
    if (cond_59379.isBuiltAndTrue ()) {
      operand_58675->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare a category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1466)))).operator_concat (GGS_string ("' is not a class")) COMMA_SOURCE_FILE_AT_LINE (1467)) ;
    }else if (cond_59379.isBuiltAndFalse ()) {
      const GGS_bool cond_59551 = var_cas_selfType.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (1467)) ;
      if (cond_59551.isBuiltAndTrue ()) {
        operand_58675->mAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cannot declare an abstract category reader: '@")).operator_concat (var_cas_selfType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)))).operator_concat (GGS_string ("' is not an abstract class")) COMMA_SOURCE_FILE_AT_LINE (1469)) ;
      }
    }
    GGS_string var_cas_baseTypeName = GGS_string ("") ;
    GGS_unifiedTypeMapProxy  var_cas_superType = var_cas_selfType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)) ;
    GGS_unifiedTypeMapProxyList  var_cas_inheritedSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxy  var_cas_inheritedReturnType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)) ;
    GGS_location  var_cas_inheritedDeclarationLocation = GGS_location (inLexique) ;
    GGS_uint _variant_60397 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1476)) ;
    GGS_bool _condition_60397 (_variant_60397.isBuilt (), true) ;
    while (_condition_60397.isBuiltAndTrue ()) {
      _condition_60397 = ((var_cas_superType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1477))).operator_not ()).operator_and ((var_cas_baseTypeName).operator_isEqual (GGS_string (""))) ;
      if (_condition_60397.isBuiltAndTrue ()) {
        if (_variant_60397.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1486)) ;
          _condition_60397 = GGS_bool (false) ;
        }else{
          _variant_60397.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_60344 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1478)).reader_hasKey (operand_58675->mAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1478))) ;
          if (cond_60344.isBuiltAndTrue ()) {
            GGS_methodQualifier var_cas_qualifier ;
            GGS_bool automatic_var_60218_0 ;
            GGS_bool automatic_var_60218_1 ;
            const GGS_readerMap  temp_60100 = var_cas_superType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)) ;
            if (temp_60100.isBuilt ()) {
              temp_60100 (HERE)->method_searchKey (inLexique, operand_58675->mAbstractCategoryReaderName, automatic_var_60218_0, var_cas_inheritedSignature, var_cas_inheritedDeclarationLocation, automatic_var_60218_1, var_cas_inheritedReturnType, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (1480)) ;
            }
            const GGS_bool cond_60331 = (var_cas_qualifier).operator_infOrEqual (GGS_methodQualifier::constructor_isBasicFinal (inLexique COMMA_SOURCE_FILE_AT_LINE (1481))) ;
            if (cond_60331.isBuiltAndTrue ()) {
              var_cas_baseTypeName = var_cas_superType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1482)) ;
            }
          }
          var_cas_superType = var_cas_superType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1485)) ;
        }
      }
    }
    const GGS_bool cond_61088 = (var_cas_baseTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_61088.isBuiltAndTrue ()) {
      GGS_formalInputParameterListForGeneration  var_cas_formalParameterListForGeneration = GGS_formalInputParameterListForGeneration ::constructor_emptyList () ;
      {
        GGS_formalInputParameterListAST::cEnumerator enumerator_60604 (operand_58675->mAbstractCategoryReaderFormalInputParameterList, true) ;
        const GGS_formalInputParameterListAST::cElement * operand_60604 = NULL ;
        while (((operand_60604 = enumerator_60604.nextObject ()))) {
          macroValidPointer (operand_60604) ;
          var_cas_formalParameterListForGeneration.addAssign_operation (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_60604->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (1492)), operand_60604->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1493)), operand_60604->mFormalArgumentName, operand_60604->mIsUnused) ;
        }
      }
      ::routine_checkReaderSignatures (inLexique,  var_cas_formalParameterListForGeneration,  var_cas_returnType,  operand_58675->mAbstractCategoryReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1501)),  var_cas_inheritedSignature,  var_cas_inheritedReturnType,  var_cas_inheritedDeclarationLocation COMMA_SOURCE_FILE_AT_LINE (1498)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "buildPredefinedTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_predefinedTypes function_buildPredefinedTypes (C_CompilerEx & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_buildPredefinedTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_predefinedTypes var_cas_outPredefinedTypes ;
  var_cas_outPredefinedTypes = GGS_predefinedTypes::constructor_new (GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1520)) COMMA_SOURCE_FILE_AT_LINE (1520)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1521)) COMMA_SOURCE_FILE_AT_LINE (1521)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1522)) COMMA_SOURCE_FILE_AT_LINE (1522)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1523)) COMMA_SOURCE_FILE_AT_LINE (1523)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1524)) COMMA_SOURCE_FILE_AT_LINE (1524)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1525)) COMMA_SOURCE_FILE_AT_LINE (1525)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1526)) COMMA_SOURCE_FILE_AT_LINE (1526)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1527)) COMMA_SOURCE_FILE_AT_LINE (1527)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1528)) COMMA_SOURCE_FILE_AT_LINE (1528)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1529)) COMMA_SOURCE_FILE_AT_LINE (1529)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1530)) COMMA_SOURCE_FILE_AT_LINE (1530)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1531)) COMMA_SOURCE_FILE_AT_LINE (1531)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1532)) COMMA_SOURCE_FILE_AT_LINE (1532)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1533)) COMMA_SOURCE_FILE_AT_LINE (1533)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1534)) COMMA_SOURCE_FILE_AT_LINE (1534)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1535)) COMMA_SOURCE_FILE_AT_LINE (1535)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1536)) COMMA_SOURCE_FILE_AT_LINE (1536))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_buildPredefinedTypes\n") ;
  #endif
  return var_cas_outPredefinedTypes ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_buildPredefinedTypes (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_semanticContext arg_0 = GGS_semanticContext::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_predefinedTypes result = function_buildPredefinedTypes (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_buildPredefinedTypes [1] = {& kTypeDescriptor_GGS_semanticContext} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_buildPredefinedTypes ("buildPredefinedTypes",
                              functionForGenericCall_buildPredefinedTypes,
                              & kTypeDescriptor_GGS_predefinedTypes,
                              1,
                              kArgumentTypeList_buildPredefinedTypes) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "performSemanticAnalysis"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_CompilerEx & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationSortedListForGeneration  & var_cas_outDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performSemanticAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (1551)) ;
  var_cas_outDecoratedDeclarationListForGeneration = GGS_semanticDeclarationSortedListForGeneration ::constructor_emptySortedList () ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_64182 (var_cas_inDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_64182 = NULL ;
    while (((operand_64182 = enumerator_64182.nextObject ()))) {
      macroValidPointer (operand_64182) ;
      { typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis method = findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (operand_64182->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_64182->mSemanticDeclaration (HERE), var_cas_inSemanticContext, var_cas_predefinedTypes, var_cas_outDecoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (1554)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performSemanticAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysis (void) {
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (category_method__semanticDeclarationAST__performSemanticAnalysis, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__predefinedTypeAST__performSemanticAnalysis, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listDeclarationAST__performSemanticAnalysis, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__sortedListDeclarationAST__performSemanticAnalysis, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__structDeclarationAST__performSemanticAnalysis, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__enumDeclarationAST__performSemanticAnalysis, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__listmapDeclarationAST__performSemanticAnalysis, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__mapProxyDeclarationAST__performSemanticAnalysis, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__externRoutineDeclarationAST__performSemanticAnalysis, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__routineDeclarationAST__performSemanticAnalysis, gClassInfoFor__routineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__classDeclarationAST__performSemanticAnalysis, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__functionDeclarationAST__performSemanticAnalysis, gClassInfoFor__functionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__onceFunctionDeclarationAST__performSemanticAnalysis, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__filewrapperDeclarationAST__performSemanticAnalysis, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryMethodAST__performSemanticAnalysis, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryMethodAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__abstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__categoryReaderAST__performSemanticAnalysis, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis ((typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis) category_method__overridingAbstractCategoryReaderAST__performSemanticAnalysis, gClassInfoFor__overridingAbstractCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysis (void) {
  gDispatchTableForMethod__semanticDeclarationAST__performSemanticAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysis (prologueRoutineFor_semanticAnalysis, epilogueRoutineFor_semanticAnalysis) ;

//---------------------------------------------------------------------------*

