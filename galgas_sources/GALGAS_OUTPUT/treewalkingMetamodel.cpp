//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'treewalkingMetamodel.cpp'                       *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 7th, 2007, at 17h18'44"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "treewalkingMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "treewalkingMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("treewalkingMetamodel", 3) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_treewalkingMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@treewalkingRuleList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_treewalkingRule::
cPtr_treewalkingRule (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mEntityName (argument_0),
mFormalParameterList (argument_1),
mInstructionList (argument_2) {
}

//---------------------------------------------------------------------------*

bool cPtr_treewalkingRule::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_treewalkingRule * _p = dynamic_cast <const cPtr_treewalkingRule *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mEntityName._operator_isEqual (_p->mEntityName).boolValue ()
         && mFormalParameterList._operator_isEqual (_p->mFormalParameterList).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_treewalkingRule::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @treewalkingRule" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEntityName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_treewalkingRule::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_treewalkingRule::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_treewalkingRule::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_treewalkingRule::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "treewalkingRule" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_treewalkingRule * cPtr_treewalkingRule::
_cloneObject (void) const {
  cPtr_treewalkingRule * _p = NULL ;
  macroMyNew (_p, cPtr_treewalkingRule (mEntityName, mFormalParameterList, mInstructionList COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@treewalkingRuleList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameters & argument_1,
                    const GGS_semanticInstructions & argument_2) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameters & argument_1,
                    const GGS_semanticInstructions & argument_2) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
_addAssign_operation (const GGS_treewalkingRule & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_treewalkingRule *) inElement.getPtr ())->mEntityName,
                                ((cPtr_treewalkingRule *) inElement.getPtr ())->mFormalParameterList,
                                ((cPtr_treewalkingRule *) inElement.getPtr ())->mInstructionList) ;
  }
}

//---------------------------------------------------------------------------*

GGS_treewalkingRuleList GGS_treewalkingRuleList::
_operator_concat (const GGS_treewalkingRuleList & inOperand) const {
  GGS_treewalkingRuleList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_treewalkingRule * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mEntityName ;
          GGS_formalParameters  p_1 = p->mFormalParameterList ;
          GGS_semanticInstructions  p_2 = p->mInstructionList ;
          result._internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameters & argument_1,
                     const GGS_semanticInstructions & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mEntityName,
                                _p->mFormalParameterList,
                                _p->mInstructionList) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_treewalkingRuleList  GGS_treewalkingRuleList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_treewalkingRuleList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_treewalkingRuleList  GGS_treewalkingRuleList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_formalParameters & argument_1,
                           const GGS_semanticInstructions & argument_2
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_treewalkingRuleList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_treewalkingRuleList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@treewalkingRuleList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingRuleList::
_addModel (const GGS_treewalkingRule & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_treewalkingRuleList::
method_first (C_Compiler & _inLexique,
              GGS_treewalkingRule & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingRule::constructor_new (_inLexique,
       _p->mEntityName,
       _p->mFormalParameterList,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingRuleList::
method_last (C_Compiler & _inLexique,
             GGS_treewalkingRule & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingRule::constructor_new (_inLexique,
       _p->mEntityName,
       _p->mFormalParameterList,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingRuleList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_treewalkingRule & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingRule::constructor_new (_inLexique,
       _p->mEntityName,
       _p->mFormalParameterList,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingRuleList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_treewalkingRule & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingRule::constructor_new (_inLexique,
       _p->mEntityName,
       _p->mFormalParameterList,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_treewalkingRule'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_treewalkingRule GGS_treewalkingRule::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_formalParameters & argument_1,
                 const GGS_semanticInstructions & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_treewalkingRule result ;
  macroMyNew (result.mPointer, cPtr_treewalkingRule (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_treewalkingRule::
reader_mEntityName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingRule *) mPointer)->mEntityName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameters  GGS_treewalkingRule::
reader_mFormalParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_formalParameters   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingRule *) mPointer)->mFormalParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructions  GGS_treewalkingRule::
reader_mInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticInstructions   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingRule *) mPointer)->mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_treewalkingRule::actualTypeName (void) const {
 return "treewalkingRule" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_treewalkingRule * GGS_treewalkingRule::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_treewalkingRule *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@treewalkingComponentRootList'               *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_treewalkingComponentRoot::
cPtr_treewalkingComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mTreewalkingComponentName (argument_0),
mMetamodelReferenceName (argument_1),
mImportedComponentFileNameList (argument_2),
mSemanticDeclarationList (argument_3),
mTreewalkingRules (argument_4) {
}

//---------------------------------------------------------------------------*

bool cPtr_treewalkingComponentRoot::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_treewalkingComponentRoot * _p = dynamic_cast <const cPtr_treewalkingComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mTreewalkingComponentName._operator_isEqual (_p->mTreewalkingComponentName).boolValue ()
         && mMetamodelReferenceName._operator_isEqual (_p->mMetamodelReferenceName).boolValue ()
         && mImportedComponentFileNameList._operator_isEqual (_p->mImportedComponentFileNameList).boolValue ()
         && mSemanticDeclarationList._operator_isEqual (_p->mSemanticDeclarationList).boolValue ()
         && mTreewalkingRules._operator_isEqual (_p->mTreewalkingRules).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_treewalkingComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @treewalkingComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTreewalkingComponentName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mMetamodelReferenceName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mImportedComponentFileNameList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSemanticDeclarationList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTreewalkingRules.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_treewalkingComponentRoot::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_treewalkingComponentRoot::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_treewalkingComponentRoot::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_treewalkingComponentRoot::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "treewalkingComponentRoot" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_treewalkingComponentRoot * cPtr_treewalkingComponentRoot::
_cloneObject (void) const {
  cPtr_treewalkingComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_treewalkingComponentRoot (mTreewalkingComponentName, mMetamodelReferenceName, mImportedComponentFileNameList, mSemanticDeclarationList, mTreewalkingRules COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@treewalkingComponentRootList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstringlist & argument_2,
                    const GGS_semanticDeclarationList & argument_3,
                    const GGS_treewalkingRuleList & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstringlist & argument_2,
                    const GGS_semanticDeclarationList & argument_3,
                    const GGS_treewalkingRuleList & argument_4) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
_addAssign_operation (const GGS_treewalkingComponentRoot & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_treewalkingComponentRoot *) inElement.getPtr ())->mTreewalkingComponentName,
                                ((cPtr_treewalkingComponentRoot *) inElement.getPtr ())->mMetamodelReferenceName,
                                ((cPtr_treewalkingComponentRoot *) inElement.getPtr ())->mImportedComponentFileNameList,
                                ((cPtr_treewalkingComponentRoot *) inElement.getPtr ())->mSemanticDeclarationList,
                                ((cPtr_treewalkingComponentRoot *) inElement.getPtr ())->mTreewalkingRules) ;
  }
}

//---------------------------------------------------------------------------*

GGS_treewalkingComponentRootList GGS_treewalkingComponentRootList::
_operator_concat (const GGS_treewalkingComponentRootList & inOperand) const {
  GGS_treewalkingComponentRootList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_treewalkingComponentRoot * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mTreewalkingComponentName ;
          GGS_lstring  p_1 = p->mMetamodelReferenceName ;
          GGS_lstringlist  p_2 = p->mImportedComponentFileNameList ;
          GGS_semanticDeclarationList  p_3 = p->mSemanticDeclarationList ;
          GGS_treewalkingRuleList  p_4 = p->mTreewalkingRules ;
          result._internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstringlist & argument_2,
                     const GGS_semanticDeclarationList & argument_3,
                     const GGS_treewalkingRuleList & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mTreewalkingComponentName,
                                _p->mMetamodelReferenceName,
                                _p->mImportedComponentFileNameList,
                                _p->mSemanticDeclarationList,
                                _p->mTreewalkingRules) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_treewalkingComponentRootList  GGS_treewalkingComponentRootList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_treewalkingComponentRootList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_treewalkingComponentRootList  GGS_treewalkingComponentRootList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_lstringlist & argument_2,
                           const GGS_semanticDeclarationList & argument_3,
                           const GGS_treewalkingRuleList & argument_4
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_treewalkingComponentRootList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_treewalkingComponentRootList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@treewalkingComponentRootList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_treewalkingComponentRootList::
_addModel (const GGS_treewalkingComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_treewalkingComponentRootList::
method_first (C_Compiler & _inLexique,
              GGS_treewalkingComponentRoot & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingComponentRoot::constructor_new (_inLexique,
       _p->mTreewalkingComponentName,
       _p->mMetamodelReferenceName,
       _p->mImportedComponentFileNameList,
       _p->mSemanticDeclarationList,
       _p->mTreewalkingRules) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingComponentRootList::
method_last (C_Compiler & _inLexique,
             GGS_treewalkingComponentRoot & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingComponentRoot::constructor_new (_inLexique,
       _p->mTreewalkingComponentName,
       _p->mMetamodelReferenceName,
       _p->mImportedComponentFileNameList,
       _p->mSemanticDeclarationList,
       _p->mTreewalkingRules) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingComponentRootList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_treewalkingComponentRoot & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingComponentRoot::constructor_new (_inLexique,
       _p->mTreewalkingComponentName,
       _p->mMetamodelReferenceName,
       _p->mImportedComponentFileNameList,
       _p->mSemanticDeclarationList,
       _p->mTreewalkingRules) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_treewalkingComponentRootList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_treewalkingComponentRoot & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_treewalkingComponentRoot::constructor_new (_inLexique,
       _p->mTreewalkingComponentName,
       _p->mMetamodelReferenceName,
       _p->mImportedComponentFileNameList,
       _p->mSemanticDeclarationList,
       _p->mTreewalkingRules) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_treewalkingComponentRoot'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_treewalkingComponentRoot GGS_treewalkingComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_semanticDeclarationList & argument_3,
                 const GGS_treewalkingRuleList & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_treewalkingComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_treewalkingComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_treewalkingComponentRoot::
reader_mTreewalkingComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingComponentRoot *) mPointer)->mTreewalkingComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_treewalkingComponentRoot::
reader_mMetamodelReferenceName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingComponentRoot *) mPointer)->mMetamodelReferenceName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_treewalkingComponentRoot::
reader_mImportedComponentFileNameList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingComponentRoot *) mPointer)->mImportedComponentFileNameList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticDeclarationList  GGS_treewalkingComponentRoot::
reader_mSemanticDeclarationList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticDeclarationList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingComponentRoot *) mPointer)->mSemanticDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_treewalkingRuleList  GGS_treewalkingComponentRoot::
reader_mTreewalkingRules (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_treewalkingRuleList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_treewalkingComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_treewalkingComponentRoot *) mPointer)->mTreewalkingRules ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_treewalkingComponentRoot::actualTypeName (void) const {
 return "treewalkingComponentRoot" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_treewalkingComponentRoot * GGS_treewalkingComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_treewalkingComponentRoot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@referenceCallInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_referenceCallInstruction::
cPtr_referenceCallInstruction (const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1
                                COMMA_LOCATION_ARGS) :
cPtr_semanticInstruction (THERE),
mReferenceName (argument_0),
mActualParameterList (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_referenceCallInstruction::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_referenceCallInstruction * _p = dynamic_cast <const cPtr_referenceCallInstruction *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mReferenceName._operator_isEqual (_p->mReferenceName).boolValue ()
         && mActualParameterList._operator_isEqual (_p->mActualParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_referenceCallInstruction::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @referenceCallInstruction" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mReferenceName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mActualParameterList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_referenceCallInstruction::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = cPtr_semanticInstruction::_metamodelComponentIndex (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_referenceCallInstruction::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = cPtr_semanticInstruction::_metamodelComponentName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_referenceCallInstruction::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 2 ;
  if (inLevel > 0) {
    result = cPtr_semanticInstruction::_metamodelClassID (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_referenceCallInstruction::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "referenceCallInstruction" ;
  if (inLevel > 0) {
    result = cPtr_semanticInstruction::_metamodelClassName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_referenceCallInstruction * cPtr_referenceCallInstruction::
_cloneObject (void) const {
  cPtr_referenceCallInstruction * _p = NULL ;
  macroMyNew (_p, cPtr_referenceCallInstruction (mReferenceName, mActualParameterList COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@referenceCallInstructionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_actualParameters & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_actualParameters & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
_addAssign_operation (const GGS_referenceCallInstruction & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_referenceCallInstruction *) inElement.getPtr ())->mReferenceName,
                                ((cPtr_referenceCallInstruction *) inElement.getPtr ())->mActualParameterList) ;
  }
}

//---------------------------------------------------------------------------*

GGS_referenceCallInstructionList GGS_referenceCallInstructionList::
_operator_concat (const GGS_referenceCallInstructionList & inOperand) const {
  GGS_referenceCallInstructionList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_referenceCallInstruction * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mReferenceName ;
          GGS_actualParameters  p_1 = p->mActualParameterList ;
          result._internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_actualParameters & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mReferenceName,
                                _p->mActualParameterList) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_referenceCallInstructionList  GGS_referenceCallInstructionList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_referenceCallInstructionList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_referenceCallInstructionList  GGS_referenceCallInstructionList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_actualParameters & argument_1
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_referenceCallInstructionList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_referenceCallInstructionList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@referenceCallInstructionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_referenceCallInstructionList::
_addModel (const GGS_referenceCallInstruction & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_referenceCallInstructionList::
method_first (C_Compiler & _inLexique,
              GGS_referenceCallInstruction & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_referenceCallInstruction::constructor_new (_inLexique,
       _p->mReferenceName,
       _p->mActualParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_referenceCallInstructionList::
method_last (C_Compiler & _inLexique,
             GGS_referenceCallInstruction & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_referenceCallInstruction::constructor_new (_inLexique,
       _p->mReferenceName,
       _p->mActualParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_referenceCallInstructionList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_referenceCallInstruction & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_referenceCallInstruction::constructor_new (_inLexique,
       _p->mReferenceName,
       _p->mActualParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_referenceCallInstructionList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_referenceCallInstruction & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_referenceCallInstruction::constructor_new (_inLexique,
       _p->mReferenceName,
       _p->mActualParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_referenceCallInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_referenceCallInstruction GGS_referenceCallInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_actualParameters & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_referenceCallInstruction result ;
  macroMyNew (result.mPointer, cPtr_referenceCallInstruction (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_referenceCallInstruction::
reader_mReferenceName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_referenceCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_referenceCallInstruction *) mPointer)->mReferenceName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameters  GGS_referenceCallInstruction::
reader_mActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameters   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_referenceCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_referenceCallInstruction *) mPointer)->mActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_referenceCallInstruction::actualTypeName (void) const {
 return "referenceCallInstruction" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_referenceCallInstruction * GGS_referenceCallInstruction::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_referenceCallInstruction *) mPointer ;
  }
#endif

