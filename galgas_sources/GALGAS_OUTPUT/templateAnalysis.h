//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'templateAnalysis.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 28th, 2010, at 23h18'54"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef templateAnalysis_DEFINED
#define templateAnalysis_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "semanticExpressionAnalysis.h"
#include "templateDecoratedTypes.h"
#include "templateTypesForAST.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_templateVariableMap ;
class GGS_templateAnalysisContext ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@templateVariableMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_templateVariableMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateVariableMap ;

//---------------------------------------------------------------------------*

class GGS_templateVariableMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_templateVariableMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_templateVariableMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_templateVariableMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_templateVariableMap castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_templateVariableMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_templateVariableMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_templateVariableMap constructor_emptyMap (C_CompilerEx & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_templateVariableMap constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_unifiedTypeMapProxy & inValue0,
                                             const GGS_string& inValue1
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy &  inParameter0,
                                const GGS_string&  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_CompilerEx & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_unifiedTypeMapProxy & inParameter0,
                                   const GGS_string& inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_CompilerEx & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_unifiedTypeMapProxy & outParameter0,
                                   GGS_string& outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_templateVariableMap constructor_mapWithMapToOverride (C_CompilerEx & inLexique,
                                            const GGS_templateVariableMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_templateVariableMap reader_overriddenMap (C_CompilerEx & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_templateVariableMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_templateVariableMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_unifiedTypeMapProxy   & _mTypeProxy (LOCATION_ARGS) const ;
    public : /* const */ GGS_string  & _mCppName (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateExpressionAST.templateExpressionAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis)  (C_CompilerEx & inLexique,
                                const cPtr_templateExpressionAST * inObjectPtr,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis (typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis
findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateInstructionAST.templateInstructionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis)  (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionAST * inObjectPtr,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis (typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis
findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Routine 'templateInstructionListAnalysis'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateInstructionListAnalysis (C_CompilerEx &,
                                const GGS_templateAnalysisContext ,
                                const GGS_templateInstructionListAST  ,
                                GGS_templateInstructionListForGeneration  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@templateVariableMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_templateVariableMap {
  public : GGS_unifiedTypeMapProxy  mTypeProxy ;
  public : GGS_string mCppName ;

  public : e_templateVariableMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_templateVariableMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_templateVariableMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_templateVariableMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_templateVariableMap * nextObject (void) const { return (elementOf_GGS_templateVariableMap *) mNextItem ; }
  public : inline elementOf_GGS_templateVariableMap * infObject (void) const { return (elementOf_GGS_templateVariableMap *) mInfPtr ; }
  public : inline elementOf_GGS_templateVariableMap * supObject (void) const { return (elementOf_GGS_templateVariableMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_templateVariableMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Declarations for 'templateAnalysisContext' struct              *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateAnalysisContext ;

//---------------------------------------------------------------------------*

class GGS_templateAnalysisContext : public GGS__root {
//--- Default constructor
  public : GGS_templateAnalysisContext (void) ;

//--- Virtual destructor
  public : virtual ~GGS_templateAnalysisContext (void) ;

//--- Handle 'drop' instruction
  public : void drop (void) ;

//--- Method 'isBuilt'
  public : bool isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_templateAnalysisContext * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_templateAnalysisContext * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool operator_isEqual (const GGS_templateAnalysisContext & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_templateAnalysisContext & inOperand) const ;

//--- Reader 'description'
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_templateAnalysisContext castFromObject (C_CompilerEx & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Galgas 'new' destructor
  public : static GGS_templateAnalysisContext constructor_new (const GGS_semanticContext& argument_0,
                 const GGS_predefinedTypes& argument_1,
                 const GGS_templateVariableMap & argument_2) ;

//--- Readers
  public : inline GGS_semanticContext
  reader_mSemanticContext (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mSemanticContext ;
  }

  public : inline GGS_predefinedTypes
  reader_mPredefinedTypes (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mPredefinedTypes ;
  }

  public : inline GGS_templateVariableMap 
  reader_mTemplateVariableMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mTemplateVariableMap ;
  }

//--- Attributes
  public : GGS_semanticContext mSemanticContext ;
  public : GGS_predefinedTypes mPredefinedTypes ;
  public : GGS_templateVariableMap  mTemplateVariableMap ;
} ;

//---------------------------------------------------------------------------*

#endif
