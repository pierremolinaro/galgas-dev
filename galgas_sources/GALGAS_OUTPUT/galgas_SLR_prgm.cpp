//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'galgas_SLR_prgm.cpp'                         *
//               Generated by version 0.14.1 (LL(1) grammar)                 *
//                     february 3rd, 2005, at 19h45'37"                      *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/F_display_exception.h"
#include "time/C_timer.h"
#include "generic_arraies/TC_unique_grow_array.h"
#include "command_line_interface/F_analyze_command_line_opts.h"
#include "command_line_interface/myMain.h"
#include "command_line_interface/C_generic_cli_options.h"
#include "command_line_interface/C_cli_options_group.h"
#include "galgas_cli_options.h"

//---------------------------------------------------------------------------*

#include "galgas_SLR_prgm.h"

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

class C_options_for_galgas_SLR_prgm : public C_cli_options_group {
//--- Constructor
  public : C_options_for_galgas_SLR_prgm (const bool inAcceptsDebugOption) ;

//--- Included options
  private : C_generic_cli_options mGenericOptions ;
  private : galgas_cli_options mOptions_galgas_cli_options; 
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                C_options_for_galgas_SLR_prgm  CONSTRUCTOR                 *
//                                                                           *
//---------------------------------------------------------------------------*

C_options_for_galgas_SLR_prgm::
C_options_for_galgas_SLR_prgm (const bool inAcceptsDebugOption)
:mGenericOptions (inAcceptsDebugOption) {
  add (& mGenericOptions) ;
  add (& mOptions_galgas_cli_options) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          C O N S T R U C T O R                            *
//                                                                           *
//---------------------------------------------------------------------------*


galgas_SLR_prgm::
galgas_SLR_prgm (const C_galgas_io_parameters & inIOparameters) :
mScanner_ (& mTerminalIO), mTerminalIO (inIOparameters) {
  mSourceFileExtension_ = "ggs" ;
}

//---------------------------------------------------------------------------*

void galgas_SLR_prgm
::doCompilation (const C_string & inSourceFileName_,
                 sint16 & returnCode) {
  C_timer timer ;
  try{
    if (mTerminalIO.versionModeOn ()) {
      ::printf ("Reading '%s'\n", inSourceFileName_.getStringPtr ()) ;
    }
    mScanner_.resetAndLoadSourceFromFile (inSourceFileName_) ;
    beforeParsing_ () ;
    if (! mLexiqueMapForUse.isBuilt ()) {
      C_string message ;
      message << "the '"
                 "mLexiqueMapForUse"
                 "' program parameter has not been initialized" ;
      throw C_exception (message.getStringPtr (), 0, 0 COMMA_HERE) ;
    }
    if (! mSemanticsComponentsMap.isBuilt ()) {
      C_string message ;
      message << "the '"
                 "mSemanticsComponentsMap"
                 "' program parameter has not been initialized" ;
      throw C_exception (message.getStringPtr (), 0, 0 COMMA_HERE) ;
    }
    if (! mSyntaxComponentsMap.isBuilt ()) {
      C_string message ;
      message << "the '"
                 "mSyntaxComponentsMap"
                 "' program parameter has not been initialized" ;
      throw C_exception (message.getStringPtr (), 0, 0 COMMA_HERE) ;
    }
    if (! mGrammarsComponentsMap.isBuilt ()) {
      C_string message ;
      message << "the '"
                 "mGrammarsComponentsMap"
                 "' program parameter has not been initialized" ;
      throw C_exception (message.getStringPtr (), 0, 0 COMMA_HERE) ;
    }
    if (! mOptionComponentsMap.isBuilt ()) {
      C_string message ;
      message << "the '"
                 "mOptionComponentsMap"
                 "' program parameter has not been initialized" ;
      throw C_exception (message.getStringPtr (), 0, 0 COMMA_HERE) ;
    }
    galgas_SLR_grammar grammar_ ;
    grammar_.startParsing_ (mScanner_,
                                mLexiqueMapForUse,
                                mSemanticsComponentsMap,
                                mSyntaxComponentsMap,
                                mGrammarsComponentsMap,
                                mOptionComponentsMap) ;
    if (mTerminalIO.getErrorTotalCount () == 0) {
      afterParsing_ () ;
    }
    ::printf ("Analysis of '%s' completed. ", mScanner_.getSourceFile ().getFileNameWithSuffix ().getStringPtr ()) ;
    switch (mTerminalIO.getErrorTotalCount ()) {
    case 0 :
      ::printf ("No error, ") ;
      break ;
    case 1 :
      ::printf ("1 error, ") ;
      returnCode = 1 ; // Error code
      break ;
    default :
      ::printf ("%ld errors, ", mTerminalIO.getErrorTotalCount ()) ;
      returnCode = 1 ; // Error code
      break ;
    }
    switch (mTerminalIO.getWarningsCount ()) {
    case 0 :
      ::printf ("no warning") ;
      break ;
    case 1 :
      ::printf ("1 warning") ;
      break ;
    default :
      ::printf ("%ld warnings", mTerminalIO.getWarningsCount ()) ;
      break ;
    }
    timer.stopTimer () ;
      co << " (" << timer << ").\n" ;
  }catch (const C_TextReadException & inFileReadError) {
    ::printf ("Error : %s\n", inFileReadError.what ()) ; // Error when reading source file
    returnCode = 1 ;
  }
}

//---------------------------------------------------------------------------*

int myMain  (const int argc, const char * argv []) {
  sint16 returnCode = 0 ; // No error
//--- Input/output parameters
  C_options_for_galgas_SLR_prgm options (false) ;
  C_galgas_io_parameters IOparameters  (& options) ;
  IOparameters.mCompilerVersion = "version 0.14.1 (SLR grammar)" ;
  IOparameters.mMaxErrorsCount = 100 ;
  IOparameters.mMaxWarningsCount = 100 ;
  TC_unique_grow_array <C_string> sourceFilesArray ;
  #ifdef TARGET_API_MAC_CARBON
    printf ("%s\n", IOparameters.mCompilerVersion.getStringPtr ()) ;
  #endif
  #ifdef COMPILE_FOR_WIN32
    printf ("%s\n", IOparameters.mCompilerVersion.getStringPtr ()) ;
  #endif
  F_analyze_command_line_opts (argc, argv,
                               "version 0.14.1 (SLR grammar)",
                               options,
                               sourceFilesArray,
                               "ggs",
                               IOparameters.mCocoaOutput) ;
  galgas_SLR_prgm compiler (IOparameters) ;
  try{
    for (sint32 i=0 ; (i<sourceFilesArray.getCount ()) && (returnCode == 0) ; i++) {
      compiler.doCompilation (sourceFilesArray (i COMMA_HERE), returnCode) ;
    }
  }catch (const M_STD_NAMESPACE exception & e) {
    F_default_display_exception (e) ;
    returnCode = 1 ; // Error code
  }catch (...) {
    F_default_display_unknown_exception () ;
    returnCode = 2 ; // Error code
  }
  return returnCode ;
}

//---------------------------------------------------------------------------*

