//---------------------------------------------------------------------------*
//                                                                           *
//             File 'optionTreewalkingForBuildingOptionMap.cpp'              *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     august 30th, 2007, at 14h41'27"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//#define TRACE_TREE_WALKING

//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "optionTreewalkingForBuildingOptionMap.h"
#include "optionSemantics.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionTreewalkingForBuildingOptionMap.gTreewalking", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Treewalking routine prototype declaration                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap) ;

static void
_treewalking_routine_commandLineOption (C_Compiler & _inLexique,
                                const cPtr_commandLineOption * _currentObject,
                                GGS_stringset  & var_cas_ioOptionNameSet,
                                GGS_commandLineOptionMap  & var_cas_ioBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioStringOptionMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Treewalking routine type declaration                    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void
_treewalking_routine_optionComponentRoot_type (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap) ;

typedef void
_treewalking_routine_commandLineOption_type (C_Compiler & _inLexique,
                                const cPtr_commandLineOption * _currentObject,
                                GGS_stringset  & var_cas_ioOptionNameSet,
                                GGS_commandLineOptionMap  & var_cas_ioBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioStringOptionMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Dispatcher tables                              *
//                                                                           *
//---------------------------------------------------------------------------*


static const uint32 _kSize_optionMetamodel = 2 ;

static const CTreewalkingVirtualMethod _kDispatcherFor_optionMetamodel [_kSize_optionMetamodel] = {
  {0, (void *) _treewalking_routine_optionComponentRoot}, // @optionComponentRoot, defined in 'optionMetamodel' metamodel
  {1, (void *) _treewalking_routine_commandLineOption}, // @commandLineOption, defined in 'optionMetamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static C_TreewalkingDispacher _gDispatcherTree ;

//---------------------------------------------------------------------------*
//                                                                           *
//         'optionComponentRoot' treewalking routine implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @optionComponentRoot\n") ; fflush (stdout) ;
  #endif
  var_cas_outBoolOptionMap = GGS_commandLineOptionMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_outUIntOptionMap = GGS_commandLineOptionMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_outStringOptionMap = GGS_commandLineOptionMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_optionNameSet ;
  var_cas_optionNameSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { AC_galgas_entity_list::cEntityListElement * _ptr = _currentObject->mOptions.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_commandLineOption_type * _f = (_treewalking_routine_commandLineOption_type *) _gDispatcherTree.entry (_ptr->ptr () COMMA_HERE) ;
      MF_Assert (dynamic_cast <cPtr_commandLineOption *> (_ptr->ptr ()) != NULL, "Treewalking dispatch error", 0, 0) ;
      (* _f) (_inLexique, (cPtr_commandLineOption *) _ptr->ptr (), var_cas_optionNameSet, var_cas_outBoolOptionMap, var_cas_outUIntOptionMap, var_cas_outStringOptionMap) ;
      _ptr = _ptr->internalNextItem () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'commandLineOption' treewalking routine implementation           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_commandLineOption (C_Compiler & _inLexique,
                                const cPtr_commandLineOption * _currentObject,
                                GGS_stringset  & var_cas_ioOptionNameSet,
                                GGS_commandLineOptionMap  & var_cas_ioBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_ioStringOptionMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @commandLineOption\n") ; fflush (stdout) ;
  #endif
  if ((var_cas_ioOptionNameSet.reader_hasKey (_inLexique, _currentObject->mOptionInternalName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) COMMA_SOURCE_FILE_AT_LINE (51))).isBuiltAndTrue ()) {
    _currentObject->mOptionInternalName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (_currentObject->mOptionInternalName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (52))))._operator_concat (GGS_string (true, "' command line option has been already declared")) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }else if (((_currentObject->mOptionTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)))._operator_isEqual (GGS_string (true, "bool"))).isBuiltAndTrue ()) {
    var_cas_ioBoolOptionMap.modifier_insertKey (_inLexique, _currentObject->mOptionInternalName, _currentObject->mOptionInvocationLetter, _currentObject->mOptionInvocationString, _currentObject->mOptionComment COMMA_SOURCE_FILE_AT_LINE (54)) ;
  }else if (((_currentObject->mOptionTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)))._operator_isEqual (GGS_string (true, "uint"))).isBuiltAndTrue ()) {
    var_cas_ioUIntOptionMap.modifier_insertKey (_inLexique, _currentObject->mOptionInternalName, _currentObject->mOptionInvocationLetter, _currentObject->mOptionInvocationString, _currentObject->mOptionComment COMMA_SOURCE_FILE_AT_LINE (61)) ;
  }else if (((_currentObject->mOptionTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)))._operator_isEqual (GGS_string (true, "string"))).isBuiltAndTrue ()) {
    var_cas_ioStringOptionMap.modifier_insertKey (_inLexique, _currentObject->mOptionInternalName, _currentObject->mOptionInvocationLetter, _currentObject->mOptionInvocationString, _currentObject->mOptionComment COMMA_SOURCE_FILE_AT_LINE (68)) ;
  }else{
    _currentObject->mOptionTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "only the @bool, @uint or @string types are allowed here") COMMA_SOURCE_FILE_AT_LINE (75)) ;
  }
  var_cas_ioOptionNameSet._addAssign_operation (_currentObject->mOptionInternalName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (77))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Build Dispatcher Tree                            *
//                                                                           *
//---------------------------------------------------------------------------*

static void _build_dispacher_tree (void) {
  _gDispatcherTree.enterTable (_metamodel_index_for_optionMetamodel (),
                                _kSize_optionMetamodel,
                                _kDispatcherFor_optionMetamodel
                                COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                               Root routine                                *
//                                                                           *
//---------------------------------------------------------------------------*

void
_walk_throught_optionTreewalkingForBuildingOptionMap (C_Compiler & _inLexique,
                                const GGS_optionComponentRoot & _rootObject,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap) {
  if (_rootObject._isBuilt ()) {
    if (! _gDispatcherTree.isInited ()) {
      _build_dispacher_tree () ;
    }
    _treewalking_routine_optionComponentRoot_type * _f = (_treewalking_routine_optionComponentRoot_type *) _gDispatcherTree.entry (_rootObject.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _rootObject.getPtr (), var_cas_outBoolOptionMap, var_cas_outUIntOptionMap, var_cas_outStringOptionMap) ;
  }else{
    var_cas_outBoolOptionMap._drop_operation () ;
    var_cas_outUIntOptionMap._drop_operation () ;
    var_cas_outStringOptionMap._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

