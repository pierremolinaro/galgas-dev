//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'templateAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 25th, 2010, at 14h51'41"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "templateAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_templateVariableMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_templateVariableMap::e_templateVariableMap (void) :
mTypeProxy (),
mCppName () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@templateVariableMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateVariableMap ("templateVariableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_templateVariableMap::
elementOf_GGS_templateVariableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_templateVariableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_templateVariableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_templateVariableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_templateVariableMap * ptr = dynamic_cast <const elementOf_GGS_templateVariableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_templateVariableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_templateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_templateVariableMap * info = (e_templateVariableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_templateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_templateVariableMap * info = (e_templateVariableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_templateVariableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_templateVariableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateVariableMap::
operator_isEqual (const GGS_templateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateVariableMap::
operator_isNotEqual (const GGS_templateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_templateVariableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_templateVariableMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_templateVariableMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_templateVariableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_templateVariableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_templateVariableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_templateVariableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @templateVariableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_templateVariableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_templateVariableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_templateVariableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_templateVariableMap * p = NULL ;
    macroMyNew (p, GGS_templateVariableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_templateVariableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_templateVariableMap * p = dynamic_cast <const GGS_templateVariableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_templateVariableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_templateVariableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_templateVariableMap ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0,
                                             const GGS_string& inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_templateVariableMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of 'templateAnalysisContext' struct             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateAnalysisContext ("templateAnalysisContext", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext::GGS_templateAnalysisContext (void) :
mSemanticContext (),
mPredefinedTypes (),
mTemplateVariableMap () {
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext::~GGS_templateAnalysisContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_templateAnalysisContext::drop (void) {
  mSemanticContext.drop () ;
  mPredefinedTypes.drop () ;
  mTemplateVariableMap.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_templateAnalysisContext::isBuilt (void) const {
  return mSemanticContext.isBuilt ()
    && mPredefinedTypes.isBuilt ()
    && mTemplateVariableMap.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateAnalysisContext::
operator_isEqual (const GGS_templateAnalysisContext & inOperand) const {
  return mSemanticContext.operator_isEqual (inOperand.mSemanticContext)
    .operator_and (mPredefinedTypes.operator_isEqual (inOperand.mPredefinedTypes))
    .operator_and (mTemplateVariableMap.operator_isEqual (inOperand.mTemplateVariableMap)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateAnalysisContext::
operator_isNotEqual (const GGS_templateAnalysisContext & inOperand) const {
  return mSemanticContext.operator_isNotEqual (inOperand.mSemanticContext)
    .operator_or (mPredefinedTypes.operator_isNotEqual (inOperand.mPredefinedTypes))
    .operator_or (mTemplateVariableMap.operator_isNotEqual (inOperand.mTemplateVariableMap)) ;
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext GGS_templateAnalysisContext::
constructor_new (const GGS_semanticContext& argument_0,
                 const GGS_predefinedTypes& argument_1,
                 const GGS_templateVariableMap & argument_2) {
  GGS_templateAnalysisContext result ;
  result.mSemanticContext = argument_0 ;
  result.mPredefinedTypes = argument_1 ;
  result.mTemplateVariableMap = argument_2 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_templateAnalysisContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @templateAnalysisContext" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSemanticContext " ;
    _s << mSemanticContext.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mPredefinedTypes " ;
    _s << mPredefinedTypes.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mTemplateVariableMap " ;
    _s << mTemplateVariableMap.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_templateAnalysisContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_templateAnalysisContext * p = NULL ;
    macroMyNew (p, GGS_templateAnalysisContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext GGS_templateAnalysisContext::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_templateAnalysisContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_templateAnalysisContext * p = dynamic_cast <const GGS_templateAnalysisContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_templateAnalysisContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_templateAnalysisContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_templateAnalysisContext ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@templateExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis> gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis (typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis
findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.count ()) {
    result = gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (superClassPtr) ;
      gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateReaderCallInExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateReaderCallInExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateReaderCallInExpressionAST * operand_3581,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3581 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_3581->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3581->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_isCategory ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    elementOf_GGS_readerMap * operand_4194 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
    if (NULL != operand_4194) {
      var_cas_readerFormalArgumentTypeList = operand_4194->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_4194->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_4194->mInfo.mReturnedType ;
      var_cas_isCategory = operand_4194->mInfo.mIsCategory ;
    }else{
      const GGS_bool cond_4642 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_4642.isBuiltAndTrue ()) {
        operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (88)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (91)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
      }else if (cond_4642.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_readerMap::cEnumerator enumerator_4690 (var_cas_readerMap, true) ;
          const GGS_readerMap::cElement * operand_4690 = NULL ;
          while (((operand_4690 = enumerator_4690.nextObject ()))) {
            macroValidPointer (operand_4690) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_4690->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_4758 (operand_4690->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_4758 = NULL ;
              while (((operand_4758 = enumerator_4758.nextObject ()))) {
                macroValidPointer (operand_4758) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_4758->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_4690->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (98))) ;
          }
        }
        operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (101)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_3581->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (106)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
      }
    }
    const GGS_bool cond_5610 = (operand_3581->mExpressionList.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_5610.isBuiltAndTrue ()) {
      operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_3581->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (110)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_3581->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (113)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_5610.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_templateExpressionListAST::cEnumerator enumerator_5727 (operand_3581->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_5727 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5757 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_5757 = NULL ;
        while (((operand_5727 = enumerator_5727.nextObject ()))
            && ((operand_5757 = enumerator_5757.nextObject ()))) {
          macroValidPointer (operand_5727) ;
          macroValidPointer (operand_5757) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_5727->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_5727->mExpression (HERE), var_cas_inAnalysisContext, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (117)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_5757->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (118)),  operand_5727->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (118)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_3581->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), var_cas_isCategory, var_cas_receiverExpression, operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (126)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (121)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateConstructorAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateConstructorAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateConstructorAST * operand_6608,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6608 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_constructorType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_6608->mTypeName COMMA_SOURCE_FILE_AT_LINE (141)) ;
    const GGS_constructorMap  var_cas_constructorMap = var_cas_constructorType.reader_mConstructorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
    elementOf_GGS_constructorMap * operand_7141 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (operand_6608->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148))) ;
    if (NULL != operand_7141) {
      var_cas_constructorFormalArgumentTypeList = operand_7141->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_7141->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_7141->mInfo.mReturnedType ;
    }else{
      const GGS_bool cond_7566 = (var_cas_constructorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_7566.isBuiltAndTrue ()) {
        operand_6608->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_6608->mTypeName)).operator_concat (GGS_string ("' type does not define any constructor")) COMMA_SOURCE_FILE_AT_LINE (158)) ;
        var_cas_constructorFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
      }else if (cond_7566.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_constructorMap::cEnumerator enumerator_7619 (var_cas_constructorMap, true) ;
          const GGS_constructorMap::cElement * operand_7619 = NULL ;
          while (((operand_7619 = enumerator_7619.nextObject ()))) {
            macroValidPointer (operand_7619) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_7619->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_7687 (operand_7619->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_7687 = NULL ;
              while (((operand_7687 = enumerator_7687.nextObject ()))) {
                macroValidPointer (operand_7687) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_7687->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (163))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_7619->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (165))) ;
          }
        }
        operand_6608->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (operand_6608->mTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_6608->mConstructorName)).operator_concat (GGS_string ("' constructor; "))).operator_concat ((((var_cas_constructorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("available constructors are")) : (GGS_string ("available constructor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (173)) ;
        var_cas_constructorFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
      }
    }
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    const GGS_bool cond_8684 = (operand_6608->mExpressionList.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
    if (cond_8684.isBuiltAndTrue ()) {
      operand_6608->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_6608->mConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (operand_6608->mTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_6608->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (183)) ;
      var_cas_constructorEffectiveParameterList.drop () ;
    }else if (cond_8684.isBuiltAndFalse ()) {
      var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_templateExpressionListAST::cEnumerator enumerator_8804 (operand_6608->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_8804 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_8839 (var_cas_constructorFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_8839 = NULL ;
        while (((operand_8804 = enumerator_8804.nextObject ()))
            && ((operand_8839 = enumerator_8839.nextObject ()))) {
          macroValidPointer (operand_8804) ;
          macroValidPointer (operand_8839) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_8804->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_8804->mExpression (HERE), var_cas_inAnalysisContext, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (187)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_8839->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (188)),  operand_8804->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (188)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
    }
    var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_6608->mConstructorName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (195)), var_cas_constructorType, operand_6608->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (193)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateFileWrapperWithStaticPathAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFileWrapperWithStaticPathAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateFileWrapperWithStaticPathAST * operand_9683,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9683 != NULL) {
    operand_9683->mFileWrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @templateFileWrapperWithStaticPathAST templateExpressionAnalysis") COMMA_SOURCE_FILE_AT_LINE (212)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateFileWrapperTemplateCallAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFileWrapperTemplateCallAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateFileWrapperTemplateCallAST * operand_10371,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10371 != NULL) {
    operand_10371->mFileWrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @templateFileWrapperTemplateCallAST templateExpressionAnalysis") COMMA_SOURCE_FILE_AT_LINE (228)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateAndOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateAndOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateAndOperationAST * operand_11538,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11538 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_11538->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11538->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (256)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_11538->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_11538->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (259)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (264)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (265))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_11538->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (262)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_11538->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (271)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateOrOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateOrOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateOrOperationAST * operand_12587,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12587 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_12587->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_12587->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (287)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_12587->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_12587->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (292)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (295)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (296))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_12587->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (293)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_12587->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (302)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateXorOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateXorOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateXorOperationAST * operand_13635,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13635 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_13635->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_13635->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (318)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_13635->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_13635->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (321)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (323)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (326)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (327))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (327)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_13635->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (324)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_13635->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (333)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateConcatOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateConcatOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateConcatOperationAST * operand_14688,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14688 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_14688->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_14688->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (349)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_14688->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_14688->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (352)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (354)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (357)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (358))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (358)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_14688->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (355)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_14688->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (364)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateTrueBoolAST.templateExpressionAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateTrueBoolAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateTrueBoolAST * operand_15740,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15740 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_15740->mLocation COMMA_SOURCE_FILE_AT_LINE (378)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateFalseBoolAST.templateExpressionAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFalseBoolAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateFalseBoolAST * operand_16113,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16113 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_16113->mLocation COMMA_SOURCE_FILE_AT_LINE (387)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralStringExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralStringExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralStringExpressionAST * operand_16501,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16501 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    {
      GGS_stringlist::cEnumerator enumerator_16649 (operand_16501->mLiteralStringList, true) ;
      const GGS_stringlist::cElement * operand_16649 = NULL ;
      while (((operand_16649 = enumerator_16649.nextObject ()))) {
        macroValidPointer (operand_16649) ;
        var_cas_s.dotAssign_operation (operand_16649->mValue) ;
      }
    }
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_16501->mLocation, var_cas_s COMMA_SOURCE_FILE_AT_LINE (400)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralUIntExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralUIntExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralUIntExpressionAST * operand_16986,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16986 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, operand_16986->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (411)), operand_16986->mLiteralInt.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (409)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralSIntExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralSIntExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralSIntExpressionAST * operand_17426,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17426 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSIntType, operand_17426->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (424)), operand_17426->mLiteralInt.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (425)) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralUInt64ExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralUInt64ExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralUInt64ExpressionAST * operand_17868,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17868 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUInt64Type, operand_17868->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (437)), operand_17868->mLiteralInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (438)) COMMA_SOURCE_FILE_AT_LINE (435)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralSInt64ExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralSInt64ExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralSInt64ExpressionAST * operand_18316,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18316 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSInt64Type, operand_18316->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (450)), operand_18316->mLiteralInt.reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralCharExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralCharExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralCharExpressionAST * operand_18761,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18761 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_18761->mLiteralChar.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (463)), operand_18761->mLiteralChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralDoubleExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralDoubleExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLiteralDoubleExpressionAST * operand_19205,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19205 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mDoubleType, operand_19205->mLiteralDouble.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (476)), operand_19205->mLiteralDouble.reader_double (inLexique COMMA_SOURCE_FILE_AT_LINE (477)) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateIfThenElseExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateIfThenElseExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateIfThenElseExpressionAST * operand_19656,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19656 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_19656->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_19656->mIfExpression (HERE), var_cas_inAnalysisContext, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (489)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_19656->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_19656->mThenExpression (HERE), var_cas_inAnalysisContext, var_cas_then_expression COMMA_SOURCE_FILE_AT_LINE (492)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_19656->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_19656->mElseExpression (HERE), var_cas_inAnalysisContext, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (495)) ;
      }
    }
    const GGS_bool cond_20500 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (497)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (497))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_20500.isBuiltAndTrue ()) {
      operand_19656->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (499)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (499)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (502)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_20500.isBuiltAndFalse ()) {
      const GGS_bool cond_20762 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (502))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (502))) ;
      if (cond_20762.isBuiltAndTrue ()) {
        operand_19656->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (504)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (504)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (507)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_20762.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (510)), operand_19656->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (509)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateTestComplementAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateTestComplementAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateTestComplementAST * operand_21147,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21147 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_21147->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_21147->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (527)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (529)) ;
    const GGS_bool cond_21700 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (530))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (530)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_21700.isBuiltAndTrue ()) {
      operand_21147->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (532)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (535)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_21700.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_complementExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_21147->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (537)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateLogicalNegateAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLogicalNegateAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLogicalNegateAST * operand_22024,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22024 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_22024->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_22024->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (553)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (555)) ;
    const GGS_bool cond_22577 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (556))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (556)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_22577.isBuiltAndTrue ()) {
      operand_22024->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (558)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (561)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_22577.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_22024->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (563)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateOptionAccessAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateOptionAccessAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateOptionAccessAST * operand_22893,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22893 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_22893->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (580)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (586))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mBoolType ;
    const GGS_bool cond_23601 = (var_cas_found).operator_not () ;
    if (cond_23601.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (589))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_23765 = (var_cas_found).operator_not () ;
    if (cond_23765.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (593))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_25060 = var_cas_found ;
    if (cond_25060.isBuiltAndTrue ()) {
      const GGS_bool cond_24046 = (operand_22893->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (597))).operator_isEqual (GGS_string ("value")) ;
      if (cond_24046.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_22893->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (600)), operand_22893->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (601)), operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) COMMA_SOURCE_FILE_AT_LINE (598)) ;
      }else if (cond_24046.isBuiltAndFalse ()) {
        const GGS_bool cond_24331 = (operand_22893->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (604))).operator_isEqual (GGS_string ("char")) ;
        if (cond_24331.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_22893->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (607)), operand_22893->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (608)), operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (609)) COMMA_SOURCE_FILE_AT_LINE (605)) ;
        }else if (cond_24331.isBuiltAndFalse ()) {
          const GGS_bool cond_24622 = (operand_22893->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (611))).operator_isEqual (GGS_string ("string")) ;
          if (cond_24622.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_22893->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (614)), operand_22893->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (615)), operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (612)) ;
          }else if (cond_24622.isBuiltAndFalse ()) {
            const GGS_bool cond_24914 = (operand_22893->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (618))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_24914.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_22893->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (621)), operand_22893->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (622)), operand_22893->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (623)) COMMA_SOURCE_FILE_AT_LINE (619)) ;
            }else if (cond_24914.isBuiltAndFalse ()) {
              operand_22893->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (627)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_25060.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_25108 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_25108 = NULL ;
        while (((operand_25108 = enumerator_25108.nextObject ()))) {
          macroValidPointer (operand_25108) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_25108->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_25204 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_25204 = NULL ;
        while (((operand_25204 = enumerator_25204.nextObject ()))) {
          macroValidPointer (operand_25204) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_25204->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_25302 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_25302 = NULL ;
        while (((operand_25302 = enumerator_25302.nextObject ()))) {
          macroValidPointer (operand_25302) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_25302->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_22893->mOptionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_22893->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_22893->mOptionName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (643)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateFunctionCallAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFunctionCallAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateFunctionCallAST * operand_25883,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25883 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature ;
    GGS_unifiedTypeMapProxy  var_cas_resultType ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFunctionMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFunctionMap (HERE)->method_searchKey (inLexique, operand_25883->mFunctionName, var_cas_functionSignature, var_cas_resultType COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }
    const GGS_bool cond_26595 = (var_cas_functionSignature.reader_length ()).operator_isNotEqual (operand_25883->mExpressionList.reader_length ()) ;
    if (cond_26595.isBuiltAndTrue ()) {
      operand_25883->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_25883->mFunctionName)).operator_concat (GGS_string ("' function header declares "))).operator_concat (var_cas_functionSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (661)))).operator_concat (GGS_string (" formal parameter(s), but this function call names "))).operator_concat (operand_25883->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (662)))).operator_concat (GGS_string (" effective argument(s)")) COMMA_SOURCE_FILE_AT_LINE (666)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_26595.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_semanticExpressionListForGeneration = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_26716 (var_cas_functionSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_26716 = NULL ;
        GGS_templateExpressionListAST::cEnumerator enumerator_26733 (operand_25883->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_26733 = NULL ;
        while (((operand_26716 = enumerator_26716.nextObject ()))
            && ((operand_26733 = enumerator_26733.nextObject ()))) {
          macroValidPointer (operand_26716) ;
          macroValidPointer (operand_26733) ;
          GGS_semanticExpressionForGeneration  var_cas_expression ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_26733->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_26733->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (670)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_26716->mType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (671)),  operand_26733->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (671)) ;
          var_cas_semanticExpressionListForGeneration.addAssign_operation (var_cas_expression) ;
        }
      }
      var_cas_outExpression = GGS_functionCallExpressionForGeneration ::constructor_new (inLexique, var_cas_resultType, operand_25883->mFunctionName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (676)), operand_25883->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), var_cas_semanticExpressionListForGeneration COMMA_SOURCE_FILE_AT_LINE (674)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateVarInExpressionAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateVarInExpressionAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateVarInExpressionAST * operand_27685,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27685 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_type ;
    GGS_string var_cas_sourceVariableCppName ;
    GGS_string var_cas_nameForCheckingFormalParameterUsing ;
    if (var_cas_inAnalysisContext.mTemplateVariableMap.isBuilt ()) {
      var_cas_inAnalysisContext.mTemplateVariableMap (HERE)->method_searchKey (inLexique, operand_27685->mVarName, var_cas_type, var_cas_sourceVariableCppName COMMA_SOURCE_FILE_AT_LINE (698)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_28022 (operand_27685->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_28022 = NULL ;
      while (((operand_28022 = enumerator_28022.nextObject ()))) {
        macroValidPointer (operand_28022) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_type.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_28022->mValue, var_cas_type COMMA_SOURCE_FILE_AT_LINE (701)) ;
        }
      }
    }
    var_cas_outExpression = GGS_varInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_27685->mVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (705)), var_cas_sourceVariableCppName, var_cas_sourceVariableCppName, operand_27685->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (703)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateAddOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateAddOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateAddOperationAST * operand_28641,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28641 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_28641->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_28641->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (722)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_28641->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_28641->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (725)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (727)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (730)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (731))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (731)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_28641->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (728)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_28641->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (737)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateSubOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateSubOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateSubOperationAST * operand_29846,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29846 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_29846->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29846->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (755)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_29846->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29846->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (758)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (760)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (763)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (764))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (764)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_29846->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (761)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_29846->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (770)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateMultiplyOperationAST.templateExpressionAnalysis' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateMultiplyOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateMultiplyOperationAST * operand_31056,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31056 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_31056->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_31056->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (788)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_31056->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_31056->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (791)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (796)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (797))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (797)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_31056->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (794)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_31056->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (803)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateDivideOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateDivideOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateDivideOperationAST * operand_32275,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32275 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_32275->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32275->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (821)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_32275->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32275->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (824)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (826)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (829)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (830))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (830)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_32275->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (827)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_32275->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (836)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateModuloOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateModuloOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateModuloOperationAST * operand_33488,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33488 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_33488->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33488->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (854)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_33488->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33488->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (857)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (859)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (862)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (863))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (863)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_33488->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (860)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_33488->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (869)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateUnaryMinusOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateUnaryMinusOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateUnaryMinusOperationAST * operand_34705,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34705 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_34705->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34705->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (887)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
    const GGS_bool cond_35266 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (890))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (890)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_35266.isBuiltAndTrue ()) {
      operand_34705->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (892)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (895)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_35266.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_34705->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (897)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateEqualTestAST.templateExpressionAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateEqualTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateEqualTestAST * operand_35742,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35742 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_35742->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_35742->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (915)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_35742->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_35742->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (918)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (920)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (921)) ;
    const GGS_bool cond_36622 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (922)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (922)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
    if (cond_36622.isBuiltAndTrue ()) {
      operand_35742->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (924)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (924)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (927)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_36622.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_35742->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (929)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateNonEqualTestAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateNonEqualTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateNonEqualTestAST * operand_37009,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37009 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_37009->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37009->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (946)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_37009->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37009->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (949)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (951)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (952)) ;
    const GGS_bool cond_37887 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (953)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (953))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (953)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (953))) ;
    if (cond_37887.isBuiltAndTrue ()) {
      operand_37009->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (955)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (955)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (958)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_37887.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_37009->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (960)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateStrictInfTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateStrictInfTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateStrictInfTestAST * operand_38278,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38278 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_38278->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38278->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (977)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_38278->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38278->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (980)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (982)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (983)) ;
    const GGS_bool cond_39102 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (984))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (984)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_39102.isBuiltAndTrue ()) {
      operand_38278->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (986)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (989)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_39102.isBuiltAndFalse ()) {
      const GGS_bool cond_39352 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (989))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (989))) ;
      if (cond_39352.isBuiltAndTrue ()) {
        operand_38278->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (991)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (991)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (994)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_39352.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_38278->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (996)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateInfOrEqualTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInfOrEqualTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInfOrEqualTestAST * operand_39747,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39747 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_39747->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39747->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1013)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_39747->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39747->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1016)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1018)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    const GGS_bool cond_40572 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1020))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1020)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_40572.isBuiltAndTrue ()) {
      operand_39747->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1022)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (1025)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_40572.isBuiltAndFalse ()) {
      const GGS_bool cond_40823 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1025))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1025))) ;
      if (cond_40823.isBuiltAndTrue ()) {
        operand_39747->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1030)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_40823.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_39747->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1032)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateStrictSupTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateStrictSupTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateStrictSupTestAST * operand_41218,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41218 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_41218->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41218->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_41218->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41218->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1052)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1054)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)) ;
    const GGS_bool cond_42042 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1056))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_42042.isBuiltAndTrue ()) {
      operand_41218->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1058)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_42042.isBuiltAndFalse ()) {
      const GGS_bool cond_42292 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1061))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1061))) ;
      if (cond_42292.isBuiltAndTrue ()) {
        operand_41218->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1063)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1063)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1066)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_42292.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_41218->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1068)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateSupOrEqualTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateSupOrEqualTestAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateSupOrEqualTestAST * operand_42689,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42689 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_42689->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42689->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_42689->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42689->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)) ;
    const GGS_bool cond_43514 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1092))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_43514.isBuiltAndTrue ()) {
      operand_42689->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_43514.isBuiltAndFalse ()) {
      const GGS_bool cond_43765 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1097))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1097))) ;
      if (cond_43765.isBuiltAndTrue ()) {
        operand_42689->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_43765.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_42689->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLeftShiftOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLeftShiftOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateLeftShiftOperationAST * operand_44167,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44167 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_44167->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44167->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1121)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_44167->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44167->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1127)) ;
    const GGS_bool cond_44998 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1128))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1128)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_44998.isBuiltAndTrue ()) {
      operand_44167->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_44998.isBuiltAndFalse ()) {
      const GGS_bool cond_45190 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1133))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_45190.isBuiltAndTrue ()) {
        operand_44167->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1138)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_45190.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_leftShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_44167->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateRightShiftOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateRightShiftOperationAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateRightShiftOperationAST * operand_45550,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45550 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_45550->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45550->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_45550->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45550->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
    const GGS_bool cond_46381 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1164))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_46381.isBuiltAndTrue ()) {
      operand_45550->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_46381.isBuiltAndFalse ()) {
      const GGS_bool cond_46573 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1169))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_46573.isBuiltAndTrue ()) {
        operand_45550->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1174)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_46573.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_45550->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1176)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateClassToTypeOperandAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateClassToTypeOperandAST__templateExpressionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateClassToTypeOperandAST * operand_46934,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46934 != NULL) {
    GGS_bool automatic_var_47148_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_47148_1 ;
    GGS_typeKindEnum automatic_var_47148_2 ;
    GGS_typedAttributeList  automatic_var_47148_3 ;
    GGS_attributeMap  automatic_var_47148_4 ;
    GGS_typedAttributeList  automatic_var_47148_5 ;
    GGS_constructorMap  automatic_var_47148_6 ;
    GGS_readerMap  automatic_var_47148_7 ;
    GGS_modifierMap  automatic_var_47148_8 ;
    GGS_instanceMethodMap  automatic_var_47148_9 ;
    GGS_classMethodMap  automatic_var_47148_10 ;
    GGS_enumerationDescriptorList  automatic_var_47148_11 ;
    GGS_uint  automatic_var_47148_12 ;
    GGS_unifiedTypeMapProxyList  automatic_var_47148_13 ;
    GGS_nativeAttributeList  automatic_var_47148_14 ;
    GGS_stringset  automatic_var_47148_15 ;
    GGS_lstringlist  automatic_var_47148_16 ;
    GGS_typedAttributeList  automatic_var_47148_17 ;
    GGS_mapSearchMethodListAST  automatic_var_47148_18 ;
    GGS_mapSearchMethodListAST  automatic_var_47148_19 ;
    GGS_withAccessorMap  automatic_var_47148_20 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_46934->mTypeName, automatic_var_47148_0, automatic_var_47148_1, automatic_var_47148_2, automatic_var_47148_3, automatic_var_47148_4, automatic_var_47148_5, automatic_var_47148_6, automatic_var_47148_7, automatic_var_47148_8, automatic_var_47148_9, automatic_var_47148_10, automatic_var_47148_11, automatic_var_47148_12, automatic_var_47148_13, automatic_var_47148_14, automatic_var_47148_15, automatic_var_47148_16, automatic_var_47148_17, automatic_var_47148_18, automatic_var_47148_19, automatic_var_47148_20 COMMA_SOURCE_FILE_AT_LINE (1192)) ;
    }
    var_cas_outExpression = GGS_literalTypeInExpressionForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("type"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1195)) COMMA_SOURCE_FILE_AT_LINE (1195)), operand_46934->mTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), operand_46934->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) COMMA_SOURCE_FILE_AT_LINE (1194)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@templateInstructionAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis> gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis (typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis
findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.count ()) {
    result = gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (superClassPtr) ;
      gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "templateInstructionListAnalysis"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateInstructionListAnalysis (C_Compiler & inLexique,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                const GGS_templateInstructionListAST   var_cas_inInstructionList,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateInstructionListAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_templateInstructionListAST::cEnumerator enumerator_48277 (var_cas_inInstructionList, true) ;
    const GGS_templateInstructionListAST::cElement * operand_48277 = NULL ;
    while (((operand_48277 = enumerator_48277.nextObject ()))) {
      macroValidPointer (operand_48277) ;
      { typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis method = findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (operand_48277->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_48277->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_ioInstructionList COMMA_SOURCE_FILE_AT_LINE (1220)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateInstructionListAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionStringAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionStringAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionStringAST * operand_48552,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48552 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionStringForGeneration ::constructor_new (inLexique, operand_48552->mTemplateString COMMA_SOURCE_FILE_AT_LINE (1230))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionExpressionAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionExpressionAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionExpressionAST * operand_48928,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48928 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_48928->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48928->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1240)) ;
      }
    }
    const GGS_bool cond_49318 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1241)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1241))).operator_isNotEqual (GGS_string ("string")) ;
    if (cond_49318.isBuiltAndTrue ()) {
      operand_48928->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("expression type should be '@string' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1242)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1242)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
    }
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionExpressionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1244))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateBlockInstructionAST.templateInstructionAnalysis' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateBlockInstructionAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateBlockInstructionAST * operand_49577,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49577 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_49577->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49577->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1254)) ;
      }
    }
    const GGS_bool cond_49963 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1255)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1255))).operator_isNotEqual (GGS_string ("uint")) ;
    if (cond_49963.isBuiltAndTrue ()) {
      operand_49577->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("expression type should be '@uint' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    }
    GGS_templateInstructionListForGeneration  var_cas_blockInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_49577->mBlockInstructionList,  var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (1259)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateBlockInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_49577->mLocation, var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (1260))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGetColumnLocationAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGetColumnLocationAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionGetColumnLocationAST * operand_50438,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50438 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionGetColumnLocationForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1269))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGotoColumnLocationAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGotoColumnLocationAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionGotoColumnLocationAST * operand_50816,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50816 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionGotoColumnLocationForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1278))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionForeachAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionForeachAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionForeachAST * operand_51184,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51184 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_51184->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51184->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1289)) ;
      }
    }
    GGS_templateInstructionListForGeneration  var_cas_beforeInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_51184->mBeforeInstructionList,  var_cas_beforeInstructionList COMMA_SOURCE_FILE_AT_LINE (1292)) ;
    GGS_templateVariableMap  var_cas_doVariableMap = var_cas_inAnalysisContext.mTemplateVariableMap ;
    const GGS_string var_cas_cppIndexVarName = (((GGS_string ("index_")).operator_concat (operand_51184->mIndexIdentifier.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)))).operator_concat (GGS_string ("_"))).operator_concat (operand_51184->mIndexIdentifier.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_doVariableMap.modifier_insertKey (inLexique, operand_51184->mIndexIdentifier, var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, var_cas_cppIndexVarName COMMA_SOURCE_FILE_AT_LINE (1296)) ;
    const GGS_templateAnalysisContext var_cas_doAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inAnalysisContext.mSemanticContext, var_cas_inAnalysisContext.mPredefinedTypes, var_cas_doVariableMap) ;
    GGS_templateInstructionListForGeneration  var_cas_doInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_doAnalysisContext,  operand_51184->mDoInstructionList,  var_cas_doInstructionList COMMA_SOURCE_FILE_AT_LINE (1303)) ;
    GGS_templateInstructionListForGeneration  var_cas_betweenInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_51184->mBetweenInstructionList,  var_cas_betweenInstructionList COMMA_SOURCE_FILE_AT_LINE (1306)) ;
    GGS_templateInstructionListForGeneration  var_cas_afterInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_51184->mAfterInstructionList,  var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (1309)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionForeachForGeneration ::constructor_new (inLexique, operand_51184->mIsAscending, var_cas_expression, var_cas_beforeInstructionList, var_cas_doInstructionList, operand_51184->mIndexIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)), var_cas_betweenInstructionList, var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (1311))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateInstructionIfAST.templateInstructionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionIfAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionIfAST * operand_53167,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53167 != NULL) {
    GGS_templateInstructionIfBranchListForGeneration  var_cas_templateInstructionIfBranchList = GGS_templateInstructionIfBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_templateInstructionIfBranchListAST::cEnumerator enumerator_53413 (operand_53167->mTemplateInstructionIfBranchList, true) ;
      const GGS_templateInstructionIfBranchListAST::cElement * operand_53413 = NULL ;
      while (((operand_53413 = enumerator_53413.nextObject ()))) {
        macroValidPointer (operand_53413) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_53413->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_53413->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1331)) ;
          }
        }
        const GGS_bool cond_53723 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1332)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1332))).operator_isNotEqual (GGS_string ("bool")) ;
        if (cond_53723.isBuiltAndTrue ()) {
          var_cas_expression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'if' expression type should be '@bool' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1334)) ;
        }
        GGS_templateInstructionListForGeneration  var_cas_instructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
        ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_53413->mInstructionList,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1336)) ;
        var_cas_templateInstructionIfBranchList.addAssign_operation (var_cas_expression, var_cas_instructionList) ;
      }
    }
    GGS_templateInstructionListForGeneration  var_cas_elseInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_53167->mElseInstructionList,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1341)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionIfForGeneration ::constructor_new (inLexique, var_cas_templateInstructionIfBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1343))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionSwitchAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionSwitchAST__templateInstructionAnalysis (C_Compiler & inLexique,
                                const cPtr_templateInstructionSwitchAST * operand_54462,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54462 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_54462->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54462->mSwitchExpression (HERE), var_cas_inAnalysisContext, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      }
    }
    const GGS_bool cond_54969 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1358))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1358))) ;
    if (cond_54969.isBuiltAndTrue ()) {
      var_cas_switchExpression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'switch' expression type should be an enumeration (it is a ")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_kind (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)))).operator_concat (GGS_string (" type)")) COMMA_SOURCE_FILE_AT_LINE (1360)) ;
    }
    const GGS_stringset  var_cas_enumConstantSet = var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)) ;
    GGS_templateInstructionSwitchBranchListForGeneration  var_cas_templateInstructionSwitchBranchList = GGS_templateInstructionSwitchBranchListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_namedConstantSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_templateInstructionSwitchBranchListAST::cEnumerator enumerator_55255 (operand_54462->mTemplateInstructionSwitchBranchList, true) ;
      const GGS_templateInstructionSwitchBranchListAST::cElement * operand_55255 = NULL ;
      while (((operand_55255 = enumerator_55255.nextObject ()))) {
        macroValidPointer (operand_55255) ;
        {
          GGS_lstringlist::cEnumerator enumerator_55284 (operand_55255->mConstantList, true) ;
          const GGS_lstringlist::cElement * operand_55284 = NULL ;
          while (((operand_55284 = enumerator_55284.nextObject ()))) {
            macroValidPointer (operand_55284) ;
            const GGS_bool cond_55484 = (var_cas_enumConstantSet.reader_hasKey (operand_55284->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)))).operator_not () ;
            if (cond_55484.isBuiltAndTrue ()) {
              operand_55284->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_55284->mValue)).operator_concat (GGS_string ("' is not a contant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1369)) ;
            }
            const GGS_bool cond_55656 = var_cas_namedConstantSet.reader_hasKey (operand_55284->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370))) ;
            if (cond_55656.isBuiltAndTrue ()) {
              operand_55284->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_55284->mValue)).operator_concat (GGS_string ("' constant is already named in the switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1372)) ;
            }
            var_cas_namedConstantSet.addAssign_operation (operand_55284->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1373))) ;
          }
        }
        GGS_templateInstructionListForGeneration  var_cas_instructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
        ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_55255->mInstructionList,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1376)) ;
        var_cas_templateInstructionSwitchBranchList.addAssign_operation (operand_55255->mConstantList, var_cas_instructionList) ;
      }
    }
    GGS_stringset  var_cas_missingConstants = var_cas_enumConstantSet.substract_operation (inLexique, var_cas_namedConstantSet COMMA_SOURCE_FILE_AT_LINE (1380)) ;
    const GGS_bool cond_56351 = (var_cas_missingConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_56351.isBuiltAndTrue ()) {
      GGS_string var_cas_m = GGS_string ("all constants should be named in a switch instruction; the following constants are missing:") ;
      {
        GGS_stringset::cEnumerator enumerator_56268 (var_cas_missingConstants, true) ;
        while (enumerator_56268.hasCurrentObject ()) {
          var_cas_m.appendCString ("\n"
            "  - '") ;
          var_cas_m.dotAssign_operation (enumerator_56268._key (HERE)) ;
          var_cas_m.appendCString ("'") ;
          enumerator_56268.next () ;
        }
      }
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    }
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionSwitchForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_templateInstructionSwitchBranchList COMMA_SOURCE_FILE_AT_LINE (1389))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_templateAnalysis (void) {
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateReaderCallInExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateReaderCallInExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateConstructorAST__templateExpressionAnalysis, gClassInfoFor__templateConstructorAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFileWrapperWithStaticPathAST__templateExpressionAnalysis, gClassInfoFor__templateFileWrapperWithStaticPathAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFileWrapperTemplateCallAST__templateExpressionAnalysis, gClassInfoFor__templateFileWrapperTemplateCallAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateAndOperationAST__templateExpressionAnalysis, gClassInfoFor__templateAndOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateOrOperationAST__templateExpressionAnalysis, gClassInfoFor__templateOrOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateXorOperationAST__templateExpressionAnalysis, gClassInfoFor__templateXorOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateConcatOperationAST__templateExpressionAnalysis, gClassInfoFor__templateConcatOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateTrueBoolAST__templateExpressionAnalysis, gClassInfoFor__templateTrueBoolAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFalseBoolAST__templateExpressionAnalysis, gClassInfoFor__templateFalseBoolAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralStringExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralStringExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralUIntExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralSIntExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralUInt64ExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralSInt64ExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralCharExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralCharExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralDoubleExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateIfThenElseExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateIfThenElseExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateTestComplementAST__templateExpressionAnalysis, gClassInfoFor__templateTestComplementAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLogicalNegateAST__templateExpressionAnalysis, gClassInfoFor__templateLogicalNegateAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateOptionAccessAST__templateExpressionAnalysis, gClassInfoFor__templateOptionAccessAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFunctionCallAST__templateExpressionAnalysis, gClassInfoFor__templateFunctionCallAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateVarInExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateVarInExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateAddOperationAST__templateExpressionAnalysis, gClassInfoFor__templateAddOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateSubOperationAST__templateExpressionAnalysis, gClassInfoFor__templateSubOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateMultiplyOperationAST__templateExpressionAnalysis, gClassInfoFor__templateMultiplyOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateDivideOperationAST__templateExpressionAnalysis, gClassInfoFor__templateDivideOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateModuloOperationAST__templateExpressionAnalysis, gClassInfoFor__templateModuloOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateUnaryMinusOperationAST__templateExpressionAnalysis, gClassInfoFor__templateUnaryMinusOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateNonEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateNonEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateStrictInfTestAST__templateExpressionAnalysis, gClassInfoFor__templateStrictInfTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateInfOrEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateInfOrEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateStrictSupTestAST__templateExpressionAnalysis, gClassInfoFor__templateStrictSupTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateSupOrEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateSupOrEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLeftShiftOperationAST__templateExpressionAnalysis, gClassInfoFor__templateLeftShiftOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateRightShiftOperationAST__templateExpressionAnalysis, gClassInfoFor__templateRightShiftOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateClassToTypeOperandAST__templateExpressionAnalysis, gClassInfoFor__templateClassToTypeOperandAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionStringAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionStringAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionExpressionAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionExpressionAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateBlockInstructionAST__templateInstructionAnalysis, gClassInfoFor__templateBlockInstructionAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionGetColumnLocationAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionGetColumnLocationAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionGotoColumnLocationAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionGotoColumnLocationAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionForeachAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionForeachAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionIfAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionIfAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionSwitchAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionSwitchAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_templateAnalysis (void) {
  gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.free () ;
  gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_templateAnalysis (prologueRoutineFor_templateAnalysis, epilogueRoutineFor_templateAnalysis) ;

//---------------------------------------------------------------------------*

