//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'templateAnalysis.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 28th, 2010, at 23h18'54"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "templateAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_templateVariableMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_templateVariableMap::e_templateVariableMap (void) :
mTypeProxy (),
mCppName () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@templateVariableMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateVariableMap ("templateVariableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_templateVariableMap::
elementOf_GGS_templateVariableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_templateVariableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_templateVariableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_templateVariableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_templateVariableMap * ptr = dynamic_cast <const elementOf_GGS_templateVariableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_templateVariableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_templateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_templateVariableMap * info = (e_templateVariableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_templateVariableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_templateVariableMap * info = (e_templateVariableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_templateVariableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_templateVariableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateVariableMap::
operator_isEqual (const GGS_templateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateVariableMap::
operator_isNotEqual (const GGS_templateVariableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_templateVariableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_templateVariableMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
method_searchKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_templateVariableMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_templateVariableMap::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_templateVariableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_templateVariableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_templateVariableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_templateVariableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @templateVariableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_templateVariableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_templateVariableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_templateVariableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_templateVariableMap * p = NULL ;
    macroMyNew (p, GGS_templateVariableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_templateVariableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_templateVariableMap * p = dynamic_cast <const GGS_templateVariableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_templateVariableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_templateVariableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_templateVariableMap ;
}

//---------------------------------------------------------------------------*

GGS_templateVariableMap GGS_templateVariableMap::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxy & inValue0,
                                             const GGS_string& inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_templateVariableMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of 'templateAnalysisContext' struct             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_templateAnalysisContext ("templateAnalysisContext", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext::GGS_templateAnalysisContext (void) :
mSemanticContext (),
mPredefinedTypes (),
mTemplateVariableMap () {
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext::~GGS_templateAnalysisContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_templateAnalysisContext::drop (void) {
  mSemanticContext.drop () ;
  mPredefinedTypes.drop () ;
  mTemplateVariableMap.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_templateAnalysisContext::isBuilt (void) const {
  return mSemanticContext.isBuilt ()
    && mPredefinedTypes.isBuilt ()
    && mTemplateVariableMap.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateAnalysisContext::
operator_isEqual (const GGS_templateAnalysisContext & inOperand) const {
  return mSemanticContext.operator_isEqual (inOperand.mSemanticContext)
    .operator_and (mPredefinedTypes.operator_isEqual (inOperand.mPredefinedTypes))
    .operator_and (mTemplateVariableMap.operator_isEqual (inOperand.mTemplateVariableMap)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_templateAnalysisContext::
operator_isNotEqual (const GGS_templateAnalysisContext & inOperand) const {
  return mSemanticContext.operator_isNotEqual (inOperand.mSemanticContext)
    .operator_or (mPredefinedTypes.operator_isNotEqual (inOperand.mPredefinedTypes))
    .operator_or (mTemplateVariableMap.operator_isNotEqual (inOperand.mTemplateVariableMap)) ;
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext GGS_templateAnalysisContext::
constructor_new (const GGS_semanticContext& argument_0,
                 const GGS_predefinedTypes& argument_1,
                 const GGS_templateVariableMap & argument_2) {
  GGS_templateAnalysisContext result ;
  result.mSemanticContext = argument_0 ;
  result.mPredefinedTypes = argument_1 ;
  result.mTemplateVariableMap = argument_2 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_templateAnalysisContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @templateAnalysisContext" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSemanticContext " ;
    _s << mSemanticContext.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mPredefinedTypes " ;
    _s << mPredefinedTypes.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mTemplateVariableMap " ;
    _s << mTemplateVariableMap.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_templateAnalysisContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_templateAnalysisContext * p = NULL ;
    macroMyNew (p, GGS_templateAnalysisContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_templateAnalysisContext GGS_templateAnalysisContext::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_templateAnalysisContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_templateAnalysisContext * p = dynamic_cast <const GGS_templateAnalysisContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_templateAnalysisContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_templateAnalysisContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_templateAnalysisContext ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@templateExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis> gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis (typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis
findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.count ()) {
    result = gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (superClassPtr) ;
      gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateReaderCallInExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateReaderCallInExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateReaderCallInExpressionAST * operand_3581,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3581 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_3581->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3581->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_isCategory ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_stringlist  var_cas_fieldList = GGS_stringlist ::constructor_emptyList () ;
    elementOf_GGS_readerMap * operand_4232 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
    if (NULL != operand_4232) {
      var_cas_readerFormalArgumentTypeList = operand_4232->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_4232->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_4232->mInfo.mReturnedType ;
      var_cas_isCategory = operand_4232->mInfo.mIsCategory ;
    }else{
      GGS_uint  var_cas_matchingReaderCount = GGS_uint (0U) ;
      const GGS_bool cond_6344 = (var_cas_receiverType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (88))).operator_isEqual (GGS_typeKindEnum::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (88))) ;
      if (cond_6344.isBuiltAndTrue ()) {
        var_cas_readerFormalArgumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
        var_cas_hasCompilerArgument = GGS_bool (true) ;
        var_cas_returnedType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
        var_cas_isCategory = GGS_bool (true) ;
        {
          GGS_typedAttributeList::cEnumerator enumerator_4761 (var_cas_receiverType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), true) ;
          const GGS_typedAttributeList::cElement * operand_4761 = NULL ;
          while (((operand_4761 = enumerator_4761.nextObject ()))) {
            macroValidPointer (operand_4761) ;
            const GGS_unifiedTypeMapProxy  var_cas_attributeType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_4761->mAttributeTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (94)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94)) ;
            const GGS_readerMap  var_cas_aMap = var_cas_attributeType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
            elementOf_GGS_readerMap * operand_5144 = (elementOf_GGS_readerMap *) var_cas_aMap.searchForReadWithInstruction (operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97))) ;
            if (NULL != operand_5144) {
              var_cas_matchingReaderCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (98)) ;
              var_cas_readerFormalArgumentTypeList = operand_5144->mInfo.mArgumentTypeList ;
              var_cas_hasCompilerArgument = operand_5144->mInfo.mHasCompilerArgument ;
              var_cas_returnedType = operand_5144->mInfo.mReturnedType ;
              var_cas_isCategory = operand_5144->mInfo.mIsCategory ;
              var_cas_fieldList.addAssign_operation (operand_4761->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
            }
          }
        }
        const GGS_bool cond_5829 = (var_cas_matchingReaderCount).operator_isEqual (GGS_uint (0U)) ;
        if (cond_5829.isBuiltAndTrue ()) {
          operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (108)))).operator_concat (GGS_string ("' struct type does not define the '"))).operator_concat (operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)))).operator_concat (GGS_string ("' reader, and none of its fields defines it")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }else if (cond_5829.isBuiltAndFalse ()) {
          const GGS_bool cond_6329 = (var_cas_matchingReaderCount).operator_strictSup (GGS_uint (1U)) ;
          if (cond_6329.isBuiltAndTrue ()) {
            GGS_string var_cas_s = GGS_string ("") ;
            {
              GGS_stringlist::cEnumerator enumerator_5910 (var_cas_fieldList, true) ;
              const GGS_stringlist::cElement * operand_5910 = enumerator_5910.nextObject () ;
              if ((operand_5910 != NULL)) {
                bool _foreach_loop_5910 ;
                do{
                  macroValidPointer (operand_5910) ;
                  var_cas_s.dotAssign_operation (operand_5910->mValue) ;
                  operand_5910 = enumerator_5910.nextObject () ;
                  _foreach_loop_5910 = ((operand_5910 != NULL)) ;
                  if (_foreach_loop_5910) {
                    var_cas_s.appendCString (", ") ;
                  }
                }while (_foreach_loop_5910) ;
              }
            }
            operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (119)))).operator_concat (GGS_string ("' struct type does not define the '"))).operator_concat (operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119)))).operator_concat (GGS_string ("' reader, and several of its fields defines it:"))).operator_concat (var_cas_s)).operator_concat (GGS_string (" (exactly one field should define it)")) COMMA_SOURCE_FILE_AT_LINE (123)) ;
            var_cas_readerFormalArgumentTypeList.drop () ;
            var_cas_hasCompilerArgument.drop () ;
            var_cas_returnedType.drop () ;
            var_cas_isCategory.drop () ;
          }
        }
      }else if (cond_6344.isBuiltAndFalse ()) {
        const GGS_bool cond_6572 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_6572.isBuiltAndTrue ()) {
          operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (126)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (129)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }else if (cond_6572.isBuiltAndFalse ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_readerMap::cEnumerator enumerator_6620 (var_cas_readerMap, true) ;
            const GGS_readerMap::cElement * operand_6620 = NULL ;
            while (((operand_6620 = enumerator_6620.nextObject ()))) {
              macroValidPointer (operand_6620) ;
              var_cas_s.appendCString ("\n"
                "  - ") ;
              var_cas_s.dotAssign_operation (operand_6620->mKey) ;
              {
                GGS_unifiedTypeMapProxyList::cEnumerator enumerator_6688 (operand_6620->mInfo.mArgumentTypeList, true) ;
                const GGS_unifiedTypeMapProxyList::cElement * operand_6688 = NULL ;
                while (((operand_6688 = enumerator_6688.nextObject ()))) {
                  macroValidPointer (operand_6688) ;
                  var_cas_s.appendCString (" \?@") ;
                  var_cas_s.dotAssign_operation (operand_6688->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
                }
              }
              var_cas_s.appendCString (" -> @") ;
              var_cas_s.dotAssign_operation (operand_6620->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
            }
          }
          operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (139)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_3581->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (144)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }
      }
    }
    const GGS_bool cond_7540 = (operand_3581->mExpressionList.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_7540.isBuiltAndTrue ()) {
      operand_3581->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_3581->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (148)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_3581->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_7540.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_templateExpressionListAST::cEnumerator enumerator_7657 (operand_3581->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_7657 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_7687 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_7687 = NULL ;
        while (((operand_7657 = enumerator_7657.nextObject ()))
            && ((operand_7687 = enumerator_7687.nextObject ()))) {
          macroValidPointer (operand_7657) ;
          macroValidPointer (operand_7687) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_7657->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_7657->mExpression (HERE), var_cas_inAnalysisContext, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (155)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_7687->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (156)),  operand_7657->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (156)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_3581->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (161)), var_cas_isCategory, var_cas_receiverExpression, var_cas_fieldList, operand_3581->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (165)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateConstructorAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateConstructorAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateConstructorAST * operand_8555,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8555 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_constructorType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_8555->mTypeName COMMA_SOURCE_FILE_AT_LINE (180)) ;
    const GGS_constructorMap  var_cas_constructorMap = var_cas_constructorType.reader_mConstructorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
    elementOf_GGS_constructorMap * operand_9088 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (operand_8555->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
    if (NULL != operand_9088) {
      var_cas_constructorFormalArgumentTypeList = operand_9088->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_9088->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_9088->mInfo.mReturnedType ;
    }else{
      const GGS_bool cond_9513 = (var_cas_constructorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_9513.isBuiltAndTrue ()) {
        operand_8555->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_8555->mTypeName)).operator_concat (GGS_string ("' type does not define any constructor")) COMMA_SOURCE_FILE_AT_LINE (197)) ;
        var_cas_constructorFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
      }else if (cond_9513.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_constructorMap::cEnumerator enumerator_9566 (var_cas_constructorMap, true) ;
          const GGS_constructorMap::cElement * operand_9566 = NULL ;
          while (((operand_9566 = enumerator_9566.nextObject ()))) {
            macroValidPointer (operand_9566) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_9566->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_9634 (operand_9566->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_9634 = NULL ;
              while (((operand_9634 = enumerator_9634.nextObject ()))) {
                macroValidPointer (operand_9634) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_9634->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (202))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_9566->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (204))) ;
          }
        }
        operand_8555->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (operand_8555->mTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_8555->mConstructorName)).operator_concat (GGS_string ("' constructor; "))).operator_concat ((((var_cas_constructorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("available constructors are")) : (GGS_string ("available constructor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (212)) ;
        var_cas_constructorFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
      }
    }
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    const GGS_bool cond_10631 = (operand_8555->mExpressionList.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
    if (cond_10631.isBuiltAndTrue ()) {
      operand_8555->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_8555->mConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (operand_8555->mTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (219)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_8555->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
      var_cas_constructorEffectiveParameterList.drop () ;
    }else if (cond_10631.isBuiltAndFalse ()) {
      var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_templateExpressionListAST::cEnumerator enumerator_10751 (operand_8555->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_10751 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_10786 (var_cas_constructorFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_10786 = NULL ;
        while (((operand_10751 = enumerator_10751.nextObject ()))
            && ((operand_10786 = enumerator_10786.nextObject ()))) {
          macroValidPointer (operand_10751) ;
          macroValidPointer (operand_10786) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_10751->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_10751->mExpression (HERE), var_cas_inAnalysisContext, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (226)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_10786->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (227)),  operand_10751->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (227)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
    }
    var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_8555->mConstructorName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (234)), var_cas_constructorType, operand_8555->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (232)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateFileWrapperWithStaticPathAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFileWrapperWithStaticPathAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateFileWrapperWithStaticPathAST * operand_11630,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11630 != NULL) {
    operand_11630->mFileWrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @templateFileWrapperWithStaticPathAST templateExpressionAnalysis") COMMA_SOURCE_FILE_AT_LINE (251)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateFileWrapperTemplateCallAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFileWrapperTemplateCallAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateFileWrapperTemplateCallAST * operand_12318,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12318 != NULL) {
    operand_12318->mFileWrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @templateFileWrapperTemplateCallAST templateExpressionAnalysis") COMMA_SOURCE_FILE_AT_LINE (267)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateAndOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateAndOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateAndOperationAST * operand_13485,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13485 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_13485->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_13485->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (295)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_13485->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_13485->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (298)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (303)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (304))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (304)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_13485->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (301)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_13485->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (310)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateOrOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateOrOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateOrOperationAST * operand_14534,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14534 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_14534->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_14534->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (326)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_14534->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_14534->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (329)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (334)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (335))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_14534->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (332)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_14534->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (341)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateXorOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateXorOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateXorOperationAST * operand_15582,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15582 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_15582->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_15582->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (357)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_15582->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_15582->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (360)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (365)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (366))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (366)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_15582->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (363)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_15582->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (372)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateConcatOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateConcatOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateConcatOperationAST * operand_16635,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16635 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_16635->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_16635->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (388)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_16635->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_16635->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (391)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (393)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (396)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (397))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (397)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_16635->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (394)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_16635->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (403)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateTrueBoolAST.templateExpressionAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateTrueBoolAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateTrueBoolAST * operand_17687,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17687 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_17687->mLocation COMMA_SOURCE_FILE_AT_LINE (417)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateFalseBoolAST.templateExpressionAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFalseBoolAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateFalseBoolAST * operand_18060,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18060 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_18060->mLocation COMMA_SOURCE_FILE_AT_LINE (426)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralStringExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralStringExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralStringExpressionAST * operand_18448,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18448 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    {
      GGS_stringlist::cEnumerator enumerator_18596 (operand_18448->mLiteralStringList, true) ;
      const GGS_stringlist::cElement * operand_18596 = NULL ;
      while (((operand_18596 = enumerator_18596.nextObject ()))) {
        macroValidPointer (operand_18596) ;
        var_cas_s.dotAssign_operation (operand_18596->mValue) ;
      }
    }
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_18448->mLocation, var_cas_s COMMA_SOURCE_FILE_AT_LINE (439)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralUIntExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralUIntExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralUIntExpressionAST * operand_18933,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18933 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, operand_18933->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (450)), operand_18933->mLiteralInt.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralSIntExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralSIntExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralSIntExpressionAST * operand_19373,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19373 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSIntType, operand_19373->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (463)), operand_19373->mLiteralInt.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralUInt64ExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralUInt64ExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralUInt64ExpressionAST * operand_19815,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19815 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUInt64Type, operand_19815->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (476)), operand_19815->mLiteralInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (477)) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralSInt64ExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralSInt64ExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralSInt64ExpressionAST * operand_20263,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20263 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSInt64Type, operand_20263->mLiteralInt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (489)), operand_20263->mLiteralInt.reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (490)) COMMA_SOURCE_FILE_AT_LINE (487)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralCharExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralCharExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralCharExpressionAST * operand_20708,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20708 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_20708->mLiteralChar.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (502)), operand_20708->mLiteralChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (503)) COMMA_SOURCE_FILE_AT_LINE (500)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLiteralDoubleExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLiteralDoubleExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLiteralDoubleExpressionAST * operand_21152,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21152 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mDoubleType, operand_21152->mLiteralDouble.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (515)), operand_21152->mLiteralDouble.reader_double (inLexique COMMA_SOURCE_FILE_AT_LINE (516)) COMMA_SOURCE_FILE_AT_LINE (513)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateIfThenElseExpressionAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateIfThenElseExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateIfThenElseExpressionAST * operand_21603,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21603 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_21603->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_21603->mIfExpression (HERE), var_cas_inAnalysisContext, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (528)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_21603->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_21603->mThenExpression (HERE), var_cas_inAnalysisContext, var_cas_then_expression COMMA_SOURCE_FILE_AT_LINE (531)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_21603->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_21603->mElseExpression (HERE), var_cas_inAnalysisContext, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (534)) ;
      }
    }
    const GGS_bool cond_22447 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (536)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (536))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_22447.isBuiltAndTrue ()) {
      operand_21603->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (538)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (541)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_22447.isBuiltAndFalse ()) {
      const GGS_bool cond_22709 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (541))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (541))) ;
      if (cond_22709.isBuiltAndTrue ()) {
        operand_21603->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (543)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (543)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (546)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_22709.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (549)), operand_21603->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (548)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@templateNotOperatorAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateNotOperatorAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateNotOperatorAST * operand_23091,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23091 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_23091->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_23091->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (566)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (568)) ;
    const GGS_bool cond_23644 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (569))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (569)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_23644.isBuiltAndTrue ()) {
      operand_23091->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (571)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (574)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_23644.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_23091->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (576)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateLogicalNegateAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLogicalNegateAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLogicalNegateAST * operand_23961,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23961 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_23961->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_23961->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (592)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
    const GGS_bool cond_24514 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (595))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (595)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_24514.isBuiltAndTrue ()) {
      operand_23961->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (597)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (600)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_24514.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_tildeExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_23961->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (602)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateOptionAccessAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateOptionAccessAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateOptionAccessAST * operand_24832,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24832 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_24832->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (619)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (625))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mBoolType ;
    const GGS_bool cond_25540 = (var_cas_found).operator_not () ;
    if (cond_25540.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (628))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_25704 = (var_cas_found).operator_not () ;
    if (cond_25704.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (632))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_26999 = var_cas_found ;
    if (cond_26999.isBuiltAndTrue ()) {
      const GGS_bool cond_25985 = (operand_24832->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (636))).operator_isEqual (GGS_string ("value")) ;
      if (cond_25985.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_24832->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (639)), operand_24832->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (640)), operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (641)) COMMA_SOURCE_FILE_AT_LINE (637)) ;
      }else if (cond_25985.isBuiltAndFalse ()) {
        const GGS_bool cond_26270 = (operand_24832->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (643))).operator_isEqual (GGS_string ("char")) ;
        if (cond_26270.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_24832->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (646)), operand_24832->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (647)), operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (644)) ;
        }else if (cond_26270.isBuiltAndFalse ()) {
          const GGS_bool cond_26561 = (operand_24832->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (650))).operator_isEqual (GGS_string ("string")) ;
          if (cond_26561.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_24832->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (653)), operand_24832->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (654)), operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (655)) COMMA_SOURCE_FILE_AT_LINE (651)) ;
          }else if (cond_26561.isBuiltAndFalse ()) {
            const GGS_bool cond_26853 = (operand_24832->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (657))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_26853.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_24832->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (660)), operand_24832->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (661)), operand_24832->mOptionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (662)) COMMA_SOURCE_FILE_AT_LINE (658)) ;
            }else if (cond_26853.isBuiltAndFalse ()) {
              operand_24832->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (666)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_26999.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_27047 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_27047 = NULL ;
        while (((operand_27047 = enumerator_27047.nextObject ()))) {
          macroValidPointer (operand_27047) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_27047->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_27143 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_27143 = NULL ;
        while (((operand_27143 = enumerator_27143.nextObject ()))) {
          macroValidPointer (operand_27143) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_27143->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_27241 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_27241 = NULL ;
        while (((operand_27241 = enumerator_27241.nextObject ()))) {
          macroValidPointer (operand_27241) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_27241->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_24832->mOptionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_24832->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_24832->mOptionName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (682)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateFunctionCallAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateFunctionCallAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateFunctionCallAST * operand_27822,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27822 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature ;
    GGS_unifiedTypeMapProxy  var_cas_resultType ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFunctionMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFunctionMap (HERE)->method_searchKey (inLexique, operand_27822->mFunctionName, var_cas_functionSignature, var_cas_resultType COMMA_SOURCE_FILE_AT_LINE (696)) ;
    }
    const GGS_bool cond_28534 = (var_cas_functionSignature.reader_length ()).operator_isNotEqual (operand_27822->mExpressionList.reader_length ()) ;
    if (cond_28534.isBuiltAndTrue ()) {
      operand_27822->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_27822->mFunctionName)).operator_concat (GGS_string ("' function header declares "))).operator_concat (var_cas_functionSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700)))).operator_concat (GGS_string (" formal parameter(s), but this function call names "))).operator_concat (operand_27822->mExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (701)))).operator_concat (GGS_string (" effective argument(s)")) COMMA_SOURCE_FILE_AT_LINE (705)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_28534.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_semanticExpressionListForGeneration = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_28655 (var_cas_functionSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_28655 = NULL ;
        GGS_templateExpressionListAST::cEnumerator enumerator_28672 (operand_27822->mExpressionList, true) ;
        const GGS_templateExpressionListAST::cElement * operand_28672 = NULL ;
        while (((operand_28655 = enumerator_28655.nextObject ()))
            && ((operand_28672 = enumerator_28672.nextObject ()))) {
          macroValidPointer (operand_28655) ;
          macroValidPointer (operand_28672) ;
          GGS_semanticExpressionForGeneration  var_cas_expression ;
          { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_28672->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_28672->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (709)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_28655->mType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (710)),  operand_28672->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (710)) ;
          var_cas_semanticExpressionListForGeneration.addAssign_operation (var_cas_expression) ;
        }
      }
      var_cas_outExpression = GGS_functionCallExpressionForGeneration ::constructor_new (inLexique, var_cas_resultType, operand_27822->mFunctionName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (715)), operand_27822->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)), var_cas_semanticExpressionListForGeneration COMMA_SOURCE_FILE_AT_LINE (713)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateCategoryTemplateCallAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateCategoryTemplateCallAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateCategoryTemplateCallAST * operand_29496,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29496 != NULL) {
    operand_29496->mTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("INTERNAL ERROR: @templateCategoryTemplateCallAST templateExpressionAnalysis not implemented yet") COMMA_SOURCE_FILE_AT_LINE (734)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateVarInExpressionAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateVarInExpressionAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateVarInExpressionAST * operand_30066,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30066 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_type ;
    GGS_string var_cas_sourceVariableCppName ;
    if (var_cas_inAnalysisContext.mTemplateVariableMap.isBuilt ()) {
      var_cas_inAnalysisContext.mTemplateVariableMap (HERE)->method_searchKey (inLexique, operand_30066->mVarName, var_cas_type, var_cas_sourceVariableCppName COMMA_SOURCE_FILE_AT_LINE (746)) ;
    }
    {
      GGS_lstringlist::cEnumerator enumerator_30355 (operand_30066->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_30355 = NULL ;
      while (((operand_30355 = enumerator_30355.nextObject ()))) {
        macroValidPointer (operand_30355) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_type.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_30355->mValue, var_cas_type COMMA_SOURCE_FILE_AT_LINE (749)) ;
        }
      }
    }
    var_cas_outExpression = GGS_varInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_30066->mVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (753)), var_cas_sourceVariableCppName, var_cas_sourceVariableCppName, operand_30066->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (751)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateAddOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateAddOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateAddOperationAST * operand_30974,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30974 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_30974->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_30974->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (770)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_30974->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_30974->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (773)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (775)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (778)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (779))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (779)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_30974->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (776)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_30974->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (785)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateSubOperationAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateSubOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateSubOperationAST * operand_32179,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32179 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_32179->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32179->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (803)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_32179->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32179->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (806)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (811)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (812))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (812)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_32179->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (809)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_32179->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (818)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateMultiplyOperationAST.templateExpressionAnalysis' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateMultiplyOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateMultiplyOperationAST * operand_33389,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33389 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_33389->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33389->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (836)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_33389->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33389->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (839)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (841)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (844)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (845))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (845)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_33389->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (842)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_33389->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (851)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateDivideOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateDivideOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateDivideOperationAST * operand_34608,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34608 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_34608->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34608->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (869)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_34608->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34608->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (872)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (874)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (877)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (878))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (878)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_34608->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (875)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_34608->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (884)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateModuloOperationAST.templateExpressionAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateModuloOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateModuloOperationAST * operand_35821,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35821 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_35821->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_35821->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (902)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_35821->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_35821->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (905)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (907)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (910)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (911))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (911)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_35821->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (908)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_35821->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (917)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateUnaryMinusOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateUnaryMinusOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateUnaryMinusOperationAST * operand_37038,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37038 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_37038->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37038->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (935)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
    const GGS_bool cond_37599 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (938))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (938)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_37599.isBuiltAndTrue ()) {
      operand_37038->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (940)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (943)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_37599.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_37038->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (945)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@templateEqualTestAST.templateExpressionAnalysis'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateEqualTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateEqualTestAST * operand_38075,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38075 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_38075->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38075->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (963)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_38075->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38075->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (966)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (968)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (969)) ;
    const GGS_bool cond_38955 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (970)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (970))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (970)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (970))) ;
    if (cond_38955.isBuiltAndTrue ()) {
      operand_38075->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (972)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (972)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (975)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_38955.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_38075->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (977)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateNonEqualTestAST.templateExpressionAnalysis'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateNonEqualTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateNonEqualTestAST * operand_39342,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39342 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_39342->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39342->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (994)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_39342->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39342->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (997)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (999)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)) ;
    const GGS_bool cond_40220 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1001))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1001))) ;
    if (cond_40220.isBuiltAndTrue ()) {
      operand_39342->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1006)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_40220.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_39342->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1008)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateStrictInfTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateStrictInfTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateStrictInfTestAST * operand_40611,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40611 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_40611->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_40611->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1025)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_40611->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_40611->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1028)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) ;
    const GGS_bool cond_41435 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1032))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1032)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_41435.isBuiltAndTrue ()) {
      operand_40611->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1034)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_41435.isBuiltAndFalse ()) {
      const GGS_bool cond_41685 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1037))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1037))) ;
      if (cond_41685.isBuiltAndTrue ()) {
        operand_40611->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1042)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_41685.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_40611->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1044)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateInfOrEqualTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInfOrEqualTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInfOrEqualTestAST * operand_42080,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42080 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_42080->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42080->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_42080->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42080->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) ;
    const GGS_bool cond_42905 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1068))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1068)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_42905.isBuiltAndTrue ()) {
      operand_42080->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (1073)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_42905.isBuiltAndFalse ()) {
      const GGS_bool cond_43156 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))) ;
      if (cond_43156.isBuiltAndTrue ()) {
        operand_42080->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1078)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_43156.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_42080->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@templateStrictSupTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateStrictSupTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateStrictSupTestAST * operand_43551,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43551 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_43551->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43551->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_43551->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43551->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) ;
    const GGS_bool cond_44375 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1104))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1104)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_44375.isBuiltAndTrue ()) {
      operand_43551->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1106)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_44375.isBuiltAndFalse ()) {
      const GGS_bool cond_44625 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))) ;
      if (cond_44625.isBuiltAndTrue ()) {
        operand_43551->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_44625.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_43551->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateSupOrEqualTestAST.templateExpressionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateSupOrEqualTestAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateSupOrEqualTestAST * operand_45022,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45022 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_45022->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45022->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_45022->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45022->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
    const GGS_bool cond_45847 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1140))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_45847.isBuiltAndTrue ()) {
      operand_45022->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (1145)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_45847.isBuiltAndFalse ()) {
      const GGS_bool cond_46098 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1145))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1145))) ;
      if (cond_46098.isBuiltAndTrue ()) {
        operand_45022->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1150)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_46098.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_45022->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateLeftShiftOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateLeftShiftOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateLeftShiftOperationAST * operand_46500,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46500 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_46500->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46500->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_46500->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46500->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
    const GGS_bool cond_47331 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1176))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1176)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_47331.isBuiltAndTrue ()) {
      operand_46500->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1178)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1181)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_47331.isBuiltAndFalse ()) {
      const GGS_bool cond_47523 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1181))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_47523.isBuiltAndTrue ()) {
        operand_46500->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1186)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_47523.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_leftShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_46500->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateRightShiftOperationAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateRightShiftOperationAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateRightShiftOperationAST * operand_47883,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47883 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_47883->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47883->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1205)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_47883->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47883->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1208)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)) ;
    const GGS_bool cond_48714 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1212))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1212)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_48714.isBuiltAndTrue ()) {
      operand_47883->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1217)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_48714.isBuiltAndFalse ()) {
      const GGS_bool cond_48906 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1217))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_48906.isBuiltAndTrue ()) {
        operand_47883->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1222)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_48906.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_47883->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateClassToTypeOperandAST.templateExpressionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateClassToTypeOperandAST__templateExpressionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateClassToTypeOperandAST * operand_49267,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49267 != NULL) {
    GGS_bool automatic_var_49481_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_49481_1 ;
    GGS_typeKindEnum automatic_var_49481_2 ;
    GGS_typedAttributeList  automatic_var_49481_3 ;
    GGS_attributeMap  automatic_var_49481_4 ;
    GGS_typedAttributeList  automatic_var_49481_5 ;
    GGS_constructorMap  automatic_var_49481_6 ;
    GGS_readerMap  automatic_var_49481_7 ;
    GGS_modifierMap  automatic_var_49481_8 ;
    GGS_instanceMethodMap  automatic_var_49481_9 ;
    GGS_classMethodMap  automatic_var_49481_10 ;
    GGS_enumerationDescriptorList  automatic_var_49481_11 ;
    GGS_uint  automatic_var_49481_12 ;
    GGS_unifiedTypeMapProxyList  automatic_var_49481_13 ;
    GGS_nativeAttributeList  automatic_var_49481_14 ;
    GGS_stringset  automatic_var_49481_15 ;
    GGS_lstringlist  automatic_var_49481_16 ;
    GGS_typedAttributeList  automatic_var_49481_17 ;
    GGS_mapSearchMethodListAST  automatic_var_49481_18 ;
    GGS_mapSearchMethodListAST  automatic_var_49481_19 ;
    GGS_withAccessorMap  automatic_var_49481_20 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_49267->mTypeName, automatic_var_49481_0, automatic_var_49481_1, automatic_var_49481_2, automatic_var_49481_3, automatic_var_49481_4, automatic_var_49481_5, automatic_var_49481_6, automatic_var_49481_7, automatic_var_49481_8, automatic_var_49481_9, automatic_var_49481_10, automatic_var_49481_11, automatic_var_49481_12, automatic_var_49481_13, automatic_var_49481_14, automatic_var_49481_15, automatic_var_49481_16, automatic_var_49481_17, automatic_var_49481_18, automatic_var_49481_19, automatic_var_49481_20 COMMA_SOURCE_FILE_AT_LINE (1240)) ;
    }
    var_cas_outExpression = GGS_literalTypeInExpressionForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("type"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1243)) COMMA_SOURCE_FILE_AT_LINE (1243)), operand_49267->mTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)), operand_49267->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1245)) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@templateInstructionAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis> gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis (typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis
findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.count ()) {
    result = gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (superClassPtr) ;
      gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "templateInstructionListAnalysis"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateInstructionListAnalysis (C_CompilerEx & inLexique,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                const GGS_templateInstructionListAST   var_cas_inInstructionList,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateInstructionListAnalysis at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_templateInstructionListAST::cEnumerator enumerator_50610 (var_cas_inInstructionList, true) ;
    const GGS_templateInstructionListAST::cElement * operand_50610 = NULL ;
    while (((operand_50610 = enumerator_50610.nextObject ()))) {
      macroValidPointer (operand_50610) ;
      { typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis method = findCategoryMethod__templateInstructionAST__templateInstructionAnalysis (operand_50610->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_50610->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_ioInstructionList COMMA_SOURCE_FILE_AT_LINE (1268)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateInstructionListAnalysis\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionStringAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionStringAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionStringAST * operand_50885,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50885 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionStringForGeneration ::constructor_new (inLexique, operand_50885->mTemplateString COMMA_SOURCE_FILE_AT_LINE (1278))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionExpressionAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionExpressionAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionExpressionAST * operand_51261,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51261 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_51261->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51261->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1288)) ;
      }
    }
    const GGS_bool cond_51651 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1289))).operator_isNotEqual (GGS_string ("string")) ;
    if (cond_51651.isBuiltAndTrue ()) {
      operand_51261->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("expression type should be '@string' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1291)) ;
    }
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionExpressionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1292))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateBlockInstructionAST.templateInstructionAnalysis' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateBlockInstructionAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateBlockInstructionAST * operand_51910,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51910 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_51910->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51910->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1302)) ;
      }
    }
    const GGS_bool cond_52296 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1303))).operator_isNotEqual (GGS_string ("uint")) ;
    if (cond_52296.isBuiltAndTrue ()) {
      operand_51910->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("expression type should be '@uint' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1305)) ;
    }
    GGS_templateInstructionListForGeneration  var_cas_blockInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_51910->mBlockInstructionList,  var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (1307)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateBlockInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_51910->mLocation, var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (1308))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGetColumnLocationAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGetColumnLocationAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionGetColumnLocationAST * operand_52771,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52771 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionGetColumnLocationForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1317))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGotoColumnLocationAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGotoColumnLocationAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionGotoColumnLocationAST * operand_53149,
                                const GGS_templateAnalysisContext  /* var_cas_inAnalysisContext */,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53149 != NULL) {
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionGotoColumnLocationForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1326))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionForeachAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionForeachAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionForeachAST * operand_53517,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53517 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_53517->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53517->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      }
    }
    const GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) ;
    const GGS_bool cond_54115 = (var_cas_enumerationDescriptor.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_54115.isBuiltAndTrue ()) {
      var_cas_expression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("expression of '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)))).operator_concat (GGS_string ("' cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1342)) ;
    }
    GGS_templateInstructionListForGeneration  var_cas_beforeInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_53517->mBeforeInstructionList,  var_cas_beforeInstructionList COMMA_SOURCE_FILE_AT_LINE (1345)) ;
    const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_53517->mIndexIdentifier.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1347))) ;
    GGS_templateVariableMap  var_cas_doVariableMap = var_cas_inAnalysisContext.mTemplateVariableMap ;
    const GGS_string var_cas_cppIndexVarName = (((GGS_string ("index_")).operator_concat (operand_53517->mIndexIdentifier.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)))).operator_concat (GGS_string ("_"))).operator_concat (operand_53517->mIndexIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_identifierRepresentation ()) ;
    const GGS_bool cond_54862 = (operand_53517->mIndexIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1350))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_54862.isBuiltAndTrue ()) {
      var_cas_doVariableMap.modifier_insertKey (inLexique, operand_53517->mIndexIdentifier, var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, var_cas_cppIndexVarName COMMA_SOURCE_FILE_AT_LINE (1351)) ;
    }
    {
      GGS_enumerationDescriptorList::cEnumerator enumerator_54899 (var_cas_enumerationDescriptor, true) ;
      const GGS_enumerationDescriptorList::cElement * operand_54899 = NULL ;
      while (((operand_54899 = enumerator_54899.nextObject ()))) {
        macroValidPointer (operand_54899) ;
        var_cas_doVariableMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_53517->mPrefix).operator_concat (operand_54899->mEnumerationName), var_cas_expression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1355)) COMMA_SOURCE_FILE_AT_LINE (1355)), operand_54899->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_54899->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1354)) ;
      }
    }
    const GGS_templateAnalysisContext var_cas_doAnalysisContext = GGS_templateAnalysisContext::constructor_new (var_cas_inAnalysisContext.mSemanticContext, var_cas_inAnalysisContext.mPredefinedTypes, var_cas_doVariableMap) ;
    GGS_templateInstructionListForGeneration  var_cas_doInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_doAnalysisContext,  operand_53517->mDoInstructionList,  var_cas_doInstructionList COMMA_SOURCE_FILE_AT_LINE (1366)) ;
    GGS_templateInstructionListForGeneration  var_cas_betweenInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_53517->mBetweenInstructionList,  var_cas_betweenInstructionList COMMA_SOURCE_FILE_AT_LINE (1369)) ;
    GGS_templateInstructionListForGeneration  var_cas_afterInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_53517->mAfterInstructionList,  var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (1372)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionForeachForGeneration ::constructor_new (inLexique, operand_53517->mIsAscending, var_cas_expression, var_cas_enumeratorCppName, var_cas_beforeInstructionList, var_cas_doInstructionList, operand_53517->mIndexIdentifier.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)), var_cas_betweenInstructionList, var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (1374))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@templateInstructionIfAST.templateInstructionAnalysis'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionIfAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionIfAST * operand_56320,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56320 != NULL) {
    GGS_templateInstructionIfBranchListForGeneration  var_cas_templateInstructionIfBranchList = GGS_templateInstructionIfBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_templateInstructionIfBranchListAST::cEnumerator enumerator_56566 (operand_56320->mTemplateInstructionIfBranchList, true) ;
      const GGS_templateInstructionIfBranchListAST::cElement * operand_56566 = NULL ;
      while (((operand_56566 = enumerator_56566.nextObject ()))) {
        macroValidPointer (operand_56566) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_56566->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_56566->mExpression (HERE), var_cas_inAnalysisContext, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1395)) ;
          }
        }
        const GGS_bool cond_56876 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1396)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1396))).operator_isNotEqual (GGS_string ("bool")) ;
        if (cond_56876.isBuiltAndTrue ()) {
          var_cas_expression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'if' expression type should be '@bool' (it is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (1398)) ;
        }
        GGS_templateInstructionListForGeneration  var_cas_instructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
        ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_56566->mInstructionList,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1400)) ;
        var_cas_templateInstructionIfBranchList.addAssign_operation (var_cas_expression, var_cas_instructionList) ;
      }
    }
    GGS_templateInstructionListForGeneration  var_cas_elseInstructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
    ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_56320->mElseInstructionList,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1405)) ;
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionIfForGeneration ::constructor_new (inLexique, var_cas_templateInstructionIfBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1407))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionSwitchAST.templateInstructionAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionSwitchAST__templateInstructionAnalysis (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionSwitchAST * operand_57615,
                                const GGS_templateAnalysisContext  var_cas_inAnalysisContext,
                                GGS_templateInstructionListForGeneration  & var_cas_ioInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57615 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis method = findCategoryMethod__templateExpressionAST__templateExpressionAnalysis (operand_57615->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57615->mSwitchExpression (HERE), var_cas_inAnalysisContext, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1421)) ;
      }
    }
    const GGS_bool cond_58122 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1422)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))) ;
    if (cond_58122.isBuiltAndTrue ()) {
      var_cas_switchExpression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'switch' expression type should be an enumeration (it is a ")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)).reader_kind (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)))).operator_concat (GGS_string (" type)")) COMMA_SOURCE_FILE_AT_LINE (1424)) ;
    }
    const GGS_stringset  var_cas_enumConstantSet = var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)).reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)) ;
    GGS_templateInstructionSwitchBranchListForGeneration  var_cas_templateInstructionSwitchBranchList = GGS_templateInstructionSwitchBranchListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_namedConstantSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_templateInstructionSwitchBranchListAST::cEnumerator enumerator_58408 (operand_57615->mTemplateInstructionSwitchBranchList, true) ;
      const GGS_templateInstructionSwitchBranchListAST::cElement * operand_58408 = NULL ;
      while (((operand_58408 = enumerator_58408.nextObject ()))) {
        macroValidPointer (operand_58408) ;
        {
          GGS_lstringlist::cEnumerator enumerator_58437 (operand_58408->mConstantList, true) ;
          const GGS_lstringlist::cElement * operand_58437 = NULL ;
          while (((operand_58437 = enumerator_58437.nextObject ()))) {
            macroValidPointer (operand_58437) ;
            const GGS_bool cond_58637 = (var_cas_enumConstantSet.reader_hasKey (operand_58437->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)))).operator_not () ;
            if (cond_58637.isBuiltAndTrue ()) {
              operand_58437->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_58437->mValue)).operator_concat (GGS_string ("' is not a contant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1432)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1432)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1433)) ;
            }
            const GGS_bool cond_58809 = var_cas_namedConstantSet.reader_hasKey (operand_58437->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1434))) ;
            if (cond_58809.isBuiltAndTrue ()) {
              operand_58437->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_58437->mValue)).operator_concat (GGS_string ("' constant is already named in the switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1436)) ;
            }
            var_cas_namedConstantSet.addAssign_operation (operand_58437->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1437))) ;
          }
        }
        GGS_templateInstructionListForGeneration  var_cas_instructionList = GGS_templateInstructionListForGeneration ::constructor_emptyList () ;
        ::routine_templateInstructionListAnalysis (inLexique,  var_cas_inAnalysisContext,  operand_58408->mInstructionList,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1440)) ;
        var_cas_templateInstructionSwitchBranchList.addAssign_operation (operand_58408->mConstantList, var_cas_instructionList) ;
      }
    }
    GGS_stringset  var_cas_missingConstants = var_cas_enumConstantSet.substract_operation (inLexique, var_cas_namedConstantSet COMMA_SOURCE_FILE_AT_LINE (1444)) ;
    const GGS_bool cond_59504 = (var_cas_missingConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_59504.isBuiltAndTrue ()) {
      GGS_string var_cas_m = GGS_string ("all constants should be named in a switch instruction; the following constants are missing:") ;
      {
        GGS_stringset::cEnumerator enumerator_59421 (var_cas_missingConstants, true) ;
        while (enumerator_59421.hasCurrentObject ()) {
          var_cas_m.appendCString ("\n"
            "  - '") ;
          var_cas_m.dotAssign_operation (enumerator_59421._key (HERE)) ;
          var_cas_m.appendCString ("'") ;
          enumerator_59421.next () ;
        }
      }
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1451)) ;
    }
    var_cas_ioInstructionList.addAssign_operation (GGS_templateInstructionSwitchForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_templateInstructionSwitchBranchList COMMA_SOURCE_FILE_AT_LINE (1453))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_templateAnalysis (void) {
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateReaderCallInExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateReaderCallInExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateConstructorAST__templateExpressionAnalysis, gClassInfoFor__templateConstructorAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFileWrapperWithStaticPathAST__templateExpressionAnalysis, gClassInfoFor__templateFileWrapperWithStaticPathAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFileWrapperTemplateCallAST__templateExpressionAnalysis, gClassInfoFor__templateFileWrapperTemplateCallAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateAndOperationAST__templateExpressionAnalysis, gClassInfoFor__templateAndOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateOrOperationAST__templateExpressionAnalysis, gClassInfoFor__templateOrOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateXorOperationAST__templateExpressionAnalysis, gClassInfoFor__templateXorOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateConcatOperationAST__templateExpressionAnalysis, gClassInfoFor__templateConcatOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateTrueBoolAST__templateExpressionAnalysis, gClassInfoFor__templateTrueBoolAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFalseBoolAST__templateExpressionAnalysis, gClassInfoFor__templateFalseBoolAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralStringExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralStringExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralUIntExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralSIntExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralUInt64ExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralSInt64ExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralCharExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralCharExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLiteralDoubleExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateLiteralDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateIfThenElseExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateIfThenElseExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateNotOperatorAST__templateExpressionAnalysis, gClassInfoFor__templateNotOperatorAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLogicalNegateAST__templateExpressionAnalysis, gClassInfoFor__templateLogicalNegateAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateOptionAccessAST__templateExpressionAnalysis, gClassInfoFor__templateOptionAccessAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateFunctionCallAST__templateExpressionAnalysis, gClassInfoFor__templateFunctionCallAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateCategoryTemplateCallAST__templateExpressionAnalysis, gClassInfoFor__templateCategoryTemplateCallAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateVarInExpressionAST__templateExpressionAnalysis, gClassInfoFor__templateVarInExpressionAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateAddOperationAST__templateExpressionAnalysis, gClassInfoFor__templateAddOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateSubOperationAST__templateExpressionAnalysis, gClassInfoFor__templateSubOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateMultiplyOperationAST__templateExpressionAnalysis, gClassInfoFor__templateMultiplyOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateDivideOperationAST__templateExpressionAnalysis, gClassInfoFor__templateDivideOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateModuloOperationAST__templateExpressionAnalysis, gClassInfoFor__templateModuloOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateUnaryMinusOperationAST__templateExpressionAnalysis, gClassInfoFor__templateUnaryMinusOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateNonEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateNonEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateStrictInfTestAST__templateExpressionAnalysis, gClassInfoFor__templateStrictInfTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateInfOrEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateInfOrEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateStrictSupTestAST__templateExpressionAnalysis, gClassInfoFor__templateStrictSupTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateSupOrEqualTestAST__templateExpressionAnalysis, gClassInfoFor__templateSupOrEqualTestAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateLeftShiftOperationAST__templateExpressionAnalysis, gClassInfoFor__templateLeftShiftOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateRightShiftOperationAST__templateExpressionAnalysis, gClassInfoFor__templateRightShiftOperationAST.slotID ()) ;
  enterCategoryMethod__templateExpressionAST__templateExpressionAnalysis ((typeCategoryMethod__templateExpressionAST__templateExpressionAnalysis) category_method__templateClassToTypeOperandAST__templateExpressionAnalysis, gClassInfoFor__templateClassToTypeOperandAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionStringAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionStringAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionExpressionAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionExpressionAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateBlockInstructionAST__templateInstructionAnalysis, gClassInfoFor__templateBlockInstructionAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionGetColumnLocationAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionGetColumnLocationAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionGotoColumnLocationAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionGotoColumnLocationAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionForeachAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionForeachAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionIfAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionIfAST.slotID ()) ;
  enterCategoryMethod__templateInstructionAST__templateInstructionAnalysis ((typeCategoryMethod__templateInstructionAST__templateInstructionAnalysis) category_method__templateInstructionSwitchAST__templateInstructionAnalysis, gClassInfoFor__templateInstructionSwitchAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_templateAnalysis (void) {
  gDispatchTableForMethod__templateExpressionAST__templateExpressionAnalysis.free () ;
  gDispatchTableForMethod__templateInstructionAST__templateInstructionAnalysis.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_templateAnalysis (prologueRoutineFor_templateAnalysis, epilogueRoutineFor_templateAnalysis) ;

//---------------------------------------------------------------------------*

