//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'galgasTemplateScanner-cocoa.m'                    *
//             Generated by version version GALGAS_BETA_VERSION              *
//                      june 25th, 2011, at 14h23'21"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


#import "galgasTemplateScanner-cocoa.h"

//---------------------------------------------------------------------------*

@implementation OC_Lexique_galgasTemplateScanner

//---------------------------------------------------------------------------*

- (id) init {
  self = [super init] ;
  if (self) {
    mLexicalAttribute_charValue = 0 ;
    mLexicalAttribute_floatValue = 0.0 ;
    mLexicalAttribute_identifierString = [[NSMutableString alloc] init] ;
    mLexicalAttribute_sint32value = 0 ;
    mLexicalAttribute_sint64value = 0 ;
    mLexicalAttribute_tokenString = [[NSMutableString alloc] init] ;
    mLexicalAttribute_uint32value = 0 ;
    mLexicalAttribute_uint64value = 0 ;
  }
  return self ;
}

//---------------------------------------------------------------------------*

- (void) dealloc {
  [mLexicalAttribute_identifierString release] ;
  [mLexicalAttribute_tokenString release] ;
  [super dealloc] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 I N D E X I N G    D I R E C T O R Y                      *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) indexingDirectory {
  return @"" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 I N D E X I N G    T I T L E S                            *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSArray *) indexingTitles { // Array of NSString
  return [NSArray arrayWithObjects:
    NULL
  ] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*

static const templateDelimiterStructForCocoa kTemplateDefinitionArray_galgasTemplateScanner [1] = {
  {@"%", @"%", YES}
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Replacments                            *
//                                                                           *
//---------------------------------------------------------------------------*

static NSString * kTemplateReplacementArray_galgasTemplateScanner [4] = {
  @"\\%", @"\\n", @"\\\\", nil
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const BOOL kEndOfScriptInTemplateArray_galgasTemplateScanner [146] = {
  NO /* identifier */,
  NO /* type_name */,
  NO /* literal_double */,
  NO /* unsigned_literal_integer */,
  NO /* signed_literal_integer */,
  NO /* unsigned_literal_integer64 */,
  NO /* signed_literal_integer64 */,
  NO /* . */,
  NO /* .= */,
  NO /* ... */,
  NO /* variant */,
  NO /* literal_char */,
  NO /* literal_string */,
  NO /* < */,
  NO /* <= */,
  NO /* << */,
  NO /* comment */,
  NO /* abstract */,
  NO /* after */,
  NO /* before */,
  NO /* between */,
  NO /* block */,
  NO /* cast */,
  NO /* class */,
  NO /* const */,
  NO /* default */,
  NO /* do */,
  NO /* drop */,
  NO /* else */,
  NO /* elsif */,
  NO /* end */,
  NO /* enum */,
  NO /* error */,
  NO /* extends */,
  NO /* extern */,
  NO /* extract */,
  NO /* false */,
  NO /* feature */,
  NO /* filewrapper */,
  NO /* foreach */,
  NO /* function */,
  NO /* grammar */,
  NO /* graph */,
  NO /* gui */,
  NO /* here */,
  NO /* if */,
  NO /* import */,
  NO /* in */,
  NO /* index */,
  NO /* indexing */,
  NO /* insert */,
  NO /* label */,
  NO /* lexique */,
  NO /* list */,
  NO /* listmap */,
  NO /* local */,
  NO /* log */,
  NO /* loop */,
  NO /* map */,
  NO /* mapproxy */,
  NO /* match */,
  NO /* message */,
  NO /* method */,
  NO /* mod */,
  NO /* modifier */,
  NO /* nonterminal */,
  NO /* not */,
  NO /* on */,
  NO /* once */,
  NO /* operator */,
  NO /* option */,
  NO /* or */,
  NO /* override */,
  NO /* parse */,
  NO /* pragma */,
  NO /* prefixedby */,
  NO /* project */,
  NO /* program */,
  NO /* reader */,
  NO /* remove */,
  NO /* replace */,
  NO /* repeat */,
  NO /* rewind */,
  NO /* root */,
  NO /* routine */,
  NO /* rule */,
  NO /* search */,
  NO /* select */,
  NO /* self */,
  NO /* selfcopy */,
  NO /* semantics */,
  NO /* send */,
  NO /* sortedlist */,
  NO /* state */,
  NO /* struct */,
  NO /* style */,
  NO /* switch */,
  NO /* syntax */,
  NO /* tag */,
  NO /* template */,
  NO /* then */,
  NO /* true */,
  NO /* uniquemap */,
  NO /* unused */,
  NO /* warning */,
  NO /* when */,
  NO /* while */,
  NO /* with */,
  NO /* * */,
  NO /* | */,
  NO /* , */,
  NO /* + */,
  NO /* -- */,
  NO /* :: */,
  NO /* > */,
  NO /* ; */,
  NO /* : */,
  NO /* ?^ */,
  NO /* - */,
  NO /* ( */,
  NO /* ) */,
  NO /* -> */,
  NO /* ? */,
  NO /* == */,
  NO /* ?? */,
  NO /* ! */,
  NO /* := */,
  NO /* ++ */,
  NO /* [ */,
  NO /* ] */,
  NO /* += */,
  NO /* ?! */,
  NO /* !? */,
  NO /* / */,
  NO /* != */,
  NO /* >= */,
  NO /* & */,
  NO /* !^ */,
  NO /* { */,
  NO /* } */,
  NO /* +> */,
  NO /* -= */,
  NO /* ^ */,
  NO /* >> */,
  NO /* ~ */,
  NO /* <- */
} ;


//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'galgasKeyWordList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const C_cocoa_lexique_table_entry ktable_for_galgasTemplateScanner_galgasKeyWordList [91] = {
  {@"do", galgasTemplateScanner_1_do},
  {@"if", galgasTemplateScanner_1_if},
  {@"in", galgasTemplateScanner_1_in},
  {@"on", galgasTemplateScanner_1_on},
  {@"or", galgasTemplateScanner_1_or},
  {@"end", galgasTemplateScanner_1_end},
  {@"gui", galgasTemplateScanner_1_gui},
  {@"log", galgasTemplateScanner_1_log},
  {@"map", galgasTemplateScanner_1_map},
  {@"mod", galgasTemplateScanner_1_mod},
  {@"not", galgasTemplateScanner_1_not},
  {@"tag", galgasTemplateScanner_1_tag},
  {@"cast", galgasTemplateScanner_1_cast},
  {@"drop", galgasTemplateScanner_1_drop},
  {@"else", galgasTemplateScanner_1_else},
  {@"enum", galgasTemplateScanner_1_enum},
  {@"here", galgasTemplateScanner_1_here},
  {@"list", galgasTemplateScanner_1_list},
  {@"loop", galgasTemplateScanner_1_loop},
  {@"once", galgasTemplateScanner_1_once},
  {@"root", galgasTemplateScanner_1_root},
  {@"rule", galgasTemplateScanner_1_rule},
  {@"self", galgasTemplateScanner_1_self},
  {@"send", galgasTemplateScanner_1_send},
  {@"then", galgasTemplateScanner_1_then},
  {@"true", galgasTemplateScanner_1_true},
  {@"when", galgasTemplateScanner_1_when},
  {@"with", galgasTemplateScanner_1_with},
  {@"after", galgasTemplateScanner_1_after},
  {@"block", galgasTemplateScanner_1_block},
  {@"class", galgasTemplateScanner_1_class},
  {@"const", galgasTemplateScanner_1_const},
  {@"elsif", galgasTemplateScanner_1_elsif},
  {@"error", galgasTemplateScanner_1_error},
  {@"false", galgasTemplateScanner_1_false},
  {@"graph", galgasTemplateScanner_1_graph},
  {@"index", galgasTemplateScanner_1_index},
  {@"label", galgasTemplateScanner_1_label},
  {@"local", galgasTemplateScanner_1_local},
  {@"match", galgasTemplateScanner_1_match},
  {@"parse", galgasTemplateScanner_1_parse},
  {@"state", galgasTemplateScanner_1_state},
  {@"style", galgasTemplateScanner_1_style},
  {@"while", galgasTemplateScanner_1_while},
  {@"before", galgasTemplateScanner_1_before},
  {@"extern", galgasTemplateScanner_1_extern},
  {@"import", galgasTemplateScanner_1_import},
  {@"insert", galgasTemplateScanner_1_insert},
  {@"method", galgasTemplateScanner_1_method},
  {@"option", galgasTemplateScanner_1_option},
  {@"pragma", galgasTemplateScanner_1_pragma},
  {@"reader", galgasTemplateScanner_1_reader},
  {@"remove", galgasTemplateScanner_1_remove},
  {@"repeat", galgasTemplateScanner_1_repeat},
  {@"rewind", galgasTemplateScanner_1_rewind},
  {@"search", galgasTemplateScanner_1_search},
  {@"select", galgasTemplateScanner_1_select},
  {@"struct", galgasTemplateScanner_1_struct},
  {@"switch", galgasTemplateScanner_1_switch},
  {@"syntax", galgasTemplateScanner_1_syntax},
  {@"unused", galgasTemplateScanner_1_unused},
  {@"between", galgasTemplateScanner_1_between},
  {@"default", galgasTemplateScanner_1_default},
  {@"extends", galgasTemplateScanner_1_extends},
  {@"extract", galgasTemplateScanner_1_extract},
  {@"feature", galgasTemplateScanner_1_feature},
  {@"foreach", galgasTemplateScanner_1_foreach},
  {@"grammar", galgasTemplateScanner_1_grammar},
  {@"lexique", galgasTemplateScanner_1_lexique},
  {@"listmap", galgasTemplateScanner_1_listmap},
  {@"message", galgasTemplateScanner_1_message},
  {@"program", galgasTemplateScanner_1_program},
  {@"project", galgasTemplateScanner_1_project},
  {@"replace", galgasTemplateScanner_1_replace},
  {@"routine", galgasTemplateScanner_1_routine},
  {@"warning", galgasTemplateScanner_1_warning},
  {@"abstract", galgasTemplateScanner_1_abstract},
  {@"function", galgasTemplateScanner_1_function},
  {@"indexing", galgasTemplateScanner_1_indexing},
  {@"mapproxy", galgasTemplateScanner_1_mapproxy},
  {@"modifier", galgasTemplateScanner_1_modifier},
  {@"operator", galgasTemplateScanner_1_operator},
  {@"override", galgasTemplateScanner_1_override},
  {@"selfcopy", galgasTemplateScanner_1_selfcopy},
  {@"template", galgasTemplateScanner_1_template},
  {@"semantics", galgasTemplateScanner_1_semantics},
  {@"uniquemap", galgasTemplateScanner_1_uniquemap},
  {@"prefixedby", galgasTemplateScanner_1_prefixedby},
  {@"sortedlist", galgasTemplateScanner_1_sortedlist},
  {@"filewrapper", galgasTemplateScanner_1_filewrapper},
  {@"nonterminal", galgasTemplateScanner_1_nonterminal}
} ;

static SInt32 search_into_galgasTemplateScanner_galgasKeyWordList (NSString * inSearchedString) {
  return searchStringInTable (inSearchedString, ktable_for_galgasTemplateScanner_galgasKeyWordList, 91) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//               P A R S E    L E X I C A L    T O K E N                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) parseLexicalTokenForLexicalColoring {
  mLoop = YES ;
  BOOL scanningOk = YES ;
  mTokenCode = 0 ;
  while ((mTokenCode == 0) && (mCurrentChar != '\0')) {
    mTokenStartLocation = mCurrentLocation ;
    if ((mMatchedTemplateDelimiterIndex >= 0) && ([kTemplateDefinitionArray_galgasTemplateScanner [mMatchedTemplateDelimiterIndex].mStartString length] > 0)) {
      const BOOL foundEndDelimitor = [self testForInputString:kTemplateDefinitionArray_galgasTemplateScanner [mMatchedTemplateDelimiterIndex].mEndString advance:YES] ;
      if (foundEndDelimitor) {
        mMatchedTemplateDelimiterIndex = -1 ;
      }
    }
    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\0')) {
      
      [self searchForReplacementPattern:kTemplateReplacementArray_galgasTemplateScanner] ;
      
      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_galgasTemplateScanner listLength:1] ;
      if (mMatchedTemplateDelimiterIndex < 0) {
        [self advance] ;
        mTokenCode = -2 ;
      }
    }
    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\0') && scanningOk) {
      mLexicalAttribute_charValue = 0 ;
      mLexicalAttribute_floatValue = 0.0 ;
      [mLexicalAttribute_identifierString setString:@""] ;
      mLexicalAttribute_sint32value = 0 ;
      mLexicalAttribute_sint64value = 0 ;
      [mLexicalAttribute_tokenString setString:@""] ;
      mLexicalAttribute_uint32value = 0 ;
      mLexicalAttribute_uint64value = 0 ;
      mTokenStartLocation = mCurrentLocation ;
      if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90])) {
        do {
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_identifierString, scanner_cocoa_function_toLower (mPreviousChar)) ;
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
          if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && scanningOk) ;
        mLoop = YES ;
        if (mTokenCode == 0) {
          mTokenCode = search_into_galgasTemplateScanner_galgasKeyWordList (mLexicalAttribute_identifierString) ;
        }
        if (mTokenCode == 0) {
          mTokenCode = galgasTemplateScanner_1_identifier ;
        }
      }else if (scanningOk && ([self testForInputChar:64])) {
        if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
          do {
            scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
            if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
            }else{
              mLoop = NO ;
            }
          }while (mLoop && scanningOk) ;
          mLoop = YES ;
        }else{
          scanningOk = NO ;
        }
        mTokenCode = galgasTemplateScanner_1_type_5F_name ;
      }else if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
        scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
        do {
          if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
            scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
          }else if (scanningOk && ([self testForInputChar:95])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && scanningOk) ;
        mLoop = YES ;
        if (scanningOk && ([self testForInputChar:83] || [self testForInputChar:115])) {
          scanner_cocoa_routine_convertDecimalStringIntoSInt (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_sint32value) ;
          mTokenCode = galgasTemplateScanner_1_signed_5F_literal_5F_integer ;
        }else if (scanningOk && ([self testForInputString:@"LS" advance:YES])) {
          scanner_cocoa_routine_convertDecimalStringIntoSInt64 (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_sint64value) ;
          mTokenCode = galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_ ;
        }else if (scanningOk && ([self testForInputChar:76])) {
          scanner_cocoa_routine_convertDecimalStringIntoUInt64 (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_uint64value) ;
          mTokenCode = galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_ ;
        }else if (scanningOk && ([self testForInputChar:46])) {
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 46) ;
          do {
            if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
            }else if (scanningOk && ([self testForInputChar:95])) {
            }else{
              mLoop = NO ;
            }
          }while (mLoop && scanningOk) ;
          mLoop = YES ;
          scanner_cocoa_routine_convertStringToDouble (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_floatValue) ;
          mTokenCode = galgasTemplateScanner_1_literal_5F_double ;
        }else{
          scanner_cocoa_routine_convertDecimalStringIntoUInt (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_uint32value) ;
          mTokenCode = galgasTemplateScanner_1_unsigned_5F_literal_5F_integer ;
        }
      }else if (scanningOk && ([self testForInputChar:46])) {
        if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 48) ;
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 46) ;
          scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
          do {
            if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
            }else if (scanningOk && ([self testForInputChar:95])) {
            }else{
              mLoop = NO ;
            }
          }while (mLoop && scanningOk) ;
          mLoop = YES ;
          scanner_cocoa_routine_convertStringToDouble (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_floatValue) ;
          mTokenCode = galgasTemplateScanner_1_literal_5F_double ;
        }else{
          if (scanningOk && ([self testForInputString:@".." advance:YES])) {
            mTokenCode = galgasTemplateScanner_1__2E__2E__2E_ ;
          }else if (scanningOk && ([self testForInputString:@"=" advance:YES])) {
            mTokenCode = galgasTemplateScanner_1__2E__3D_ ;
          }else{
            mTokenCode = galgasTemplateScanner_1__2E_ ;
          }
        }
      }else if (scanningOk && ([self testForInputChar:92])) {
        if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
          do {
            scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
            if (scanningOk && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
            }else{
              mLoop = NO ;
            }
          }while (mLoop && scanningOk) ;
          mLoop = YES ;
        }else{
          scanningOk = NO ;
        }
        mTokenCode = galgasTemplateScanner_1_variant ;
      }else if (scanningOk && ([self testForInputChar:39])) {
        if (scanningOk && ([self testForInputChar:92])) {
          if (scanningOk && ([self testForInputChar:102])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 12) ;
          }else if (scanningOk && ([self testForInputChar:110])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 10) ;
          }else if (scanningOk && ([self testForInputChar:114])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 13) ;
          }else if (scanningOk && ([self testForInputChar:116])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 9) ;
          }else if (scanningOk && ([self testForInputChar:118])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 11) ;
          }else if (scanningOk && ([self testForInputChar:92])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 92) ;
          }else if (scanningOk && ([self testForInputChar:48])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 0) ;
          }else if (scanningOk && ([self testForInputChar:39])) {
            scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, 39) ;
          }else if (scanningOk && ([self testForInputChar:117])) {
            if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& scanningOk, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                  }else{
                    scanningOk = NO ;
                  }
                }else{
                  scanningOk = NO ;
                }
              }else{
                scanningOk = NO ;
              }
            }else{
              scanningOk = NO ;
            }
          }else if (scanningOk && ([self testForInputChar:85])) {
            if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                      scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                      if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                        scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                        if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                          scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                          if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                            scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                            scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& scanningOk, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                          }else{
                            scanningOk = NO ;
                          }
                        }else{
                          scanningOk = NO ;
                        }
                      }else{
                        scanningOk = NO ;
                      }
                    }else{
                      scanningOk = NO ;
                    }
                  }else{
                    scanningOk = NO ;
                  }
                }else{
                  scanningOk = NO ;
                }
              }else{
                scanningOk = NO ;
              }
            }else{
              scanningOk = NO ;
            }
          }else if (scanningOk && ([self testForInputChar:120] || [self testForInputChar:88])) {
            if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              do {
                scanner_cocoa_routine_enterHexDigitIntoASCIIcharacter (& scanningOk, & mLexicalAttribute_charValue, mPreviousChar) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                }else{
                  mLoop = NO ;
                }
              }while (mLoop && scanningOk) ;
              mLoop = YES ;
            }else{
              scanningOk = NO ;
            }
          }else if (scanningOk && ([self testForInputChar:38])) {
            do {
              if (scanningOk && ([self notTestForInputString:@";" error:& scanningOk])) {
                scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
              }else{
                mLoop = NO ;
              }
            }while (mLoop && scanningOk) ;
            mLoop = YES ;
            scanner_cocoa_routine_convertHTMLSequenceToUnicodeCharacter (& scanningOk, mLexicalAttribute_tokenString, & mLexicalAttribute_charValue) ;
          }else{
            scanningOk = NO ;
          }
        }else if (scanningOk && ([self testForInputFromChar:32 toChar:65533])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& scanningOk, & mLexicalAttribute_charValue, mPreviousChar) ;
        }else{
          scanningOk = NO ;
        }
        if (scanningOk && ([self testForInputChar:39])) {
          mTokenCode = galgasTemplateScanner_1_literal_5F_char ;
        }else{
          scanningOk = NO ;
        }
      }else if (scanningOk && ([self testForInputChar:34])) {
        do {
          if (scanningOk && ([self testForInputChar:92])) {
            if (scanningOk && ([self testForInputChar:102])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 12) ;
            }else if (scanningOk && ([self testForInputChar:110])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 10) ;
            }else if (scanningOk && ([self testForInputChar:114])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 13) ;
            }else if (scanningOk && ([self testForInputChar:116])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 9) ;
            }else if (scanningOk && ([self testForInputChar:118])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 11) ;
            }else if (scanningOk && ([self testForInputChar:92])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 92) ;
            }else if (scanningOk && ([self testForInputChar:34])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 34) ;
            }else if (scanningOk && ([self testForInputChar:39])) {
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, 39) ;
            }else if (scanningOk && ([self testForInputChar:38])) {
              do {
                if (scanningOk && ([self notTestForInputString:@";" error:& scanningOk])) {
                  scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_identifierString, mPreviousChar) ;
                }else{
                  mLoop = NO ;
                }
              }while (mLoop && scanningOk) ;
              mLoop = YES ;
              scanner_cocoa_routine_convertHTMLSequenceToUnicodeCharacter (& scanningOk, mLexicalAttribute_identifierString, & mLexicalAttribute_charValue) ;
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
            }else if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
              do {
                scanner_cocoa_routine_enterHexDigitIntoASCIIcharacter (& scanningOk, & mLexicalAttribute_charValue, mPreviousChar) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57])) {
                }else{
                  mLoop = NO ;
                }
              }while (mLoop && scanningOk) ;
              mLoop = YES ;
              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
            }else if (scanningOk && ([self testForInputChar:117])) {
              if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                      scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                      scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& scanningOk, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                      scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
                    }else{
                      scanningOk = NO ;
                    }
                  }else{
                    scanningOk = NO ;
                  }
                }else{
                  scanningOk = NO ;
                }
              }else{
                scanningOk = NO ;
              }
            }else if (scanningOk && ([self testForInputChar:85])) {
              if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                      scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                      if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                        scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                        if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                          scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                          if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                            scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                            if (scanningOk && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                              scanner_cocoa_routine_enterHexDigitIntoUInt (& scanningOk, mPreviousChar, & mLexicalAttribute_uint32value) ;
                              scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& scanningOk, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                              scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
                            }else{
                              scanningOk = NO ;
                            }
                          }else{
                            scanningOk = NO ;
                          }
                        }else{
                          scanningOk = NO ;
                        }
                      }else{
                        scanningOk = NO ;
                      }
                    }else{
                      scanningOk = NO ;
                    }
                  }else{
                    scanningOk = NO ;
                  }
                }else{
                  scanningOk = NO ;
                }
              }else{
                scanningOk = NO ;
              }
            }else{
              scanningOk = NO ;
            }
          }else if (scanningOk && ([self testForInputChar:32] || [self testForInputChar:33] || [self testForInputFromChar:35 toChar:65533])) {
            scanner_cocoa_routine_enterCharacterIntoString (& scanningOk, mLexicalAttribute_tokenString, mPreviousChar) ;
          }else{
            mLoop = NO ;
          }
        }while (mLoop && scanningOk) ;
        mLoop = YES ;
        if (scanningOk && ([self testForInputChar:34])) {
          mTokenCode = galgasTemplateScanner_1_literal_5F_string ;
        }else{
          scanningOk = NO ;
        }
      }else if (scanningOk && [self testForInputString:@"\?^" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3F__5E_ ;
      }else if (scanningOk && [self testForInputString:@"\?\?" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3F__3F_ ;
      }else if (scanningOk && [self testForInputString:@"\?!" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3F__21_ ;
      }else if (scanningOk && [self testForInputString:@">>" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3E__3E_ ;
      }else if (scanningOk && [self testForInputString:@">=" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3E__3D_ ;
      }else if (scanningOk && [self testForInputString:@"==" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3D__3D_ ;
      }else if (scanningOk && [self testForInputString:@"<-" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3C__2D_ ;
      }else if (scanningOk && [self testForInputString:@":=" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3A__3D_ ;
      }else if (scanningOk && [self testForInputString:@"::" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3A__3A_ ;
      }else if (scanningOk && [self testForInputString:@"->" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2D__3E_ ;
      }else if (scanningOk && [self testForInputString:@"-=" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2D__3D_ ;
      }else if (scanningOk && [self testForInputString:@"--" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2D__2D_ ;
      }else if (scanningOk && [self testForInputString:@"+>" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2B__3E_ ;
      }else if (scanningOk && [self testForInputString:@"+=" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2B__3D_ ;
      }else if (scanningOk && [self testForInputString:@"++" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2B__2B_ ;
      }else if (scanningOk && [self testForInputString:@"!^" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__21__5E_ ;
      }else if (scanningOk && [self testForInputString:@"!\?" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__21__3F_ ;
      }else if (scanningOk && [self testForInputString:@"!=" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__21__3D_ ;
      }else if (scanningOk && [self testForInputString:@"~" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__7E_ ;
      }else if (scanningOk && [self testForInputString:@"}" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__7D_ ;
      }else if (scanningOk && [self testForInputString:@"|" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__7C_ ;
      }else if (scanningOk && [self testForInputString:@"{" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__7B_ ;
      }else if (scanningOk && [self testForInputString:@"^" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__5E_ ;
      }else if (scanningOk && [self testForInputString:@"]" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__5D_ ;
      }else if (scanningOk && [self testForInputString:@"[" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__5B_ ;
      }else if (scanningOk && [self testForInputString:@"\?" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3F_ ;
      }else if (scanningOk && [self testForInputString:@">" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3E_ ;
      }else if (scanningOk && [self testForInputString:@";" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3B_ ;
      }else if (scanningOk && [self testForInputString:@":" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__3A_ ;
      }else if (scanningOk && [self testForInputString:@"/" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2F_ ;
      }else if (scanningOk && [self testForInputString:@"-" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2D_ ;
      }else if (scanningOk && [self testForInputString:@"," advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2C_ ;
      }else if (scanningOk && [self testForInputString:@"+" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2B_ ;
      }else if (scanningOk && [self testForInputString:@"*" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__2A_ ;
      }else if (scanningOk && [self testForInputString:@")" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__29_ ;
      }else if (scanningOk && [self testForInputString:@"(" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__28_ ;
      }else if (scanningOk && [self testForInputString:@"&" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__26_ ;
      }else if (scanningOk && [self testForInputString:@"!" advance:YES]) {
        mTokenCode = galgasTemplateScanner_1__21_ ;
      }else if (scanningOk && ([self testForInputChar:60])) {
        if (scanningOk && ([self testForInputChar:61])) {
          mTokenCode = galgasTemplateScanner_1__3C__3D_ ;
        }else if (scanningOk && ([self testForInputChar:60])) {
          mTokenCode = galgasTemplateScanner_1__3C__3C_ ;
        }else{
          mTokenCode = galgasTemplateScanner_1__3C_ ;
        }
      }else if (scanningOk && ([self testForInputChar:35])) {
        do {
          if (scanningOk && ([self testForInputFromChar:1 toChar:9] || [self testForInputChar:11] || [self testForInputChar:12] || [self testForInputFromChar:14 toChar:65533])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && scanningOk) ;
        mLoop = YES ;
        mTokenCode = galgasTemplateScanner_1_comment ;
      }else if (scanningOk && ([self testForInputFromChar:1 toChar:32])) {
      }else if ([self testForInputChar:'\0']) { // End of source text ? 
        mTokenCode = galgasTemplateScanner_1_ ; // Empty string code
      }else{ // Unknown input character
        scanningOk = NO ;
      }
    }
    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_galgasTemplateScanner [mTokenCode - 1]) {
      mMatchedTemplateDelimiterIndex = -1 ;
    }
  //--- Error ?
    if (! scanningOk) {
      mTokenCode = -1 ;
      [self advance] ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   T E R M I N A L    C O U N T                            *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) terminalVocabularyCount {
  return 146 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     S T Y L E   C O U N T                                 *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) styleCount {
  return 11 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                I S    T E M P L A T E    L E X I Q U E                    *
//                                                                           *
//---------------------------------------------------------------------------*

- (BOOL) isTemplateLexique {
  return YES ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              S T Y L E   F O R    T E R M I N A L                         *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {
  static const UInt32 kTerminalSymbolStyles [147] = {0,
    0 /* galgasTemplateScanner_1_identifier */,
    9 /* galgasTemplateScanner_1_type_5F_name */,
    6 /* galgasTemplateScanner_1_literal_5F_double */,
    5 /* galgasTemplateScanner_1_unsigned_5F_literal_5F_integer */,
    5 /* galgasTemplateScanner_1_signed_5F_literal_5F_integer */,
    5 /* galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_ */,
    5 /* galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_ */,
    2 /* galgasTemplateScanner_1__2E_ */,
    2 /* galgasTemplateScanner_1__2E__3D_ */,
    2 /* galgasTemplateScanner_1__2E__2E__2E_ */,
    4 /* galgasTemplateScanner_1_variant */,
    8 /* galgasTemplateScanner_1_literal_5F_char */,
    7 /* galgasTemplateScanner_1_literal_5F_string */,
    2 /* galgasTemplateScanner_1__3C_ */,
    2 /* galgasTemplateScanner_1__3C__3D_ */,
    2 /* galgasTemplateScanner_1__3C__3C_ */,
    10 /* galgasTemplateScanner_1_comment */,
    1 /* galgasTemplateScanner_1_abstract */,
    1 /* galgasTemplateScanner_1_after */,
    1 /* galgasTemplateScanner_1_before */,
    1 /* galgasTemplateScanner_1_between */,
    1 /* galgasTemplateScanner_1_block */,
    1 /* galgasTemplateScanner_1_cast */,
    1 /* galgasTemplateScanner_1_class */,
    1 /* galgasTemplateScanner_1_const */,
    1 /* galgasTemplateScanner_1_default */,
    1 /* galgasTemplateScanner_1_do */,
    1 /* galgasTemplateScanner_1_drop */,
    1 /* galgasTemplateScanner_1_else */,
    1 /* galgasTemplateScanner_1_elsif */,
    1 /* galgasTemplateScanner_1_end */,
    1 /* galgasTemplateScanner_1_enum */,
    1 /* galgasTemplateScanner_1_error */,
    1 /* galgasTemplateScanner_1_extends */,
    1 /* galgasTemplateScanner_1_extern */,
    1 /* galgasTemplateScanner_1_extract */,
    1 /* galgasTemplateScanner_1_false */,
    1 /* galgasTemplateScanner_1_feature */,
    1 /* galgasTemplateScanner_1_filewrapper */,
    1 /* galgasTemplateScanner_1_foreach */,
    1 /* galgasTemplateScanner_1_function */,
    1 /* galgasTemplateScanner_1_grammar */,
    1 /* galgasTemplateScanner_1_graph */,
    1 /* galgasTemplateScanner_1_gui */,
    1 /* galgasTemplateScanner_1_here */,
    1 /* galgasTemplateScanner_1_if */,
    1 /* galgasTemplateScanner_1_import */,
    1 /* galgasTemplateScanner_1_in */,
    1 /* galgasTemplateScanner_1_index */,
    1 /* galgasTemplateScanner_1_indexing */,
    1 /* galgasTemplateScanner_1_insert */,
    1 /* galgasTemplateScanner_1_label */,
    1 /* galgasTemplateScanner_1_lexique */,
    1 /* galgasTemplateScanner_1_list */,
    1 /* galgasTemplateScanner_1_listmap */,
    1 /* galgasTemplateScanner_1_local */,
    1 /* galgasTemplateScanner_1_log */,
    1 /* galgasTemplateScanner_1_loop */,
    1 /* galgasTemplateScanner_1_map */,
    1 /* galgasTemplateScanner_1_mapproxy */,
    1 /* galgasTemplateScanner_1_match */,
    1 /* galgasTemplateScanner_1_message */,
    1 /* galgasTemplateScanner_1_method */,
    1 /* galgasTemplateScanner_1_mod */,
    1 /* galgasTemplateScanner_1_modifier */,
    1 /* galgasTemplateScanner_1_nonterminal */,
    1 /* galgasTemplateScanner_1_not */,
    1 /* galgasTemplateScanner_1_on */,
    1 /* galgasTemplateScanner_1_once */,
    1 /* galgasTemplateScanner_1_operator */,
    1 /* galgasTemplateScanner_1_option */,
    1 /* galgasTemplateScanner_1_or */,
    1 /* galgasTemplateScanner_1_override */,
    1 /* galgasTemplateScanner_1_parse */,
    1 /* galgasTemplateScanner_1_pragma */,
    1 /* galgasTemplateScanner_1_prefixedby */,
    1 /* galgasTemplateScanner_1_project */,
    1 /* galgasTemplateScanner_1_program */,
    1 /* galgasTemplateScanner_1_reader */,
    1 /* galgasTemplateScanner_1_remove */,
    1 /* galgasTemplateScanner_1_replace */,
    1 /* galgasTemplateScanner_1_repeat */,
    1 /* galgasTemplateScanner_1_rewind */,
    1 /* galgasTemplateScanner_1_root */,
    1 /* galgasTemplateScanner_1_routine */,
    1 /* galgasTemplateScanner_1_rule */,
    1 /* galgasTemplateScanner_1_search */,
    1 /* galgasTemplateScanner_1_select */,
    1 /* galgasTemplateScanner_1_self */,
    1 /* galgasTemplateScanner_1_selfcopy */,
    1 /* galgasTemplateScanner_1_semantics */,
    1 /* galgasTemplateScanner_1_send */,
    1 /* galgasTemplateScanner_1_sortedlist */,
    1 /* galgasTemplateScanner_1_state */,
    1 /* galgasTemplateScanner_1_struct */,
    1 /* galgasTemplateScanner_1_style */,
    1 /* galgasTemplateScanner_1_switch */,
    1 /* galgasTemplateScanner_1_syntax */,
    1 /* galgasTemplateScanner_1_tag */,
    1 /* galgasTemplateScanner_1_template */,
    1 /* galgasTemplateScanner_1_then */,
    1 /* galgasTemplateScanner_1_true */,
    1 /* galgasTemplateScanner_1_uniquemap */,
    1 /* galgasTemplateScanner_1_unused */,
    1 /* galgasTemplateScanner_1_warning */,
    1 /* galgasTemplateScanner_1_when */,
    1 /* galgasTemplateScanner_1_while */,
    1 /* galgasTemplateScanner_1_with */,
    2 /* galgasTemplateScanner_1__2A_ */,
    2 /* galgasTemplateScanner_1__7C_ */,
    2 /* galgasTemplateScanner_1__2C_ */,
    2 /* galgasTemplateScanner_1__2B_ */,
    2 /* galgasTemplateScanner_1__2D__2D_ */,
    2 /* galgasTemplateScanner_1__3A__3A_ */,
    2 /* galgasTemplateScanner_1__3E_ */,
    2 /* galgasTemplateScanner_1__3B_ */,
    2 /* galgasTemplateScanner_1__3A_ */,
    2 /* galgasTemplateScanner_1__3F__5E_ */,
    2 /* galgasTemplateScanner_1__2D_ */,
    2 /* galgasTemplateScanner_1__28_ */,
    2 /* galgasTemplateScanner_1__29_ */,
    2 /* galgasTemplateScanner_1__2D__3E_ */,
    2 /* galgasTemplateScanner_1__3F_ */,
    2 /* galgasTemplateScanner_1__3D__3D_ */,
    2 /* galgasTemplateScanner_1__3F__3F_ */,
    2 /* galgasTemplateScanner_1__21_ */,
    2 /* galgasTemplateScanner_1__3A__3D_ */,
    2 /* galgasTemplateScanner_1__2B__2B_ */,
    2 /* galgasTemplateScanner_1__5B_ */,
    2 /* galgasTemplateScanner_1__5D_ */,
    2 /* galgasTemplateScanner_1__2B__3D_ */,
    2 /* galgasTemplateScanner_1__3F__21_ */,
    2 /* galgasTemplateScanner_1__21__3F_ */,
    2 /* galgasTemplateScanner_1__2F_ */,
    2 /* galgasTemplateScanner_1__21__3D_ */,
    2 /* galgasTemplateScanner_1__3E__3D_ */,
    2 /* galgasTemplateScanner_1__26_ */,
    2 /* galgasTemplateScanner_1__21__5E_ */,
    2 /* galgasTemplateScanner_1__7B_ */,
    2 /* galgasTemplateScanner_1__7D_ */,
    2 /* galgasTemplateScanner_1__2B__3E_ */,
    2 /* galgasTemplateScanner_1__2D__3D_ */,
    2 /* galgasTemplateScanner_1__5E_ */,
    2 /* galgasTemplateScanner_1__3E__3E_ */,
    2 /* galgasTemplateScanner_1__7E_ */,
    2 /* galgasTemplateScanner_1__3C__2D_ */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    A T O M I C    S E L E C T I O N   F O R    T E R M I N A L            *
//                                                                           *
//---------------------------------------------------------------------------*

- (BOOL) atomicSelectionForToken: (NSUInteger) inTokenIndex {
  static const BOOL kTerminalAtomicSelection [147] = {NO,
    YES /* galgasTemplateScanner_1_identifier */,
    YES /* galgasTemplateScanner_1_type_5F_name */,
    YES /* galgasTemplateScanner_1_literal_5F_double */,
    YES /* galgasTemplateScanner_1_unsigned_5F_literal_5F_integer */,
    YES /* galgasTemplateScanner_1_signed_5F_literal_5F_integer */,
    YES /* galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_ */,
    YES /* galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_ */,
    YES /* galgasTemplateScanner_1__2E_ */,
    YES /* galgasTemplateScanner_1__2E__3D_ */,
    YES /* galgasTemplateScanner_1__2E__2E__2E_ */,
    YES /* galgasTemplateScanner_1_variant */,
    YES /* galgasTemplateScanner_1_literal_5F_char */,
    NO /* galgasTemplateScanner_1_literal_5F_string */,
    YES /* galgasTemplateScanner_1__3C_ */,
    YES /* galgasTemplateScanner_1__3C__3D_ */,
    YES /* galgasTemplateScanner_1__3C__3C_ */,
    NO /* galgasTemplateScanner_1_comment */,
    YES /* galgasTemplateScanner_1_abstract */,
    YES /* galgasTemplateScanner_1_after */,
    YES /* galgasTemplateScanner_1_before */,
    YES /* galgasTemplateScanner_1_between */,
    YES /* galgasTemplateScanner_1_block */,
    YES /* galgasTemplateScanner_1_cast */,
    YES /* galgasTemplateScanner_1_class */,
    YES /* galgasTemplateScanner_1_const */,
    YES /* galgasTemplateScanner_1_default */,
    YES /* galgasTemplateScanner_1_do */,
    YES /* galgasTemplateScanner_1_drop */,
    YES /* galgasTemplateScanner_1_else */,
    YES /* galgasTemplateScanner_1_elsif */,
    YES /* galgasTemplateScanner_1_end */,
    YES /* galgasTemplateScanner_1_enum */,
    YES /* galgasTemplateScanner_1_error */,
    YES /* galgasTemplateScanner_1_extends */,
    YES /* galgasTemplateScanner_1_extern */,
    YES /* galgasTemplateScanner_1_extract */,
    YES /* galgasTemplateScanner_1_false */,
    YES /* galgasTemplateScanner_1_feature */,
    YES /* galgasTemplateScanner_1_filewrapper */,
    YES /* galgasTemplateScanner_1_foreach */,
    YES /* galgasTemplateScanner_1_function */,
    YES /* galgasTemplateScanner_1_grammar */,
    YES /* galgasTemplateScanner_1_graph */,
    YES /* galgasTemplateScanner_1_gui */,
    YES /* galgasTemplateScanner_1_here */,
    YES /* galgasTemplateScanner_1_if */,
    YES /* galgasTemplateScanner_1_import */,
    YES /* galgasTemplateScanner_1_in */,
    YES /* galgasTemplateScanner_1_index */,
    YES /* galgasTemplateScanner_1_indexing */,
    YES /* galgasTemplateScanner_1_insert */,
    YES /* galgasTemplateScanner_1_label */,
    YES /* galgasTemplateScanner_1_lexique */,
    YES /* galgasTemplateScanner_1_list */,
    YES /* galgasTemplateScanner_1_listmap */,
    YES /* galgasTemplateScanner_1_local */,
    YES /* galgasTemplateScanner_1_log */,
    YES /* galgasTemplateScanner_1_loop */,
    YES /* galgasTemplateScanner_1_map */,
    YES /* galgasTemplateScanner_1_mapproxy */,
    YES /* galgasTemplateScanner_1_match */,
    YES /* galgasTemplateScanner_1_message */,
    YES /* galgasTemplateScanner_1_method */,
    YES /* galgasTemplateScanner_1_mod */,
    YES /* galgasTemplateScanner_1_modifier */,
    YES /* galgasTemplateScanner_1_nonterminal */,
    YES /* galgasTemplateScanner_1_not */,
    YES /* galgasTemplateScanner_1_on */,
    YES /* galgasTemplateScanner_1_once */,
    YES /* galgasTemplateScanner_1_operator */,
    YES /* galgasTemplateScanner_1_option */,
    YES /* galgasTemplateScanner_1_or */,
    YES /* galgasTemplateScanner_1_override */,
    YES /* galgasTemplateScanner_1_parse */,
    YES /* galgasTemplateScanner_1_pragma */,
    YES /* galgasTemplateScanner_1_prefixedby */,
    YES /* galgasTemplateScanner_1_project */,
    YES /* galgasTemplateScanner_1_program */,
    YES /* galgasTemplateScanner_1_reader */,
    YES /* galgasTemplateScanner_1_remove */,
    YES /* galgasTemplateScanner_1_replace */,
    YES /* galgasTemplateScanner_1_repeat */,
    YES /* galgasTemplateScanner_1_rewind */,
    YES /* galgasTemplateScanner_1_root */,
    YES /* galgasTemplateScanner_1_routine */,
    YES /* galgasTemplateScanner_1_rule */,
    YES /* galgasTemplateScanner_1_search */,
    YES /* galgasTemplateScanner_1_select */,
    YES /* galgasTemplateScanner_1_self */,
    YES /* galgasTemplateScanner_1_selfcopy */,
    YES /* galgasTemplateScanner_1_semantics */,
    YES /* galgasTemplateScanner_1_send */,
    YES /* galgasTemplateScanner_1_sortedlist */,
    YES /* galgasTemplateScanner_1_state */,
    YES /* galgasTemplateScanner_1_struct */,
    YES /* galgasTemplateScanner_1_style */,
    YES /* galgasTemplateScanner_1_switch */,
    YES /* galgasTemplateScanner_1_syntax */,
    YES /* galgasTemplateScanner_1_tag */,
    YES /* galgasTemplateScanner_1_template */,
    YES /* galgasTemplateScanner_1_then */,
    YES /* galgasTemplateScanner_1_true */,
    YES /* galgasTemplateScanner_1_uniquemap */,
    YES /* galgasTemplateScanner_1_unused */,
    YES /* galgasTemplateScanner_1_warning */,
    YES /* galgasTemplateScanner_1_when */,
    YES /* galgasTemplateScanner_1_while */,
    YES /* galgasTemplateScanner_1_with */,
    YES /* galgasTemplateScanner_1__2A_ */,
    YES /* galgasTemplateScanner_1__7C_ */,
    YES /* galgasTemplateScanner_1__2C_ */,
    YES /* galgasTemplateScanner_1__2B_ */,
    YES /* galgasTemplateScanner_1__2D__2D_ */,
    YES /* galgasTemplateScanner_1__3A__3A_ */,
    YES /* galgasTemplateScanner_1__3E_ */,
    YES /* galgasTemplateScanner_1__3B_ */,
    YES /* galgasTemplateScanner_1__3A_ */,
    YES /* galgasTemplateScanner_1__3F__5E_ */,
    YES /* galgasTemplateScanner_1__2D_ */,
    YES /* galgasTemplateScanner_1__28_ */,
    YES /* galgasTemplateScanner_1__29_ */,
    YES /* galgasTemplateScanner_1__2D__3E_ */,
    YES /* galgasTemplateScanner_1__3F_ */,
    YES /* galgasTemplateScanner_1__3D__3D_ */,
    YES /* galgasTemplateScanner_1__3F__3F_ */,
    YES /* galgasTemplateScanner_1__21_ */,
    YES /* galgasTemplateScanner_1__3A__3D_ */,
    YES /* galgasTemplateScanner_1__2B__2B_ */,
    YES /* galgasTemplateScanner_1__5B_ */,
    YES /* galgasTemplateScanner_1__5D_ */,
    YES /* galgasTemplateScanner_1__2B__3D_ */,
    YES /* galgasTemplateScanner_1__3F__21_ */,
    YES /* galgasTemplateScanner_1__21__3F_ */,
    YES /* galgasTemplateScanner_1__2F_ */,
    YES /* galgasTemplateScanner_1__21__3D_ */,
    YES /* galgasTemplateScanner_1__3E__3D_ */,
    YES /* galgasTemplateScanner_1__26_ */,
    YES /* galgasTemplateScanner_1__21__5E_ */,
    YES /* galgasTemplateScanner_1__7B_ */,
    YES /* galgasTemplateScanner_1__7D_ */,
    YES /* galgasTemplateScanner_1__2B__3E_ */,
    YES /* galgasTemplateScanner_1__2D__3D_ */,
    YES /* galgasTemplateScanner_1__5E_ */,
    YES /* galgasTemplateScanner_1__3E__3E_ */,
    YES /* galgasTemplateScanner_1__7E_ */,
    YES /* galgasTemplateScanner_1__3C__2D_ */
  } ;
  return kTerminalAtomicSelection [inTokenIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             S T Y L E   N A M E    F O R    I N D E X                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {
  NSString * result = nil ;
  if ((inIndex >= 0) && (inIndex < 11)) {
    NSString * kStyleArray [11] = {
      @"Default Style",
      @"Keywords",
      @"Delimiters",
      @"Non Terminal Symbols",
      @"Variant Symbols",
      @"Integer Constants",
      @"Floating Point Constants",
      @"String Constants",
      @"Character Constants",
      @"Type Names (@...)",
      @"Comments"
    } ;
    result = kStyleArray [inIndex] ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {
  NSString * result = nil ;
  if ((inIndex >= 0) && (inIndex < 11)) {
    NSString * kStyleArray [11] = {
      @"galgasTemplateScanner",
      @"galgasTemplateScanner-keywordsStyle",
      @"galgasTemplateScanner-delimitersStyle",
      @"galgasTemplateScanner-nonTerminalStyle",
      @"galgasTemplateScanner-variantStyle",
      @"galgasTemplateScanner-integerStyle",
      @"galgasTemplateScanner-float_csts",
      @"galgasTemplateScanner-stringStyle",
      @"galgasTemplateScanner-characterStyle",
      @"galgasTemplateScanner-typeNameStyle",
      @"galgasTemplateScanner-commentStyle"
    } ;
    result = kStyleArray [inIndex] ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         L E X I Q U E   I D E N T I F I E R                               *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) lexiqueIdentifier {
  return @"galgasTemplateScanner" ;
}

//---------------------------------------------------------------------------*

@end

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



