//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'mda_galgas_routines.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 31th, 2009, at 22h4'57"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "mda_galgas_routines.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "mda_galgas_routines.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "optionLL1grammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "outputDirectory"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_outputDirectory (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_outputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outOuputDirectory ;
  var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ;
  var_cas_outOuputDirectory.appendCString ("/GALGAS_OUTPUT_TEMP") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_outputDirectory\n") ;
  #endif
  return var_cas_outOuputDirectory ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "checkCategoryDefinitionForClass"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCategoryDefinitionForClass (C_Compiler & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractCategoryMethodName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_overridingCategoryMethodListMap  var_cas_inOverridingCategoryMethodListMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCategoryDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_classIndexList  var_cas_descendantClasses ;
  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (63)) ;
  {
    GGS_classIndexList::cEnumerator enumerator_3583 (var_cas_descendantClasses, true) ;
    const GGS_classIndexList::cElement * operand_3583 = NULL ;
    while (((operand_3583 = enumerator_3583.nextObject ()))) {
      macroValidPointer (operand_3583) ;
      GGS_lstring  var_cas_descendantClassName ;
      GGS_ACGalgasType  var_cas_t ;
      const GGS_typeMapIndex  _temp_3665 = operand_3583->mClassMapindex ;
      if (_temp_3665.isBuilt ()) {
        _temp_3665 (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (65)) ;
      }
      GGS_bool var_cas_isAbstract ;
      { const GGS_ACGalgasType _var_3942 = var_cas_t ; // CAST instruction
        if (_var_3942.getPtr () != NULL) {
          macroValidPointer (_var_3942.getPtr ()) ;
          if (dynamic_cast <cPtr_classGalgasType *> (_var_3942.getPtr ()) != NULL) {
            const GGS_classGalgasType var_cas_classType (_var_3942.getPtr ()) ;
            var_cas_isAbstract = var_cas_classType.reader_mIsAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
          }else{
            var_cas_descendantClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@"))._operator_concat (var_cas_descendantClassName))._operator_concat (GGS_string ("' type should be a class")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
            var_cas_isAbstract.drop () ;
          }
        }
      }
      GGS_overridingCategoryMethodList  var_cas_overridingMethods ;
      var_cas_overridingMethods = var_cas_inOverridingCategoryMethodListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) COMMA_SOURCE_FILE_AT_LINE (73)) ;
      GGS_bool var_cas_found ;
      var_cas_found = GGS_bool (false) ;
      {
        GGS_overridingCategoryMethodList::cEnumerator enumerator_4140 (var_cas_overridingMethods, true) ;
        const GGS_overridingCategoryMethodList::cElement * operand_4140 = NULL ;
        while (((operand_4140 = enumerator_4140.nextObject ()))
            && ((var_cas_found)._operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_4140) ;
          var_cas_found = (var_cas_inAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76)))._operator_isEqual (operand_4140->mOverridingCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76))) ;
        }
      }
      if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
        if ((var_cas_isAbstract).isBuiltAndTrue ()) {
          ::routine_checkCategoryDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_inAbstractCategoryMethodName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingCategoryMethodListMap COMMA_SOURCE_FILE_AT_LINE (80)) ;
        }else{
          var_cas_inAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract category method '"))._operator_concat (var_cas_inAbstractCategoryMethodName))._operator_concat (GGS_string ("' is defined for abstract class '@")))._operator_concat (var_cas_inClassNameForErrorSignaling))._operator_concat (GGS_string ("', but concrete descendant class '@")))._operator_concat (var_cas_descendantClassName))._operator_concat (GGS_string ("' does not implement this method")) COMMA_SOURCE_FILE_AT_LINE (91)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCategoryDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "performProjectGlobalCheckings"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_Compiler & inLexique,
                                const GGS_parsedComponentStruct  var_cas_inParsedComponentStruct,
                                const GGS_location   var_cas_inEndOfSourceFile COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectGlobalCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticDeclarationList  var_cas_semanticDeclarationList ;
  var_cas_semanticDeclarationList = GGS_semanticDeclarationList ::constructor_emptyList () ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_5248 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (104)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_5248 = NULL ;
    while (((operand_5248 = enumerator_5248.nextObject ()))) {
      macroValidPointer (operand_5248) ;
      var_cas_semanticDeclarationList._dotAssign_operation (operand_5248->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
    }
  }
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationList,  var_cas_inEndOfSourceFile,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (109)) ;
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_abstractCategoryMethodListMap var_cas_abstractCategoryMethodListMap ;
    var_cas_abstractCategoryMethodListMap = GGS_abstractCategoryMethodListMap::constructor_emptyMap () ;
    GGS_categoryMethodListMap var_cas_categoryMethodListMap ;
    var_cas_categoryMethodListMap = GGS_categoryMethodListMap::constructor_emptyMap () ;
    GGS_overridingCategoryMethodListMap var_cas_overridingCategoryMethodListMap ;
    var_cas_overridingCategoryMethodListMap = GGS_overridingCategoryMethodListMap::constructor_emptyMap () ;
    {
      GGS_parsedSemanticsComponentMap::cEnumerator enumerator_5950 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
      const GGS_parsedSemanticsComponentMap::cElement * operand_5950 = NULL ;
      while (((operand_5950 = enumerator_5950.nextObject ()))) {
        macroValidPointer (operand_5950) ;
        var_cas_abstractCategoryMethodListMap._dotAssign_operation (operand_5950->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (117)).reader_mAbstractCategoryMethodListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (117))) ;
        var_cas_overridingCategoryMethodListMap._dotAssign_operation (operand_5950->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (118)).reader_mOverridingCategoryMethodListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (118))) ;
      }
    }
    GGS_descendantClassListMap var_cas_descendantClassListMap ;
    var_cas_descendantClassListMap = var_cas_semanticContext.reader_mDescendantClassListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
    {
      GGS_abstractCategoryMethodListMap::cEnumerator enumerator_6376 (var_cas_abstractCategoryMethodListMap, true) ;
      while (enumerator_6376.hc ()) {
        {
          GGS_abstractCategoryMethodList::cEnumerator enumerator_6400 (enumerator_6376._object (HERE), true) ;
          const GGS_abstractCategoryMethodList::cElement * operand_6400 = NULL ;
          while (((operand_6400 = enumerator_6400.nextObject ()))) {
            macroValidPointer (operand_6400) ;
            ::routine_checkCategoryDefinitionForClass (inLexique,  enumerator_6376._key (HERE),  enumerator_6376._key (HERE),  operand_6400->mAbstractCategoryMethodName,  var_cas_descendantClassListMap,  var_cas_overridingCategoryMethodListMap COMMA_SOURCE_FILE_AT_LINE (123)) ;
          }
        }
        enumerator_6376.next () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectGlobalCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_stringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_targetFileListMap::cElement::_clone (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_targetFileListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject._operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_targetFileListMap::cElement::
_description (C_Compiler & inLexique,
              const sint32 inIndentation
              COMMA_LOCATION_ARGS) const {
  const GGS_string s = mListObject.reader_description (inLexique COMMA_THERE, inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
constructor_emptyMap (void) {
  GGS_targetFileListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_targetFileListMap::
_typeNameForDescriptionReader (void) const {
  return "@targetFileListMap" ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
_operator_concat (const GGS_targetFileListMap & inOperand) const {
  GGS_targetFileListMap result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
_dotAssign_operation (const GGS_targetFileListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const sint32 objectCount = dictPtr->count () ;
      for (sint32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * elementPtr = NULL ;
           macroMyNew (elementPtr, cElement (HERE)) ;
           nodePtr->mObject._setPointer (elementPtr) ;
        }
        GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr._dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
_addAssign_operation (const GGS_string & inKey,
                      const GGS_string& inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * elementPtr = NULL ;
       macroMyNew (elementPtr, cElement (HERE)) ;
       nodePtr->mObject._setPointer (elementPtr) ;
    }
    GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr._addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_stringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_targetFileListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result._setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const sint32 objectCount = dictPtr->count () ;
    for (sint32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result._addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cEnumerator::
cEnumerator (const GGS_targetFileListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_stringlist & GGS_targetFileListMap::cEnumerator::
_object (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_sourceFileMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

e_sourceFileMap::e_sourceFileMap (void) :
mFullPath (),
mSourceKind () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map '@sourceFileMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_sourceFileMap::
elementOf_GGS_sourceFileMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_sourceFileMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_sourceFileMap::
appendForMapDescription (C_Compiler & inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFullPath.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSourceKind.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_sourceFileMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_sourceFileMap * ptr = dynamic_cast <const elementOf_GGS_sourceFileMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFullPath._operator_isEqual (ptr->mInfo.mFullPath)).boolValue ()
           && (mInfo.mSourceKind._operator_isEqual (ptr->mInfo.mSourceKind)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_sourceFileMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_sourceFileMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
_operator_isEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
_operator_isNotEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_string& inParameter0,
                const GGS_sourceFileKind& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_sourceFileMap info  ;
    info.mFullPath = inParameter0 ;
    info.mSourceKind = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_sourceFileKind  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mFullPath ;
    outParameter1 = node->mInfo.mSourceKind ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_sourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_sourceFileKind& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_sourceFileMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_sourceFileMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_sourceFileMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @sourceFileMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_sourceFileMap::cEnumerator::_mFullPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFullPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sourceFileKind & GGS_sourceFileMap::cEnumerator::_mSourceKind (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSourceKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'fileListTemplateFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/file_list_template.mke'

const char * gWrapperFileContent_0_fileListTemplateFileWrapper = // 1691 bytes
  "#---------------------------------------------------------------*\n"
  "\n"
  "#--- Lib PM directory\n"
  "ifdef LIBPM_PATH_ENV_VAR\n"
  "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
  "else\n"
  "  LIB_PM_PATH := ../../libpm\n"
  "endif\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Project source files directories                          *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
  "%HAND_CODED_SOURCES_SUB_DIRS%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Build Options                                             *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
  "\n"
  "C_COMPILER_OPTIONS += -fexceptions\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Source files names list (without their actual path)       *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES :=\n"
  "\n"
  "#--- Files from libpm --------------------\n"
  "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
  "\n"
  "#--- Hand-coded files ---------------------\n"
  "%HAND_CODED_SOURCE_LIST%\n"
  "\n"
  "#--- Files generated by GALGAS ------------\n"
  "%GALGAS_SOURCE_LIST%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
;

static const cRegularFileWrapper gWrapperFile_0_fileListTemplateFileWrapper = {
  "file_list_template.mke",
  "mke",
  gWrapperFileContent_0_fileListTemplateFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_fileListTemplateFileWrapper_0 [2] = {
  & gWrapperFile_0_fileListTemplateFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_fileListTemplateFileWrapper = {
  "",
  1,
  gWrapperAllFiles_fileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_fileListTemplateFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) {
  C_String _result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS.isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST.isBuilt () ;
  if (isBuilt) {
    _result << "#---------------------------------------------------------------*\n"
    "\n"
    "#--- Lib PM directory\n"
    "ifdef LIBPM_PATH_ENV_VAR\n"
    "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
    "else\n"
    "  LIB_PM_PATH := ../../libpm\n"
    "endif\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Project source files directories                          *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n" ;
    _result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Build Options                                             *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
    "\n"
    "C_COMPILER_OPTIONS += -fexceptions\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Source files names list (without their actual path)       *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES :=\n"
    "\n"
    "#--- Files from libpm --------------------\n"
    "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
    "\n"
    "#--- Hand-coded files ---------------------\n" ;
    _result << var_cas_HAND_CODED_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#--- Files generated by GALGAS ------------\n" ;
    _result << var_cas_GALGAS_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, _result) ;
}

//---------------------------------------------------------------------------*

