//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'mda_galgas_routines.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 24th, 2008, at 13h40'25"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "mda_galgas_routines.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "mda_galgas_routines.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "optionLL1grammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "getOutputDirectory"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getOutputDirectory (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_string & var_cas_outOuputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getOutputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
  var_cas_outOuputDirectory.writeString ("/GALGAS_OUTPUT_TEMP") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getOutputDirectory\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "performProjectGlobalCheckings"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_Compiler & _inLexique,
                                const GGS_parsedComponentStruct  var_cas_inParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectGlobalCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticDeclarationList  var_cas_semanticDeclarationList ;
  var_cas_semanticDeclarationList = GGS_semanticDeclarationList ::constructor_emptyList () ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_3275 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_3275 = NULL ;
    while (((operand_3275 = (GGS_parsedSemanticsComponentMap::cElement *) enumerator_3275.nextObject ()))) {
      macroValidPointer (operand_3275) ;
      var_cas_semanticDeclarationList._dotAssign_operation (operand_3275->mInfo.mRoot.reader_mSemanticDeclarations (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)).reader_mSemanticDeclarationList (_inLexique COMMA_SOURCE_FILE_AT_LINE (59))) ;
    }
  }
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (_inLexique,  var_cas_semanticDeclarationList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (62)) ;
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_abstractCategoryMethodListMap var_cas_abstractCategoryMethodListMap ;
    var_cas_abstractCategoryMethodListMap = GGS_abstractCategoryMethodListMap::constructor_emptyMap () ;
    GGS_categoryMethodListMap var_cas_categoryMethodListMap ;
    var_cas_categoryMethodListMap = GGS_categoryMethodListMap::constructor_emptyMap () ;
    GGS_overridingCategoryMethodListMap var_cas_overridingCategoryMethodListMap ;
    var_cas_overridingCategoryMethodListMap = GGS_overridingCategoryMethodListMap::constructor_emptyMap () ;
    {
      GGS_parsedSemanticsComponentMap::cEnumerator enumerator_3958 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (70)), true) ;
      const GGS_parsedSemanticsComponentMap::cElement * operand_3958 = NULL ;
      while (((operand_3958 = (GGS_parsedSemanticsComponentMap::cElement *) enumerator_3958.nextObject ()))) {
        macroValidPointer (operand_3958) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectGlobalCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*

