//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'optionCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 17th, 2010, at 14h34'25"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "optionCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "optionLL1grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'optionGenerationTemplates'            *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_optionGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_optionGenerationTemplates_0,
  0,
  gWrapperAllDirectories_optionGenerationTemplates_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"command_line_interface/C_BoolCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_UIntCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_StringCommandLineOption.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_423 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_423 = NULL ;
    while (((operand_423 = enumerator_423.nextObject ()))) {
      macroValidPointer (operand_423) ;
      result << "extern C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_423->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_996 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_996 = NULL ;
    while (((operand_996 = enumerator_996.nextObject ()))) {
      macroValidPointer (operand_996) ;
      result << "extern C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_996->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1571 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1571 = NULL ;
    while (((operand_1571 = enumerator_1571.nextObject ()))) {
      macroValidPointer (operand_1571) ;
      result << "extern C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_1571->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionImplementation' template of 'optionGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "#include <string.h>\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << ".h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_945 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_945 = NULL ;
    while (((operand_945 = enumerator_945.nextObject ()))) {
      macroValidPointer (operand_945) ;
      result << "C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_945->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_945->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_945->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << ",\n"
        "                                         " ;
      result << operand_945->mInfo.mOptionString.reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_945->mInfo.mComment.reader_utf8Representation () ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1863 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1863 = NULL ;
    while (((operand_1863 = enumerator_1863.nextObject ()))) {
      macroValidPointer (operand_1863) ;
      result << "C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_1863->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_1863->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1863->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
      result << ",\n"
        "                                         " ;
      result << operand_1863->mInfo.mOptionString.reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1863->mInfo.mComment.reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1863->mInfo.mDefaultValue ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_2848 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_2848 = NULL ;
    while (((operand_2848 = enumerator_2848.nextObject ()))) {
      macroValidPointer (operand_2848) ;
      result << "C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_2848->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_2848->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2848->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ;
      result << ",\n"
        "                                         " ;
      result << operand_2848->mInfo.mOptionString.reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2848->mInfo.mComment.reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2848->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionHeaderCocoaZone2' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone2 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_FOR_COCOA_DEFINED\n"
      "#define " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_FOR_COCOA_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import <Cocoa/Cocoa.h>\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionHeaderCocoaZone3' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void enterOptionsFor_" ;
    result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " (NSMutableArray * ioBoolOptionArray,\n"
      "                                                       NSMutableArray * ioUIntOptionArray,\n"
      "                                                       NSMutableArray * ioStringOptionArray) ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionImplementationCocoa' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionImplementationCocoa (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "-cocoa.h\"\n"
      "#import \"OC_GGS_CommandLineOption.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void enterOptionsFor_" ;
    result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " (NSMutableArray * ioBoolOptionArray,\n"
      "                                                       NSMutableArray * ioUIntOptionArray,\n"
      "                                                       NSMutableArray * ioStringOptionArray) {\n" ;
    if ((var_cas_BOOL_OPTION_MAP.reader_count ().add_operation (inLexique, var_cas_UINT_OPTION_MAP.reader_count () COMMA_SOURCE_FILE_AT_LINE (11)).add_operation (inLexique, var_cas_STRING_OPTION_MAP.reader_count () COMMA_SOURCE_FILE_AT_LINE (11))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "  OC_GGS_CommandLineOption * option ;\n" ;
    }else {
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_706 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_706 = NULL ;
    while (((operand_706 = enumerator_706.nextObject ()))) {
      macroValidPointer (operand_706) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_706->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_706->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (18)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_706->mInfo.mOptionString.reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_706->mInfo.mComment.reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@\"\"\n"
        "  ] ;\n"
        "  [ioBoolOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_1204 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1204 = NULL ;
    while (((operand_1204 = enumerator_1204.nextObject ()))) {
      macroValidPointer (operand_1204) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_1204->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_1204->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_1204->mInfo.mOptionString.reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_1204->mInfo.mComment.reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@" ;
      result << operand_1204->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << "\n"
        "  ] ;\n"
        "  [ioUIntOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_1739 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1739 = NULL ;
    while (((operand_1739 = enumerator_1739.nextObject ()))) {
      macroValidPointer (operand_1739) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_1739->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_1739->mInfo.mOptionChar.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (42)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_1739->mInfo.mOptionString.reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_1739->mInfo.mComment.reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@" ;
      result << operand_1739->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << "\n"
        "  ] ;\n"
        "  [ioStringOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    result << "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "semanticAnalysisOfOptionComponent"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticAnalysisOfOptionComponent (C_Compiler & inLexique,
                                const GGS_optionComponentAST   var_cas_inOptionComponentRoot,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticAnalysisOfOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outBoolOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  var_cas_outUIntOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_outStringOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_stringset  var_cas_optionNameSet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_commandLineOptionListAST::cEnumerator enumerator_3663 (var_cas_inOptionComponentRoot.reader_mOptions (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), true) ;
    const GGS_commandLineOptionListAST::cElement * operand_3663 = NULL ;
    while (((operand_3663 = enumerator_3663.nextObject ()))) {
      macroValidPointer (operand_3663) ;
      const GGS_bool cond_3898 = var_cas_optionNameSet.reader_hasKey (operand_3663->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77))) ;
      if (cond_3898.isBuiltAndTrue ()) {
        operand_3663->mOptionInternalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_3663->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)))).operator_concat (GGS_string ("' command line option has been already declared")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
      }else if (cond_3898.isBuiltAndFalse ()) {
        const GGS_bool cond_4376 = (operand_3663->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_isEqual (GGS_string ("bool")) ;
        if (cond_4376.isBuiltAndTrue ()) {
          var_cas_outBoolOptionMap.modifier_insertKey (inLexique, operand_3663->mOptionInternalName, operand_3663->mOptionInvocationLetter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (82)), operand_3663->mOptionInvocationString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83)), operand_3663->mOptionComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (84)), GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (80)) ;
          const GGS_bool cond_4361 = (operand_3663->mOptionDefaultValueKind).operator_isNotEqual (GGS_optionDefaultValueEnumAST::constructor_noDefaultValue (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) ;
          if (cond_4361.isBuiltAndTrue ()) {
            operand_3663->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @bool option cannot have a default value (default value is allways false)") COMMA_SOURCE_FILE_AT_LINE (89)) ;
          }
        }else if (cond_4376.isBuiltAndFalse ()) {
          const GGS_bool cond_4915 = (operand_3663->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))).operator_isEqual (GGS_string ("uint")) ;
          if (cond_4915.isBuiltAndTrue ()) {
            var_cas_outUIntOptionMap.modifier_insertKey (inLexique, operand_3663->mOptionInternalName, operand_3663->mOptionInvocationLetter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), operand_3663->mOptionInvocationString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94)), operand_3663->mOptionComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95)), (((operand_3663->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_isEqual (GGS_string (""))).isBuiltAndTrue () ? (GGS_string ("0")) : (operand_3663->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96)))) COMMA_SOURCE_FILE_AT_LINE (91)) ;
            const GGS_bool cond_4900 = (operand_3663->mOptionDefaultValueKind).operator_isEqual (GGS_optionDefaultValueEnumAST::constructor_stringDefaultValue (inLexique COMMA_SOURCE_FILE_AT_LINE (98))) ;
            if (cond_4900.isBuiltAndTrue ()) {
              operand_3663->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @uint option default value cannot be an @string value") COMMA_SOURCE_FILE_AT_LINE (100)) ;
            }
          }else if (cond_4915.isBuiltAndFalse ()) {
            const GGS_bool cond_5403 = (operand_3663->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (101))).operator_isEqual (GGS_string ("string")) ;
            if (cond_5403.isBuiltAndTrue ()) {
              var_cas_outStringOptionMap.modifier_insertKey (inLexique, operand_3663->mOptionInternalName, operand_3663->mOptionInvocationLetter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (104)), operand_3663->mOptionInvocationString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105)), operand_3663->mOptionComment.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106)), operand_3663->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) COMMA_SOURCE_FILE_AT_LINE (102)) ;
              const GGS_bool cond_5389 = (operand_3663->mOptionDefaultValueKind).operator_isEqual (GGS_optionDefaultValueEnumAST::constructor_unsignedDefaultValue (inLexique COMMA_SOURCE_FILE_AT_LINE (109))) ;
              if (cond_5389.isBuiltAndTrue ()) {
                operand_3663->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @string option default value cannot be an @uint value") COMMA_SOURCE_FILE_AT_LINE (111)) ;
              }
            }else if (cond_5403.isBuiltAndFalse ()) {
              operand_3663->mOptionTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the @bool, @uint or @string types are allowed here") COMMA_SOURCE_FILE_AT_LINE (114)) ;
            }
          }
        }
      }
      var_cas_optionNameSet.addAssign_operation (operand_3663->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticAnalysisOfOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "parseOptionComponent"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseOptionComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_lstring  & var_cas_outOptionComponentName,
                                GGS_commandLineOptionMap  & var_cas_outBoolOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outUIntOptionMap,
                                GGS_commandLineOptionMap  & var_cas_outStringOptionMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outOptionComponentName = GGS_lstring ::constructor_new (inLexique, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension (), var_cas_inSourceFile.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) COMMA_SOURCE_FILE_AT_LINE (131)) ;
  const GGS_bool cond_6492 = var_cas_ioParsedComponentStruct.reader_mParsedOptionComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_hasKey (var_cas_outOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
  if (cond_6492.isBuiltAndTrue ()) {
    if (var_cas_ioParsedComponentStruct.mParsedOptionComponentMap.isBuilt ()) {
      var_cas_ioParsedComponentStruct.mParsedOptionComponentMap (HERE)->method_searchKey (inLexique, var_cas_outOptionComponentName, var_cas_outBoolOptionMap, var_cas_outUIntOptionMap, var_cas_outStringOptionMap COMMA_SOURCE_FILE_AT_LINE (133)) ;
    }
  }else if (cond_6492.isBuiltAndFalse ()) {
    GGS_optionComponentAST  var_cas_optionComponentAST ;
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_optionLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_optionComponentAST
                                    COMMA_SOURCE_FILE_AT_LINE (136)) ;
    }
    GGS_lstring  var_cas_componentName = var_cas_optionComponentAST.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
    GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
    const GGS_bool cond_7056 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140))).operator_isNotEqual (var_cas_basename) ;
    if (cond_7056.isBuiltAndTrue ()) {
      var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
        "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be the same")) COMMA_SOURCE_FILE_AT_LINE (144)) ;
    }
    GGS_string var_cas_baseName = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
    const GGS_bool cond_7457 = (var_cas_optionComponentAST.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (148)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148))).operator_isNotEqual (var_cas_baseName) ;
    if (cond_7457.isBuiltAndTrue ()) {
      var_cas_optionComponentAST.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (149)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the component name is '")).operator_concat (var_cas_optionComponentAST.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string ("' should be the file base name '"))).operator_concat (var_cas_baseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (152)) ;
    }
    ::routine_semanticAnalysisOfOptionComponent (inLexique,  var_cas_optionComponentAST,  var_cas_outBoolOptionMap,  var_cas_outUIntOptionMap,  var_cas_outStringOptionMap COMMA_SOURCE_FILE_AT_LINE (154)) ;
    var_cas_ioParsedComponentStruct.mParsedOptionComponentMap.modifier_insertKey (inLexique, var_cas_outOptionComponentName, var_cas_outBoolOptionMap, var_cas_outUIntOptionMap, var_cas_outStringOptionMap COMMA_SOURCE_FILE_AT_LINE (161)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileOptionComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileOptionComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_commandLineOptionMap  var_cas_boolOptionMap ;
  GGS_commandLineOptionMap  var_cas_uintOptionMap ;
  GGS_commandLineOptionMap  var_cas_stringOptionMap ;
  GGS_lstring  var_cas_optionComponentName ;
  ::routine_parseOptionComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentName,  var_cas_boolOptionMap,  var_cas_uintOptionMap,  var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (177)) ;
  const GGS_bool cond_8984 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (186))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_8984.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (193))), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) COMMA_SOURCE_FILE_AT_LINE (187)) ;
  }
  const GGS_bool cond_9453 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (205))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_9453.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionImplementation (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (212)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (206)) ;
  }
  const GGS_bool cond_9943 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_9943.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225))).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone2 (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (229))), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone3 (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) COMMA_SOURCE_FILE_AT_LINE (223)) ;
  }
  const GGS_bool cond_10427 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (238))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_10427.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (241))).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionImplementationCocoa (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (239)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

