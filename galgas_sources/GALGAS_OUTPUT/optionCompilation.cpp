//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'optionCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 5th, 2009, at 20h57'57"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "optionCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "optionLL1grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'optionGenerationTemplates'            *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_optionGenerationTemplates = {
  "",
  0,
  gWrapperAllFiles_optionGenerationTemplates_0,
  0,
  gWrapperAllDirectories_optionGenerationTemplates_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"command_line_interface/C_BoolCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_UIntCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_StringCommandLineOption.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_423 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_423 = NULL ;
    while (((operand_423 = enumerator_423.nextObject ()))) {
      macroValidPointer (operand_423) ;
      result << "extern C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (9)) ;
      result << "_" ;
      result << operand_423->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (9)) ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_997 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_997 = NULL ;
    while (((operand_997 = enumerator_997.nextObject ()))) {
      macroValidPointer (operand_997) ;
      result << "extern C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << "_" ;
      result << operand_997->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1573 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1573 = NULL ;
    while (((operand_1573 = enumerator_1573.nextObject ()))) {
      macroValidPointer (operand_1573) ;
      result << "extern C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
      result << "_" ;
      result << operand_1573->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (27)) ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionImplementation' template of 'optionGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "#include <string.h>\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << ".h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_815 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_815 = NULL ;
    while (((operand_815 = enumerator_815.nextObject ()))) {
      macroValidPointer (operand_815) ;
      result << "C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
      result << "_" ;
      result << operand_815->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_815->mKey.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (22)) ;
      result << ",\n"
        "                                         " ;
      result << operand_815->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << ",\n"
        "                                         " ;
      result << operand_815->mInfo.mOptionString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
      result << ",\n"
        "                                         " ;
      result << operand_815->mInfo.mComment.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1743 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1743 = NULL ;
    while (((operand_1743 = enumerator_1743.nextObject ()))) {
      macroValidPointer (operand_1743) ;
      result << "C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
      result << "_" ;
      result << operand_1743->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_1743->mKey.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (35)) ;
      result << ",\n"
        "                                         " ;
      result << operand_1743->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
      result << ",\n"
        "                                         " ;
      result << operand_1743->mInfo.mOptionString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
      result << ",\n"
        "                                         " ;
      result << operand_1743->mInfo.mComment.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (38)) ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_2673 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_2673 = NULL ;
    while (((operand_2673 = enumerator_2673.nextObject ()))) {
      macroValidPointer (operand_2673) ;
      result << "C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << "_" ;
      result << operand_2673->mKey.ggs_string ().reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_2673->mKey.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      result << ",\n"
        "                                         " ;
      result << operand_2673->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
      result << ",\n"
        "                                         " ;
      result << operand_2673->mInfo.mOptionString.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ;
      result << ",\n"
        "                                         " ;
      result << operand_2673->mInfo.mComment.ggs_string ().reader_utf8Representation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileOptionComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileOptionComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_optionComponentRoot  var_cas_optionComponentRoot ;
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    optionLL1grammar::_performSourceFileParsing_ (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inSourceFile,
                                  var_cas_optionComponentRoot
                                  COMMA_SOURCE_FILE_AT_LINE (57)) ;
  }
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (60)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (60)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (61))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (63)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be the same")) COMMA_SOURCE_FILE_AT_LINE (65)) ;
  }
  GGS_string var_cas_baseName ;
  var_cas_baseName = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  if (((var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (69)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (69))).operator_isNotEqual (var_cas_baseName)).isBuiltAndTrue ()) {
    var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (70)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the component name is '")).operator_concat (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (71)))).operator_concat (GGS_string ("' should be the file base name '"))).operator_concat (var_cas_baseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  GGS_commandLineOptionMap  var_cas_boolOptionMap ;
  var_cas_boolOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_commandLineOptionMap  var_cas_uintOptionMap ;
  var_cas_uintOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_commandLineOptionMap  var_cas_stringOptionMap ;
  var_cas_stringOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_optionNameSet ;
  var_cas_optionNameSet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_commandLineOptionList::cEnumerator enumerator_3912 (var_cas_optionComponentRoot.reader_mOptions (inLexique COMMA_SOURCE_FILE_AT_LINE (79)), true) ;
    const GGS_commandLineOptionList::cElement * operand_3912 = NULL ;
    while (((operand_3912 = enumerator_3912.nextObject ()))) {
      macroValidPointer (operand_3912) ;
      if ((var_cas_optionNameSet.reader_hasKey (inLexique, operand_3912->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80))).isBuiltAndTrue ()) {
        operand_3912->mOptionInternalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_3912->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)))).operator_concat (GGS_string ("' command line option has been already declared")) COMMA_SOURCE_FILE_AT_LINE (82)) ;
      }else if (((operand_3912->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82))).operator_isEqual (GGS_string ("bool"))).isBuiltAndTrue ()) {
        var_cas_boolOptionMap.modifier_insertKey (inLexique, operand_3912->mOptionInternalName, operand_3912->mOptionInvocationLetter, operand_3912->mOptionInvocationString, operand_3912->mOptionComment COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }else if (((operand_3912->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))).operator_isEqual (GGS_string ("uint"))).isBuiltAndTrue ()) {
        var_cas_uintOptionMap.modifier_insertKey (inLexique, operand_3912->mOptionInternalName, operand_3912->mOptionInvocationLetter, operand_3912->mOptionInvocationString, operand_3912->mOptionComment COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }else if (((operand_3912->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_isEqual (GGS_string ("string"))).isBuiltAndTrue ()) {
        var_cas_stringOptionMap.modifier_insertKey (inLexique, operand_3912->mOptionInternalName, operand_3912->mOptionInvocationLetter, operand_3912->mOptionInvocationString, operand_3912->mOptionComment COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }else{
        operand_3912->mOptionTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the @bool, @uint or @string types are allowed here") COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
      var_cas_optionNameSet._addAssign_operation (operand_3912->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106))) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (116)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116))), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (120)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
  if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionImplementation (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

