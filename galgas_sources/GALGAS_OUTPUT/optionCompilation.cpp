//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'optionCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     february 7th, 2010, at 19h41'17"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "optionCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "optionLL1grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of wrapper 'optionGenerationTemplates'            *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_optionGenerationTemplates_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_optionGenerationTemplates (
  "",
  0,
  gWrapperAllFiles_optionGenerationTemplates_0,
  0,
  gWrapperAllDirectories_optionGenerationTemplates_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone2' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "#define " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_0_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"command_line_interface/C_BoolCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_UIntCommandLineOption.h\"\n"
      "#include \"command_line_interface/C_StringCommandLineOption.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// 'optionHeaderZone3' template of 'optionGenerationTemplates' filewrapper   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_423 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_423 = NULL ;
    while (((operand_423 = enumerator_423.nextObject ()))) {
      macroValidPointer (operand_423) ;
      result << "extern C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_423->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_995 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_995 = NULL ;
    while (((operand_995 = enumerator_995.nextObject ()))) {
      macroValidPointer (operand_995) ;
      result << "extern C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_995->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1569 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1569 = NULL ;
    while (((operand_1569 = enumerator_1569.nextObject ()))) {
      macroValidPointer (operand_1569) ;
      result << "extern C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_1569->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionImplementation' template of 'optionGenerationTemplates' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"version_libpm.h\"\n"
      "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
      "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
      "#endif\n"
      "\n"
      "#include <string.h>\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << ".h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               Bool options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_816 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_816 = NULL ;
    while (((operand_816 = enumerator_816.nextObject ()))) {
      macroValidPointer (operand_816) ;
      result << "C_BoolCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_816->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_816->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_816->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (23)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
      result << ",\n"
        "                                         " ;
      result << operand_816->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_816->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                               UInt options                                *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_1739 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1739 = NULL ;
    while (((operand_1739 = enumerator_1739.nextObject ()))) {
      macroValidPointer (operand_1739) ;
      result << "C_UIntCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_1739->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_1739->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1739->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
      result << ",\n"
        "                                         " ;
      result << operand_1739->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1739->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_1739->mInfo.mDefaultValue ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                              String options                               *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_commandLineOptionMap::cEnumerator enumerator_2729 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_2729 = NULL ;
    while (((operand_2729 = enumerator_2729.nextObject ()))) {
      macroValidPointer (operand_2729) ;
      result << "C_StringCommandLineOption gOption_" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
      result << "_" ;
      result << operand_2729->mKey.ggs_string ().reader_identifierRepresentation () ;
      result << " (\"" ;
      result << var_cas_OPTION_COMPONENT_NAME ;
      result << "\",\n"
        "                                         " ;
      result << operand_2729->mKey.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2729->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) ;
      result << ",\n"
        "                                         " ;
      result << operand_2729->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2729->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << ",\n"
        "                                         " ;
      result << operand_2729->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << ") ;\n"
        "\n" ;
    }
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionHeaderCocoaZone2' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone2 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_FOR_COCOA_DEFINED\n"
      "#define " ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "_FOR_COCOA_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import <Cocoa/Cocoa.h>\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionHeaderCocoaZone3' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone3 (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void enterOptionsFor_" ;
    result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " (NSMutableArray * ioBoolOptionArray,\n"
      "                                                       NSMutableArray * ioUIntOptionArray,\n"
      "                                                       NSMutableArray * ioStringOptionArray) ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'optionImplementationCocoa' template of 'optionGenerationTemplates' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_optionGenerationTemplates_optionImplementationCocoa (C_Compiler & inLexique,
                                const GGS_string& var_cas_OPTION_COMPONENT_NAME,
                                const GGS_commandLineOptionMap & var_cas_BOOL_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_UINT_OPTION_MAP,
                                const GGS_commandLineOptionMap & var_cas_STRING_OPTION_MAP) {
  C_String result ;
  const bool isBuilt = var_cas_OPTION_COMPONENT_NAME.isBuilt ()
    && var_cas_BOOL_OPTION_MAP.isBuilt ()
    && var_cas_UINT_OPTION_MAP.isBuilt ()
    && var_cas_STRING_OPTION_MAP.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "\n"
      "#import \"" ;
    result << var_cas_OPTION_COMPONENT_NAME ;
    result << "-cocoa.h\"\n"
      "#import \"OC_GGS_CommandLineOption.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "void enterOptionsFor_" ;
    result << var_cas_OPTION_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " (NSMutableArray * ioBoolOptionArray,\n"
      "                                                       NSMutableArray * ioUIntOptionArray,\n"
      "                                                       NSMutableArray * ioStringOptionArray) {\n" ;
    if ((var_cas_BOOL_OPTION_MAP.reader_count ().add_operation (inLexique, var_cas_UINT_OPTION_MAP.reader_count () COMMA_SOURCE_FILE_AT_LINE (11)).add_operation (inLexique, var_cas_STRING_OPTION_MAP.reader_count () COMMA_SOURCE_FILE_AT_LINE (11))).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "  OC_GGS_CommandLineOption * option ;\n" ;
    }else {
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_706 (var_cas_BOOL_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_706 = NULL ;
    while (((operand_706 = enumerator_706.nextObject ()))) {
      macroValidPointer (operand_706) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_706->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_706->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (18)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (18)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_706->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_706->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@\"\"\n"
        "  ] ;\n"
        "  [ioBoolOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_1210 (var_cas_UINT_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1210 = NULL ;
    while (((operand_1210 = enumerator_1210.nextObject ()))) {
      macroValidPointer (operand_1210) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_1210->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_1210->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_1210->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_1210->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@" ;
      result << operand_1210->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << "\n"
        "  ] ;\n"
        "  [ioUIntOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    GGS_commandLineOptionMap::cEnumerator enumerator_1751 (var_cas_STRING_OPTION_MAP, true) ;
    const GGS_commandLineOptionMap::cElement * operand_1751 = NULL ;
    while (((operand_1751 = enumerator_1751.nextObject ()))) {
      macroValidPointer (operand_1751) ;
      result << "  option = [[OC_GGS_CommandLineOption alloc]\n"
        "    initWithDomainName:@" ;
      result << var_cas_OPTION_COMPONENT_NAME.reader_utf8Representation () ;
      result << "\n"
        "    identifier:@" ;
      result << operand_1751->mKey.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    commandChar:" ;
      result << operand_1751->mInfo.mOptionChar.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (42)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (42)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
      result << "\n"
        "    commandString:@" ;
      result << operand_1751->mInfo.mOptionString.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    comment:@" ;
      result << operand_1751->mInfo.mComment.ggs_string ().reader_utf8Representation () ;
      result << "\n"
        "    defaultValue:@" ;
      result << operand_1751->mInfo.mDefaultValue.reader_utf8Representation () ;
      result << "\n"
        "  ] ;\n"
        "  [ioStringOptionArray addObject:option] ;\n"
        "  [option release] ;\n" ;
    }
    result << "}\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "parseOptionComponent"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseOptionComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_optionComponentRoot  & var_cas_outOptionComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension (), var_cas_inSourceFile.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) COMMA_HERE) ;
  const GGS_bool cond_3807 = var_cas_ioParsedComponentStruct.reader_mParsedOptionComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (74)).reader_hasKey (var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74))) ;
  if (cond_3807.isBuiltAndTrue ()) {
    const GGS_parsedOptionComponentMap  temp_3768 = var_cas_ioParsedComponentStruct.reader_mParsedOptionComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
    if (temp_3768.isBuilt ()) {
      temp_3768 (HERE)->method_searchKey (inLexique, var_cas_key, var_cas_outOptionComponentRoot COMMA_SOURCE_FILE_AT_LINE (75)) ;
    }
  }else if (cond_3807.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_optionLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outOptionComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (77)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedOptionComponentMap.modifier_insertKey (inLexique, var_cas_key, var_cas_outOptionComponentRoot COMMA_SOURCE_FILE_AT_LINE (78)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileOptionComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileOptionComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileOptionComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_optionComponentRoot  var_cas_optionComponentRoot ;
  ::routine_parseOptionComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentRoot COMMA_SOURCE_FILE_AT_LINE (91)) ;
  GGS_lstring  var_cas_componentName = var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (98)) ;
  GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_4897 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100))).operator_isNotEqual (var_cas_basename) ;
  if (cond_4897.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be the same")) COMMA_SOURCE_FILE_AT_LINE (104)) ;
  }
  GGS_string var_cas_baseName = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_5287 = (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108))).operator_isNotEqual (var_cas_baseName) ;
  if (cond_5287.isBuiltAndTrue ()) {
    var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (109)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the component name is '")).operator_concat (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (110)))).operator_concat (GGS_string ("' should be the file base name '"))).operator_concat (var_cas_baseName)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  GGS_commandLineOptionMap  var_cas_boolOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_commandLineOptionMap  var_cas_uintOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_commandLineOptionMap  var_cas_stringOptionMap = GGS_commandLineOptionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_optionNameSet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_commandLineOptionList::cEnumerator enumerator_5540 (var_cas_optionComponentRoot.reader_mOptions (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
    const GGS_commandLineOptionList::cElement * operand_5540 = NULL ;
    while (((operand_5540 = enumerator_5540.nextObject ()))) {
      macroValidPointer (operand_5540) ;
      const GGS_bool cond_5773 = var_cas_optionNameSet.reader_hasKey (operand_5540->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119))) ;
      if (cond_5773.isBuiltAndTrue ()) {
        operand_5540->mOptionInternalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_5540->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string ("' command line option has been already declared")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
      }else if (cond_5773.isBuiltAndFalse ()) {
        const GGS_bool cond_6220 = (operand_5540->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (121))).operator_isEqual (GGS_string ("bool")) ;
        if (cond_6220.isBuiltAndTrue ()) {
          var_cas_boolOptionMap.modifier_insertKey (inLexique, operand_5540->mOptionInternalName, operand_5540->mOptionInvocationLetter, operand_5540->mOptionInvocationString, operand_5540->mOptionComment, GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (122)) ;
          const GGS_bool cond_6205 = (operand_5540->mOptionDefaultValueKind).operator_isNotEqual (GGS_optionDefaultValueEnum::constructor_noDefaultValue (inLexique COMMA_HERE)) ;
          if (cond_6205.isBuiltAndTrue ()) {
            operand_5540->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @bool option cannot have a default value (default value is allways false)") COMMA_SOURCE_FILE_AT_LINE (131)) ;
          }
        }else if (cond_6220.isBuiltAndFalse ()) {
          const GGS_bool cond_6728 = (operand_5540->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132))).operator_isEqual (GGS_string ("uint")) ;
          if (cond_6728.isBuiltAndTrue ()) {
            var_cas_uintOptionMap.modifier_insertKey (inLexique, operand_5540->mOptionInternalName, operand_5540->mOptionInvocationLetter, operand_5540->mOptionInvocationString, operand_5540->mOptionComment, (((operand_5540->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))).operator_isEqual (GGS_string (""))).isBuiltAndTrue () ? (GGS_string ("0")) : (operand_5540->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138)))) COMMA_SOURCE_FILE_AT_LINE (133)) ;
            const GGS_bool cond_6713 = (operand_5540->mOptionDefaultValueKind).operator_isEqual (GGS_optionDefaultValueEnum::constructor_stringDefaultValue (inLexique COMMA_HERE)) ;
            if (cond_6713.isBuiltAndTrue ()) {
              operand_5540->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @uint option default value cannot be an @string value") COMMA_SOURCE_FILE_AT_LINE (142)) ;
            }
          }else if (cond_6728.isBuiltAndFalse ()) {
            const GGS_bool cond_7185 = (operand_5540->mOptionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143))).operator_isEqual (GGS_string ("string")) ;
            if (cond_7185.isBuiltAndTrue ()) {
              var_cas_stringOptionMap.modifier_insertKey (inLexique, operand_5540->mOptionInternalName, operand_5540->mOptionInvocationLetter, operand_5540->mOptionInvocationString, operand_5540->mOptionComment, operand_5540->mOptionDefaultValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149)) COMMA_SOURCE_FILE_AT_LINE (144)) ;
              const GGS_bool cond_7171 = (operand_5540->mOptionDefaultValueKind).operator_isEqual (GGS_optionDefaultValueEnum::constructor_unsignedDefaultValue (inLexique COMMA_HERE)) ;
              if (cond_7171.isBuiltAndTrue ()) {
                operand_5540->mOptionDefaultValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an @string option default value cannot be an @uint value") COMMA_SOURCE_FILE_AT_LINE (153)) ;
              }
            }else if (cond_7185.isBuiltAndFalse ()) {
              operand_5540->mOptionTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the @bool, @uint or @string types are allowed here") COMMA_SOURCE_FILE_AT_LINE (156)) ;
            }
          }
        }
      }
      var_cas_optionNameSet.addAssign_operation (operand_5540->mOptionInternalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157))) ;
    }
  }
  const GGS_bool cond_7959 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_7959.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (163))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone2 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (167))), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderZone3 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (171)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (171)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) COMMA_SOURCE_FILE_AT_LINE (161)) ;
  }
  const GGS_bool cond_8474 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_8474.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionImplementation (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (180)) ;
  }
  const GGS_bool cond_9033 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_9033.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (199)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_concat (GGS_string ("-cocoa.h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone2 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203))), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionHeaderCocoaZone3 (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) COMMA_SOURCE_FILE_AT_LINE (197)) ;
  }
  const GGS_bool cond_9563 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_9563.isBuiltAndTrue ()) {
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (215)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215))).operator_concat (GGS_string ("-cocoa.m")), GGS_string ("//"), GGS_string ("\n"
      "\n"), template_filewrapper_optionGenerationTemplates_optionImplementationCocoa (inLexique, var_cas_optionComponentRoot.reader_mOptionComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (219)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap), GGS_string ("\n"
      "\n"), GGS_string ("\n"
      "\n") COMMA_SOURCE_FILE_AT_LINE (213)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileOptionComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

