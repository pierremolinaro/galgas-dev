//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'semanticAnalysis.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 29th, 2010, at 16h52'57"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semanticAnalysis_DEFINED
#define semanticAnalysis_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "semanticsDecoratedTypes.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_attributeIndexMap ;
class GGS_constantIndexMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Routine 'checkMethodSignatures'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMethodSignatures (C_Compiler &,
                                const GGS_formalParameterListForGeneration  ,
                                const GGS_location  ,
                                const GGS_formalParameterSignature  ,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.performSemanticAnalysis'      *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis)  (C_Compiler & inLexique,
                                const cPtr_semanticDeclarationAST * inObjectPtr,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioSemanticDeclarationListForGeneration
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__performSemanticAnalysis
findCategoryMethod__semanticDeclarationAST__performSemanticAnalysis (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@attributeIndexMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_attributeIndexMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_attributeIndexMap ;

//---------------------------------------------------------------------------*

class GGS_attributeIndexMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_attributeIndexMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_attributeIndexMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_attributeIndexMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_attributeIndexMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_attributeIndexMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_attributeIndexMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_attributeIndexMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_attributeIndexMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_attributeIndexMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_attributeIndexMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_attributeIndexMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_attributeIndexMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mIndex (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@constantIndexMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constantIndexMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_constantIndexMap ;

//---------------------------------------------------------------------------*

class GGS_constantIndexMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_constantIndexMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_constantIndexMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_constantIndexMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_constantIndexMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_constantIndexMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_constantIndexMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_constantIndexMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_uint & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_uint & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_constantIndexMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_constantIndexMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_constantIndexMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_constantIndexMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_constantIndexMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint   & _mIndex (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'performSemanticAnalysis'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performSemanticAnalysis (C_Compiler &,
                                const GGS_semanticDeclarationListAST  ,
                                const GGS_semanticContext ,
                                GGS_semanticDeclarationListForGeneration  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@attributeIndexMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_attributeIndexMap {
  public : GGS_uint  mIndex ;

  public : e_attributeIndexMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_attributeIndexMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_attributeIndexMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_attributeIndexMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_attributeIndexMap * nextObject (void) const { return (elementOf_GGS_attributeIndexMap *) mNextItem ; }
  public : inline elementOf_GGS_attributeIndexMap * infObject (void) const { return (elementOf_GGS_attributeIndexMap *) mInfPtr ; }
  public : inline elementOf_GGS_attributeIndexMap * supObject (void) const { return (elementOf_GGS_attributeIndexMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_attributeIndexMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of map '@constantIndexMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_constantIndexMap {
  public : GGS_uint  mIndex ;

  public : e_constantIndexMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_constantIndexMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_constantIndexMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_constantIndexMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_constantIndexMap * nextObject (void) const { return (elementOf_GGS_constantIndexMap *) mNextItem ; }
  public : inline elementOf_GGS_constantIndexMap * infObject (void) const { return (elementOf_GGS_constantIndexMap *) mInfPtr ; }
  public : inline elementOf_GGS_constantIndexMap * supObject (void) const { return (elementOf_GGS_constantIndexMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_constantIndexMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

#endif
