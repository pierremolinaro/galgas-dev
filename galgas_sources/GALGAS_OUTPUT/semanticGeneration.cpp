//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'semanticGeneration.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       march 15th, 2010, at 12h4'0"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of wrapper 'builtinTypeGenerationTemplate'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_builtinTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_builtinTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_builtinTypeGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_builtinTypeGenerationTemplate_0,
  0,
  gWrapperAllDirectories_builtinTypeGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'unifiedTypeHeader' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_unifiedTypeHeader (C_Compiler & inLexique,
                                const GGS_string& var_cas_TYPE_NAME,
                                const GGS_string& var_cas_TYPE_IDENTIFIER,
                                const GGS_bool& var_cas_IS_CONCRETE,
                                const GGS_unifiedTypeMapIndex & var_cas_SUPER_TYPE_INDEX,
                                const GGS_typeKindEnum& var_cas_TYPE_KIND,
                                const GGS_typedAttributeList & var_cas_CURRENT_TYPE_ATTRIBUTE_LIST,
                                const GGS_constructorMap & var_cas_CONSTRUCTOR_MAP,
                                const GGS_readerMap & var_cas_READER_MAP,
                                const GGS_modifierMap & var_cas_MODIFIER_MAP,
                                const GGS_instanceMethodMap & var_cas_INSTANCE_METHOD_MAP,
                                const GGS_classMethodMap & var_cas_CLASS_METHOD_MAP,
                                const GGS_enumerationDescriptorList & var_cas_ENUMERATION_DESCRIPTOR_LIST,
                                const GGS_uint & var_cas_SUPPORTED_OPERATORS,
                                const GGS_unifiedTypeMapIndexList & var_cas_ADD_ASSIGN_ARGUMENT_LIST,
                                const GGS_unifiedTypeMapIndexList & var_cas_MINUS_ASSIGN_ARGUMENT_LIST,
                                const GGS_nativeAttributeList & var_cas_NATIVE_ATTRIBUTE_LIST,
                                const GGS_string& var_cas_SUPER_CLASS_FOR_GENERATION) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  const bool isBuilt = var_cas_TYPE_NAME.isBuilt ()
    && var_cas_TYPE_IDENTIFIER.isBuilt ()
    && var_cas_IS_CONCRETE.isBuilt ()
    && var_cas_SUPER_TYPE_INDEX.isBuilt ()
    && var_cas_TYPE_KIND.isBuilt ()
    && var_cas_CURRENT_TYPE_ATTRIBUTE_LIST.isBuilt ()
    && var_cas_CONSTRUCTOR_MAP.isBuilt ()
    && var_cas_READER_MAP.isBuilt ()
    && var_cas_MODIFIER_MAP.isBuilt ()
    && var_cas_INSTANCE_METHOD_MAP.isBuilt ()
    && var_cas_CLASS_METHOD_MAP.isBuilt ()
    && var_cas_ENUMERATION_DESCRIPTOR_LIST.isBuilt ()
    && var_cas_SUPPORTED_OPERATORS.isBuilt ()
    && var_cas_ADD_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_MINUS_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_NATIVE_ATTRIBUTE_LIST.isBuilt ()
    && var_cas_SUPER_CLASS_FOR_GENERATION.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//" ;
    result << ((((GGS_string ("@")).operator_concat (var_cas_TYPE_NAME)).operator_concat (GGS_string (" "))).operator_concat (var_cas_TYPE_KIND.reader_kind (inLexique COMMA_SOURCE_FILE_AT_LINE (3)))).operator_concat (GGS_string (" type")).reader_stringByLeftAndRightPadding (GGS_uint (75U), GGS_char (TO_UNICODE (' '))) ;
    result << "*\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_" ;
    result << var_cas_TYPE_IDENTIFIER ;
    result << " ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class GALGAS_" ;
    result << var_cas_TYPE_IDENTIFIER ;
    result << " : public GALGAS_" ;
    result << var_cas_SUPER_CLASS_FOR_GENERATION.reader_identifierRepresentation () ;
    result << " {\n"
      "//--------------------------------- C++ constructor\n"
      "  protected : GALGAS_" ;
    result << var_cas_TYPE_IDENTIFIER ;
    result << " (" ;
    columnMarker = result.currentColumn () ;
    GGS_nativeAttributeList::cEnumerator enumerator_823 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
    const GGS_nativeAttributeList::cElement * operand_823 = NULL ;
    while (((operand_823 = enumerator_823.nextObject ()))) {
      macroValidPointer (operand_823) ;
      result << "const " ;
      result << operand_823->mCppClassName ;
      if (operand_823->mIsPointer.boolValue ()) {
        result << " *" ;
      }else {
      }
      if (operand_823->mUseReferenceForConstructor.boolValue ()) {
        result << " &" ;
      }else {
      }
      result << " inOperand_" ;
      result << operand_823->mAttributeName ;
      if (enumerator_823.hasNextObject ()) {
        result << ",\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
      }
    }
    if ((var_cas_NATIVE_ATTRIBUTE_LIST.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
      result << "LOCATION_ARGS) ;\n"
        "\n" ;
    }else {
      result << "\n" ;
      result.appendSpacesUntilColumn (columnMarker) ;
      result << "COMMA_LOCATION_ARGS) ;\n"
        "\n" ;
    }
    if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_generateNativeNewConstructor (inLexique COMMA_SOURCE_FILE_AT_LINE (24)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
      result << "//--------------------------------- Native constructor\n"
        "  public : static GALGAS_" ;
      result << var_cas_TYPE_IDENTIFIER ;
      result << " * constructor_new (" ;
      const GGS_string var_cas_COL_01 = GGS_string::stringWithColumnCount (result) ;
      GGS_nativeAttributeList::cEnumerator enumerator_1363 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
      const GGS_nativeAttributeList::cElement * operand_1363 = NULL ;
      while (((operand_1363 = enumerator_1363.nextObject ()))) {
        macroValidPointer (operand_1363) ;
        result << "const " ;
        result << operand_1363->mCppClassName ;
        if (operand_1363->mIsPointer.boolValue ()) {
          result << " *" ;
        }else {
        }
        if (operand_1363->mUseReferenceForConstructor.boolValue ()) {
          result << " &" ;
        }else {
        }
        result << " inOperand_" ;
        result << operand_1363->mAttributeName ;
        if (enumerator_1363.hasNextObject ()) {
          result << ",\n" ;
          result << var_cas_COL_01 ;
        }
      }
      result << "\n" ;
      result << var_cas_COL_01 ;
      result << "COMMA_LOCATION_ARGS) ;\n"
        "\n" ;
    }else {
    }
    if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_generateVirtualDestructor (inLexique COMMA_SOURCE_FILE_AT_LINE (34)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
      result << "//--------------------------------- Virtual destructor\n"
        "  protected : virtual ~ GALGAS_" ;
      result << var_cas_TYPE_IDENTIFIER ;
      result << " (void) ;\n"
        "\n" ;
    }else {
    }
    if ((var_cas_CONSTRUCTOR_MAP.reader_count ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "//--------------------------------- GALGAS constructors\n" ;
      GGS_constructorMap::cEnumerator enumerator_1906 (var_cas_CONSTRUCTOR_MAP, true) ;
      const GGS_constructorMap::cElement * operand_1906 = NULL ;
      while (((operand_1906 = enumerator_1906.nextObject ()))) {
        macroValidPointer (operand_1906) ;
        result << "  public : static GALGAS_" ;
        result << operand_1906->mInfo.mReturnedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
        result << " * constructor_" ;
        result << operand_1906->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        GGS_unifiedTypeMapIndexList::cEnumerator enumerator_2072 (operand_1906->mInfo.mArgumentTypeList, true) ;
        const GGS_unifiedTypeMapIndexList::cElement * operand_2072 = NULL ;
        { GGS_uint var_cas_IDX (true, 0) ;
      while (((operand_2072 = enumerator_2072.nextObject ()))) {
        macroValidPointer (operand_2072) ;
        result << "const GALGAS_" ;
        result << operand_2072->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
        result << " * inOperand" ;
        result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
        if (enumerator_2072.hasNextObject ()) {
          result << ",\n" ;
          result.appendSpacesUntilColumn (columnMarker) ;
        }
        var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
      }
    }
    if ((operand_1906->mInfo.mHasCompilerArgument).operator_and ((operand_1906->mInfo.mArgumentTypeList.reader_length ()).operator_strictSup (GGS_uint (0U))).boolValue ()) {
      result << ",\n" ;
      result.appendSpacesUntilColumn (columnMarker) ;
      result << "C_Compiler * inCompiler\n" ;
      result.appendSpacesUntilColumn (columnMarker) ;
      result << "COMMA_LOCATION_ARGS) ;\n"
        "\n" ;
    }else if (operand_1906->mInfo.mHasCompilerArgument.boolValue ()) {
      result << "C_Compiler * inCompiler\n" ;
      result.appendSpacesUntilColumn (columnMarker) ;
      result << "COMMA_LOCATION_ARGS) ;\n"
        "\n" ;
    }else if ((operand_1906->mInfo.mArgumentTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
      result << "\n" ;
      result.appendSpacesUntilColumn (columnMarker) ;
      result << "COMMA_LOCATION_ARGS) ;\n"
        "\n" ;
    }else {
      result << "LOCATION_ARGS) ;\n"
        "\n" ;
    }
  }
}else {
}
result << "//--------------------------------- No copy\n"
  "  private : GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " &) ;\n"
  "  private : GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " & operator = (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " &) ;\n"
  "\n" ;
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (65)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
  result << "//--------------------------------- Implementation of reader 'description'\n"
    "  public : virtual void description (C_String & ioString,\n"
    "                                     const PMSInt32 inIndentation) const ;\n" ;
}else {
}
result << "\n"
  "//--------------------------------- Modifiers\n" ;
GGS_modifierMap::cEnumerator enumerator_3216 (var_cas_MODIFIER_MAP, true) ;
const GGS_modifierMap::cElement * operand_3216 = NULL ;
while (((operand_3216 = enumerator_3216.nextObject ()))) {
  macroValidPointer (operand_3216) ;
  result << "  protected : void modifier_" ;
  result << operand_3216->mKey.ggs_string ().reader_identifierRepresentation () ;
  result << " (" ;
  columnMarker = result.currentColumn () ;
  GGS_formalParameterSignature::cEnumerator enumerator_3314 (operand_3216->mInfo.mParameterList, true) ;
  const GGS_formalParameterSignature::cElement * operand_3314 = NULL ;
  { GGS_uint var_cas_IDX (true, 0) ;
while (((operand_3314 = enumerator_3314.nextObject ()))) {
  macroValidPointer (operand_3314) ;
  if ((operand_3314->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
    result << "const GALGAS_" ;
    result << operand_3314->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
    result << " * inArgument" ;
    result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
  }else if ((operand_3314->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
    result << "GALGAS_" ;
    result << operand_3314->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
    result << " * & ioArgument" ;
    result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }else if ((operand_3314->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
    result << "GALGAS_" ;
    result << operand_3314->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
    result << " * & outArgument" ;
    result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }else {
    result << "GALGAS_" ;
    result << operand_3314->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (84)) ;
    result << " * inArgument" ;
    result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  if (enumerator_3314.hasNextObject ()) {
    result << ",\n" ;
    result.appendSpacesUntilColumn (columnMarker) ;
  }
  var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_3216->mInfo.mParameterList.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
if (operand_3216->mInfo.mHasCompilerArgument.boolValue ()) {
  result << "C_Compiler * inCompiler\n" ;
  result.appendSpacesUntilColumn (columnMarker) ;
  result << "COMMA_LOCATION_ARGS" ;
}else {
  result.appendSpacesUntilColumn (columnMarker) ;
  result << "LOCATION_ARGS" ;
}
}else {
if (operand_3216->mInfo.mHasCompilerArgument.boolValue ()) {
  result << ",\n" ;
  result.appendSpacesUntilColumn (columnMarker) ;
  result << "C_Compiler * inCompiler\n" ;
  result.appendSpacesUntilColumn (columnMarker) ;
  result << "COMMA_LOCATION_ARGS" ;
}else {
  result << "\n" ;
  result.appendSpacesUntilColumn (columnMarker) ;
  result << "COMMA_LOCATION_ARGS" ;
}
}
result << ") ;\n"
  "\n" ;
}
result << "\n"
  "//--------------------------------- Instance Methods\n" ;
GGS_instanceMethodMap::cEnumerator enumerator_4502 (var_cas_INSTANCE_METHOD_MAP, true) ;
const GGS_instanceMethodMap::cElement * operand_4502 = NULL ;
while (((operand_4502 = enumerator_4502.nextObject ()))) {
macroValidPointer (operand_4502) ;
result << "  protected : void method_" ;
result << operand_4502->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
GGS_formalParameterSignature::cEnumerator enumerator_4598 (operand_4502->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_4598 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_4598 = enumerator_4598.nextObject ()))) {
macroValidPointer (operand_4598) ;
if ((operand_4598->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_4598->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
}else if ((operand_4598->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_4598->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)) ;
}else if ((operand_4598->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_4598->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
}else {
result << "GALGAS_" ;
result << operand_4598->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
}
if (enumerator_4598.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_4502->mInfo.mParameterList.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
if (operand_4502->mInfo.mHasCompilerArgument.boolValue ()) {
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result.appendSpacesUntilColumn (columnMarker) ;
result << "LOCATION_ARGS" ;
}
}else {
if (operand_4502->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
}
result << ") const ;\n"
  "\n" ;
}
result << "\n"
  "//--------------------------------- Class Methods\n" ;
GGS_classMethodMap::cEnumerator enumerator_5786 (var_cas_CLASS_METHOD_MAP, true) ;
const GGS_classMethodMap::cElement * operand_5786 = NULL ;
while (((operand_5786 = enumerator_5786.nextObject ()))) {
macroValidPointer (operand_5786) ;
result << "  public : static void class_method_" ;
result << operand_5786->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
GGS_formalParameterSignature::cEnumerator enumerator_5892 (operand_5786->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_5892 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_5892 = enumerator_5892.nextObject ()))) {
macroValidPointer (operand_5892) ;
if ((operand_5892->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_5892->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
}else if ((operand_5892->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_5892->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ;
}else if ((operand_5892->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_5892->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
}else {
result << "GALGAS_" ;
result << operand_5892->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (152)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152)) ;
}
if (enumerator_5892.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_5786->mInfo.mParameterList.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
if (operand_5786->mInfo.mHasCompilerArgument.boolValue ()) {
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result.appendSpacesUntilColumn (columnMarker) ;
result << "LOCATION_ARGS" ;
}
}else {
if (operand_5786->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
}
result << ") ;\n"
  "\n" ;
}
result << "\n"
  "//--------------------------------- Readers\n" ;
GGS_readerMap::cEnumerator enumerator_7062 (var_cas_READER_MAP, true) ;
const GGS_readerMap::cElement * operand_7062 = NULL ;
while (((operand_7062 = enumerator_7062.nextObject ()))) {
macroValidPointer (operand_7062) ;
if (((operand_7062->mInfo.mQualifier).operator_isNotEqual (GGS_readerQualifier::constructor_isInherited (inLexique COMMA_HERE))).operator_and ((operand_7062->mInfo.mImplicitConversionReader).operator_isEqual (GGS_string (""))).boolValue ()) {
result << "  protected : virtual GALGAS_" ;
result << operand_7062->mInfo.mReturnedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
result << " * reader_" ;
result << operand_7062->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_7324 (operand_7062->mInfo.mArgumentTypeList, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_7324 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_7324 = enumerator_7324.nextObject ()))) {
macroValidPointer (operand_7324) ;
result << "const GALGAS_" ;
result << operand_7324->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
if (enumerator_7324.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_7062->mInfo.mArgumentTypeList.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
if (operand_7062->mInfo.mHasLexiqueArgument.boolValue ()) {
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "LOCATION_ARGS" ;
}
}else {
if (operand_7062->mInfo.mHasLexiqueArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
}
result << ") const" ;
if ((operand_7062->mInfo.mQualifier).operator_isEqual (GGS_readerQualifier::constructor_isAbstract (inLexique COMMA_HERE)).boolValue ()) {
result << " = 0" ;
}else {
}
result << " ;\n"
  "\n" ;
}else {
}
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (204)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- & operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_and (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (211)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- | operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_or (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (218)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- ^ operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_xor (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (225)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- & operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_not (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (231)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- ~ operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_tilde (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (237)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- . (concat) operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_concat (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (244)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- + operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * add_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- - operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * substract_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (260)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- * operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * multiply_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (268)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- / operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * divide_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- mod operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * modulo_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (284)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- unary - operator\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * operator_unary_minus (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (291)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- ++, -- operators\n"
  "  public : static void increment_operation (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n"
  "  public : static void decrement_operation (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (301)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- << and >> shift operators\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * left_shift_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_uint * inShiftOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n"
  "  public : static GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * right_shift_operation (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_uint * inShiftOperand,\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (314)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- .= operator\n"
  "  friend void dotAssign_operation (GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult,\n"
  "                                   const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand\n"
  "                                   COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if ((var_cas_ADD_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- += operator\n"
  "  friend void addAssign_operation (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_13541 (var_cas_ADD_ASSIGN_ARGUMENT_LIST, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_13541 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_13541 = enumerator_13541.nextObject ()))) {
macroValidPointer (operand_13541) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << operand_13541->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n" ;
}else {
}
if ((var_cas_MINUS_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- -= operator\n"
  "  friend void minusAssign_operation (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_13914 (var_cas_MINUS_ASSIGN_ARGUMENT_LIST, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_13914 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_13914 = enumerator_13914.nextObject ()))) {
macroValidPointer (operand_13914) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << operand_13914->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (335)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n" ;
}else {
}
if ((((((var_cas_SUPPORTED_OPERATORS).operator_and ((function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (341))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (341))))).operator_isNotEqual (GGS_uint (0U))).operator_or ((var_cas_MODIFIER_MAP.reader_count ()).operator_strictSup (GGS_uint (0U)))).operator_or ((var_cas_ADD_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)))).operator_or ((var_cas_MINUS_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U))).boolValue ()) {
result << "//--------------------------------- Modifier utility method\n"
  "  protected : static void insulate (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioOperand\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) ;\n"
  "\n" ;
}else {
}
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).operator_isEqual (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- Comparison\n"
  "  public : static PMSInt32 objectCompare (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n"
  "                                          const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2) ;\n" ;
}else {
}
result << "\n"
  "//--------------------------------- Introspection\n"
  "  public : virtual const C_galgas_type_descriptor * typeDescriptor (void) const ;\n"
  "\n"
  "//--------------------------------- Private data member\n" ;
GGS_nativeAttributeList::cEnumerator enumerator_14997 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
const GGS_nativeAttributeList::cElement * operand_14997 = NULL ;
while (((operand_14997 = enumerator_14997.nextObject ()))) {
macroValidPointer (operand_14997) ;
result << "  private : " ;
if (operand_14997->mIsPointer.boolValue ()) {
result << "const " ;
}else {
}
result << operand_14997->mCppClassName ;
result << " " ;
if (operand_14997->mIsPointer.boolValue ()) {
result << "* " ;
}else {
}
result << operand_14997->mAttributeName ;
result << " ;\n" ;
if ((operand_14997->mGetterName.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
result << "  public : inline " ;
if (operand_14997->mIsPointer.boolValue ()) {
result << "const " ;
}else {
}
result << operand_14997->mCppClassName ;
result << " " ;
if (operand_14997->mIsPointer.boolValue ()) {
result << " * " ;
}else {
}
result << operand_14997->mGetterName ;
result << " (void) const { return " ;
result << operand_14997->mAttributeName ;
result << " ; }\n" ;
}else {
}
}
GGS_typedAttributeList::cEnumerator enumerator_15385 (var_cas_CURRENT_TYPE_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_15385 = NULL ;
while (((operand_15385 = enumerator_15385.nextObject ()))) {
macroValidPointer (operand_15385) ;
result << "  private : GALGAS_" ;
result << operand_15385->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (366)) ;
result << " * mAttribute_" ;
result << operand_15385->mAttributeName.ggs_string ().reader_identifierRepresentation () ;
result << " ;\n" ;
}
result << "\n"
  "//--------------------------------- Instance Method Invocation\n" ;
GGS_instanceMethodMap::cEnumerator enumerator_15632 (var_cas_INSTANCE_METHOD_MAP, true) ;
const GGS_instanceMethodMap::cElement * operand_15632 = NULL ;
while (((operand_15632 = enumerator_15632.nextObject ()))) {
macroValidPointer (operand_15632) ;
result << "  friend void instanceMethodCall_" ;
result << operand_15632->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inObject" ;
GGS_formalParameterSignature::cEnumerator enumerator_15773 (operand_15632->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_15773 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_15773 = enumerator_15773.nextObject ()))) {
macroValidPointer (operand_15773) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
if ((operand_15773->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_15773->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
}else if ((operand_15773->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_15773->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) ;
}else if ((operand_15773->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_15773->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ;
}else {
result << "GALGAS_" ;
result << operand_15773->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (381)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (381)) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_15632->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") ;\n"
  "\n" ;
}
result << "//--------------------------------- Modifier invocation\n" ;
GGS_modifierMap::cEnumerator enumerator_16741 (var_cas_MODIFIER_MAP, true) ;
const GGS_modifierMap::cElement * operand_16741 = NULL ;
while (((operand_16741 = enumerator_16741.nextObject ()))) {
macroValidPointer (operand_16741) ;
result << "  friend void modifierCall_" ;
result << operand_16741->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult" ;
GGS_formalParameterSignature::cEnumerator enumerator_16878 (operand_16741->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_16878 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_16878 = enumerator_16878.nextObject ()))) {
macroValidPointer (operand_16878) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
if ((operand_16878->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_16878->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (398)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (398)) ;
}else if ((operand_16878->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_16878->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
}else if ((operand_16878->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_16878->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
}else {
result << "GALGAS_" ;
result << operand_16878->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_16741->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") ;\n"
  "\n" ;
}
result << "//--------------------------------- Reader invocation declaration\n" ;
GGS_readerMap::cEnumerator enumerator_17854 (var_cas_READER_MAP, true) ;
const GGS_readerMap::cElement * operand_17854 = NULL ;
while (((operand_17854 = enumerator_17854.nextObject ()))) {
macroValidPointer (operand_17854) ;
if ((operand_17854->mInfo.mQualifier).operator_isEqual (GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE)).boolValue ()) {
result << "  friend GALGAS_" ;
result << operand_17854->mInfo.mReturnedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) ;
result << " * readerCall_" ;
result << operand_17854->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inObject" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_18114 (operand_17854->mInfo.mArgumentTypeList, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_18114 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_18114 = enumerator_18114.nextObject ()))) {
macroValidPointer (operand_18114) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << operand_18114->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_17854->mInfo.mHasLexiqueArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") ;\n"
  "\n" ;
}else {
}
}
if ((var_cas_ENUMERATION_DESCRIPTOR_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
result << "//--------------------------------- Enumeration handling\n"
  "  protected : virtual void populateEnumerationArray (const GALGAS_root * ioEnumerationArray [],\n"
  "                                                     const bool inAscending) const ;\n"
  "  public : virtual PMUInt32 count (void) const ;\n"
  "\n"
  "//--------------------------------- Enumerator declaration\n"
  "  public : class cEnumerator : public AC_GALGAS_Enumerator {\n"
  "    public : cEnumerator (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inEnumeratedObject,\n"
  "                          const bool inAscending) ;\n"
  "  \n"
  "  //--- Attribute access\n" ;
GGS_enumerationDescriptorList::cEnumerator enumerator_19081 (var_cas_ENUMERATION_DESCRIPTOR_LIST, true) ;
const GGS_enumerationDescriptorList::cElement * operand_19081 = NULL ;
while (((operand_19081 = enumerator_19081.nextObject ()))) {
macroValidPointer (operand_19081) ;
result << "    public : const GALGAS_" ;
result << operand_19081->mEnumeratedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (444)) ;
result << " * attribute_" ;
result << operand_19081->mEnumerationName.reader_identifierRepresentation () ;
result << " (void) const ;\n" ;
}
result << "\n"
  "  } ;\n" ;
}else {
}
result << "} ;\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'unifiedTypeImplementation' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_unifiedTypeImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_TYPE_NAME,
                                const GGS_string& var_cas_TYPE_IDENTIFIER,
                                const GGS_bool& var_cas_IS_CONCRETE,
                                const GGS_unifiedTypeMapIndex & var_cas_SUPER_TYPE_INDEX,
                                const GGS_typeKindEnum& var_cas_TYPE_KIND,
                                const GGS_typedAttributeList & var_cas_CURRENT_TYPE_ATTRIBUTE_LIST,
                                const GGS_constructorMap & var_cas_CONSTRUCTOR_MAP,
                                const GGS_readerMap & var_cas_READER_MAP,
                                const GGS_modifierMap & var_cas_MODIFIER_MAP,
                                const GGS_instanceMethodMap & var_cas_INSTANCE_METHOD_MAP,
                                const GGS_classMethodMap & var_cas_CLASS_METHOD_MAP,
                                const GGS_enumerationDescriptorList & var_cas_ENUMERATION_DESCRIPTOR_LIST,
                                const GGS_uint & var_cas_SUPPORTED_OPERATORS,
                                const GGS_unifiedTypeMapIndexList & var_cas_ADD_ASSIGN_ARGUMENT_LIST,
                                const GGS_unifiedTypeMapIndexList & var_cas_MINUS_ASSIGN_ARGUMENT_LIST,
                                const GGS_nativeAttributeList & var_cas_NATIVE_ATTRIBUTE_LIST,
                                const GGS_string& var_cas_SUPER_CLASS_FOR_GENERATION) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  const bool isBuilt = var_cas_TYPE_NAME.isBuilt ()
    && var_cas_TYPE_IDENTIFIER.isBuilt ()
    && var_cas_IS_CONCRETE.isBuilt ()
    && var_cas_SUPER_TYPE_INDEX.isBuilt ()
    && var_cas_TYPE_KIND.isBuilt ()
    && var_cas_CURRENT_TYPE_ATTRIBUTE_LIST.isBuilt ()
    && var_cas_CONSTRUCTOR_MAP.isBuilt ()
    && var_cas_READER_MAP.isBuilt ()
    && var_cas_MODIFIER_MAP.isBuilt ()
    && var_cas_INSTANCE_METHOD_MAP.isBuilt ()
    && var_cas_CLASS_METHOD_MAP.isBuilt ()
    && var_cas_ENUMERATION_DESCRIPTOR_LIST.isBuilt ()
    && var_cas_SUPPORTED_OPERATORS.isBuilt ()
    && var_cas_ADD_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_MINUS_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_NATIVE_ATTRIBUTE_LIST.isBuilt ()
    && var_cas_SUPER_CLASS_FOR_GENERATION.isBuilt () ;
  if (isBuilt) {
result << "//---------------------------------------------------------------------------*\n"
  "//                                                                           *\n"
  "//" ;
result << ((((GGS_string ("@")).operator_concat (var_cas_TYPE_NAME)).operator_concat (GGS_string (" "))).operator_concat (var_cas_TYPE_KIND.reader_kind (inLexique COMMA_SOURCE_FILE_AT_LINE (3)))).operator_concat (GGS_string (" type")).reader_stringByLeftAndRightPadding (GGS_uint (75U), GGS_char (TO_UNICODE (' '))) ;
result << "*\n"
  "//                                                                           *\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "const C_galgas_type_descriptor kTypeDescriptor_GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " (\"" ;
columnMarker = result.currentColumn () ;
result << var_cas_TYPE_NAME ;
result << "\",\n"
  "                                                 " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "NULL,\n"
  "                                                 " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "(genericObjectCompareFunctionType) GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::objectCompare) ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "const C_galgas_type_descriptor * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::typeDescriptor (void) const {\n"
  "  return & kTypeDescriptor_GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " ;\n"
  "}\n" ;
if (((var_cas_SUPPORTED_OPERATORS).operator_and (function_generateNativeNewConstructor (inLexique COMMA_SOURCE_FILE_AT_LINE (16)))).operator_isNotEqual (GGS_uint (0U)).boolValue ()) {
result << "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_new (" ;
columnMarker = result.currentColumn () ;
GGS_nativeAttributeList::cEnumerator enumerator_1188 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
const GGS_nativeAttributeList::cElement * operand_1188 = NULL ;
while (((operand_1188 = enumerator_1188.nextObject ()))) {
macroValidPointer (operand_1188) ;
result << "const " ;
result << operand_1188->mCppClassName ;
if (operand_1188->mIsPointer.boolValue ()) {
result << " *" ;
}else {
}
if (operand_1188->mUseReferenceForConstructor.boolValue ()) {
result << " &" ;
}else {
}
result << " inOperand_" ;
result << operand_1188->mAttributeName ;
if (enumerator_1188.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "\n"
  "  GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * result = NULL ;\n"
  "  macroMyNew (result, GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " (" ;
GGS_nativeAttributeList::cEnumerator enumerator_1525 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
const GGS_nativeAttributeList::cElement * operand_1525 = NULL ;
while (((operand_1525 = enumerator_1525.nextObject ()))) {
macroValidPointer (operand_1525) ;
result << "inOperand_" ;
result << operand_1525->mAttributeName ;
if (enumerator_1525.hasNextObject ()) {
result << ", " ;
}
}
if ((var_cas_NATIVE_ATTRIBUTE_LIST.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
result << "THERE" ;
}else {
result << " COMMA_THERE" ;
}
result << ")) ;\n"
  "  return result ;\n"
  "}" ;
}else {
}
GGS_modifierMap::cEnumerator enumerator_1738 (var_cas_MODIFIER_MAP, true) ;
const GGS_modifierMap::cElement * operand_1738 = NULL ;
while (((operand_1738 = enumerator_1738.nextObject ()))) {
macroValidPointer (operand_1738) ;
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "void modifierCall_" ;
result << operand_1738->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult" ;
GGS_formalParameterSignature::cEnumerator enumerator_1953 (operand_1738->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_1953 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_1953 = enumerator_1953.nextObject ()))) {
macroValidPointer (operand_1953) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
if ((operand_1953->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_1953->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
}else if ((operand_1953->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_1953->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
}else if ((operand_1953->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_1953->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
}else {
result << "GALGAS_" ;
result << operand_1953->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_1738->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") {\n"
  "\n"
  "  if (ioResult != NULL) {\n"
  "    GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::insulate (ioResult COMMA_THERE) ;\n"
  "    ioResult->modifier_" ;
result << operand_1738->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
GGS_formalParameterSignature::cEnumerator enumerator_3001 (operand_1738->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_3001 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_3001 = enumerator_3001.nextObject ()))) {
macroValidPointer (operand_3001) ;
if ((operand_3001->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
}else if ((operand_3001->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
}else if ((operand_3001->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
}else {
result << "inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
}
if (enumerator_3001.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_1738->mInfo.mParameterList.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
if (operand_1738->mInfo.mHasCompilerArgument.boolValue ()) {
result << ", inCompiler COMMA_THERE" ;
}else {
result << " COMMA_THERE" ;
}
}else {
if (operand_1738->mInfo.mHasCompilerArgument.boolValue ()) {
result << "inCompiler COMMA_THERE" ;
}else {
result << "THERE" ;
}
}
result << ") ;  \n"
  "  }\n"
  "}\n"
  "\n" ;
}
GGS_instanceMethodMap::cEnumerator enumerator_3807 (var_cas_INSTANCE_METHOD_MAP, true) ;
const GGS_instanceMethodMap::cElement * operand_3807 = NULL ;
while (((operand_3807 = enumerator_3807.nextObject ()))) {
macroValidPointer (operand_3807) ;
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "void instanceMethodCall_" ;
result << operand_3807->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inObject" ;
GGS_formalParameterSignature::cEnumerator enumerator_4026 (operand_3807->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_4026 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_4026 = enumerator_4026.nextObject ()))) {
macroValidPointer (operand_4026) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
if ((operand_4026->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "const GALGAS_" ;
result << operand_4026->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
}else if ((operand_4026->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_4026->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
result << " * & ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
}else if ((operand_4026->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "GALGAS_" ;
result << operand_4026->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (106)) ;
result << " * & outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106)) ;
}else {
result << "GALGAS_" ;
result << operand_4026->mParameterType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
result << " * inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_3807->mInfo.mHasCompilerArgument.boolValue ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") {\n"
  "  if (inObject != NULL) {\n"
  "    macroRetainObjectThere (inObject) ;\n"
  "    inObject->method_" ;
result << operand_3807->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
GGS_formalParameterSignature::cEnumerator enumerator_5045 (operand_3807->mInfo.mParameterList, true) ;
const GGS_formalParameterSignature::cElement * operand_5045 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_5045 = enumerator_5045.nextObject ()))) {
macroValidPointer (operand_5045) ;
if ((operand_5045->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_HERE)).boolValue ()) {
result << "inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
}else if ((operand_5045->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_HERE)).boolValue ()) {
result << "ioArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
}else if ((operand_5045->mFormalParameterPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_HERE)).boolValue ()) {
result << "outArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
}else {
result << "inArgument" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
}
if (enumerator_5045.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_3807->mInfo.mParameterList.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
if (operand_3807->mInfo.mHasCompilerArgument.boolValue ()) {
result << ", inCompiler COMMA_THERE" ;
}else {
result << " COMMA_THERE" ;
}
}else {
if (operand_3807->mInfo.mHasCompilerArgument.boolValue ()) {
result << "inCompiler COMMA_THERE" ;
}else {
result << "THERE" ;
}
}
result << ") ;  \n"
  "    macroReleaseObjectThere (inObject) ;\n"
  "  }\n"
  "}\n"
  "\n" ;
}
GGS_readerMap::cEnumerator enumerator_5883 (var_cas_READER_MAP, true) ;
const GGS_readerMap::cElement * operand_5883 = NULL ;
while (((operand_5883 = enumerator_5883.nextObject ()))) {
macroValidPointer (operand_5883) ;
if ((operand_5883->mInfo.mQualifier).operator_isEqual (GGS_readerQualifier::constructor_isBasic (inLexique COMMA_HERE)).boolValue ()) {
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << operand_5883->mInfo.mReturnedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
result << " * readerCall_" ;
result << operand_5883->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
const GGS_string var_cas_COL = GGS_string::stringWithColumnCount (result) ;
result << "const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inObject" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_6225 (operand_5883->mInfo.mArgumentTypeList, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_6225 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_6225 = enumerator_6225.nextObject ()))) {
macroValidPointer (operand_6225) ;
result << ",\n" ;
result << var_cas_COL ;
result << "const GALGAS_" ;
result << operand_6225->mType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
result << " * inOperand_" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_5883->mInfo.mHasLexiqueArgument.boolValue ()) {
result << ",\n" ;
result << var_cas_COL ;
result << "C_Compiler * inCompiler\n" ;
result << var_cas_COL ;
result << "COMMA_LOCATION_ARGS" ;
}else {
result << "\n" ;
result << var_cas_COL ;
result << "COMMA_LOCATION_ARGS" ;
}
result << ") {\n"
  "  GALGAS_" ;
result << operand_5883->mInfo.mReturnedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (166)) ;
result << " * result = NULL ;\n"
  "  if (inObject != NULL) {\n" ;
if ((operand_5883->mInfo.mImplicitConversionReader).operator_isEqual (GGS_string ("")).boolValue ()) {
result << "    result = inObject->reader_" ;
result << operand_5883->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_6788 (operand_5883->mInfo.mArgumentTypeList, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_6788 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_6788 = enumerator_6788.nextObject ()))) {
macroValidPointer (operand_6788) ;
result << "inOperand_" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
if (enumerator_6788.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if ((operand_5883->mInfo.mArgumentTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
if (operand_5883->mInfo.mHasLexiqueArgument.boolValue ()) {
result << ", inCompiler COMMA_THERE" ;
}else {
result << " COMMA_THERE" ;
}
}else {
if (operand_5883->mInfo.mHasLexiqueArgument.boolValue ()) {
result << "inCompiler COMMA_THERE" ;
}else {
result << "THERE" ;
}
}
}else {
result << "    result = readerCall_" ;
result << operand_5883->mKey.ggs_string ().reader_identifierRepresentation () ;
result << " (inObject->reader_" ;
result << operand_5883->mInfo.mImplicitConversionReader.reader_identifierRepresentation () ;
result << " (THERE)" ;
GGS_unifiedTypeMapIndexList::cEnumerator enumerator_7376 (operand_5883->mInfo.mArgumentTypeList, true) ;
const GGS_unifiedTypeMapIndexList::cElement * operand_7376 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_7376 = enumerator_7376.nextObject ()))) {
macroValidPointer (operand_7376) ;
result << ", inOperand_" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
if (operand_5883->mInfo.mHasLexiqueArgument.boolValue ()) {
result << ", inCompiler COMMA_THERE" ;
}else {
result << " COMMA_THERE" ;
}
}
result << ") ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n" ;
}else {
}
}
if ((var_cas_ENUMERATION_DESCRIPTOR_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)).boolValue ()) {
result << "//---------------------------------------------------------------------------*\n"
  "//" ;
result << ((((GGS_string ("@")).operator_concat (var_cas_TYPE_NAME)).operator_concat (GGS_string (" "))).operator_concat (var_cas_TYPE_KIND.reader_kind (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" enumeration")).reader_stringByLeftAndRightPadding (GGS_uint (75U), GGS_char (TO_UNICODE (' '))) ;
result << "*\n" ;
GGS_enumerationDescriptorList::cEnumerator enumerator_7932 (var_cas_ENUMERATION_DESCRIPTOR_LIST, true) ;
const GGS_enumerationDescriptorList::cElement * operand_7932 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_7932 = enumerator_7932.nextObject ()))) {
macroValidPointer (operand_7932) ;
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "const GALGAS_" ;
result << operand_7932->mEnumeratedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
result << " * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::cEnumerator::attribute_" ;
result << operand_7932->mEnumerationName.reader_identifierRepresentation () ;
result << " (void) const {\n"
  "  const GALGAS_" ;
result << operand_7932->mEnumeratedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
result << " * result = (const GALGAS_" ;
result << operand_7932->mEnumeratedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
result << " *) directAccess (" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
result << " COMMA_HERE) ;\n"
  "  macroValidObject (result, const GALGAS_" ;
result << operand_7932->mEnumeratedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
result << ") ;\n"
  "  return result ;\n"
  "}\n"
  "\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
}else {
}
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesHeader' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_predefinedTypesHeader (C_Compiler & /* inLexique */,
                                const GGS_stringset & var_cas_TYPE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_TYPE_LIST.isBuilt () ;
  if (isBuilt) {
result << "\n"
  "#ifndef GALGAS2_PREDEFINED_TYPES\n"
  "#define GALGAS2_PREDEFINED_TYPES\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include \"galgas2/GALGAS_list.h\"\n"
  "#include \"galgas2/GALGAS_sortedlist.h\"\n"
  "#include \"strings/C_String.h\"\n"
  "#include \"collections/TC_Array.h\"\n"
  "#include \"galgas-utilities/C_LocationInSource.h\"\n"
  "#include \"bdd/C_BDD.h\"\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "class C_galgas_function_descriptor ;\n"
  "class C_galgas_type_descriptor ;\n"
  "class C_SourceTextInString ;\n"
  "class cStringsetNode ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "typedef TC_Array <PMUInt8> uint8Array ;\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n" ;
GGS_stringset::cEnumerator enumerator_782 (var_cas_TYPE_LIST, true) ;
while (enumerator_782.hasCurrentObject ()) {
result << "class GALGAS_" ;
result << enumerator_782._key (HERE).reader_identifierRepresentation () ;
result << " ;\n" ;
enumerator_782.next () ;
}
result << "class C_Compiler ;\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypeSpecificImplementation' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_predefinedTypeSpecificImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_TYPE_IDENTIFIER,
                                const GGS_modifierMap & var_cas_MODIFIER_MAP,
                                const GGS_uint & var_cas_SUPPORTED_OPERATORS,
                                const GGS_unifiedTypeMapIndexList & var_cas_ADD_ASSIGN_ARGUMENT_LIST,
                                const GGS_unifiedTypeMapIndexList & var_cas_MINUS_ASSIGN_ARGUMENT_LIST,
                                const GGS_nativeAttributeList & var_cas_NATIVE_ATTRIBUTE_LIST) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  const bool isBuilt = var_cas_TYPE_IDENTIFIER.isBuilt ()
    && var_cas_MODIFIER_MAP.isBuilt ()
    && var_cas_SUPPORTED_OPERATORS.isBuilt ()
    && var_cas_ADD_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_MINUS_ASSIGN_ARGUMENT_LIST.isBuilt ()
    && var_cas_NATIVE_ATTRIBUTE_LIST.isBuilt () ;
  if (isBuilt) {
if ((((((var_cas_SUPPORTED_OPERATORS).operator_and ((function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1))))).operator_isNotEqual (GGS_uint (0U))).operator_or ((var_cas_MODIFIER_MAP.reader_count ()).operator_strictSup (GGS_uint (0U)))).operator_or ((var_cas_ADD_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U)))).operator_or ((var_cas_MINUS_ASSIGN_ARGUMENT_LIST.reader_length ()).operator_strictSup (GGS_uint (0U))).boolValue ()) {
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::insulate (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioOperand\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  if (ioOperand->retainCount () > 1) {\n"
  "    GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * p = GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_new(" ;
GGS_nativeAttributeList::cEnumerator enumerator_591 (var_cas_NATIVE_ATTRIBUTE_LIST, true) ;
const GGS_nativeAttributeList::cElement * operand_591 = NULL ;
while (((operand_591 = enumerator_591.nextObject ()))) {
macroValidPointer (operand_591) ;
result << "ioOperand->" ;
result << operand_591->mAttributeName ;
if (enumerator_591.hasNextObject ()) {
result << ", " ;
}
}
if ((var_cas_NATIVE_ATTRIBUTE_LIST.reader_length ()).operator_isEqual (GGS_uint (0U)).boolValue ()) {
result << "THERE" ;
}else {
result << " COMMA_THERE" ;
}
result << ") ;\n"
  "    macroReleaseObject (ioOperand) ;\n"
  "    macroRetainObject (p) ;\n"
  "    ioOperand = p ;\n"
  "  }\n"
  "}\n" ;
}else {
}
result << "\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesImplementation' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_predefinedTypesImplementation (C_Compiler & /* inLexique */) {
  C_String result ;
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "#include \"galgas2/predefined-types.h\"\n"
  "#include \"galgas-utilities/C_Compiler.h\"\n"
  "\n" ;
  return GGS_string (true, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'listTypeSpecificImplementation' template of 'builtinTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_listTypeSpecificImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_TYPE_IDENTIFIER,
                                const GGS_typedAttributeList & var_cas_ATTRIBUTE_LIST) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  const bool isBuilt = var_cas_TYPE_IDENTIFIER.isBuilt ()
    && var_cas_ATTRIBUTE_LIST.isBuilt () ;
  if (isBuilt) {
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " (LOCATION_ARGS) :\n"
  "GALGAS_list (" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4)) ;
result << " COMMA_THERE) {\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_emptyList (LOCATION_ARGS) {\n"
  "  GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * result = NULL ;\n"
  "  macroMyNew (result, GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " (THERE)) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_listWithValue (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_713 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_713 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_713 = enumerator_713.nextObject ()))) {
macroValidPointer (operand_713) ;
result << "const GALGAS_" ;
result << operand_713->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
if (enumerator_713.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * result = GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_emptyList (THERE) ;\n"
  "  const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (24)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_1085 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_1085 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_1085 = enumerator_1085.nextObject ()))) {
macroValidPointer (operand_1085) ;
result << "inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (26)) ;
if (enumerator_1085.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "} ;\n"
  "  result->addObject (attributeArray) ;\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::insulate (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioObject\n"
  "                " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  if (ioObject->retainCount () > 1) {\n"
  "    GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * source = ioObject ;\n"
  "    release (ioObject COMMA_THERE) ;\n"
  "    ioObject = constructor_emptyList (THERE) ;\n"
  "    retain (ioObject COMMA_THERE) ;\n"
  "    ioObject->copyFrom (source) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void addAssign_operation (" ;
columnMarker = result.currentColumn () ;
result << "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult" ;
GGS_typedAttributeList::cEnumerator enumerator_1853 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_1853 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_1853 = enumerator_1853.nextObject ()))) {
macroValidPointer (operand_1853) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_" ;
result << operand_1853->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  if (ioResult != NULL) {\n"
  "    GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::insulate (ioResult COMMA_THERE) ;\n"
  "    const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_2213 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_2213 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_2213 = enumerator_2213.nextObject ()))) {
macroValidPointer (operand_2213) ;
result << "inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (58)) ;
if (enumerator_2213.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "} ;\n"
  "    ioResult->addObject (attributeArray) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::modifier_prependValue (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_2509 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_2509 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_2509 = enumerator_2509.nextObject ()))) {
macroValidPointer (operand_2509) ;
result << "const GALGAS_" ;
result << operand_2509->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
result << " * inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
if (enumerator_2509.hasNextObject ()) {
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_UNUSED_LOCATION_ARGS) {\n"
  "  if (inOperand0 != NULL) {\n"
  "    const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_2824 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_2824 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_2824 = enumerator_2824.nextObject ()))) {
macroValidPointer (operand_2824) ;
result << "inOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ;
if (enumerator_2824.hasNextObject ()) {
result << ", " ;
}
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "} ;\n"
  "    prependAttributeArray (attributeArray) ;\n"
  "  }\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::modifier_popFirst (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_3118 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_3118 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_3118 = enumerator_3118.nextObject ()))) {
macroValidPointer (operand_3118) ;
result << "GALGAS_" ;
result << operand_3118->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
result << " * & outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "C_Compiler * inCompiler\n"
  "  " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_3409 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_3409 = NULL ;
while (((operand_3409 = enumerator_3409.nextObject ()))) {
macroValidPointer (operand_3409) ;
result << "NULL" ;
if (enumerator_3409.hasNextObject ()) {
result << ", " ;
}
}
result << "} ;\n"
  "  removeFirstObject (attributeArray, inCompiler COMMA_THERE) ;\n" ;
GGS_typedAttributeList::cEnumerator enumerator_3547 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_3547 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_3547 = enumerator_3547.nextObject ()))) {
macroValidPointer (operand_3547) ;
result << "  outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
result << " = (GALGAS_" ;
result << operand_3547->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
result << " *) attributeArray [" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
result << "] ;\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::modifier_popLast (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_3874 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_3874 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_3874 = enumerator_3874.nextObject ()))) {
macroValidPointer (operand_3874) ;
result << "GALGAS_" ;
result << operand_3874->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
result << " * & outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "C_Compiler * inCompiler\n"
  "  " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_4165 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_4165 = NULL ;
while (((operand_4165 = enumerator_4165.nextObject ()))) {
macroValidPointer (operand_4165) ;
result << "NULL" ;
if (enumerator_4165.hasNextObject ()) {
result << ", " ;
}
}
result << "} ;\n"
  "  removeLastObject (attributeArray, inCompiler COMMA_THERE) ;\n" ;
GGS_typedAttributeList::cEnumerator enumerator_4302 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_4302 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_4302 = enumerator_4302.nextObject ()))) {
macroValidPointer (operand_4302) ;
result << "  outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
result << " = (GALGAS_" ;
result << operand_4302->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
result << " *) attributeArray [" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
result << "] ;\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::method_first (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_4625 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_4625 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_4625 = enumerator_4625.nextObject ()))) {
macroValidPointer (operand_4625) ;
result << "GALGAS_" ;
result << operand_4625->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
result << " * & outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "C_Compiler * inCompiler\n"
  "  " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) const {\n"
  "  const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_4922 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_4922 = NULL ;
while (((operand_4922 = enumerator_4922.nextObject ()))) {
macroValidPointer (operand_4922) ;
result << "NULL" ;
if (enumerator_4922.hasNextObject ()) {
result << ", " ;
}
}
result << "} ;\n"
  "  readFirst (attributeArray, inCompiler COMMA_THERE) ;\n" ;
GGS_typedAttributeList::cEnumerator enumerator_5052 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_5052 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_5052 = enumerator_5052.nextObject ()))) {
macroValidPointer (operand_5052) ;
result << "  outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
result << " = (GALGAS_" ;
result << operand_5052->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
result << " *) attributeArray [" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138)) ;
result << "] ;\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::method_last (" ;
columnMarker = result.currentColumn () ;
GGS_typedAttributeList::cEnumerator enumerator_5374 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_5374 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_5374 = enumerator_5374.nextObject ()))) {
macroValidPointer (operand_5374) ;
result << "GALGAS_" ;
result << operand_5374->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
result << " * & outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
result << ",\n" ;
result.appendSpacesUntilColumn (columnMarker) ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "C_Compiler * inCompiler\n"
  "  " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) const {\n"
  "  const GALGAS_root * attributeArray [" ;
result << var_cas_ATTRIBUTE_LIST.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
result << "] = {" ;
GGS_typedAttributeList::cEnumerator enumerator_5671 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_5671 = NULL ;
while (((operand_5671 = enumerator_5671.nextObject ()))) {
macroValidPointer (operand_5671) ;
result << "NULL" ;
if (enumerator_5671.hasNextObject ()) {
result << ", " ;
}
}
result << "} ;\n"
  "  readLast (attributeArray, inCompiler COMMA_THERE) ;\n" ;
GGS_typedAttributeList::cEnumerator enumerator_5800 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_5800 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_5800 = enumerator_5800.nextObject ()))) {
macroValidPointer (operand_5800) ;
result << "  outOperand" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
result << " = (GALGAS_" ;
result << operand_5800->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
result << " *) attributeArray [" ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
result << "] ;\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::operator_concat (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand1,\n"
  "                                                        const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand2\n"
  "                                                        COMMA_LOCATION_ARGS) {\n"
  "  GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * result = NULL ;\n"
  "  if ((inOperand1 != NULL) && (inOperand2 != NULL)) {\n"
  "    result = GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::constructor_emptyList (THERE) ;\n"
  "    result->appendList (inOperand1) ;\n"
  "    result->appendList (inOperand2) ;\n"
  "  }\n"
  "  return result ;\n"
  "}\n"
  "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "void dotAssign_operation (GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * & ioResult,\n"
  "                          const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inOperand\n"
  "                          COMMA_LOCATION_ARGS) {\n"
  "  if ((ioResult != NULL) && (inOperand != NULL)) {\n"
  "    GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::insulate (ioResult COMMA_THERE) ;\n"
  "    ioResult->appendList (inOperand) ;\n"
  "  }\n"
  "}\n" ;
GGS_typedAttributeList::cEnumerator enumerator_7068 (var_cas_ATTRIBUTE_LIST, true) ;
const GGS_typedAttributeList::cElement * operand_7068 = NULL ;
{ GGS_uint var_cas_IDX (true, 0) ;
while (((operand_7068 = enumerator_7068.nextObject ()))) {
macroValidPointer (operand_7068) ;
result << "//---------------------------------------------------------------------------*\n"
  "\n"
  "void GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::modifier_set" ;
result << operand_7068->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ().reader_identifierRepresentation () ;
result << "AtIndex (" ;
columnMarker = result.currentColumn () ;
result << "const GALGAS_" ;
result << operand_7068->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (188)) ;
result << " * inOperand,\n"
  "                                              " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "const GALGAS_uint * inIndex,\n"
  "                                              " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "C_Compiler * inCompiler\n"
  "                                              " ;
result.appendSpacesUntilColumn (columnMarker) ;
result << "COMMA_LOCATION_ARGS) {\n"
  "  attributeDirectWrite (inOperand, inIndex, " ;
result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
result << ", inCompiler COMMA_THERE) ;\n"
  "}\n"
  "\n" ;
var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
}
}
result << "\n"
  "//---------------------------------------------------------------------------*\n"
  "\n"
  "GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << "::cEnumerator::cEnumerator (const GALGAS_" ;
result << var_cas_TYPE_IDENTIFIER ;
result << " * inEnumeratedObject,\n"
  "                                             const bool inAscending) :\n"
  "AC_GALGAS_Enumerator (inEnumeratedObject, inAscending) {\n"
  "}\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category reader '@semanticDeclarationForGeneration.appendDeclaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration__appendDeclaration (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration * operand_5350
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outHeader ;
  if (operand_5350 != NULL) {
var_cas_outHeader = GGS_string ("") ;
  }
  return var_cas_outHeader ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@semanticDeclarationForGeneration.appendDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration> gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__semanticDeclarationForGeneration__appendDeclaration (typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration_defaultReader_appendDeclaration (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration
findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration.count ()) {
    result = gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (superClassPtr) ;
      gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  if (NULL == result) {
    result = category_reader__semanticDeclarationForGeneration_defaultReader_appendDeclaration ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category reader '@semanticTypeForGeneration.appendDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticTypeForGeneration__appendDeclaration (C_Compiler & inLexique,
                                const cPtr_semanticTypeForGeneration * operand_5547
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outHeader ;
  if (operand_5547 != NULL) {
var_cas_outHeader = template_filewrapper_builtinTypeGenerationTemplate_unifiedTypeHeader (inLexique, operand_5547->mTypeIndex.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (123)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), operand_5547->mTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (124)), operand_5547->mTypeIndex.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (125)), operand_5547->mTypeIndex.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (126)), operand_5547->mTypeIndex.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (127)), operand_5547->mTypeIndex.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (128)), operand_5547->mTypeIndex.reader_mConstructorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (129)), operand_5547->mTypeIndex.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (130)), operand_5547->mTypeIndex.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (131)), operand_5547->mTypeIndex.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (132)), operand_5547->mTypeIndex.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (133)), operand_5547->mTypeIndex.reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (134)), operand_5547->mTypeIndex.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (135)), operand_5547->mTypeIndex.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (136)), operand_5547->mTypeIndex.reader_mMinusAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (137)), operand_5547->mTypeIndex.reader_mNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (138)), operand_5547->mTypeIndex.reader_mSuperClassForCodeGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (139))) ;
  }
  return var_cas_outHeader ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@semanticDeclarationForGeneration.appendTypeGenericImplementation'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration__appendTypeGenericImplementation (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration * operand_6844
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outImplementation ;
  if (operand_6844 != NULL) {
var_cas_outImplementation = GGS_string ("") ;
  }
  return var_cas_outImplementation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@semanticDeclarationForGeneration.appendTypeGenericImplementation'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation> gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (typeCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration_defaultReader_appendTypeGenericImplementation (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation
findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation.count ()) {
    result = gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (superClassPtr) ;
      gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  if (NULL == result) {
    result = category_reader__semanticDeclarationForGeneration_defaultReader_appendTypeGenericImplementation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@semanticTypeForGeneration.appendTypeGenericImplementation'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticTypeForGeneration__appendTypeGenericImplementation (C_Compiler & inLexique,
                                const cPtr_semanticTypeForGeneration * operand_7070
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outImplementation ;
  if (operand_7070 != NULL) {
var_cas_outImplementation = template_filewrapper_builtinTypeGenerationTemplate_unifiedTypeImplementation (inLexique, operand_7070->mTypeIndex.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (158)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (158)), operand_7070->mTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (159)), operand_7070->mTypeIndex.reader_mIsConcrete (inLexique COMMA_SOURCE_FILE_AT_LINE (160)), operand_7070->mTypeIndex.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (161)), operand_7070->mTypeIndex.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (162)), operand_7070->mTypeIndex.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)), operand_7070->mTypeIndex.reader_mConstructorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), operand_7070->mTypeIndex.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (165)), operand_7070->mTypeIndex.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (166)), operand_7070->mTypeIndex.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (167)), operand_7070->mTypeIndex.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (168)), operand_7070->mTypeIndex.reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (169)), operand_7070->mTypeIndex.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (170)), operand_7070->mTypeIndex.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (171)), operand_7070->mTypeIndex.reader_mMinusAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (172)), operand_7070->mTypeIndex.reader_mNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (173)), operand_7070->mTypeIndex.reader_mSuperClassForCodeGeneration (inLexique COMMA_SOURCE_FILE_AT_LINE (174))) ;
  }
  return var_cas_outImplementation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@semanticDeclarationForGeneration.appendSpecificImplementation'*
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration__appendSpecificImplementation (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration * operand_8309
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outImplementation ;
  if (operand_8309 != NULL) {
var_cas_outImplementation = GGS_string ("") ;
  }
  return var_cas_outImplementation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category reader '@semanticDeclarationForGeneration.appendSpecificImplementation'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation> gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation ;

//---------------------------------------------------------------------------*

void
enterCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

static GGS_string
category_reader__semanticDeclarationForGeneration_defaultReader_appendSpecificImplementation (C_Compiler &,
                                const cPtr_semanticDeclarationForGeneration *
                                COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_string () ;
}

//---------------------------------------------------------------------------*

typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation
findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation.count ()) {
    result = gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (superClassPtr) ;
      gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  if (NULL == result) {
    result = category_reader__semanticDeclarationForGeneration_defaultReader_appendSpecificImplementation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category reader '@primitiveTypeForGeneration.appendSpecificImplementation' *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__primitiveTypeForGeneration__appendSpecificImplementation (C_Compiler & inLexique,
                                const cPtr_primitiveTypeForGeneration * operand_8533
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outImplementation ;
  if (operand_8533 != NULL) {
var_cas_outImplementation = template_filewrapper_builtinTypeGenerationTemplate_predefinedTypeSpecificImplementation (inLexique, operand_8533->mTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (192)), operand_8533->mTypeIndex.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (193)), operand_8533->mTypeIndex.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (194)), operand_8533->mTypeIndex.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (195)), operand_8533->mTypeIndex.reader_mMinusAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (196)), operand_8533->mTypeIndex.reader_mNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (197))) ;
  }
  return var_cas_outImplementation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category reader '@listTypeForGeneration.appendSpecificImplementation'    *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__listTypeForGeneration__appendSpecificImplementation (C_Compiler & inLexique,
                                const cPtr_listTypeForGeneration * operand_9081
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outImplementation ;
  if (operand_9081 != NULL) {
var_cas_outImplementation = template_filewrapper_builtinTypeGenerationTemplate_listTypeSpecificImplementation (inLexique, operand_9081->mTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), operand_9081->mTypedAttributeList) ;
  }
  return var_cas_outImplementation ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "generateHeadersOfBuiltinTypes"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateHeadersOfBuiltinTypes (C_Compiler & inLexique,
                                const GGS_string  var_cas_inDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateHeadersOfBuiltinTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
const GGS_bool cond_12077 = (var_cas_inDirectory).operator_isNotEqual (GGS_string ("")) ;
if (cond_12077.isBuiltAndTrue ()) {
const GGS_bool cond_10425 = (var_cas_inDirectory.reader_directoryExists ()).operator_not () ;
if (cond_10425.isBuiltAndTrue ()) {
GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_inDirectory)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (233)) ;
}else if (cond_10425.isBuiltAndFalse ()) {
GGS_semanticDeclarationListAST  var_cas_predefinedTypeASTlist = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
::routine_appendPredefinedTypesASTs (inLexique,  var_cas_predefinedTypeASTlist COMMA_SOURCE_FILE_AT_LINE (236)) ;
GGS_semanticContext var_cas_semanticContext ;
::routine_buildSemanticContext (inLexique,  var_cas_predefinedTypeASTlist,  GGS_location (inLexique),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (239)) ;
GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
::routine_performSemanticAnalysis (inLexique,  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (245)) ;
GGS_string var_cas_generatedCode = template_filewrapper_builtinTypeGenerationTemplate_predefinedTypesHeader (inLexique, var_cas_semanticContext.reader_mTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (250)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (250))) ;
{
GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_11190 (var_cas_decoratedDeclarationListForGeneration, true) ;
const GGS_semanticDeclarationListForGeneration::cElement * operand_11190 = NULL ;
while (((operand_11190 = enumerator_11190.nextObject ()))) {
  macroValidPointer (operand_11190) ;
var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_11190->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11190->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (253)))) ;
}
}
GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.h"), GGS_string ("//"), GGS_string ("\n"
  "\n"), var_cas_generatedCode, GGS_string ("\n"
  "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (255)) ;
var_cas_generatedCode = template_filewrapper_builtinTypeGenerationTemplate_predefinedTypesImplementation (inLexique) ;
{
GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_11678 (var_cas_decoratedDeclarationListForGeneration, true) ;
const GGS_semanticDeclarationListForGeneration::cElement * operand_11678 = NULL ;
while (((operand_11678 = enumerator_11678.nextObject ()))) {
  macroValidPointer (operand_11678) ;
var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_11678->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11678->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (267)))) ;
var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_11678->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11678->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (268)))) ;
}
}
GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.cpp"), GGS_string ("//"), GGS_string ("\n"
  "\n"), var_cas_generatedCode, GGS_string ("\n"
  "\n"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (270)) ;
}
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateHeadersOfBuiltinTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticGeneration (void) {
  enterCategoryReader__semanticDeclarationForGeneration__appendDeclaration (category_reader__semanticDeclarationForGeneration__appendDeclaration, gClassInfoFor__semanticDeclarationForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendDeclaration ((typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration) category_reader__semanticTypeForGeneration__appendDeclaration, gClassInfoFor__semanticTypeForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (category_reader__semanticDeclarationForGeneration__appendTypeGenericImplementation, gClassInfoFor__semanticDeclarationForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation ((typeCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation) category_reader__semanticTypeForGeneration__appendTypeGenericImplementation, gClassInfoFor__semanticTypeForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (category_reader__semanticDeclarationForGeneration__appendSpecificImplementation, gClassInfoFor__semanticDeclarationForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation ((typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation) category_reader__primitiveTypeForGeneration__appendSpecificImplementation, gClassInfoFor__primitiveTypeForGeneration.slotID ()) ;
  enterCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation ((typeCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation) category_reader__listTypeForGeneration__appendSpecificImplementation, gClassInfoFor__listTypeForGeneration.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticGeneration (void) {
  gDispatchTableForReader__semanticDeclarationForGeneration__appendDeclaration.free () ;
  gDispatchTableForReader__semanticDeclarationForGeneration__appendTypeGenericImplementation.free () ;
  gDispatchTableForReader__semanticDeclarationForGeneration__appendSpecificImplementation.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticGeneration (prologueRoutineFor_semanticGeneration, epilogueRoutineFor_semanticGeneration) ;

//---------------------------------------------------------------------------*

