//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'treewalking_parser.cpp'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 1st, 2007, at 20h25'13"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "treewalking_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "treewalking_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, true)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  nt_parse_treewalking_document_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_112_6_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  nt_parse_treewalking_document_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_treewalking_document'       *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_parse_treewalking_document_treewalking_parser_170_6_ (galgas_scanner & _inLexique,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                const GGS_bool &var_cas_inGenerateTreewalkingCode) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  GGS_lstring  var_cas_treewalkingName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_treewalkingName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_stringset  var_cas_filesToImportInHeaderSet ;
  var_cas_filesToImportInHeaderSet = GGS_stringset::constructor_setWithString (_inLexique, var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_HERE) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentMap ;
  var_cas_semanticsComponentMap = GGS_M_semanticsComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_metamodelsComponents  var_cas_metamodelComponentMap ;
  var_cas_metamodelComponentMap = GGS_M_metamodelsComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_treewalkingComponents  var_cas_treewalkingComponentMap ;
  var_cas_treewalkingComponentMap = GGS_M_treewalkingComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  GGS_lstring  var_cas_fileName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  nt_parse_semantics_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_semanticsComponentMap, var_cas_metamodelComponentMap, var_cas_treewalkingComponentMap) ;
  GGS_lstring  var_cas_metamodelRootEntity ;
  GGS_entityToImplementMap  var_cas_metamodelEntityMap ;
  GGS_stringset  var_cas_importedMetamodels ;
  if ((var_cas_metamodelComponentMap.reader_hasKey (_inLexique, var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) COMMA_SOURCE_FILE_AT_LINE (203))).isBuiltAndTrue ()) {
    if (var_cas_metamodelComponentMap._isBuilt ()) {
      var_cas_metamodelComponentMap (HERE)->method_searchKey (_inLexique, var_cas_metamodelName, var_cas_metamodelRootEntity, var_cas_metamodelEntityMap, var_cas_importedMetamodels COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
    GGS_stringset  var_cas_superMetamodels ;
    var_cas_superMetamodels = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
    GGS_stringset::element_type * operand_7893 = var_cas_importedMetamodels.firstObject () ;
    while ((operand_7893 != NULL)) {
      macroValidPointer (operand_7893) ;
      ::routine_performMetamodelInclusion (_inLexique,  var_cas_metamodelComponentMap,  GGS_lstring::constructor_new (_inLexique, operand_7893->mKey, GGS_location (_inLexique) COMMA_HERE),  var_cas_superMetamodels,  var_cas_metamodelEntityMap COMMA_SOURCE_FILE_AT_LINE (212)) ;
      operand_7893 = operand_7893->nextObject () ;
    }
  }else{
    var_cas_fileName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "this file does not define the '"))._operator_concat (var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))))._operator_concat (GGS_string (true, "' metamodel")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
    var_cas_metamodelRootEntity._drop_operation () ;
    var_cas_metamodelEntityMap._drop_operation () ;
    var_cas_importedMetamodels._drop_operation () ;
  }
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse ;
  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_semanticsEntitiesMap ;
  ::routine_enterBuiltinTypes (_inLexique,  var_cas_semanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (226)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_treewalking_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
          GGS_lstring  var_cas_semanticsComponentName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_semanticsComponentName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_filesToImportInHeaderSet._addAssign_operation (var_cas_semanticsComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          GGS_lstring  var_cas_fileName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          nt_parse_semantics_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_semanticsComponentMap, var_cas_metamodelComponentMap, var_cas_treewalkingComponentMap) ;
          GGS_M_semanticsEntitiesForUse  var_cas_importedSemanticsEntitiesMap ;
          GGS_ModelMap  automatic_var_0 ;
          GGS_ActionMap  automatic_var_1 ;
          GGS_stringset  automatic_var_2 ;
          GGS_stringset  automatic_var_3 ;
          GGS_stringset  automatic_var_4 ;
          GGS_M_optionComponents  automatic_var_5 ;
          if (var_cas_semanticsComponentMap._isBuilt ()) {
            var_cas_semanticsComponentMap (HERE)->method_searchKey (_inLexique, var_cas_semanticsComponentName, automatic_var_0, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_importedSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (245)) ;
          }
          GGS_M_semanticsEntitiesForUse::element_type * operand_9141 = var_cas_importedSemanticsEntitiesMap.firstObject () ;
          while ((operand_9141 != NULL)) {
            macroValidPointer (operand_9141) ;
            if (((var_cas_semanticsEntitiesMap.reader_hasKey (_inLexique, operand_9141->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (247)) COMMA_SOURCE_FILE_AT_LINE (247)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_semanticsEntitiesMap.modifier_insertKey (_inLexique, operand_9141->mKey, operand_9141->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (248)) ;
            }
            operand_9141 = operand_9141->nextObject () ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_treewalkingRoutineToGenerateList  var_cas_treewalkingRoutineToGenerateList ;
  var_cas_treewalkingRoutineToGenerateList = GGS_treewalkingRoutineToGenerateList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_treewalkingRoutineHeaderMap  var_cas_treewalkingRoutineHeaderMap ;
  var_cas_treewalkingRoutineHeaderMap = GGS_treewalkingRoutineHeaderMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_routineDispatcherSortedList  var_cas_routineDispatcherSortedList ;
  var_cas_routineDispatcherSortedList = GGS_routineDispatcherSortedList::constructor_emptySortedList (_inLexique COMMA_HERE) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_10153 = _inLexique.parsingContext () ;
    { bool syntaxRepeat = true ;
      while (syntaxRepeat) {
        switch (select_repeat_treewalking_parser_1 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_firstLocalPhase (_inLexique, var_cas_semanticsEntitiesMap, var_cas_treewalkingRoutineHeaderMap) ;
            } break ;
          default :
            syntaxRepeat = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    _inLexique.setParsingContext (context_10153) ;
    { bool syntaxRepeat = true ;
      while (syntaxRepeat) {
        switch (select_repeat_treewalking_parser_1 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_ (_inLexique, var_cas_semanticsEntitiesMap, var_cas_metamodelEntityMap, var_cas_optionsComponentsMapForUse, var_cas_treewalkingRoutineHeaderMap, var_cas_treewalkingRoutineToGenerateList, var_cas_ioTreewalkingComponentMap) ;
            } break ;
          default :
            syntaxRepeat = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  GGS_L_EXsignature  var_cas_rootRoutineSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_rootRoutineArgumentList ;
  if ((var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (283)) COMMA_SOURCE_FILE_AT_LINE (283))).isBuiltAndTrue ()) {
    if (var_cas_treewalkingRoutineHeaderMap._isBuilt ()) {
      var_cas_treewalkingRoutineHeaderMap (HERE)->method_searchKey (_inLexique, var_cas_metamodelRootEntity, var_cas_rootRoutineSignature, var_cas_rootRoutineArgumentList COMMA_SOURCE_FILE_AT_LINE (284)) ;
    }
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a routine should be defined for the '@"))._operator_concat (var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (286))))._operator_concat (GGS_string (true, "' root class")) COMMA_SOURCE_FILE_AT_LINE (288)) ;
    var_cas_rootRoutineSignature._drop_operation () ;
    var_cas_rootRoutineArgumentList._drop_operation () ;
  }
  if ((var_cas_inGenerateTreewalkingCode).isBuiltAndTrue ()) {
    GGS_treewalkingRoutineHeaderMap::element_type * operand_10907 = var_cas_treewalkingRoutineHeaderMap.firstObject () ;
    while ((operand_10907 != NULL)) {
      macroValidPointer (operand_10907) ;
      GGS_uint  var_cas_entityID ;
      GGS_string var_cas_metamodelName ;
      GGS_entityPropertyMap  automatic_var_6 ;
      GGS_bool automatic_var_7 ;
      GGS_entityPropertyMap  automatic_var_8 ;
      GGS_lstring  automatic_var_9 ;
      GGS_typeSuperClassesMap  automatic_var_10 ;
      GGS_typeListeAttributsSemantiques  automatic_var_11 ;
      if (var_cas_metamodelEntityMap._isBuilt ()) {
        var_cas_metamodelEntityMap (HERE)->method_searchKey (_inLexique, operand_10907->mKey, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9, automatic_var_10, automatic_var_11, var_cas_metamodelName, var_cas_entityID COMMA_SOURCE_FILE_AT_LINE (296)) ;
      }
      var_cas_routineDispatcherSortedList._addAssign_operation (var_cas_entityID.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (298)), var_cas_entityID, operand_10907->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (300)), operand_10907->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (301)), var_cas_metamodelName) ;
      GGS_lstring  var_cas_entityName ;
      var_cas_entityName = operand_10907->mKey ;
      GGS_uint _variant_11901 = var_cas_metamodelEntityMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (305)) ;
      GGS_bool _condition_11901 (_variant_11901._isBuilt (), true) ;
      while (_condition_11901.isBuiltAndTrue ()) {
        _condition_11901 = (var_cas_entityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (305)))._operator_isNotEqual (GGS_string (true, "")) ;
        if (_condition_11901.isBuiltAndTrue ()) {
          if (_variant_11901.uintValue () == 0) {
            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (318)) ;
            _condition_11901 = GGS_bool (true, false) ;
          }else{
            _variant_11901._decrement_operation (_inLexique COMMA_HERE) ;
            GGS_lstring  var_cas_superEntityName ;
            GGS_entityPropertyMap  automatic_var_12 ;
            GGS_bool automatic_var_13 ;
            GGS_entityPropertyMap  automatic_var_14 ;
            GGS_typeSuperClassesMap  automatic_var_15 ;
            GGS_typeListeAttributsSemantiques  automatic_var_16 ;
            GGS_string automatic_var_17 ;
            GGS_uint  automatic_var_18 ;
            if (var_cas_metamodelEntityMap._isBuilt ()) {
              var_cas_metamodelEntityMap (HERE)->method_searchKey (_inLexique, var_cas_entityName, automatic_var_12, automatic_var_13, automatic_var_14, var_cas_superEntityName, automatic_var_15, automatic_var_16, automatic_var_17, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (307)) ;
            }
            if ((var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, var_cas_superEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (308))).isBuiltAndTrue ()) {
              GGS_L_EXsignature  var_cas_superRoutineSignature ;
              GGS_typeListeTypesEtNomsArgMethode  automatic_var_19 ;
              if (var_cas_treewalkingRoutineHeaderMap._isBuilt ()) {
                var_cas_treewalkingRoutineHeaderMap (HERE)->method_searchKey (_inLexique, var_cas_superEntityName, var_cas_superRoutineSignature, automatic_var_19 COMMA_SOURCE_FILE_AT_LINE (310)) ;
              }
              ::routine_verifierCompatibiliteSignatures (_inLexique,  operand_10907->mInfo.mRoutineSignature,  var_cas_superRoutineSignature,  operand_10907->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (314)) COMMA_SOURCE_FILE_AT_LINE (311)) ;
            }
            var_cas_entityName = var_cas_superEntityName ;
          }
        }
      }
      operand_10907 = operand_10907->nextObject () ;
    }
    GGS_entityToImplementMap::element_type * operand_12063 = var_cas_metamodelEntityMap.firstObject () ;
    while ((operand_12063 != NULL)) {
      macroValidPointer (operand_12063) ;
      GGS_bool var_cas_hasRoutine ;
      var_cas_hasRoutine = var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, operand_12063->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (323)) COMMA_SOURCE_FILE_AT_LINE (323)) ;
      if (((var_cas_hasRoutine)._operator_not ()).isBuiltAndTrue ()) {
        GGS_lstring  var_cas_superEntityName ;
        var_cas_superEntityName = operand_12063->mInfo.mSuperEntityName ;
        GGS_uint _variant_12734 = var_cas_treewalkingRoutineHeaderMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (326)) ;
        GGS_bool _condition_12734 (_variant_12734._isBuilt (), true) ;
        while (_condition_12734.isBuiltAndTrue ()) {
          _condition_12734 = ((var_cas_hasRoutine)._operator_not ())._operator_and ((var_cas_superEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (326)))._operator_isNotEqual (GGS_string (true, ""))) ;
          if (_condition_12734.isBuiltAndTrue ()) {
            if (_variant_12734.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (333)) ;
              _condition_12734 = GGS_bool (true, false) ;
            }else{
              _variant_12734._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_hasRoutine = var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, var_cas_superEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (327)) COMMA_SOURCE_FILE_AT_LINE (327)) ;
              if (((var_cas_hasRoutine)._operator_not ()).isBuiltAndTrue ()) {
                GGS_lstring  var_cas_superSuperEntityName ;
                GGS_entityPropertyMap  automatic_var_20 ;
                GGS_bool automatic_var_21 ;
                GGS_entityPropertyMap  automatic_var_22 ;
                GGS_typeSuperClassesMap  automatic_var_23 ;
                GGS_typeListeAttributsSemantiques  automatic_var_24 ;
                GGS_string automatic_var_25 ;
                GGS_uint  automatic_var_26 ;
                if (var_cas_metamodelEntityMap._isBuilt ()) {
                  var_cas_metamodelEntityMap (HERE)->method_searchKey (_inLexique, var_cas_superEntityName, automatic_var_20, automatic_var_21, automatic_var_22, var_cas_superSuperEntityName, automatic_var_23, automatic_var_24, automatic_var_25, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (330)) ;
                }
                var_cas_superEntityName = var_cas_superSuperEntityName ;
              }
            }
          }
        }
        if ((var_cas_hasRoutine).isBuiltAndTrue ()) {
          GGS_uint  var_cas_entityID ;
          GGS_string var_cas_metamodelName ;
          GGS_entityPropertyMap  automatic_var_27 ;
          GGS_bool automatic_var_28 ;
          GGS_entityPropertyMap  automatic_var_29 ;
          GGS_lstring  automatic_var_30 ;
          GGS_typeSuperClassesMap  automatic_var_31 ;
          GGS_typeListeAttributsSemantiques  automatic_var_32 ;
          if (var_cas_metamodelEntityMap._isBuilt ()) {
            var_cas_metamodelEntityMap (HERE)->method_searchKey (_inLexique, operand_12063->mKey, automatic_var_27, automatic_var_28, automatic_var_29, automatic_var_30, automatic_var_31, automatic_var_32, var_cas_metamodelName, var_cas_entityID COMMA_SOURCE_FILE_AT_LINE (337)) ;
          }
          var_cas_routineDispatcherSortedList._addAssign_operation (var_cas_entityID.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (339)), var_cas_entityID, var_cas_superEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (341)), operand_12063->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (342)), var_cas_metamodelName) ;
        }
      }
      operand_12063 = operand_12063->nextObject () ;
    }
    if (var_cas_treewalkingName._isBuilt () &&
        var_cas_filesToImportInHeaderSet._isBuilt () &&
        var_cas_treewalkingRoutineToGenerateList._isBuilt () &&
        var_cas_routineDispatcherSortedList._isBuilt () &&
        var_cas_rootRoutineArgumentList._isBuilt () &&
        var_cas_metamodelRootEntity._isBuilt ()) {
      ::routine_generate_treewalking (_inLexique,  var_cas_treewalkingName,  var_cas_filesToImportInHeaderSet,  var_cas_treewalkingRoutineToGenerateList,  var_cas_routineDispatcherSortedList,  var_cas_rootRoutineArgumentList,  var_cas_metamodelRootEntity COMMA_SOURCE_FILE_AT_LINE (348)) ;
    }
  }
  if (((var_cas_ioTreewalkingComponentMap.reader_hasKey (_inLexique, var_cas_treewalkingName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (359)) COMMA_SOURCE_FILE_AT_LINE (359)))._operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioTreewalkingComponentMap.modifier_insertKey (_inLexique, var_cas_treewalkingName, var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)), var_cas_rootRoutineSignature COMMA_SOURCE_FILE_AT_LINE (360)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
pr_parse_treewalking_document_treewalking_parser_170_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  nt_parse_semantics_component_for_importing_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_treewalking_parser_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          nt_parse_semantics_component_for_importing_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_10153 = _inLexique.parsingContext () ;
    { bool syntaxRepeat = true ;
      while (syntaxRepeat) {
        switch (select_repeat_treewalking_parser_1 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_parse (_inLexique) ;
            } break ;
          default :
            syntaxRepeat = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    _inLexique.setParsingContext (context_10153) ;
    { bool syntaxRepeat = true ;
      while (syntaxRepeat) {
        switch (select_repeat_treewalking_parser_1 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_parse (_inLexique) ;
            } break ;
          default :
            syntaxRepeat = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'treewalking_routine'           *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_treewalking_routine_treewalking_parser_374_6_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  &var_cas_inSemanticsEntitiesMap,
                                const GGS_entityToImplementMap  &var_cas_inMetamodelEntityMap,
                                const GGS_M_optionComponents  &var_cas_inOptionsComponentsMapForUse,
                                const GGS_treewalkingRoutineHeaderMap  &var_cas_inTreewalkingRoutineHeaderMap,
                                GGS_treewalkingRoutineToGenerateList  &var_cas_ioTreewalkingRoutineToGenerateList,
                                const GGS_M_treewalkingComponents  &var_cas_inTreewalkingComponentMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelClassName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelClassName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allMetamodelPropertyMap ;
  GGS_bool automatic_var_33 ;
  GGS_entityPropertyMap  automatic_var_34 ;
  GGS_lstring  automatic_var_35 ;
  GGS_typeSuperClassesMap  automatic_var_36 ;
  GGS_typeListeAttributsSemantiques  automatic_var_37 ;
  GGS_string automatic_var_38 ;
  GGS_uint  automatic_var_39 ;
  if (var_cas_inMetamodelEntityMap._isBuilt ()) {
    var_cas_inMetamodelEntityMap (HERE)->method_searchKey (_inLexique, var_cas_metamodelClassName, var_cas_allMetamodelPropertyMap, automatic_var_33, automatic_var_34, automatic_var_35, automatic_var_36, automatic_var_37, automatic_var_38, automatic_var_39 COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_formalArgumentList ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (_inLexique, var_cas_inSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_formalArgumentList, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_entityPropertyMap::element_type * operand_14988 = var_cas_allMetamodelPropertyMap.firstObject () ;
  while ((operand_14988 != NULL)) {
    macroValidPointer (operand_14988) ;
    if (operand_14988->mInfo.mPropertyType._isBuilt ()) {
      cPtr_typeGalgas_singleReferenceEntity * operand_15056 = dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (operand_14988->mInfo.mPropertyType.getPtr ()) ;
      if (operand_15056 != NULL) {
        macroValidPointer (operand_15056) ; 
      }else{
        cPtr_typeGalgas_multipleReferenceEntity * operand_15106 = dynamic_cast <cPtr_typeGalgas_multipleReferenceEntity *> (operand_14988->mInfo.mPropertyType.getPtr ()) ;
        if (operand_15106 != NULL) {
          macroValidPointer (operand_15106) ; 
        }else{ // Else part
          GGS_typeCplusPlusName  var_cas_cppName ;
          var_cas_cppName = GGS_typeCurrentObjectName::constructor_new (_inLexique, operand_14988->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (407)), operand_14988->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_HERE) ;
          var_cas_localVariableMap.modifier_insertUsedConstInArgument (_inLexique, operand_14988->mKey, operand_14988->mInfo.mPropertyType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (408)) ;
        }
      }
    }
    operand_14988 = operand_14988->nextObject () ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_semantic_instructions_list_ (_inLexique, var_cas_inTreewalkingRoutineHeaderMap, var_cas_tableEnAvant, var_cas_inSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_instructionList, var_cas_allMetamodelPropertyMap, var_cas_inMetamodelEntityMap, var_cas_inTreewalkingComponentMap) ;
  var_cas_ioTreewalkingRoutineToGenerateList._addAssign_operation (var_cas_metamodelClassName, var_cas_formalArgumentList, var_cas_instructionList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_treewalking_routine_treewalking_parser_374_6_firstLocalPhase (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  &var_cas_inSemanticsEntitiesMap,
                                GGS_treewalkingRoutineHeaderMap  &var_cas_ioTreewalkingRoutineHeaderMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelClassName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelClassName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_formalArgumentList ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (_inLexique, var_cas_inSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_formalArgumentList, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  var_cas_ioTreewalkingRoutineHeaderMap.modifier_insertKey (_inLexique, var_cas_metamodelClassName, var_cas_listeDeTypes, var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (456)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
pr_treewalking_routine_treewalking_parser_374_6_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  nt_formal_arguments_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

