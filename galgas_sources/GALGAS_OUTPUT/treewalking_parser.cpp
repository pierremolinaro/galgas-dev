//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'treewalking_parser.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 7th, 2008, at 12h31'27"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "treewalking_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "treewalking_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, true)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  nt_parse_treewalking_document_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  nt_parse_treewalking_document_ (_inLexique, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, GGS_bool (true, false)) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_galgas_component_treewalking_parser_145_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  nt_parse_treewalking_document_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_treewalking_document'       *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_parse_treewalking_document_treewalking_parser_208_4_ (galgas_scanner & _inLexique,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                const GGS_bool var_cas_inGenerateTreewalkingCode) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  GGS_lstring  var_cas_treewalkingName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_treewalkingName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_stringset  var_cas_filesToImportInHeaderSet ;
  var_cas_filesToImportInHeaderSet = GGS_stringset ::constructor_setWithString (_inLexique, var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (223)) COMMA_HERE) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_ModelMap  var_cas_modelMap ;
  var_cas_modelMap = GGS_ModelMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_ActionMap  var_cas_actionMap ;
  var_cas_actionMap = GGS_ActionMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentEntitiesMap ;
  GGS_stringset  var_cas_classNamesSet ;
  var_cas_classNamesSet = GGS_stringset ::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_entityToImplementMap  var_cas_allMetamodelClassMap ;
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse ;
  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_metamodelsComponents  var_cas_metamodelComponentMap ;
  var_cas_metamodelComponentMap = GGS_M_metamodelsComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_semanticContext var_cas_semanticContext ;
  var_cas_semanticContext = GGS_semanticContext::constructor_new (_inLexique, GGS_M_filewrappers ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (_inLexique COMMA_HERE) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_includedGrammarComponents, var_cas_lexiqueMapForUse, var_cas_semanticsComponentsMap, var_cas_metamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_filesToImportInHeaderSet, var_cas_optionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_componentEntitiesMap, var_cas_tableEnAvant, var_cas_allMetamodelClassMap, var_cas_semanticContext) ;
  {
    GGS_stringset::cEnumerator enumerator_10250 (var_cas_includedSemanticsComponents, true) ;
    const GGS_stringset::cElement * operand_10250 = NULL ;
    while (((operand_10250 = (GGS_stringset::cElement *) enumerator_10250.nextObject ()))) {
      macroValidPointer (operand_10250) ;
      var_cas_inclusionsForImplementationFile._addAssign_operation ((operand_10250->mKey)._operator_concat (GGS_string (true, ".h"))) ;
    }
  }
  GGS_lstring  var_cas_metamodelRootEntity ;
  GGS_entityToImplementMap  var_cas_metamodelEntityMap ;
  GGS_stringset  var_cas_importedMetamodels ;
  if ((var_cas_metamodelComponentMap.reader_hasKey (_inLexique, var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274))).isBuiltAndTrue ()) {
    const GGS_M_metamodelsComponents  _temp_10637 = var_cas_metamodelComponentMap ;
    if (_temp_10637._isBuilt ()) {
      _temp_10637 (HERE)->method_searchKey (_inLexique, var_cas_metamodelName, var_cas_metamodelRootEntity, var_cas_metamodelEntityMap, var_cas_importedMetamodels COMMA_SOURCE_FILE_AT_LINE (275)) ;
    }
    GGS_stringset  var_cas_superMetamodels ;
    var_cas_superMetamodels = GGS_stringset ::constructor_emptySet (_inLexique COMMA_HERE) ;
    {
      GGS_stringset::cEnumerator enumerator_10815 (var_cas_importedMetamodels, true) ;
      const GGS_stringset::cElement * operand_10815 = NULL ;
      while (((operand_10815 = (GGS_stringset::cElement *) enumerator_10815.nextObject ()))) {
        macroValidPointer (operand_10815) ;
        ::routine_performMetamodelInclusion (_inLexique,  var_cas_metamodelComponentMap,  GGS_lstring ::constructor_new (_inLexique, operand_10815->mKey, GGS_location (_inLexique) COMMA_HERE),  var_cas_superMetamodels,  var_cas_metamodelEntityMap COMMA_SOURCE_FILE_AT_LINE (282)) ;
      }
    }
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "imported files do not define the '"))._operator_concat (var_cas_metamodelName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (291))))._operator_concat (GGS_string (true, "' metamodel")) COMMA_SOURCE_FILE_AT_LINE (292)) ;
    var_cas_metamodelRootEntity._drop_operation () ;
    var_cas_metamodelEntityMap._drop_operation () ;
    var_cas_importedMetamodels._drop_operation () ;
  }
  GGS_treewalkingRoutineToGenerateList  var_cas_treewalkingRoutineToGenerateList ;
  var_cas_treewalkingRoutineToGenerateList = GGS_treewalkingRoutineToGenerateList ::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_treewalkingRoutineHeaderMap  var_cas_treewalkingRoutineHeaderMap ;
  var_cas_treewalkingRoutineHeaderMap = GGS_treewalkingRoutineHeaderMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_routineDispatcherSortedList  var_cas_routineDispatcherSortedList ;
  var_cas_routineDispatcherSortedList = GGS_routineDispatcherSortedList ::constructor_emptySortedList (_inLexique COMMA_HERE) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_12859 = _inLexique.parsingContext () ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_treewalking_parser_0 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_firstLocalPhase (_inLexique, var_cas_componentEntitiesMap, var_cas_treewalkingRoutineHeaderMap) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
    GGS_L_EXsignature  var_cas_rootRoutineSignature ;
    GGS_typeListeTypesEtNomsArgMethode  var_cas_rootRoutineArgumentList ;
    if ((var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (311)) COMMA_SOURCE_FILE_AT_LINE (311))).isBuiltAndTrue ()) {
      const GGS_treewalkingRoutineHeaderMap  _temp_11981 = var_cas_treewalkingRoutineHeaderMap ;
      if (_temp_11981._isBuilt ()) {
        _temp_11981 (HERE)->method_searchKey (_inLexique, var_cas_metamodelRootEntity, var_cas_rootRoutineSignature, var_cas_rootRoutineArgumentList COMMA_SOURCE_FILE_AT_LINE (312)) ;
      }
    }else{
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "a routine should be defined for the '@"))._operator_concat (var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (314))))._operator_concat (GGS_string (true, "' root class")) COMMA_SOURCE_FILE_AT_LINE (315)) ;
      var_cas_rootRoutineSignature._drop_operation () ;
      var_cas_rootRoutineArgumentList._drop_operation () ;
    }
    if (((var_cas_ioTreewalkingComponentMap.reader_hasKey (_inLexique, var_cas_treewalkingName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (318)) COMMA_SOURCE_FILE_AT_LINE (318)))._operator_not ()).isBuiltAndTrue ()) {
      var_cas_ioTreewalkingComponentMap.modifier_insertKey (_inLexique, var_cas_treewalkingName, var_cas_metamodelRootEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (321)), var_cas_rootRoutineSignature COMMA_SOURCE_FILE_AT_LINE (319)) ;
    }
  //--- Branch of parse/rewind instruction
    _inLexique.setParsingContext (context_12859) ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_treewalking_parser_0 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_ (_inLexique, var_cas_componentEntitiesMap, var_cas_metamodelEntityMap, var_cas_optionsComponentsMapForUse, var_cas_treewalkingRoutineHeaderMap, var_cas_treewalkingRoutineToGenerateList, var_cas_ioTreewalkingComponentMap, var_cas_semanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  if ((var_cas_inGenerateTreewalkingCode).isBuiltAndTrue ()) {
    {
      GGS_treewalkingRoutineHeaderMap::cEnumerator enumerator_13091 (var_cas_treewalkingRoutineHeaderMap, true) ;
      const GGS_treewalkingRoutineHeaderMap::cElement * operand_13091 = NULL ;
      while (((operand_13091 = (GGS_treewalkingRoutineHeaderMap::cElement *) enumerator_13091.nextObject ()))) {
        macroValidPointer (operand_13091) ;
        GGS_uint  var_cas_entityID ;
        GGS_string var_cas_metamodelName ;
        GGS_entityPropertyMap  automatic_var_0 ;
        GGS_bool automatic_var_1 ;
        GGS_entityPropertyMap  automatic_var_2 ;
        GGS_lstring  automatic_var_3 ;
        GGS_typeSuperClassesMap  automatic_var_4 ;
        GGS_typeListeAttributsSemantiques  automatic_var_5 ;
        const GGS_entityToImplementMap  _temp_13252 = var_cas_metamodelEntityMap ;
        if (_temp_13252._isBuilt ()) {
          _temp_13252 (HERE)->method_searchKey (_inLexique, operand_13091->mKey, automatic_var_0, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_metamodelName, var_cas_entityID COMMA_SOURCE_FILE_AT_LINE (347)) ;
        }
        var_cas_routineDispatcherSortedList._addAssign_operation (var_cas_entityID.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)), var_cas_entityID, operand_13091->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (351)), operand_13091->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)), var_cas_metamodelName) ;
        GGS_lstring  var_cas_entityName ;
        var_cas_entityName = operand_13091->mKey ;
        GGS_uint _variant_14114 = var_cas_metamodelEntityMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)) ;
        GGS_bool _condition_14114 (_variant_14114._isBuilt (), true) ;
        while (_condition_14114.isBuiltAndTrue ()) {
          _condition_14114 = (var_cas_entityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)))._operator_isNotEqual (GGS_string (true, "")) ;
          if (_condition_14114.isBuiltAndTrue ()) {
            if (_variant_14114.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (368)) ;
              _condition_14114 = GGS_bool (true, false) ;
            }else{
              _variant_14114._decrement_operation (_inLexique COMMA_HERE) ;
              GGS_lstring  var_cas_superEntityName ;
              GGS_entityPropertyMap  automatic_var_6 ;
              GGS_bool automatic_var_7 ;
              GGS_entityPropertyMap  automatic_var_8 ;
              GGS_typeSuperClassesMap  automatic_var_9 ;
              GGS_typeListeAttributsSemantiques  automatic_var_10 ;
              GGS_string automatic_var_11 ;
              GGS_uint  automatic_var_12 ;
              const GGS_entityToImplementMap  _temp_13634 = var_cas_metamodelEntityMap ;
              if (_temp_13634._isBuilt ()) {
                _temp_13634 (HERE)->method_searchKey (_inLexique, var_cas_entityName, automatic_var_6, automatic_var_7, automatic_var_8, var_cas_superEntityName, automatic_var_9, automatic_var_10, automatic_var_11, automatic_var_12 COMMA_SOURCE_FILE_AT_LINE (358)) ;
              }
              if ((var_cas_treewalkingRoutineHeaderMap.reader_hasKey (_inLexique, var_cas_superEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (359)) COMMA_SOURCE_FILE_AT_LINE (359))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_superRoutineSignature ;
                GGS_typeListeTypesEtNomsArgMethode  automatic_var_13 ;
                const GGS_treewalkingRoutineHeaderMap  _temp_13851 = var_cas_treewalkingRoutineHeaderMap ;
                if (_temp_13851._isBuilt ()) {
                  _temp_13851 (HERE)->method_searchKey (_inLexique, var_cas_superEntityName, var_cas_superRoutineSignature, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (361)) ;
                }
                ::routine_verifierCompatibiliteSignatures (_inLexique,  operand_13091->mInfo.mRoutineSignature,  var_cas_superRoutineSignature,  operand_13091->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (365)) COMMA_SOURCE_FILE_AT_LINE (361)) ;
              }
              var_cas_entityName = var_cas_superEntityName ;
            }
          }
        }
      }
    }
    if (var_cas_treewalkingName._isBuilt () &&
        var_cas_filesToImportInHeaderSet._isBuilt () &&
        var_cas_inclusionsForImplementationFile._isBuilt () &&
        var_cas_treewalkingRoutineToGenerateList._isBuilt () &&
        var_cas_routineDispatcherSortedList._isBuilt () &&
        var_cas_rootRoutineArgumentList._isBuilt () &&
        var_cas_metamodelRootEntity._isBuilt ()) {
      ::routine_generate_treewalking (_inLexique,  var_cas_treewalkingName,  var_cas_filesToImportInHeaderSet,  var_cas_inclusionsForImplementationFile,  var_cas_treewalkingRoutineToGenerateList,  var_cas_routineDispatcherSortedList,  var_cas_rootRoutineArgumentList,  var_cas_metamodelRootEntity COMMA_SOURCE_FILE_AT_LINE (370)) ;
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
pr_parse_treewalking_document_treewalking_parser_208_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_12859 = _inLexique.parsingContext () ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_treewalking_parser_0 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_parse (_inLexique) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    _inLexique.setParsingContext (context_12859) ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_treewalking_parser_0 (_inLexique)) {
          case 2 : {
            nt_treewalking_routine_parse (_inLexique) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_treewalking) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'treewalking_routine'           *
//                                                                           *
//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_treewalking_routine_treewalking_parser_390_4_ (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inSemanticsEntitiesMap,
                                const GGS_entityToImplementMap  var_cas_inMetamodelEntityMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_treewalkingRoutineHeaderMap  var_cas_inTreewalkingRoutineHeaderMap,
                                GGS_treewalkingRoutineToGenerateList  &var_cas_ioTreewalkingRoutineToGenerateList,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelClassName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelClassName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allMetamodelPropertyMap ;
  GGS_bool automatic_var_14 ;
  GGS_entityPropertyMap  automatic_var_15 ;
  GGS_lstring  automatic_var_16 ;
  GGS_typeSuperClassesMap  automatic_var_17 ;
  GGS_typeListeAttributsSemantiques  automatic_var_18 ;
  GGS_string automatic_var_19 ;
  GGS_uint  automatic_var_20 ;
  const GGS_entityToImplementMap  _temp_15156 = var_cas_inMetamodelEntityMap ;
  if (_temp_15156._isBuilt ()) {
    _temp_15156 (HERE)->method_searchKey (_inLexique, var_cas_metamodelClassName, var_cas_allMetamodelPropertyMap, automatic_var_14, automatic_var_15, automatic_var_16, automatic_var_17, automatic_var_18, automatic_var_19, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (403)) ;
  }
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_formalArgumentList ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (_inLexique, var_cas_inSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_formalArgumentList, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  {
    GGS_entityPropertyMap::cEnumerator enumerator_15747 (var_cas_allMetamodelPropertyMap, true) ;
    const GGS_entityPropertyMap::cElement * operand_15747 = NULL ;
    while (((operand_15747 = (GGS_entityPropertyMap::cElement *) enumerator_15747.nextObject ()))) {
      macroValidPointer (operand_15747) ;
      { const GGS_AC_galgasType _var_16113 = operand_15747->mInfo.mPropertyType ; // CAST instruction
        if (_var_16113.getPtr () != NULL) {
          macroValidPointer (_var_16113.getPtr ()) ;
          if (dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (_var_16113.getPtr ()) != NULL) {
          }else if (dynamic_cast <cPtr_typeGalgas_multipleReferenceEntity *> (_var_16113.getPtr ()) != NULL) {
          }else{
            GGS_typeCplusPlusName  var_cas_cppName ;
            var_cas_cppName = GGS_typeCurrentObjectName ::constructor_new (_inLexique, operand_15747->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (424)), operand_15747->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (424)) COMMA_HERE) ;
            var_cas_localVariableMap.modifier_insertUsedConstInArgument (_inLexique, operand_15747->mKey, operand_15747->mInfo.mPropertyType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (425)) ;
          }
        }
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_semantic_instructions_list_ (_inLexique, var_cas_inTreewalkingRoutineHeaderMap, var_cas_tableEnAvant, var_cas_inSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_instructionList, var_cas_allMetamodelPropertyMap, var_cas_inMetamodelEntityMap, var_cas_inTreewalkingComponentMap, var_cas_inSemanticContext) ;
  var_cas_ioTreewalkingRoutineToGenerateList._addAssign_operation (var_cas_metamodelClassName, var_cas_formalArgumentList, var_cas_instructionList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
treewalking_parser::
pr_treewalking_routine_treewalking_parser_390_4_firstLocalPhase (galgas_scanner & _inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inSemanticsEntitiesMap,
                                GGS_treewalkingRoutineHeaderMap  &var_cas_ioTreewalkingRoutineHeaderMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_metamodelClassName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_metamodelClassName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_formalArgumentList ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (_inLexique, var_cas_inSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_formalArgumentList, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  var_cas_ioTreewalkingRoutineHeaderMap.modifier_insertKey (_inLexique, var_cas_metamodelClassName, var_cas_listeDeTypes, var_cas_formalArgumentList COMMA_SOURCE_FILE_AT_LINE (474)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void treewalking_parser::
pr_treewalking_routine_treewalking_parser_390_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  nt_formal_arguments_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

