//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ggs_LL1_compile_component.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 2nd, 2008, at 11h55'40"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ggs_LL1_compile_component.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ggs_LL1_compile_component.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'fileListTemplateFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/file_list_template.mke'

const char * gWrapperFileContent_0_fileListTemplateFileWrapper = // 1691 bytes
  "#---------------------------------------------------------------*\n"
  "\n"
  "#--- Lib PM directory\n"
  "ifdef LIBPM_PATH_ENV_VAR\n"
  "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
  "else\n"
  "  LIB_PM_PATH := ../../libpm\n"
  "endif\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Project source files directories                          *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
  "%HAND_CODED_SOURCES_SUB_DIRS%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Build Options                                             *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
  "\n"
  "C_COMPILER_OPTIONS += -fexceptions\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Source files names list (without their actual path)       *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES :=\n"
  "\n"
  "#--- Files from libpm --------------------\n"
  "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
  "\n"
  "#--- Hand-coded files ---------------------\n"
  "%HAND_CODED_SOURCE_LIST%\n"
  "\n"
  "#--- Files generated by GALGAS ------------\n"
  "%GALGAS_SOURCE_LIST%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
;

static const cRegularFileWrapper gWrapperFile_0_fileListTemplateFileWrapper = {
  "file_list_template.mke",
  "mke",
  gWrapperFileContent_0_fileListTemplateFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_fileListTemplateFileWrapper_0 [2] = {
  & gWrapperFile_0_fileListTemplateFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_fileListTemplateFileWrapper = {
  "",
  1,
  gWrapperAllFiles_fileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_fileListTemplateFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) {
  C_String _result ;
  const bool _isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS._isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST._isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST._isBuilt () ;
  if (_isBuilt) {
    _result << "#---------------------------------------------------------------*\n"
    "\n"
    "#--- Lib PM directory\n"
    "ifdef LIBPM_PATH_ENV_VAR\n"
    "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
    "else\n"
    "  LIB_PM_PATH := ../../libpm\n"
    "endif\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Project source files directories                          *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n" ;
    _result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Build Options                                             *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
    "\n"
    "C_COMPILER_OPTIONS += -fexceptions\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Source files names list (without their actual path)       *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES :=\n"
    "\n"
    "#--- Files from libpm --------------------\n"
    "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
    "\n"
    "#--- Hand-coded files ---------------------\n" ;
    _result << var_cas_HAND_CODED_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#--- Files generated by GALGAS ------------\n" ;
    _result << var_cas_GALGAS_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (_isBuilt, _result) ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_stringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_targetFileListMap::cElement::_clone (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_targetFileListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject._operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_targetFileListMap::cElement::
_description (C_Compiler & _inLexique,
              const sint32 inIndentation
              COMMA_LOCATION_ARGS) const {
  const GGS_string s = mListObject.reader_description (_inLexique COMMA_THERE, inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
constructor_emptyMap (void) {
  GGS_targetFileListMap result ;
  result._alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_targetFileListMap::
_typeNameForDescriptionReader (void) const {
  return "@targetFileListMap" ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
_operator_concat (const GGS_targetFileListMap & inOperand) const {
  GGS_targetFileListMap result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
_dotAssign_operation (const GGS_targetFileListMap inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const sint32 objectCount = dictPtr->count () ;
      for (sint32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = _findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * elementPtr = NULL ;
           macroMyNew (elementPtr, cElement (HERE)) ;
           nodePtr->mObject._setPointer (elementPtr) ;
        }
        GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr._dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
_addAssign_operation (const GGS_string & inKey,
                      const GGS_string& inAttribute0) {
  if (_isBuilt () && inKey._isBuilt () && inAttribute0._isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = _findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * elementPtr = NULL ;
       macroMyNew (elementPtr, cElement (HERE)) ;
       nodePtr->mObject._setPointer (elementPtr) ;
    }
    GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr._addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringlist result ;
  if (_isBuilt () && inKey._isBuilt ()) {
    cPtrDictionaryNode * nodePtr = _dictionaryNodeForKey (inKey) ; 
    if (nodePtr == NULL) {
      result = GGS_stringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_targetFileListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result._setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (_isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const sint32 objectCount = dictPtr->count () ;
    for (sint32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result._addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cEnumerator::
cEnumerator (const GGS_targetFileListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_stringlist & GGS_targetFileListMap::cEnumerator::
_object (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Class for 'sourceFileKind' Enumeration                   *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_sourceFileKind::
_isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_isEqual (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_isNotEqual (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_infOrEqual (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_supOrEqual (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_strictInf (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileKind::
_operator_strictSup (const GGS_sourceFileKind inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_sourceFileKind::
reader_description (C_Compiler & /* _inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @sourceFileKind" ;
  switch (mValue) {
  case enum_externSourceFile:
    s << " externSourceFile>" ;
    break ;
  case enum_grammarSourceFile:
    s << " grammarSourceFile>" ;
    break ;
  case enum_guiSourceFile:
    s << " guiSourceFile>" ;
    break ;
  case enum_lexiqueSourceFile:
    s << " lexiqueSourceFile>" ;
    break ;
  case enum_optionSourceFile:
    s << " optionSourceFile>" ;
    break ;
  case enum_programSourceFile:
    s << " programSourceFile>" ;
    break ;
  case enum_semanticsSourceFile:
    s << " semanticsSourceFile>" ;
    break ;
  case enum_syntaxSourceFile:
    s << " syntaxSourceFile>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_sourceFileMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

e_sourceFileMap::e_sourceFileMap (void) :
mFullPath (),
mSourceKind () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map '@sourceFileMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_sourceFileMap::
elementOf_GGS_sourceFileMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_sourceFileMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_sourceFileMap::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mFullPath.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mSourceKind.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_sourceFileMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_sourceFileMap * _p = dynamic_cast <const elementOf_GGS_sourceFileMap *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mFullPath._operator_isEqual (_p->mInfo.mFullPath)).boolValue ()
           && (mInfo.mSourceKind._operator_isEqual (_p->mInfo.mSourceKind)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_sourceFileMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_sourceFileMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
_operator_isEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
_operator_isNotEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_string& inParameter0,
                const GGS_sourceFileKind& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_sourceFileMap info  ;
    info.mFullPath = inParameter0 ;
    info.mSourceKind = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_sourceFileKind  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mFullPath ;
    outParameter1 = node->mInfo.mSourceKind ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_setMFullPathForKey (C_Compiler & inLexique,
                        const GGS_string& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMFullPathForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mFullPath = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_setMSourceKindForKey (C_Compiler & inLexique,
                        const GGS_sourceFileKind& inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMSourceKindForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mSourceKind = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_sourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "the '%K' source base name is not declared",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_insertKey (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_sourceFileKind& inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "the '%K' source base name has been already declared in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_sourceFileMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_sourceFileMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_sourceFileMap::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @sourceFileMap " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_sourceFileMap::cEnumerator::_mFullPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFullPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sourceFileKind & GGS_sourceFileMap::cEnumerator::_mSourceKind (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSourceKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  GGS_sourceFileMap  var_cas_sourceFileMap ;
  var_cas_sourceFileMap = GGS_sourceFileMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_targetFileListMap var_cas_targetFileListMap ;
  var_cas_targetFileListMap = GGS_targetFileListMap::constructor_emptyMap () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          GGS_sourceFileKind var_cas_sourceFileKind ;
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_externSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_guiSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_lexiqueSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_optionSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_semanticsSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_syntaxSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_grammarSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_sourceFileKind::constructor_programSourceFile (_inLexique COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_fileName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          GGS_string var_cas_baseName ;
          var_cas_baseName = var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
          var_cas_sourceFileMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_baseName, var_cas_fileName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) COMMA_HERE), var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)), var_cas_sourceFileKind COMMA_SOURCE_FILE_AT_LINE (178)) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    GGS_lstring  var_cas_targetName ;
                    _inLexique._assignFromAttribute_tokenString (var_cas_targetName) ;
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    var_cas_targetFileListMap._addAssign_operation (var_cas_targetName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)), var_cas_baseName) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (190)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "------ Compile file '"))._operator_concat (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (191))))._operator_concat (GGS_string (true, "'\n")) COMMA_SOURCE_FILE_AT_LINE (191)) ;
          }
          if (((var_cas_sourceFileKind)._operator_isNotEqual (GGS_sourceFileKind::constructor_externSourceFile (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            galgas_LL1_grammar::_performSourceFileParsing_compileFile (_inLexique,
                                            NULL,
                                            var_cas_fileName
                                            COMMA_SOURCE_FILE_AT_LINE (195)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (202)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (GGS_string (true, "------ Project\n") COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }
  GGS_stringlist  var_cas_makefileFiles ;
  var_cas_makefileFiles = var_cas_targetFileListMap.reader_listForKey (_inLexique, GGS_string (true, "makefile") COMMA_SOURCE_FILE_AT_LINE (206)) ;
  if (((var_cas_makefileFiles.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (207)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_externSourceFileList ;
    var_cas_externSourceFileList = GGS_string (true, "") ;
    GGS_string var_cas_galgasSourceList ;
    var_cas_galgasSourceList = GGS_string (true, "") ;
    GGS_stringset  var_cas_pathSet ;
    var_cas_pathSet = GGS_stringset ::constructor_emptySet () ;
    var_cas_pathSet._addAssign_operation (GGS_string (true, "SOURCES_DIR += ../hand_coded_sources\n")) ;
    {
      GGS_stringlist::cEnumerator enumerator_8064 (var_cas_makefileFiles, true) ;
      const GGS_stringlist::cElement * operand_8064 = NULL ;
      while (((operand_8064 = enumerator_8064.nextObject ()))) {
        macroValidPointer (operand_8064) ;
        GGS_string var_cas_fullPath ;
        GGS_sourceFileKind var_cas_sourceKind ;
        const GGS_sourceFileMap  _temp_8158 = var_cas_sourceFileMap ;
        if (_temp_8158._isBuilt ()) {
          _temp_8158 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_8064->mValue, GGS_location (_inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (215)) ;
        }
        GGS_string var_cas_filePath ;
        var_cas_filePath = var_cas_fullPath.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)) ;
        if (((var_cas_sourceKind)._operator_isEqual (GGS_sourceFileKind::constructor_externSourceFile (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
          if (((var_cas_filePath.reader_firstCharacterOrNul (_inLexique COMMA_SOURCE_FILE_AT_LINE (218)))._operator_isEqual (GGS_char (true, '/'))).isBuiltAndTrue ()) {
            var_cas_pathSet._addAssign_operation (((GGS_string (true, "SOURCES_DIR += "))._operator_concat (var_cas_filePath))._operator_concat (GGS_string (true, "\n"))) ;
          }else if (((var_cas_filePath)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            var_cas_pathSet._addAssign_operation (((GGS_string (true, "SOURCES_DIR += ../hand_coded_sources/"))._operator_concat (var_cas_filePath))._operator_concat (GGS_string (true, "\n"))) ;
          }
          var_cas_externSourceFileList.writeString ("SOURCES += ") ;
          var_cas_externSourceFileList._dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
          var_cas_externSourceFileList.writeString ("\n") ;
        }else{
          var_cas_galgasSourceList.writeString ("SOURCES += ") ;
          var_cas_galgasSourceList._dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (225))) ;
          var_cas_galgasSourceList.writeString (".cpp\n") ;
        }
      }
    }
    GGS_string var_cas_pathesString ;
    var_cas_pathesString = GGS_string (true, "") ;
    {
      GGS_stringset::cEnumerator enumerator_8897 (var_cas_pathSet, true) ;
      while (enumerator_8897.hc ()) {
        var_cas_pathesString._dotAssign_operation (enumerator_8897._key (HERE)) ;
        enumerator_8897.next () ;
      }
    }
    GGS_string var_cas_newFileListContents ;
    var_cas_newFileListContents = _template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (var_cas_pathesString, var_cas_galgasSourceList, var_cas_externSourceFileList) ;
    GGS_string var_cas_fileListPath ;
    var_cas_fileListPath = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)))._operator_concat (GGS_string (true, "/GALGAS_OUTPUT/file_list.mke")) ;
    const GGS_string _temp_9311 = var_cas_newFileListContents ;
    if (_temp_9311._isBuilt ()) {
      _temp_9311 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_fileListPath COMMA_SOURCE_FILE_AT_LINE (238)) ;
    }
  }
  GGS_string var_cas_oldCommonFile ;
  var_cas_oldCommonFile = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (241)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (241)))._operator_concat (GGS_string (true, "/common_files_for_make/makefile.mke")) ;
  if (((var_cas_oldCommonFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (242)))._operator_and ((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (GGS_string (true, "**** Converting old-style makefile ****\n") COMMA_SOURCE_FILE_AT_LINE (243)) ;
    GGS_string var_cas_projectDir ;
    var_cas_projectDir = GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (244)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
    GGS_stringlist  var_cas_projectDirectories ;
    var_cas_projectDirectories = var_cas_projectDir.reader_directories (_inLexique, GGS_bool (true, false) COMMA_SOURCE_FILE_AT_LINE (245)) ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true, true) ;
    {
      GGS_stringlist::cEnumerator enumerator_9923 (var_cas_projectDirectories, true) ;
      const GGS_stringlist::cElement * operand_9923 = NULL ;
      while (((operand_9923 = enumerator_9923.nextObject ()))) {
        macroValidPointer (operand_9923) ;
        if ((((operand_9923->mValue)._operator_isNotEqual (GGS_string (true, "common_files_for_make")))._operator_and ((operand_9923->mValue)._operator_isNotEqual (GGS_string (true, "makefile_macosx_universal")))).isBuiltAndTrue ()) {
          GGS_string var_cas_fullDirPath ;
          var_cas_fullDirPath = (((var_cas_projectDir)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_9923->mValue))._operator_concat (GGS_string (true, "/")) ;
          GGS_string var_cas_makefilePath ;
          var_cas_makefilePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile")) ;
          if ((var_cas_makefilePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (252))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefilePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (253)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (254)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (255)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
          GGS_string var_cas_makefile64Path ;
          var_cas_makefile64Path = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile64")) ;
          if ((var_cas_makefile64Path.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (263))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefile64Path COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (264)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (266)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (268)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
          GGS_string var_cas_makefileMkePath ;
          var_cas_makefileMkePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile.mke")) ;
          if ((var_cas_makefileMkePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (274))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefileMkePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (275)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (276)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (277)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (279)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      _inLexique.printMessage (GGS_string (true, "Perform conversion...\n") COMMA_SOURCE_FILE_AT_LINE (286)) ;
      GGS_string var_cas_projectDir ;
      var_cas_projectDir = GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)) ;
      GGS_stringlist  var_cas_projectDirectories ;
      var_cas_projectDirectories = var_cas_projectDir.reader_directories (_inLexique, GGS_bool (true, false) COMMA_SOURCE_FILE_AT_LINE (288)) ;
      {
        GGS_stringlist::cEnumerator enumerator_12073 (var_cas_projectDirectories, true) ;
        const GGS_stringlist::cElement * operand_12073 = NULL ;
        while (((operand_12073 = enumerator_12073.nextObject ()))) {
          macroValidPointer (operand_12073) ;
          if ((((operand_12073->mValue)._operator_isNotEqual (GGS_string (true, "common_files_for_make")))._operator_and ((operand_12073->mValue)._operator_isNotEqual (GGS_string (true, "makefile_macosx_universal")))).isBuiltAndTrue ()) {
            GGS_string var_cas_fullDirPath ;
            var_cas_fullDirPath = (((var_cas_projectDir)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_12073->mValue))._operator_concat (GGS_string (true, "/")) ;
            GGS_string var_cas_makefilePath ;
            var_cas_makefilePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile")) ;
            if ((var_cas_makefilePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (294))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (295)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefilePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (296)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_12757 = var_cas_newContents ;
              if (_temp_12757._isBuilt ()) {
                _temp_12757 (HERE)->method_writeToFile (_inLexique, var_cas_makefilePath COMMA_SOURCE_FILE_AT_LINE (298)) ;
              }
            }
            GGS_string var_cas_makefile64Path ;
            var_cas_makefile64Path = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile64")) ;
            if ((var_cas_makefile64Path.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (302))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (303)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefile64Path COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (304)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_13327 = var_cas_newContents ;
              if (_temp_13327._isBuilt ()) {
                _temp_13327 (HERE)->method_writeToFile (_inLexique, var_cas_makefile64Path COMMA_SOURCE_FILE_AT_LINE (306)) ;
              }
            }
            GGS_string var_cas_makefileMkePath ;
            var_cas_makefileMkePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile.mke")) ;
            if ((var_cas_makefileMkePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (310))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (311)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefileMkePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (312)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_13907 = var_cas_newContents ;
              if (_temp_13907._isBuilt ()) {
                _temp_13907 (HERE)->method_writeToFile (_inLexique, var_cas_makefileMkePath COMMA_SOURCE_FILE_AT_LINE (314)) ;
              }
            }
          }
        }
      }
      GGS_string var_cas_oldDir ;
      var_cas_oldDir = var_cas_oldCommonFile.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (319)) ;
      _inLexique.printMessage (((GGS_string (true, "  Removing directory '"))._operator_concat (var_cas_oldDir))._operator_concat (GGS_string (true, "' and its contents...\n")) COMMA_SOURCE_FILE_AT_LINE (320)) ;
      GGS_string::class_method_removeDirectoryRecursively (_inLexique, var_cas_oldDir COMMA_SOURCE_FILE_AT_LINE (321)) ;
      _inLexique.printMessage (GGS_string (true, "**** Conversion done with success *****\n") COMMA_SOURCE_FILE_AT_LINE (322)) ;
    }else{
      _inLexique.printMessage (GGS_string (true, "****** No conversion performed ********\n") COMMA_SOURCE_FILE_AT_LINE (324)) ;
    }
  }
  if ((((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))._operator_and (GGS_bool (true, _inLexique.boolOptionValueFromKeys ("galgas_cli_options", "generate_xcode_project" COMMA_SOURCE_FILE_AT_LINE (328))))).isBuiltAndTrue ()) {
    GGS_string var_cas_XcodeProjectDir ;
    var_cas_XcodeProjectDir = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (329)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (329)))._operator_concat (GGS_string (true, "/project_xcode")) ;
    GGS_stringlist  var_cas_iconFiles ;
    var_cas_iconFiles = var_cas_XcodeProjectDir.reader_regularFilesWithExtensions (_inLexique, GGS_bool (true, false), GGS_stringlist ::constructor_listWithValue (GGS_string (true, "icns")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
    GGS_stringlist  var_cas_xcodeProjects ;
    var_cas_xcodeProjects = var_cas_XcodeProjectDir.reader_directoriesWithExtensions (_inLexique, GGS_bool (true, true), GGS_stringlist ::constructor_listWithValue (GGS_string (true, "xcodeproj")) COMMA_SOURCE_FILE_AT_LINE (332)) ;
    if (((var_cas_xcodeProjects.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (334)))._operator_isEqual (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
      GGS_string var_cas_name ;
      const GGS_stringlist  _temp_15028 = var_cas_xcodeProjects ;
      if (_temp_15028._isBuilt ()) {
        _temp_15028 (HERE)->method_first (_inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (335)) ;
      }
      GGS_string var_cas_fullXcodePath ;
      var_cas_fullXcodePath = (((var_cas_XcodeProjectDir)._operator_concat (GGS_string (true, "/")))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "/project.pbxproj")) ;
      GGS_stringset  var_cas_externSourceSet ;
      var_cas_externSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_guiSourceSet ;
      var_cas_guiSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_scannerSourceSet ;
      var_cas_scannerSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_optionSourceSet ;
      var_cas_optionSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_semanticsSourceSet ;
      var_cas_semanticsSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_syntaxSourceSet ;
      var_cas_syntaxSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_grammarSourceSet ;
      var_cas_grammarSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringset  var_cas_programSourceSet ;
      var_cas_programSourceSet = GGS_stringset ::constructor_emptySet () ;
      GGS_stringlist  var_cas_xcodeFiles ;
      var_cas_xcodeFiles = var_cas_targetFileListMap.reader_listForKey (_inLexique, GGS_string (true, "xcode") COMMA_SOURCE_FILE_AT_LINE (345)) ;
      {
        GGS_stringlist::cEnumerator enumerator_15590 (var_cas_xcodeFiles, true) ;
        const GGS_stringlist::cElement * operand_15590 = NULL ;
        while (((operand_15590 = enumerator_15590.nextObject ()))) {
          macroValidPointer (operand_15590) ;
          GGS_string var_cas_fullPath ;
          GGS_sourceFileKind var_cas_sourceKind ;
          const GGS_sourceFileMap  _temp_15690 = var_cas_sourceFileMap ;
          if (_temp_15690._isBuilt ()) {
            _temp_15690 (HERE)->method_searchKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, operand_15590->mValue, GGS_location (_inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (349)) ;
          }
          switch (var_cas_sourceKind.enumValue ()) {
          case GGS_sourceFileKind::enum_externSourceFile:
            {
            var_cas_externSourceSet._addAssign_operation (var_cas_fullPath) ;
            }
            break ;
          case GGS_sourceFileKind::enum_lexiqueSourceFile:
            {
            var_cas_scannerSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_guiSourceFile:
            {
            var_cas_guiSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_optionSourceFile:
            {
            var_cas_optionSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_syntaxSourceFile:
            {
            var_cas_syntaxSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_semanticsSourceFile:
            {
            var_cas_semanticsSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_grammarSourceFile:
            {
            var_cas_grammarSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::enum_programSourceFile:
            {
            var_cas_programSourceSet._addAssign_operation (operand_15590->mValue) ;
            }
            break ;
          case GGS_sourceFileKind::kNotBuilt:
            break ;
          }
        }
      }
      ::routine_generateXcodeProject (_inLexique,  var_cas_externSourceSet,  var_cas_guiSourceSet,  var_cas_scannerSourceSet,  var_cas_optionSourceSet,  var_cas_semanticsSourceSet,  var_cas_syntaxSourceSet,  var_cas_grammarSourceSet,  var_cas_programSourceSet,  var_cas_name.reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (378)),  var_cas_fullXcodePath.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)),  var_cas_iconFiles COMMA_SOURCE_FILE_AT_LINE (369)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_135_23_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  GGS_lstring  var_cas_fileName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (599)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (((GGS_string (true, "------ Compile file '"))._operator_concat (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (600))))._operator_concat (GGS_string (true, "'\n")) COMMA_SOURCE_FILE_AT_LINE (600)) ;
  }
  galgas_LL1_grammar::_performSourceFileParsing_compileFile (_inLexique,
                                  NULL,
                                  var_cas_fileName
                                  COMMA_SOURCE_FILE_AT_LINE (602)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_587_23_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'parse_lexique_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_646_34_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  galgas_LL1_grammar::_performSourceFileParsing_importLexique (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioLexiqueMapForUse
                                  COMMA_SOURCE_FILE_AT_LINE (650)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_646_34_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_syntax_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_661_33_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  galgas_LL1_grammar::_performSourceFileParsing_importSyntax (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSyntaxComponentsMap,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (666)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_661_33_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_grammar_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_678_44_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  galgas_LL1_grammar::_performSourceFileParsing_importGrammarForSemantics (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioGrammarComponentsMap,
                                  var_cas_ioOptionsComponentsMapForUse,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (684)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_678_44_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'parse_option_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_697_43_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {
  galgas_LL1_grammar::_performSourceFileParsing_importOptions (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioOptionsComponentsMap
                                  COMMA_SOURCE_FILE_AT_LINE (701)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_697_43_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*

