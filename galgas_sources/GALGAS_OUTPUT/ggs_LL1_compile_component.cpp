//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ggs_LL1_compile_component.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 9th, 2009, at 20h23'13"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ggs_LL1_compile_component.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ggs_LL1_compile_component.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of wrapper 'EXfileListTemplateFileWrapper'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/file_list_template.mke'

const char * gWrapperFileContent_0_EXfileListTemplateFileWrapper = // 1691 bytes
  "#---------------------------------------------------------------*\n"
  "\n"
  "#--- Lib PM directory\n"
  "ifdef LIBPM_PATH_ENV_VAR\n"
  "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
  "else\n"
  "  LIB_PM_PATH := ../../libpm\n"
  "endif\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Project source files directories                          *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
  "%HAND_CODED_SOURCES_SUB_DIRS%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Build Options                                             *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
  "\n"
  "C_COMPILER_OPTIONS += -fexceptions\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Source files names list (without their actual path)       *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES :=\n"
  "\n"
  "#--- Files from libpm --------------------\n"
  "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
  "\n"
  "#--- Hand-coded files ---------------------\n"
  "%HAND_CODED_SOURCE_LIST%\n"
  "\n"
  "#--- Files generated by GALGAS ------------\n"
  "%GALGAS_SOURCE_LIST%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
;

static const cRegularFileWrapper gWrapperFile_0_EXfileListTemplateFileWrapper = {
  "file_list_template.mke",
  "mke",
  gWrapperFileContent_0_EXfileListTemplateFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_EXfileListTemplateFileWrapper_0 [2] = {
  & gWrapperFile_0_EXfileListTemplateFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_EXfileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_EXfileListTemplateFileWrapper = {
  "",
  1,
  gWrapperAllFiles_EXfileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_EXfileListTemplateFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//'EXfileListTemplate' template of 'EXfileListTemplateFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_EXfileListTemplateFileWrapper_EXfileListTemplate (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS.isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------*\n"
    "\n"
    "#--- Lib PM directory\n"
    "ifdef LIBPM_PATH_ENV_VAR\n"
    "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
    "else\n"
    "  LIB_PM_PATH := ../../libpm\n"
    "endif\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Project source files directories                          *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n" ;
    result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Build Options                                             *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
    "\n"
    "C_COMPILER_OPTIONS += -fexceptions\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Source files names list (without their actual path)       *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES :=\n"
    "\n"
    "#--- Files from libpm --------------------\n"
    "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
    "\n"
    "#--- Hand-coded files ---------------------\n" ;
    result << var_cas_HAND_CODED_SOURCE_LIST ;
    result << "\n"
    "\n"
    "#--- Files generated by GALGAS ------------\n" ;
    result << var_cas_GALGAS_SOURCE_LIST ;
    result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*

GGS_EXtargetFileListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_stringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_EXtargetFileListMap::cElement::_clone (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_EXtargetFileListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_EXtargetFileListMap::cElement::
_description (C_Compiler & inLexique,
              const sint32 inIndentation
              COMMA_LOCATION_ARGS) const {
  const GGS_string s = mListObject.reader_description (inLexique COMMA_THERE, inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_EXtargetFileListMap GGS_EXtargetFileListMap::
constructor_emptyMap (void) {
  GGS_EXtargetFileListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_EXtargetFileListMap::
_typeNameForDescriptionReader (void) const {
  return "@EXtargetFileListMap" ;
}

//---------------------------------------------------------------------------*

GGS_EXtargetFileListMap GGS_EXtargetFileListMap::
operator_concat (const GGS_EXtargetFileListMap & inOperand) const {
  GGS_EXtargetFileListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_EXtargetFileListMap::
dotAssign_operation (const GGS_EXtargetFileListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const sint32 objectCount = dictPtr->count () ;
      for (sint32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * elementPtr = NULL ;
           macroMyNew (elementPtr, cElement (HERE)) ;
           nodePtr->mObject._setPointer (elementPtr) ;
        }
        GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_EXtargetFileListMap::
_addAssign_operation (const GGS_string & inKey,
                      const GGS_string& inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * elementPtr = NULL ;
       macroMyNew (elementPtr, cElement (HERE)) ;
       nodePtr->mObject._setPointer (elementPtr) ;
    }
    GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr._addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_EXtargetFileListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_stringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_EXtargetFileListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result._setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_EXtargetFileListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const sint32 objectCount = dictPtr->count () ;
    for (sint32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result._addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_EXtargetFileListMap::cEnumerator::
cEnumerator (const GGS_EXtargetFileListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_stringlist & GGS_EXtargetFileListMap::cEnumerator::
_object (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Class for 'EXsourceFileKind' Enumeration                  *
//                                                                           *
//---------------------------------------------------------------------------*

bool GGS_EXsourceFileKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_isEqual (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_isNotEqual (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_infOrEqual (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_supOrEqual (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_strictInf (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileKind::
operator_strictSup (const GGS_EXsourceFileKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_EXsourceFileKind::
reader_description (C_Compiler & /* inLexique */
                    COMMA_UNUSED_LOCATION_ARGS,
                    const sint32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @EXsourceFileKind" ;
  switch (mValue) {
  case enum_externSourceFile:
    s << " externSourceFile>" ;
    break ;
  case enum_grammarSourceFile:
    s << " grammarSourceFile>" ;
    break ;
  case enum_guiSourceFile:
    s << " guiSourceFile>" ;
    break ;
  case enum_lexiqueSourceFile:
    s << " lexiqueSourceFile>" ;
    break ;
  case enum_optionSourceFile:
    s << " optionSourceFile>" ;
    break ;
  case enum_programSourceFile:
    s << " programSourceFile>" ;
    break ;
  case enum_semanticsSourceFile:
    s << " semanticsSourceFile>" ;
    break ;
  case enum_syntaxSourceFile:
    s << " syntaxSourceFile>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_EXsourceFileMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_EXsourceFileMap::e_EXsourceFileMap (void) :
mFullPath (),
mSourceKind () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@EXsourceFileMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_EXsourceFileMap::
elementOf_GGS_EXsourceFileMap (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_EXsourceFileMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_EXsourceFileMap::
appendForMapDescription (C_Compiler & inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFullPath.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSourceKind.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_EXsourceFileMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_EXsourceFileMap * ptr = dynamic_cast <const elementOf_GGS_EXsourceFileMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFullPath.operator_isEqual (ptr->mInfo.mFullPath)).boolValue ()
           && (mInfo.mSourceKind.operator_isEqual (ptr->mInfo.mSourceKind)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_EXsourceFileMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_EXsourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_EXsourceFileMap * info = (e_EXsourceFileMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_EXsourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_EXsourceFileMap * info = (e_EXsourceFileMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_EXsourceFileMap GGS_EXsourceFileMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_EXsourceFileMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_EXsourceFileMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileMap::
operator_isEqual (const GGS_EXsourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_EXsourceFileMap::
operator_isNotEqual (const GGS_EXsourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_string& inParameter0,
                const GGS_EXsourceFileKind& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_EXsourceFileMap info  ;
    info.mFullPath = inParameter0 ;
    info.mSourceKind = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_EXsourceFileKind  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mFullPath ;
    outParameter1 = node->mInfo.mSourceKind ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_EXsourceFileMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_EXsourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_EXsourceFileMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_EXsourceFileMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_EXsourceFileKind& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_EXsourceFileMap GGS_EXsourceFileMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_EXsourceFileMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_EXsourceFileMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_EXsourceFileMap GGS_EXsourceFileMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_EXsourceFileMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_EXsourceFileMap::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @EXsourceFileMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_EXsourceFileMap::cEnumerator::_mFullPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFullPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_EXsourceFileKind & GGS_EXsourceFileMap::cEnumerator::_mSourceKind (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSourceKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  GGS_lstring  var_cas_sourceFileName ;
  inLexique._assignFromAttribute_tokenString (var_cas_sourceFileName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_s ;
  var_cas_s = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (147)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (147)) ;
  if (((var_cas_s).operator_isNotEqual (var_cas_sourceFileName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (148)))).isBuiltAndTrue ()) {
    var_cas_sourceFileName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the project name ('")).operator_concat (var_cas_sourceFileName)).operator_concat (GGS_string ("') should be the file base name '"))).operator_concat (var_cas_s)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_EXsourceFileMap  var_cas_sourceFileMap ;
  var_cas_sourceFileMap = GGS_EXsourceFileMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_EXtargetFileListMap var_cas_targetFileListMap ;
  var_cas_targetFileListMap = GGS_EXtargetFileListMap::constructor_emptyMap () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          GGS_EXsourceFileKind var_cas_sourceFileKind ;
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_guiSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_lexiqueSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_optionSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_semanticsSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_syntaxSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_grammarSourceFile (inLexique COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              var_cas_sourceFileKind = GGS_EXsourceFileKind::constructor_programSourceFile (inLexique COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_fileName ;
          inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          GGS_string var_cas_baseName ;
          var_cas_baseName = var_cas_fileName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (184)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (184)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
          var_cas_sourceFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_baseName, var_cas_fileName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_HERE), var_cas_fileName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186)), var_cas_sourceFileKind COMMA_SOURCE_FILE_AT_LINE (186)) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    GGS_lstring  var_cas_targetName ;
                    inLexique._assignFromAttribute_tokenString (var_cas_targetName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    var_cas_targetFileListMap._addAssign_operation (var_cas_targetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (193)), var_cas_baseName) ;
                    if (((var_cas_targetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))).operator_isEqual (GGS_string ("xcode"))).isBuiltAndTrue ()) {
                      var_cas_targetName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target \"xcode\" name is obsolete: use \"xcode_tool\" and/or \"xcode_app\"") COMMA_SOURCE_FILE_AT_LINE (196)) ;
                    }else if (((((var_cas_targetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196))).operator_isNotEqual (GGS_string ("makefile"))).operator_and ((var_cas_targetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196))).operator_isNotEqual (GGS_string ("xcode_tool")))).operator_and ((var_cas_targetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196))).operator_isNotEqual (GGS_string ("xcode_app")))).isBuiltAndTrue ()) {
                      var_cas_targetName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"") COMMA_SOURCE_FILE_AT_LINE (198)) ;
                    }
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          if (((GGS_bool (inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (203)))).operator_and ((var_cas_sourceFileKind).operator_isNotEqual (GGS_EXsourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE)))).isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("------ Compile file '")).operator_concat (var_cas_fileName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204)))).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (204)) ;
          }
          if ((((var_cas_sourceFileKind).operator_isEqual (GGS_EXsourceFileKind::constructor_optionSourceFile (inLexique COMMA_HERE))).operator_and ((var_cas_fileName.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (GGS_string ("gOption")))).isBuiltAndTrue ()) {
            GGS_string var_cas_s ;
            var_cas_s = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).operator_concat (GGS_string ("/GALGAS_OUTPUT")) ;
            ::routine_compileOptionComponent (inLexique,  var_cas_fileName,  var_cas_s COMMA_SOURCE_FILE_AT_LINE (209)) ;
          }else if (((var_cas_sourceFileKind).operator_isNotEqual (GGS_EXsourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            const GGS_string _depExtension = GGS_string ("galgas-dep") ;
            const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              galgas_LL1_grammar::_performSourceFileParsing_compileFile (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_fileName
                                            COMMA_SOURCE_FILE_AT_LINE (211)) ;
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (218)))).isBuiltAndTrue ()) {
    inLexique.printMessage (GGS_string ("------ Project\n") COMMA_SOURCE_FILE_AT_LINE (219)) ;
  }
  GGS_stringlist  var_cas_makefileFiles ;
  var_cas_makefileFiles = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("makefile") COMMA_SOURCE_FILE_AT_LINE (222)) ;
  if (((var_cas_makefileFiles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (223))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_externSourceFileList ;
    var_cas_externSourceFileList = GGS_string ("") ;
    GGS_string var_cas_galgasSourceList ;
    var_cas_galgasSourceList = GGS_string ("") ;
    GGS_stringset  var_cas_pathSet ;
    var_cas_pathSet = GGS_stringset ::constructor_emptySet () ;
    var_cas_pathSet._addAssign_operation (GGS_string ("SOURCES_DIR += ../hand_coded_sources\n")) ;
    {
      GGS_stringlist::cEnumerator enumerator_9350 (var_cas_makefileFiles, true) ;
      const GGS_stringlist::cElement * operand_9350 = NULL ;
      while (((operand_9350 = enumerator_9350.nextObject ()))) {
        macroValidPointer (operand_9350) ;
        GGS_string var_cas_fullPath ;
        GGS_EXsourceFileKind var_cas_sourceKind ;
        const GGS_EXsourceFileMap  _temp_9446 = var_cas_sourceFileMap ;
        if (_temp_9446.isBuilt ()) {
          _temp_9446 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_9350->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (231)) ;
        }
        GGS_string var_cas_filePath ;
        var_cas_filePath = var_cas_fullPath.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (232)) ;
        if (((var_cas_sourceKind).operator_isEqual (GGS_EXsourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
          if (((var_cas_filePath.reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (234))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
            var_cas_pathSet._addAssign_operation (((GGS_string ("SOURCES_DIR += ")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
          }else if (((var_cas_filePath).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_pathSet._addAssign_operation (((GGS_string ("SOURCES_DIR += ../hand_coded_sources/")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
          }
          var_cas_externSourceFileList.appendCString ("SOURCES += ") ;
          var_cas_externSourceFileList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (239))) ;
          var_cas_externSourceFileList.appendCString ("\n") ;
        }else{
          var_cas_galgasSourceList.appendCString ("SOURCES += ") ;
          var_cas_galgasSourceList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (241)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (241))) ;
          var_cas_galgasSourceList.appendCString (".cpp\n") ;
        }
      }
    }
    GGS_string var_cas_pathesString ;
    var_cas_pathesString = GGS_string ("") ;
    {
      GGS_stringset::cEnumerator enumerator_10187 (var_cas_pathSet, true) ;
      while (enumerator_10187.hc ()) {
        var_cas_pathesString.dotAssign_operation (enumerator_10187._key (HERE)) ;
        enumerator_10187.next () ;
      }
    }
    GGS_string var_cas_newFileListContents ;
    var_cas_newFileListContents = template_filewrapper_EXfileListTemplateFileWrapper_EXfileListTemplate (inLexique, var_cas_pathesString, var_cas_galgasSourceList, var_cas_externSourceFileList) ;
    GGS_string var_cas_fileListPath ;
    var_cas_fileListPath = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (253))).operator_concat (GGS_string ("/GALGAS_OUTPUT/file_list.mke")) ;
    GGS_bool automatic_var_0 ;
    const GGS_string _temp_10605 = var_cas_newFileListContents ;
    if (_temp_10605.isBuilt ()) {
      _temp_10605 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_fileListPath, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
  }
  if (((GGS_bool (inLexique.boolOptionValueFromKeys ("galgas_cli_options", "doNotGenerateXcodeProject" COMMA_SOURCE_FILE_AT_LINE (344)))).operator_not ()).isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_xcode_tool_files ;
    var_cas_xcode_tool_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_tool") COMMA_SOURCE_FILE_AT_LINE (345)) ;
    GGS_stringlist  var_cas_xcode_app_files ;
    var_cas_xcode_app_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_app") COMMA_SOURCE_FILE_AT_LINE (346)) ;
    if (((((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_xcode_tool_files.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (347))).operator_strictSup (GGS_uint (0U)))).operator_and ((var_cas_xcode_app_files.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (347))).operator_strictSup (GGS_uint (0U)))).isBuiltAndTrue ()) {
      GGS_string var_cas_XcodeProjectDir ;
      var_cas_XcodeProjectDir = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (348)).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (348))).operator_concat (GGS_string ("/project_xcode")) ;
      GGS_stringlist  var_cas_iconFiles ;
      var_cas_iconFiles = var_cas_XcodeProjectDir.reader_regularFilesWithExtensions (inLexique, GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("icns")) COMMA_SOURCE_FILE_AT_LINE (350)) ;
      GGS_stringlist  var_cas_xcodeProjects ;
      var_cas_xcodeProjects = var_cas_XcodeProjectDir.reader_directoriesWithExtensions (inLexique, GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("xcodeproj")) COMMA_SOURCE_FILE_AT_LINE (351)) ;
      if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (353))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
      }else if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, more than one project exist in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (356)) ;
      }else if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (357))).operator_isEqual (GGS_uint (1U))).isBuiltAndTrue ()) {
        GGS_string var_cas_name ;
        const GGS_stringlist  _temp_16996 = var_cas_xcodeProjects ;
        if (_temp_16996.isBuilt ()) {
          _temp_16996 (HERE)->method_first (inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (358)) ;
        }
        GGS_string var_cas_fullXcodePath ;
        var_cas_fullXcodePath = (((var_cas_XcodeProjectDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_name)).operator_concat (GGS_string ("/project.pbxproj")) ;
        GGS_string var_cas_intermediateFilePath ;
        var_cas_intermediateFilePath = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (361))).operator_concat (GGS_string ("/GALGAS_OUTPUT/file_list_for_xcode_project.txt")) ;
        GGS_stringset  var_cas_externSourceSet_tool ;
        var_cas_externSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_guiSourceSet_tool ;
        var_cas_guiSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_scannerSourceSet_tool ;
        var_cas_scannerSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_optionSourceSet_tool ;
        var_cas_optionSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_semanticsSourceSet_tool ;
        var_cas_semanticsSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_syntaxSourceSet_tool ;
        var_cas_syntaxSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_grammarSourceSet_tool ;
        var_cas_grammarSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_programSourceSet_tool ;
        var_cas_programSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_stringlist::cEnumerator enumerator_17722 (var_cas_xcode_tool_files, true) ;
          const GGS_stringlist::cElement * operand_17722 = NULL ;
          while (((operand_17722 = enumerator_17722.nextObject ()))) {
            macroValidPointer (operand_17722) ;
            GGS_string var_cas_fullPath ;
            GGS_EXsourceFileKind var_cas_sourceKind ;
            const GGS_EXsourceFileMap  _temp_17824 = var_cas_sourceFileMap ;
            if (_temp_17824.isBuilt ()) {
              _temp_17824 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_17722->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (373)) ;
            }
            switch (var_cas_sourceKind.enumValue ()) {
            case GGS_EXsourceFileKind::enum_externSourceFile:
              {
              var_cas_externSourceSet_tool._addAssign_operation (var_cas_fullPath) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_lexiqueSourceFile:
              {
              var_cas_scannerSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_guiSourceFile:
              {
              var_cas_guiSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_optionSourceFile:
              {
              var_cas_optionSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_syntaxSourceFile:
              {
              var_cas_syntaxSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_semanticsSourceFile:
              {
              var_cas_semanticsSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_grammarSourceFile:
              {
              var_cas_grammarSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_programSourceFile:
              {
              var_cas_programSourceSet_tool._addAssign_operation (operand_17722->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::kNotBuilt:
              break ;
            }
          }
        }
        GGS_stringset  var_cas_externSourceSet_app ;
        var_cas_externSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_guiSourceSet_app ;
        var_cas_guiSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_scannerSourceSet_app ;
        var_cas_scannerSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_optionSourceSet_app ;
        var_cas_optionSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_semanticsSourceSet_app ;
        var_cas_semanticsSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_syntaxSourceSet_app ;
        var_cas_syntaxSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_grammarSourceSet_app ;
        var_cas_grammarSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        GGS_stringset  var_cas_programSourceSet_app ;
        var_cas_programSourceSet_app = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_stringlist::cEnumerator enumerator_18996 (var_cas_xcode_app_files, true) ;
          const GGS_stringlist::cElement * operand_18996 = NULL ;
          while (((operand_18996 = enumerator_18996.nextObject ()))) {
            macroValidPointer (operand_18996) ;
            GGS_string var_cas_fullPath ;
            GGS_EXsourceFileKind var_cas_sourceKind ;
            const GGS_EXsourceFileMap  _temp_19098 = var_cas_sourceFileMap ;
            if (_temp_19098.isBuilt ()) {
              _temp_19098 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_18996->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (404)) ;
            }
            switch (var_cas_sourceKind.enumValue ()) {
            case GGS_EXsourceFileKind::enum_externSourceFile:
              {
              var_cas_externSourceSet_app._addAssign_operation (var_cas_fullPath) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_lexiqueSourceFile:
              {
              var_cas_scannerSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_guiSourceFile:
              {
              var_cas_guiSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_optionSourceFile:
              {
              var_cas_optionSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_syntaxSourceFile:
              {
              var_cas_syntaxSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_semanticsSourceFile:
              {
              var_cas_semanticsSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_grammarSourceFile:
              {
              var_cas_grammarSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::enum_programSourceFile:
              {
              var_cas_programSourceSet_app._addAssign_operation (operand_18996->mValue) ;
              }
              break ;
            case GGS_EXsourceFileKind::kNotBuilt:
              break ;
            }
          }
        }
        ::routine_generateXcodeProject (inLexique,  var_cas_externSourceSet_tool,  var_cas_guiSourceSet_tool,  var_cas_scannerSourceSet_tool,  var_cas_optionSourceSet_tool,  var_cas_semanticsSourceSet_tool,  var_cas_syntaxSourceSet_tool,  var_cas_grammarSourceSet_tool,  var_cas_programSourceSet_tool,  var_cas_externSourceSet_app,  var_cas_guiSourceSet_app,  var_cas_scannerSourceSet_app,  var_cas_optionSourceSet_app,  var_cas_semanticsSourceSet_app,  var_cas_syntaxSourceSet_app,  var_cas_grammarSourceSet_app,  var_cas_programSourceSet_app,  var_cas_name.reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (442)),  var_cas_fullXcodePath.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (443)),  var_cas_iconFiles,  var_cas_intermediateFilePath COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_137_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (inLexique)) {
        case 2 : {
          switch (select_ggs_LL1_compile_component_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 7 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 8 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_program) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          switch (select_ggs_LL1_compile_component_2 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
              { bool syntaxRepeat_3 = true ;
                while (syntaxRepeat_3) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_ggs_LL1_compile_component_3 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_3 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  GGS_lstring  var_cas_fileName ;
  inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (675)))).isBuiltAndTrue ()) {
    inLexique.printMessage (((GGS_string ("------ Compile file '")).operator_concat (var_cas_fileName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676)))).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (676)) ;
  }
  const GGS_string _depExtension = GGS_string ("galgas-dep") ;
  const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_compileFile (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_fileName
                                  COMMA_SOURCE_FILE_AT_LINE (678)) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_663_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'parse_lexique_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_722_34_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importLexique (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioLexiqueMapForUse
                                  COMMA_SOURCE_FILE_AT_LINE (726)) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_722_34_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_syntax_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_737_33_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importSyntax (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSyntaxComponentsMap,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (742)) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_737_33_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_grammar_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_754_44_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importGrammarForSemantics (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioGrammarComponentsMap,
                                  var_cas_ioOptionsComponentsMapForUse,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (760)) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_754_44_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'parse_option_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_773_43_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importOptions (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioOptionsComponentsMap
                                  COMMA_SOURCE_FILE_AT_LINE (777)) ;
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_773_43_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*

