//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'ggs_LL1_compile_component.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     august 24th, 2008, at 19h16'14"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "ggs_LL1_compile_component.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "ggs_LL1_compile_component.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'fileListTemplateFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/file_list_template.mke'

const char * gWrapperFileContent_0_fileListTemplateFileWrapper = // 1753 bytes
  "#---------------------------------------------------------------*\n"
  "\n"
  "#--- Lib PM directory\n"
  "ifdef LIBPM_PATH_ENV_VAR\n"
  "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
  "else\n"
  "  LIB_PM_PATH := ../../libpm\n"
  "endif\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Project source files directories                          *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
  "%HAND_CODED_SOURCES_SUB_DIRS%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Build Options                                             *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
  "\n"
  "C_COMPILER_OPTIONS += -fexceptions\n"
  "\n"
  "#---------------------------------------------------------------*\n"
  "#                                                               *\n"
  "#     Source files names list (without their actual path)       *\n"
  "#                                                               *\n"
  "#---------------------------------------------------------------*\n"
  "\n"
  "SOURCES :=\n"
  "\n"
  "#--- Files from libpm --------------------\n"
  "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
  "\n"
  "#--- Hand-coded files ---------------------\n"
  "%HAND_CODED_SOURCE_LIST%\n"
  "\n"
  "#--- Files generated by GALGAS ------------\n"
  "%GALGAS_SOURCE_LIST%\n"
  "\n"
  "#--- Extern files ---------------------\n"
  "%EXTERN_SOURCE_LIST%\n"
  "\n"
  "#---------------------------------------------------------------*\n"
;

static const cRegularFileWrapper gWrapperFile_0_fileListTemplateFileWrapper = {
  "file_list_template.mke",
  "mke",
  gWrapperFileContent_0_fileListTemplateFileWrapper
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_fileListTemplateFileWrapper_0 [2] = {
  & gWrapperFile_0_fileListTemplateFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_fileListTemplateFileWrapper = {
  "",
  1,
  gWrapperAllFiles_fileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_fileListTemplateFileWrapper_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST,
                                const GGS_string& var_cas_EXTERN_SOURCE_LIST) {
  C_String _result ;
  const bool _isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS._isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST._isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST._isBuilt ()
    && var_cas_EXTERN_SOURCE_LIST._isBuilt () ;
  if (_isBuilt) {
    _result << "#---------------------------------------------------------------*\n"
    "\n"
    "#--- Lib PM directory\n"
    "ifdef LIBPM_PATH_ENV_VAR\n"
    "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
    "else\n"
    "  LIB_PM_PATH := ../../libpm\n"
    "endif\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Project source files directories                          *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n" ;
    _result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Build Options                                             *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "include $(LIB_PM_PATH)/included_makefiles/default_build_options.mke\n"
    "\n"
    "C_COMPILER_OPTIONS += -fexceptions\n"
    "\n"
    "#---------------------------------------------------------------*\n"
    "#                                                               *\n"
    "#     Source files names list (without their actual path)       *\n"
    "#                                                               *\n"
    "#---------------------------------------------------------------*\n"
    "\n"
    "SOURCES :=\n"
    "\n"
    "#--- Files from libpm --------------------\n"
    "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
    "\n"
    "#--- Hand-coded files ---------------------\n" ;
    _result << var_cas_HAND_CODED_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#--- Files generated by GALGAS ------------\n" ;
    _result << var_cas_GALGAS_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#--- Extern files ---------------------\n" ;
    _result << var_cas_EXTERN_SOURCE_LIST ;
    _result << "\n"
    "\n"
    "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (_isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  GGS_string var_cas_galgasSourceList ;
  var_cas_galgasSourceList = GGS_string (true, "") ;
  GGS_stringset  var_cas_galgasSourceSet ;
  var_cas_galgasSourceSet = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_externSourceSet ;
  var_cas_externSourceSet = GGS_stringset ::constructor_emptySet () ;
  GGS_string var_cas_externSourceList ;
  var_cas_externSourceList = GGS_string (true, "") ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          GGS_lstring  var_cas_inExternSourceName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_inExternSourceName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          if ((var_cas_externSourceSet.reader_hasKey (_inLexique, var_cas_inExternSourceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (124)) COMMA_SOURCE_FILE_AT_LINE (124))).isBuiltAndTrue ()) {
            var_cas_inExternSourceName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (var_cas_inExternSourceName))._operator_concat (GGS_string (true, "' is already declared as extern")) COMMA_SOURCE_FILE_AT_LINE (126)) ;
          }
          var_cas_externSourceSet._addAssign_operation (var_cas_inExternSourceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
          var_cas_externSourceList.writeString ("SOURCES += ") ;
          var_cas_externSourceList._dotAssign_operation (var_cas_inExternSourceName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
          var_cas_externSourceList.writeString ("\n") ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          GGS_lstring  var_cas_fileName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          if ((var_cas_galgasSourceSet.reader_hasKey (_inLexique, var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)) COMMA_SOURCE_FILE_AT_LINE (133))).isBuiltAndTrue ()) {
            var_cas_fileName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (var_cas_fileName))._operator_concat (GGS_string (true, "' is already declared as compiled")) COMMA_SOURCE_FILE_AT_LINE (135)) ;
          }
          var_cas_galgasSourceSet._addAssign_operation (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
          if (((var_cas_fileName.ggs_string ().reader_pathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)))._operator_isNotEqual (GGS_string (true, "gGui"))).isBuiltAndTrue ()) {
            var_cas_galgasSourceList.writeString ("SOURCES += ") ;
            var_cas_galgasSourceList._dotAssign_operation (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (138))) ;
            var_cas_galgasSourceList.writeString (".cpp\n") ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (141)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "------ Compile file '"))._operator_concat (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (142))))._operator_concat (GGS_string (true, "'\n")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
          }
          galgas_LL1_grammar::_performSourceFileParsing_compileFile (_inLexique,
                                          NULL,
                                          var_cas_fileName
                                          COMMA_SOURCE_FILE_AT_LINE (144)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (149)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (GGS_string (true, "------ Project\n") COMMA_SOURCE_FILE_AT_LINE (150)) ;
  }
  GGS_string var_cas_handCodedFilesDir ;
  var_cas_handCodedFilesDir = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (153)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (153)))._operator_concat (GGS_string (true, "/hand_coded_sources")) ;
  GGS_string var_cas_externSourceFileList ;
  var_cas_externSourceFileList = GGS_string (true, "") ;
  GGS_stringset  var_cas_handCodedSourcesSubPathSet ;
  var_cas_handCodedSourcesSubPathSet = GGS_stringset ::constructor_emptySet () ;
  if ((var_cas_handCodedFilesDir.reader_directoryExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (156))).isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_extensionList ;
    var_cas_extensionList = GGS_stringlist ::constructor_emptyList () ;
    var_cas_extensionList._addAssign_operation (GGS_string (true, "c")) ;
    var_cas_extensionList._addAssign_operation (GGS_string (true, "cpp")) ;
    var_cas_extensionList._addAssign_operation (GGS_string (true, "m")) ;
    var_cas_extensionList._addAssign_operation (GGS_string (true, "mm")) ;
    GGS_stringlist  var_cas_actualHandCodedFileList ;
    var_cas_actualHandCodedFileList = var_cas_handCodedFilesDir.reader_regularFilesWithExtensions (_inLexique, GGS_bool (true, true), var_cas_extensionList COMMA_SOURCE_FILE_AT_LINE (162)) ;
    {
      GGS_stringlist::cEnumerator enumerator_6959 (var_cas_actualHandCodedFileList, true) ;
      const GGS_stringlist::cElement * operand_6959 = NULL ;
      while (((operand_6959 = enumerator_6959.nextObject ()))) {
        macroValidPointer (operand_6959) ;
        var_cas_externSourceFileList.writeString ("SOURCES += ") ;
        var_cas_externSourceFileList._dotAssign_operation (operand_6959->mValue.reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (164))) ;
        var_cas_externSourceFileList.writeString ("\n") ;
        GGS_string var_cas_path ;
        var_cas_path = operand_6959->mValue.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)) ;
        if (((var_cas_path.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (166)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          var_cas_handCodedSourcesSubPathSet._addAssign_operation (GGS_string (true, "")) ;
        }else{
          var_cas_handCodedSourcesSubPathSet._addAssign_operation ((GGS_string (true, "/"))._operator_concat (var_cas_path)) ;
        }
      }
    }
  }
  GGS_string var_cas_handCodedSubPathesString ;
  var_cas_handCodedSubPathesString = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_7429 (var_cas_handCodedSourcesSubPathSet, true) ;
    while (enumerator_7429.hc ()) {
      var_cas_handCodedSubPathesString.writeString ("SOURCES_DIR += ../hand_coded_sources") ;
      var_cas_handCodedSubPathesString._dotAssign_operation (enumerator_7429._key (HERE)) ;
      var_cas_handCodedSubPathesString.writeString ("\n") ;
      enumerator_7429.next () ;
    }
  }
  GGS_string var_cas_newFileListContents ;
  var_cas_newFileListContents = _template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (var_cas_handCodedSubPathesString, var_cas_galgasSourceList, var_cas_externSourceFileList, var_cas_externSourceList) ;
  GGS_string var_cas_fileListPath ;
  var_cas_fileListPath = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)))._operator_concat (GGS_string (true, "/GALGAS_OUTPUT/file_list.mke")) ;
  const GGS_string _temp_7919 = var_cas_newFileListContents ;
  if (_temp_7919._isBuilt ()) {
    _temp_7919 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_fileListPath COMMA_SOURCE_FILE_AT_LINE (185)) ;
  }
  GGS_string var_cas_oldCommonFile ;
  var_cas_oldCommonFile = (GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)))._operator_concat (GGS_string (true, "/common_files_for_make/makefile.mke")) ;
  if (((var_cas_oldCommonFile.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)))._operator_and ((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (GGS_string (true, "**** Converting old-style makefile ****\n") COMMA_SOURCE_FILE_AT_LINE (189)) ;
    GGS_string var_cas_projectDir ;
    var_cas_projectDir = GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
    GGS_stringlist  var_cas_projectDirectories ;
    var_cas_projectDirectories = var_cas_projectDir.reader_directories (_inLexique, GGS_bool (true, false) COMMA_SOURCE_FILE_AT_LINE (191)) ;
    GGS_bool var_cas_ok ;
    var_cas_ok = GGS_bool (true, true) ;
    {
      GGS_stringlist::cEnumerator enumerator_8520 (var_cas_projectDirectories, true) ;
      const GGS_stringlist::cElement * operand_8520 = NULL ;
      while (((operand_8520 = enumerator_8520.nextObject ()))) {
        macroValidPointer (operand_8520) ;
        if ((((operand_8520->mValue)._operator_isNotEqual (GGS_string (true, "common_files_for_make")))._operator_and ((operand_8520->mValue)._operator_isNotEqual (GGS_string (true, "makefile_macosx_universal")))).isBuiltAndTrue ()) {
          GGS_string var_cas_fullDirPath ;
          var_cas_fullDirPath = (((var_cas_projectDir)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_8520->mValue))._operator_concat (GGS_string (true, "/")) ;
          GGS_string var_cas_makefilePath ;
          var_cas_makefilePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile")) ;
          if ((var_cas_makefilePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (198))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefilePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (199)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
          GGS_string var_cas_makefile64Path ;
          var_cas_makefile64Path = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile64")) ;
          if ((var_cas_makefile64Path.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (209))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefile64Path COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (210)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (212)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (214)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
          GGS_string var_cas_makefileMkePath ;
          var_cas_makefileMkePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile.mke")) ;
          if ((var_cas_makefileMkePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))).isBuiltAndTrue ()) {
            GGS_stringlist  var_cas_c ;
            var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefileMkePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (221)) ;
            if (((var_cas_c.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (222)))._operator_isEqual (GGS_uint (true, 2U))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  ok: '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "' can be converted\n")) COMMA_SOURCE_FILE_AT_LINE (223)) ;
            }else{
              _inLexique.printMessage (((GGS_string (true, "  error: '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "' cannot be converted\n")) COMMA_SOURCE_FILE_AT_LINE (225)) ;
              var_cas_ok = GGS_bool (true, false) ;
            }
          }
        }
      }
    }
    if ((var_cas_ok).isBuiltAndTrue ()) {
      _inLexique.printMessage (GGS_string (true, "Perform conversion...\n") COMMA_SOURCE_FILE_AT_LINE (232)) ;
      GGS_string var_cas_projectDir ;
      var_cas_projectDir = GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
      GGS_stringlist  var_cas_projectDirectories ;
      var_cas_projectDirectories = var_cas_projectDir.reader_directories (_inLexique, GGS_bool (true, false) COMMA_SOURCE_FILE_AT_LINE (234)) ;
      {
        GGS_stringlist::cEnumerator enumerator_10670 (var_cas_projectDirectories, true) ;
        const GGS_stringlist::cElement * operand_10670 = NULL ;
        while (((operand_10670 = enumerator_10670.nextObject ()))) {
          macroValidPointer (operand_10670) ;
          if ((((operand_10670->mValue)._operator_isNotEqual (GGS_string (true, "common_files_for_make")))._operator_and ((operand_10670->mValue)._operator_isNotEqual (GGS_string (true, "makefile_macosx_universal")))).isBuiltAndTrue ()) {
            GGS_string var_cas_fullDirPath ;
            var_cas_fullDirPath = (((var_cas_projectDir)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_10670->mValue))._operator_concat (GGS_string (true, "/")) ;
            GGS_string var_cas_makefilePath ;
            var_cas_makefilePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile")) ;
            if ((var_cas_makefilePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (240))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefilePath))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (241)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefilePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (242)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_11354 = var_cas_newContents ;
              if (_temp_11354._isBuilt ()) {
                _temp_11354 (HERE)->method_writeToFile (_inLexique, var_cas_makefilePath COMMA_SOURCE_FILE_AT_LINE (244)) ;
              }
            }
            GGS_string var_cas_makefile64Path ;
            var_cas_makefile64Path = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile64")) ;
            if ((var_cas_makefile64Path.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (248))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefile64Path))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (249)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefile64Path COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (250)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_11924 = var_cas_newContents ;
              if (_temp_11924._isBuilt ()) {
                _temp_11924 (HERE)->method_writeToFile (_inLexique, var_cas_makefile64Path COMMA_SOURCE_FILE_AT_LINE (252)) ;
              }
            }
            GGS_string var_cas_makefileMkePath ;
            var_cas_makefileMkePath = (var_cas_fullDirPath)._operator_concat (GGS_string (true, "makefile.mke")) ;
            if ((var_cas_makefileMkePath.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "  converting '"))._operator_concat (var_cas_makefileMkePath))._operator_concat (GGS_string (true, "'...\n")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
              GGS_stringlist  var_cas_c ;
              var_cas_c = GGS_string::constructor_stringWithContentsOfFile (_inLexique, var_cas_makefileMkePath COMMA_HERE).reader_componentsSeparatedByString (_inLexique, GGS_string (true, "include ../common_files_for_make/makefile.mke") COMMA_SOURCE_FILE_AT_LINE (258)) ;
              GGS_string var_cas_newContents ;
              var_cas_newContents = GGS_string::constructor_componentsJoinedByString (_inLexique, var_cas_c, GGS_string (true, "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke") COMMA_HERE) ;
              const GGS_string _temp_12504 = var_cas_newContents ;
              if (_temp_12504._isBuilt ()) {
                _temp_12504 (HERE)->method_writeToFile (_inLexique, var_cas_makefileMkePath COMMA_SOURCE_FILE_AT_LINE (260)) ;
              }
            }
          }
        }
      }
      GGS_string var_cas_oldDir ;
      var_cas_oldDir = var_cas_oldCommonFile.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)) ;
      _inLexique.printMessage (((GGS_string (true, "  Removing directory '"))._operator_concat (var_cas_oldDir))._operator_concat (GGS_string (true, "' and its contents...\n")) COMMA_SOURCE_FILE_AT_LINE (266)) ;
      GGS_string::class_method_removeDirectoryRecursively (_inLexique, var_cas_oldDir COMMA_SOURCE_FILE_AT_LINE (267)) ;
      _inLexique.printMessage (GGS_string (true, "**** Conversion done with success *****\n") COMMA_SOURCE_FILE_AT_LINE (268)) ;
    }else{
      _inLexique.printMessage (GGS_string (true, "****** No conversion performed ********\n") COMMA_SOURCE_FILE_AT_LINE (270)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_107_23_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_ggs_LL1_compile_component_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_project) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  GGS_lstring  var_cas_fileName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (383)))).isBuiltAndTrue ()) {
    _inLexique.printMessage (((GGS_string (true, "------ Compile file '"))._operator_concat (var_cas_fileName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (384))))._operator_concat (GGS_string (true, "'\n")) COMMA_SOURCE_FILE_AT_LINE (384)) ;
  }
  galgas_LL1_grammar::_performSourceFileParsing_compileFile (_inLexique,
                                  NULL,
                                  var_cas_fileName
                                  COMMA_SOURCE_FILE_AT_LINE (386)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_galgas_component_ggs_LL1_compile_component_371_23_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_compile) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'parse_lexique_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_430_34_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  galgas_LL1_grammar::_performSourceFileParsing_importLexique (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioLexiqueMapForUse
                                  COMMA_SOURCE_FILE_AT_LINE (434)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_lexique_for_importing_ggs_LL1_compile_component_430_34_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'parse_syntax_for_importing'       *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_445_33_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  galgas_LL1_grammar::_performSourceFileParsing_importSyntax (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSyntaxComponentsMap,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (450)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_syntax_for_importing_ggs_LL1_compile_component_445_33_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'parse_grammar_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_462_44_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  galgas_LL1_grammar::_performSourceFileParsing_importGrammarForSemantics (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioGrammarComponentsMap,
                                  var_cas_ioOptionsComponentsMapForUse,
                                  var_cas_ioSemanticContext
                                  COMMA_SOURCE_FILE_AT_LINE (468)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_462_44_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'parse_option_component_for_importing'  *
//                                                                           *
//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_481_43_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inFileName,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {
  galgas_LL1_grammar::_performSourceFileParsing_importOptions (_inLexique,
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioOptionsComponentsMap
                                  COMMA_SOURCE_FILE_AT_LINE (485)) ;
}

//---------------------------------------------------------------------------*

void ggs_LL1_compile_component::
pr_parse_option_component_for_importing_ggs_LL1_compile_component_481_43_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*

