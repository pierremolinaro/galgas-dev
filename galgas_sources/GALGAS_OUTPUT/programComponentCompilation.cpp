//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'programComponentCompilation.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 29th, 2010, at 16h34'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "programComponentCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "programComponentCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "programSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of wrapper 'programFileGenerationTemplate'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_programFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_programFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_programFileGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_programFileGenerationTemplate_0,
  0,
  gWrapperAllDirectories_programFileGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'programFileHeader' template of 'programFileGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_programFileGenerationTemplate_programFileHeader (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_stringlist & var_cas_IMPORTED_COMPONENT_LIST,
                                const GGS_lstringlist & var_cas_TYPE_PREDECLARATION_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_IMPORTED_COMPONENT_LIST.isBuilt ()
    && var_cas_TYPE_PREDECLARATION_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "#define " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/predefined-types.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringlist::cEnumerator enumerator_321 (var_cas_IMPORTED_COMPONENT_LIST, true) ;
    const GGS_stringlist::cElement * operand_321 = NULL ;
    while (((operand_321 = enumerator_321.nextObject ()))) {
      macroValidPointer (operand_321) ;
      result << "#include \"" ;
      result << operand_321->mValue ;
      result << ".h\"\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_485 (var_cas_TYPE_PREDECLARATION_LIST, true) ;
    const GGS_lstringlist::cElement * operand_485 = NULL ;
    while (((operand_485 = enumerator_485.nextObject ()))) {
      macroValidPointer (operand_485) ;
      result << "class GALGAS_" ;
      result << operand_485->mValue.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'programFileImplementation' template of 'programFileGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_programFileGenerationTemplate_programFileImplementation (C_Compiler & inLexique,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_stringlist & var_cas_IMPORTED_COMPONENT_LIST,
                                const GGS_programRuleList & var_cas_PROGRAM_RULE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_IMPORTED_COMPONENT_LIST.isBuilt ()
    && var_cas_PROGRAM_RULE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".h\"\n"
      "#include \"galgas/C_galgas_CLI_Options.h\"\n"
      "#include \"command_line_interface/F_Analyze_CLI_Options.h\"\n"
      "#include \"utilities/F_DisplayException.h\"\n"
      "#include \"utilities/basic-allocation.h\"\n"
      "#include \"utilities/cpp-allocation.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringlist::cEnumerator enumerator_749 (var_cas_IMPORTED_COMPONENT_LIST, true) ;
    const GGS_stringlist::cElement * operand_749 = NULL ;
    while (((operand_749 = enumerator_749.nextObject ()))) {
      macroValidPointer (operand_749) ;
      result << "#include \"" ;
      result << operand_749->mValue ;
      result << ".h\"\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define SOURCE_FILE_AT_LINE(line) \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".gProgram\", line\n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)\n"
      "#else\n"
      "  #define SOURCE_FILE_AT_LINE(line) \n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) \n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                      M A I N    F O R    L I B P M                        *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "int mainForLIBPM  (const int argc, const char * argv []) {\n"
      "  bool verboseOptionOn = true ;\n"
      "  PMSInt16 returnCode = 0 ; // No error\n"
      "//--- Fix parameters for BDD package\n"
      "  C_BDD::setHashMapSize (19) ;\n"
      "  C_BDD::setITEcacheSize (17) ;\n"
      "  C_BDD::setANDcacheSize (1) ;\n"
      "  C_BDD::forAllOnBitsGreaterCacheSize (18) ;\n"
      "  C_PrologueEpilogue::runPrologueActions () ;\n"
      "  {\n"
      "  //--- Input/output parameters\n"
      "    const char * extensions [] = {\n" ;
    GGS_programRuleList::cEnumerator enumerator_1997 (var_cas_PROGRAM_RULE_LIST, true) ;
    const GGS_programRuleList::cElement * operand_1997 = NULL ;
    while (((operand_1997 = enumerator_1997.nextObject ()))) {
      macroValidPointer (operand_1997) ;
      result << "      " ;
      result << operand_1997->mSourceFileExtension.ggs_string ().reader_utf8Representation () ;
      result << ",\n" ;
    }
    result << "      NULL\n"
      "    } ;    \n"
      "    const char * helpMessages [] = {\n" ;
    GGS_programRuleList::cEnumerator enumerator_2165 (var_cas_PROGRAM_RULE_LIST, true) ;
    const GGS_programRuleList::cElement * operand_2165 = NULL ;
    while (((operand_2165 = enumerator_2165.nextObject ()))) {
      macroValidPointer (operand_2165) ;
      result << "      " ;
      result << operand_2165->mSourceFileHelp.ggs_string ().reader_utf8Representation () ;
      result << ",\n" ;
    }
    result << "      NULL\n"
      "    } ;    \n"
      "    TC_UniqueArray <C_String> sourceFilesArray ;\n"
      "  //--- Analyze Command Line Options\n"
      "    F_Analyze_CLI_Options (argc, argv,\n"
      "      #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "        \"version GALGAS_BETA_VERSION\" \" [debug]\",\n"
      "      #else\n"
      "        \"version GALGAS_BETA_VERSION\",\n"
      "      #endif\n"
      "                           sourceFilesArray,\n"
      "                           extensions,\n"
      "                           helpMessages) ;\n"
      "  //--- Build galgas io object\n"
      "    C_galgas_io * galgasIOptr = NULL ;\n"
      "    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;\n"
      "  //--- Common lexique object\n"
      "    C_Compiler * commonLexique = NULL ;\n"
      "    macroMyNew (commonLexique, C_Compiler (NULL, \"\", \"\", galgasIOptr COMMA_HERE)) ;\n"
      "  //--- Ask Save On Close \? (Carbon and Windows SIOUX Only)\n"
      "    #ifdef SIOUX_IS_IMPLEMENTED\n"
      "      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;\n"
      "    #endif\n"
      "  //--- Enable 64 bit alloc debug \? Only if compiled in 64 bit and in debug mode\n"
      "    #ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "      #ifdef __LP64__\n"
      "        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {\n"
      "          enableAllocDebugFor64BitTool () ;\n"
      "        }\n"
      "      #endif\n"
      "    #endif\n"
      "    try{\n"
      "      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;\n"
      "      routine_before (commonLexique COMMA_HERE) ;\n"
      "      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {\n"
      "        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;\n"
      "        GALGAS_string * sfp = GALGAS_string::constructor_new (sourceFilesArray (i COMMA_HERE) COMMA_HERE) ;\n"
      "        GALGAS_location * location = commonLexique->here (HERE) ;\n"
      "        GALGAS_lstring * sourceFilePath = GALGAS_lstring::constructor_new (sfp, location COMMA_HERE) ;\n"
      "        PMSInt16 r = 0 ;\n"
      "        " ;
    GGS_programRuleList::cEnumerator enumerator_4101 (var_cas_PROGRAM_RULE_LIST, true) ;
    const GGS_programRuleList::cElement * operand_4101 = NULL ;
    { GGS_uint var_cas_IDX (true, 0) ;
  while (((operand_4101 = enumerator_4101.nextObject ()))) {
    macroValidPointer (operand_4101) ;
    result << "if (fileExtension == " ;
    result << operand_4101->mSourceFileExtension.ggs_string ().reader_utf8Representation () ;
    result << ") {\n"
      "          routine_" ;
    result << (GGS_string ("programRule_")).operator_concat (var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103))).reader_identifierRepresentation () ;
    result << " (sourceFilePath, commonLexique COMMA_HERE) ;\n" ;
    if (enumerator_4101.hasNextObject ()) {
      result << "        }else " ;
    }
    var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
  }
}
result << "        }else{\n"
  "          printf (\"*** Error: unhandled extension for file '%s' ***\\n\", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;\n"
  "          macroReleaseObject (sourceFilePath) ;\n"
  "          r = 1 ;\n"
  "        }\n"
  "        if (r != 0) {\n"
  "          returnCode = r ;\n"
  "        }\n"
  "      }\n"
  "    //--- Error or warnings \?\n"
  "      if (commonLexique->totalErrorCount () > 0) {\n"
  "        returnCode = 1 ; // Error code\n"
  "      }else if (commonLexique->totalWarningCount () > 0) {\n"
  "        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {\n"
  "          returnCode = 1 ; // Error code\n"
  "          if (verboseOptionOn) {\n"
  "            printf (\"** Note: warnings are treated as errors. **\\n\") ;\n"
  "          }\n"
  "        }\n"
  "      }\n"
  "    //--- Epilogue\n"
  "      routine_after (commonLexique COMMA_HERE) ;\n"
  "    }catch (const M_STD_NAMESPACE exception & e) {\n"
  "      F_default_display_exception (e) ;\n"
  "      returnCode = 1 ; // Error code\n"
  "    }catch (...) {\n"
  "      throw ;\n"
  "    }\n"
  "    macroReleaseObject (galgasIOptr) ;\n"
  "    macroReleaseObject (commonLexique) ;\n"
  "  }\n"
  "  C_PrologueEpilogue::runEpilogueActions () ;\n"
  "  #ifndef DO_NOT_GENERATE_CHECKINGS\n"
  "    C_Object::checkAllObjectsHaveBeenReleased () ;\n"
  "  #endif\n"
  "  displayAllocationStats () ;\n"
  "  displayAllocatedBlockSizeStats () ;\n"
  "  displayAllocatedBlocksInfo () ;\n"
  "  return returnCode ;\n"
  "}\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compileBeforeClause"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileBeforeClause (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_programComponentAST  var_cas_inProgramComponentAST,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileBeforeClause at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
GGS_formalParameterListForGeneration  automatic_var_3670_0 ;
::routine_analyzeRoutineBody (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_formalParameterListAST ::constructor_emptyList (),  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  var_cas_inProgramComponentAST.reader_mPrologueInstructionList (inLexique COMMA_SOURCE_FILE_AT_LINE (68)),  var_cas_inProgramComponentAST.reader_mEndOfPrologue (inLexique COMMA_SOURCE_FILE_AT_LINE (69)),  var_cas_semanticInstructionListForGeneration,  automatic_var_3670_0 COMMA_SOURCE_FILE_AT_LINE (62)) ;
var_cas_ioDecoratedDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, GGS_string ("before"), GGS_formalParameterListForGeneration ::constructor_emptyList (), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (73))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileBeforeClause\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compileProgramRules"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileProgramRules (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_programComponentAST  var_cas_inProgramComponentAST,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileProgramRules at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_uint  var_cas_ruleIndex = GGS_uint (0U) ;
{
GGS_programRuleList::cEnumerator enumerator_4550 (var_cas_inProgramComponentAST.reader_mProgramRules (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), true) ;
const GGS_programRuleList::cElement * operand_4550 = NULL ;
while (((operand_4550 = enumerator_4550.nextObject ()))) {
  macroValidPointer (operand_4550) ;
  GGS_formalParameterListAST  var_cas_argumentList = GGS_formalParameterListAST ::constructor_emptyList () ;
  var_cas_argumentList.addAssign_operation (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (96)), GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (97)), operand_4550->mSourceFileVariableName, operand_4550->mSourceFileVariableNameIsUnused) ;
  GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
  GGS_formalParameterListForGeneration  var_cas_routineSignature ;
  ::routine_analyzeRoutineBody (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_argumentList,  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  operand_4550->mInstructionList,  operand_4550->mEndOfInstructionList,  var_cas_semanticInstructionListForGeneration,  var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (103)) ;
  var_cas_ioDecoratedDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, (GGS_string ("programRule_")).operator_concat (var_cas_ruleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))), var_cas_routineSignature, var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (114))) ;
  var_cas_ruleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
}
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileProgramRules\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compileAfterClause"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileAfterClause (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_programComponentAST  var_cas_inProgramComponentAST,
                                GGS_semanticDeclarationListForGeneration  & var_cas_ioDecoratedDeclarationListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileAfterClause at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_semanticInstructionListForGeneration  var_cas_semanticInstructionListForGeneration ;
GGS_formalParameterListForGeneration  automatic_var_6702_0 ;
::routine_analyzeRoutineBody (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_formalParameterListAST ::constructor_emptyList (),  GGS_localConstantList ::constructor_emptyList (),  GGS_typedAttributeList ::constructor_emptyList (),  var_cas_inProgramComponentAST.reader_mEpilogueInstructionList (inLexique COMMA_SOURCE_FILE_AT_LINE (142)),  var_cas_inProgramComponentAST.reader_mEndOfEpilogue (inLexique COMMA_SOURCE_FILE_AT_LINE (143)),  var_cas_semanticInstructionListForGeneration,  automatic_var_6702_0 COMMA_SOURCE_FILE_AT_LINE (136)) ;
var_cas_ioDecoratedDeclarationListForGeneration.addAssign_operation (GGS_routineImplementationForGeneration ::constructor_new (inLexique, GGS_string ("after"), GGS_formalParameterListForGeneration ::constructor_emptyList (), var_cas_semanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (147))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileAfterClause\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "compileProgramComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileProgramComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileProgramComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_programComponentAST var_cas_programComponentRoot ;
const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
const GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (169)) ;
GGS_programComponentAST var_cas_programComponentAST ;
const GGS_bool cond_7902 = var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.reader_hasKey (var_cas_basename) ;
if (cond_7902.isBuiltAndTrue ()) {
if (var_cas_ioParsedComponentStruct.mParsedProgramComponentMap.isBuilt ()) {
  var_cas_ioParsedComponentStruct.mParsedProgramComponentMap (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_programComponentAST COMMA_SOURCE_FILE_AT_LINE (172)) ;
}
}else if (cond_7902.isBuiltAndFalse ()) {
const GGS_string _depExtension = GGS_string ("") ;
const GGS_string _depPath = GGS_string ("") ;
if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
  C_Grammar_programSLRgrammar::_performSourceFileParsing_ (inLexique,
                                _depExtension.string (),
                                _depPath.string (),
                                NULL,
                                var_cas_inSourceFile,
                                var_cas_programComponentAST
                                COMMA_SOURCE_FILE_AT_LINE (174)) ;
}
var_cas_ioParsedComponentStruct.mParsedProgramComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_programComponentAST COMMA_SOURCE_FILE_AT_LINE (175)) ;
}
const GGS_lstring  var_cas_componentName = var_cas_programComponentAST.reader_mProgramComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
const GGS_bool cond_8442 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))).operator_isNotEqual (var_cas_basename) ;
if (cond_8442.isBuiltAndTrue ()) {
var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
  "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (183)) ;
}
GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = var_cas_programComponentAST.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
GGS_lstringlist  var_cas_optionComponentFileNameList = GGS_lstringlist ::constructor_emptyList () ;
GGS_grammarComponentASTList  var_cas_grammarComponentASTList = GGS_grammarComponentASTList ::constructor_emptyList () ;
GGS_stringlist  var_cas_headerIncludeList = GGS_stringlist ::constructor_emptyList () ;
GGS_stringlist  var_cas_implementationIncludeList = GGS_stringlist ::constructor_emptyList () ;
::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentFileNameList,  var_cas_grammarComponentASTList,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_headerIncludeList,  var_cas_implementationIncludeList,  var_cas_programComponentAST.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (200)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (192)) ;
GGS_semanticDeclarationListAST  var_cas_semanticDeclarationListWithPredefinedTypes = var_cas_semanticDeclarationList ;
::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes COMMA_SOURCE_FILE_AT_LINE (205)) ;
GGS_semanticContext var_cas_semanticContext ;
::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes,  var_cas_programComponentAST.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (210)),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (208)) ;
::routine_buildGrammarComponentMapForSemanticAnalysis (inLexique,  var_cas_grammarComponentASTList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (214)) ;
::routine_buildOptionComponentMapForSemanticAnalysis (inLexique,  var_cas_optionComponentFileNameList,  var_cas_ioParsedComponentStruct,  var_cas_semanticContext.mOptionComponentMapForSemanticAnalysis COMMA_SOURCE_FILE_AT_LINE (219)) ;
GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
::routine_performSemanticAnalysis (inLexique,  var_cas_programComponentAST.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (227)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (227)),  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (226)) ;
const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (232)) ;
::routine_compileBeforeClause (inLexique,  var_cas_semanticContext,  var_cas_predefinedTypes,  var_cas_programComponentAST,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (234)) ;
::routine_compileProgramRules (inLexique,  var_cas_semanticContext,  var_cas_predefinedTypes,  var_cas_programComponentAST,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (241)) ;
::routine_compileAfterClause (inLexique,  var_cas_semanticContext,  var_cas_predefinedTypes,  var_cas_programComponentAST,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (248)) ;
const GGS_bool cond_11575 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (255))).operator_isEqual (GGS_uint (0U)) ;
if (cond_11575.isBuiltAndTrue ()) {
GGS_string var_cas_headerString = template_filewrapper_programFileGenerationTemplate_programFileHeader (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)), var_cas_headerIncludeList, var_cas_semanticContext.mTypeMap.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
{
  GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_11277 (var_cas_decoratedDeclarationListForGeneration, true) ;
  const GGS_semanticDeclarationListForGeneration::cElement * operand_11277 = NULL ;
  while (((operand_11277 = enumerator_11277.nextObject ()))) {
    macroValidPointer (operand_11277) ;
    var_cas_headerString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_11277->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11277->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (262)))) ;
  }
}
GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
  "\n"), var_cas_headerString, GGS_string ("\n"
  "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (264)) ;
}
const GGS_bool cond_12320 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (275))).operator_isEqual (GGS_uint (0U)) ;
if (cond_12320.isBuiltAndTrue ()) {
GGS_string var_cas_implementationString = template_filewrapper_programFileGenerationTemplate_programFileImplementation (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277)), var_cas_implementationIncludeList, var_cas_programComponentAST.reader_mProgramRules (inLexique COMMA_SOURCE_FILE_AT_LINE (279))) ;
{
  GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_11920 (var_cas_decoratedDeclarationListForGeneration, true) ;
  const GGS_semanticDeclarationListForGeneration::cElement * operand_11920 = NULL ;
  while (((operand_11920 = enumerator_11920.nextObject ()))) {
    macroValidPointer (operand_11920) ;
    var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_11920->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11920->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (282)))) ;
    var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_11920->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_11920->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (283)))) ;
  }
}
GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
  "\n"), var_cas_implementationString, GGS_string ("\n"
  "\n"), GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (285)) ;
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileProgramComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

