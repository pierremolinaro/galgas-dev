//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 16th, 2010, at 20h31'54"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@localConstantList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localConstantList::
elementOf_GGS_localConstantList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mNoWarningIfUnused (argument_2),
mCppName (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localConstantList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localConstantList * ptr = dynamic_cast <const elementOf_GGS_localConstantList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mNoWarningIfUnused.operator_isEqual (ptr->mNoWarningIfUnused).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localConstantList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNoWarningIfUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@localConstantList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localConstantList ("localConstantList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
operator_concat (const GGS_localConstantList & inOperand) const {
  GGS_localConstantList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
dotAssign_operation (const GGS_localConstantList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localConstantList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_bool p_2 = p->mNoWarningIfUnused ;
          GGS_string p_3 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_bool& argument_2,
                     const GGS_string& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mNoWarningIfUnused,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_emptyList (void) {
  GGS_localConstantList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  GGS_localConstantList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalSubListWithRange (GGS_localConstantList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mNoWarningIfUnused, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localConstantList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_bool& _out_2,
              GGS_string& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_bool& _out_2,
             GGS_string& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_bool& _out_2,
                 GGS_string& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_bool& _out_2,
                GGS_string& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localConstantList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localConstantList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localConstantList::
reader_mNoWarningIfUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNoWarningIfUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNoWarningIfUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNoWarningIfUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localConstantList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localConstantList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_localConstantList::cEnumerator::_mNoWarningIfUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNoWarningIfUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localConstantList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localConstantList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localConstantList * p = NULL ;
    macroMyNew (p, GGS_localConstantList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localConstantList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localConstantList * p = dynamic_cast <const GGS_localConstantList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localConstantList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localConstantList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localConstantList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@localInitializedVariableList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localInitializedVariableList::
elementOf_GGS_localInitializedVariableList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mCppName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localInitializedVariableList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localInitializedVariableList * ptr = dynamic_cast <const elementOf_GGS_localInitializedVariableList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localInitializedVariableList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@localInitializedVariableList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localInitializedVariableList ("localInitializedVariableList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
operator_concat (const GGS_localInitializedVariableList & inOperand) const {
  GGS_localInitializedVariableList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
dotAssign_operation (const GGS_localInitializedVariableList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localInitializedVariableList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_string p_2 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_string& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_emptyList (void) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalSubListWithRange (GGS_localInitializedVariableList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localInitializedVariableList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_string& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_string& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_string& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_string& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localInitializedVariableList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localInitializedVariableList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localInitializedVariableList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localInitializedVariableList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localInitializedVariableList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localInitializedVariableList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localInitializedVariableList * p = NULL ;
    macroMyNew (p, GGS_localInitializedVariableList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localInitializedVariableList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localInitializedVariableList * p = dynamic_cast <const GGS_localInitializedVariableList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localInitializedVariableList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localInitializedVariableList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localInitializedVariableList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_localInitializedVariableList   var_cas_inLocalInitializedVariableList,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_3349 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_3349 = NULL ;
    while (((operand_3349 = enumerator_3349.nextObject ()))) {
      macroValidPointer (operand_3349) ;
      const GGS_bool cond_3466 = operand_3349->mNoWarningIfUnused ;
      if (cond_3466.isBuiltAndTrue ()) {
        var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_3349->mName, operand_3349->mType, operand_3349->mCppName COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }else if (cond_3466.isBuiltAndFalse ()) {
        var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3349->mName, operand_3349->mType, operand_3349->mCppName COMMA_SOURCE_FILE_AT_LINE (74)) ;
      }
    }
  }
  {
    GGS_localInitializedVariableList::cEnumerator enumerator_3635 (var_cas_inLocalInitializedVariableList, true) ;
    const GGS_localInitializedVariableList::cElement * operand_3635 = NULL ;
    while (((operand_3635 = enumerator_3635.nextObject ()))) {
      macroValidPointer (operand_3635) ;
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3635->mName, operand_3635->mType, operand_3635->mCppName COMMA_SOURCE_FILE_AT_LINE (79)) ;
    }
  }
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3790 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3790 = NULL ;
    while (((operand_3790 = enumerator_3790.nextObject ()))) {
      macroValidPointer (operand_3790) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3790->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3790->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap COMMA_SOURCE_FILE_AT_LINE (83)) ;
        }
      }
    }
  }
  var_cas_ioVariableMap.modifier_endBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (91)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_4240,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4240 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  automatic_var_4853_0 ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_4240->mTypeName,  operand_4240->mConstructorName,  operand_4240->mConstructorExpressions,  var_cas_returnedType,  automatic_var_4853_0,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (106)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4240->mTypeName COMMA_SOURCE_FILE_AT_LINE (119)) ;
    const GGS_bool cond_5216 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_5216.isBuiltAndTrue ()) {
      operand_4240->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (122)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_4240->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4240->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_5473 = operand_4240->mIsConstant ;
    if (cond_5473.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4240->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (128)) ;
    }else if (cond_5473.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4240->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (130)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, operand_4240->mInstructionLocation, var_cas_targetType, operand_4240->mIsConstant, var_cas_targetVariableCppName, operand_4240->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (133))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_6097,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6097 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6097->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6097->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (154)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6097->mTypeName COMMA_SOURCE_FILE_AT_LINE (161)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_6097->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_6856 = operand_6097->mIsConstant ;
    if (cond_6856.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_6097->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (164)) ;
    }else if (cond_6856.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_6097->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (166)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (169)),  operand_6097->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (169)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_6097->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (171))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_7472,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7472 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7472->mTypeName COMMA_SOURCE_FILE_AT_LINE (188)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_7472->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_7472->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (190)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (192))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_8320,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8320 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_8320->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8320->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (208)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_8968 = (operand_8320->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_8968.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_8320->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }else if (cond_8968.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_8320->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (220)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_9106 (operand_8320->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_9106 = NULL ;
        while (((operand_9106 = enumerator_9106.nextObject ()))) {
          macroValidPointer (operand_9106) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_9106->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (223)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (227)),  operand_8320->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (227)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName, operand_8320->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (229))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_9733,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9733 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_9733->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9733->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (247)) ;
      }
    }
    const GGS_bool cond_10389 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (254))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_10389.isBuiltAndTrue ()) {
      operand_9733->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (256)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (256)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (258)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (259))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (277)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (284))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_12800 = var_cas_outUseLocationReader ;
  if (cond_12800.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (286)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) ;
    elementOf_GGS_readerMap * operand_11529 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_11529) {
      const GGS_bool cond_11964 = (operand_11529->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_11964.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (290)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (290)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }else if (cond_11964.isBuiltAndFalse ()) {
        const GGS_bool cond_12431 = (operand_11529->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_12431.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (295)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (295)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_11529->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (299)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (302)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (305)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (308)) ;
    }
  }
  const GGS_bool cond_13292 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (315))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_13292.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (317)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (317)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (319)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_13455,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13455 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_13455->mLocationExpression,  operand_13455->mMessageExpression,  operand_13455->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (334)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_14158 (operand_13455->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_14158 = NULL ;
      while (((operand_14158 = enumerator_14158.nextObject ()))) {
        macroValidPointer (operand_14158) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_14252_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_14158->mValue, automatic_var_14252_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (350)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, operand_13455->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (354))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_14706,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14706 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_14706->mLocationExpression,  operand_14706->mMessageExpression,  operand_14706->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (375)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, operand_14706->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (388))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_16137,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16137 != NULL) {
    const GGS_bool cond_16920 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (419)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (420)))) ;
    if (cond_16920.isBuiltAndTrue ()) {
      operand_16137->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (422)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (423)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (425)) ;
    }else if (cond_16920.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_16137->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_16137->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (427)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (434)),  operand_16137->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (434)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (436))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_17616,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17616 != NULL) {
    const GGS_bool cond_18317 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (453))) ;
    if (cond_18317.isBuiltAndTrue ()) {
      operand_17616->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (455)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (456)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (458)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_17616->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (462)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_18567 (operand_17616->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_18567 = NULL ;
      while (((operand_18567 = enumerator_18567.nextObject ()))) {
        macroValidPointer (operand_18567) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_18567->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (465)) ;
        }
      }
    }
    const GGS_bool cond_19000 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_19000.isBuiltAndTrue ()) {
      operand_17616->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (470)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (471)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (473)) ;
    }
    const GGS_bool cond_19258 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_17616->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (475))) ;
    if (cond_19258.isBuiltAndTrue ()) {
      operand_17616->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (479)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_17616->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (480))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_17616->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (482))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_19667,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19667 != NULL) {
    const GGS_bool cond_20366 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (499))) ;
    if (cond_20366.isBuiltAndTrue ()) {
      operand_19667->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (502)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (504)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_19667->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (507)) ;
    const GGS_bool cond_20834 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_20834.isBuiltAndTrue ()) {
      operand_19667->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (511)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (512)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (514)) ;
    }
    const GGS_bool cond_21080 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_19667->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (516))) ;
    if (cond_21080.isBuiltAndTrue ()) {
      operand_19667->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (520)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_19667->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (521))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (523))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_21462,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21462 != NULL) {
    const GGS_bool cond_22176 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (539))) ;
    if (cond_22176.isBuiltAndTrue ()) {
      operand_21462->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (541)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (542)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (544)) ;
    }else if (cond_22176.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_21462->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (545)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (545)))).operator_concat (GGS_string ("_"))).operator_concat (operand_21462->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (545))) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputJokerParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName, var_cas_inFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (547))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_23299 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_23299.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (568)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (570)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (573)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
  }else if (cond_23299.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_23470 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_23470 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_23493 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_23493 = NULL ;
      while (((operand_23470 = enumerator_23470.nextObject ()))
          && ((operand_23493 = enumerator_23493.nextObject ()))) {
        macroValidPointer (operand_23470) ;
        macroValidPointer (operand_23493) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_23493->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_23493->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_23470->mFormalArgumentType, operand_23470->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (577)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_23970,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23970 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_23970->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (600)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_23970->mRoutineName,  ((GGS_string ("'")).operator_concat (operand_23970->mRoutineName)).operator_concat (GGS_string ("' routine header")),  var_cas_routineSignature,  operand_23970->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (603)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_23970->mRoutineName, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (614))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_24988,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24988 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24988->mTypeName COMMA_SOURCE_FILE_AT_LINE (629)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_25448 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (633)) ;
    if (temp_25448.isBuilt ()) {
      temp_25448 (HERE)->method_searchKey (inLexique, operand_24988->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (633)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_24988->mMethodName,  ((GGS_string ("'")).operator_concat (operand_24988->mMethodName)).operator_concat (GGS_string ("' class method header")),  var_cas_routineSignature,  operand_24988->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (636)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_24988->mTypeName, operand_24988->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (647))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_26221,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26221 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_26221->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_26221->mReceiverExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (665)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_26900_0 ;
    GGS_methodQualifier automatic_var_26900_1 ;
    const GGS_instanceMethodMap  temp_26829 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (675)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
    if (temp_26829.isBuilt ()) {
      temp_26829 (HERE)->method_searchKey (inLexique, operand_26221->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_26900_0, var_cas_hasCompilerArgument, automatic_var_26900_1 COMMA_SOURCE_FILE_AT_LINE (675)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_26221->mMethodName,  ((GGS_string ("'")).operator_concat (operand_26221->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_26221->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (678)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, operand_26221->mInstructionLocation, var_cas_receiverExpression, operand_26221->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (692)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (689))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_thisMethodCallInstructionAST * operand_27687,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27687 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    const GGS_bool cond_28092 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_28092.isBuiltAndTrue ()) {
      GGS_string automatic_var_28083_0 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (710)), var_cas_thisTypeProxy, automatic_var_28083_0 COMMA_SOURCE_FILE_AT_LINE (710)) ;
    }else if (cond_28092.isBuiltAndFalse ()) {
      operand_27687->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'this' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (713)) ;
      var_cas_thisTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_28459_0 ;
    GGS_methodQualifier automatic_var_28459_1 ;
    const GGS_instanceMethodMap  temp_28388 = var_cas_thisTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) ;
    if (temp_28388.isBuilt ()) {
      temp_28388 (HERE)->method_searchKey (inLexique, operand_27687->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_28459_0, var_cas_hasCompilerArgument, automatic_var_28459_1 COMMA_SOURCE_FILE_AT_LINE (718)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_27687->mMethodName,  ((GGS_string ("'")).operator_concat (operand_27687->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_27687->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (721)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisMethodCallInstructionForGeneration ::constructor_new (inLexique, operand_27687->mInstructionLocation, operand_27687->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (734)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (732))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of function "checkMethodImplementationInSuperClasses"    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkMethodImplementationInSuperClasses (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkMethodImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_29352 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) ;
  if (cond_29352.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_29352.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_bool automatic_var_29472_0 ;
    GGS_formalParameterSignature  automatic_var_29472_1 ;
    GGS_location  automatic_var_29472_2 ;
    GGS_bool automatic_var_29472_3 ;
    const GGS_instanceMethodMap  temp_29434 = var_cas_inSuperClass.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (752)) ;
    if (temp_29434.isBuilt ()) {
      temp_29434 (HERE)->method_searchKey (inLexique, var_cas_inMethodName, automatic_var_29472_0, automatic_var_29472_1, automatic_var_29472_2, automatic_var_29472_3, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (752)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (757)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkMethodImplementationInSuperClasses (inLexique, var_cas_inMethodName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (759)) COMMA_SOURCE_FILE_AT_LINE (759)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkMethodImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkMethodImplementationInSuperClasses (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkMethodImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkMethodImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkMethodImplementationInSuperClasses ("checkMethodImplementationInSuperClasses",
                              functionForGenericCall_checkMethodImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkMethodImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superMethodCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_superMethodCallInstructionAST * operand_29979,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29979 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_30660 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_30660.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
      GGS_string automatic_var_30418_0 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (776)), var_cas_thisTypeProxy, automatic_var_30418_0 COMMA_SOURCE_FILE_AT_LINE (776)) ;
      const GGS_bool cond_30587 = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (777)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
      if (cond_30587.isBuiltAndTrue ()) {
        operand_29979->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used, current class has no super class") COMMA_SOURCE_FILE_AT_LINE (779)) ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_30587.isBuiltAndFalse ()) {
        var_cas_superTypeProxy = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
      }
    }else if (cond_30660.isBuiltAndFalse ()) {
      operand_29979->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (784)) ;
      var_cas_superTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_31030_0 ;
    GGS_methodQualifier automatic_var_31030_1 ;
    const GGS_instanceMethodMap  temp_30959 = var_cas_superTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (789)) ;
    if (temp_30959.isBuilt ()) {
      temp_30959 (HERE)->method_searchKey (inLexique, operand_29979->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_31030_0, var_cas_hasCompilerArgument, automatic_var_31030_1 COMMA_SOURCE_FILE_AT_LINE (789)) ;
    }
    const GGS_string var_cas_superClassThatImplementsMethod = function_checkMethodImplementationInSuperClasses (inLexique, operand_29979->mMethodName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (791)) ;
    const GGS_bool cond_31403 = (var_cas_superClassThatImplementsMethod).operator_isEqual (GGS_string ("")) ;
    if (cond_31403.isBuiltAndTrue ()) {
      operand_29979->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_29979->mMethodName)).operator_concat (GGS_string ("' method is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (794)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_29979->mMethodName,  ((GGS_string ("'")).operator_concat (operand_29979->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_29979->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (797)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superMethodCallInstructionForGeneration ::constructor_new (inLexique, operand_29979->mInstructionLocation, var_cas_superClassThatImplementsMethod, operand_29979->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (811)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (808))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_32208,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32208 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_32208->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (829)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_32630 (operand_32208->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_32630 = NULL ;
      while (((operand_32630 = enumerator_32630.nextObject ()))) {
        macroValidPointer (operand_32630) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (831)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_32630->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (832)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_32977_0 ;
    const GGS_modifierMap  temp_32919 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (837)) ;
    if (temp_32919.isBuilt ()) {
      temp_32919 (HERE)->method_searchKey (inLexique, operand_32208->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_32977_0 COMMA_SOURCE_FILE_AT_LINE (837)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_32208->mModifierName,  ((GGS_string ("'")).operator_concat (operand_32208->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_32208->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (840)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_32208->mReceiverStructAttributes, var_cas_receiverType, operand_32208->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (851))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_thisModifierCallInstructionAST * operand_33770,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33770 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    const GGS_bool cond_34175 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_34175.isBuiltAndTrue ()) {
      GGS_string automatic_var_34166_0 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (872)), var_cas_thisTypeProxy, automatic_var_34166_0 COMMA_SOURCE_FILE_AT_LINE (872)) ;
    }else if (cond_34175.isBuiltAndFalse ()) {
      operand_33770->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'this' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (875)) ;
      var_cas_thisTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_34499_0 ;
    const GGS_modifierMap  temp_34441 = var_cas_thisTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (879)) ;
    if (temp_34441.isBuilt ()) {
      temp_34441 (HERE)->method_searchKey (inLexique, operand_33770->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_34499_0 COMMA_SOURCE_FILE_AT_LINE (879)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_33770->mModifierName,  ((GGS_string ("'")).operator_concat (operand_33770->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_33770->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (882)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_thisTypeProxy, operand_33770->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (893))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of function "checkModifierImplementationInSuperClasses"   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkModifierImplementationInSuperClasses (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inModifierName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkModifierImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_35365 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (908)) ;
  if (cond_35365.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_35365.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_formalParameterSignature  automatic_var_35475_0 ;
    GGS_bool automatic_var_35475_1 ;
    const GGS_modifierMap  temp_35441 = var_cas_inSuperClass.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (912)) ;
    if (temp_35441.isBuilt ()) {
      temp_35441 (HERE)->method_searchKey (inLexique, var_cas_inModifierName, automatic_var_35475_0, automatic_var_35475_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (912)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (917)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkModifierImplementationInSuperClasses (inLexique, var_cas_inModifierName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (919)) COMMA_SOURCE_FILE_AT_LINE (919)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkModifierImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkModifierImplementationInSuperClasses (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkModifierImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkModifierImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkModifierImplementationInSuperClasses ("checkModifierImplementationInSuperClasses",
                              functionForGenericCall_checkModifierImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkModifierImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superModifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_superModifierCallInstructionAST * operand_35988,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35988 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_36669 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_36669.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
      GGS_string automatic_var_36427_0 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (936)), var_cas_thisTypeProxy, automatic_var_36427_0 COMMA_SOURCE_FILE_AT_LINE (936)) ;
      const GGS_bool cond_36596 = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (937)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
      if (cond_36596.isBuiltAndTrue ()) {
        operand_35988->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used, current class has no super class") COMMA_SOURCE_FILE_AT_LINE (939)) ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_36596.isBuiltAndFalse ()) {
        var_cas_superTypeProxy = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (940)) ;
      }
    }else if (cond_36669.isBuiltAndFalse ()) {
      operand_35988->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (944)) ;
      var_cas_superTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_36996_0 ;
    const GGS_modifierMap  temp_36938 = var_cas_superTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (948)) ;
    if (temp_36938.isBuilt ()) {
      temp_36938 (HERE)->method_searchKey (inLexique, operand_35988->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_36996_0 COMMA_SOURCE_FILE_AT_LINE (948)) ;
    }
    const GGS_string var_cas_superClassThatImplementsModifier = function_checkModifierImplementationInSuperClasses (inLexique, operand_35988->mModifierName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (950)) ;
    const GGS_bool cond_37385 = (var_cas_superClassThatImplementsModifier).operator_isEqual (GGS_string ("")) ;
    if (cond_37385.isBuiltAndTrue ()) {
      operand_35988->mModifierName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_35988->mModifierName)).operator_concat (GGS_string ("' modifier is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (953)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_35988->mModifierName,  ((GGS_string ("'")).operator_concat (operand_35988->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_35988->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (956)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_superTypeProxy, var_cas_superClassThatImplementsModifier, operand_35988->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (967))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_38156,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38156 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38156->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38156->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (986)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_38156->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (995)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_38785 (operand_38156->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_38785 = NULL ;
      while (((operand_38785 = enumerator_38785.nextObject ()))) {
        macroValidPointer (operand_38785) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (997)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_38785->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (998)) ;
        }
      }
    }
    const GGS_bool cond_39212 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1001))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_39212.isBuiltAndTrue ()) {
      operand_38156->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (1005)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)),  operand_38156->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1007)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, operand_38156->mInstructionLocation, var_cas_targetType, var_cas_targetVariableCppName, operand_38156->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1009))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_39709,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39709 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_39709->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (1029)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_40123 (operand_39709->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_40123 = NULL ;
      while (((operand_40123 = enumerator_40123.nextObject ()))) {
        macroValidPointer (operand_40123) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_40123->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1032)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)) ;
    const GGS_bool cond_40710 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_40710.isBuiltAndTrue ()) {
      operand_39709->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (1041)) ;
    }else if (cond_40710.isBuiltAndFalse ()) {
      const GGS_bool cond_41058 = (operand_39709->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_41058.isBuiltAndTrue ()) {
        operand_39709->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1044)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_39709->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1047)) ;
      }else if (cond_41058.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_41161 (operand_39709->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_41161 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_41189 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_41189 = NULL ;
          while (((operand_41161 = enumerator_41161.nextObject ()))
              && ((operand_41189 = enumerator_41189.nextObject ()))) {
            macroValidPointer (operand_41161) ;
            macroValidPointer (operand_41189) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41161->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_41161->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (1051)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_41189->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)),  operand_41161->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1057)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, var_cas_targetType, operand_39709->mInstructionLocation, operand_39709->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (1061))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_41935,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41935 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_41935->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (1082)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_42358 (operand_41935->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_42358 = NULL ;
      while (((operand_42358 = enumerator_42358.nextObject ()))) {
        macroValidPointer (operand_42358) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1084)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_42358->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1085)) ;
        }
      }
    }
    const GGS_bool cond_42774 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1088))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1088)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_42774.isBuiltAndTrue ()) {
      operand_41935->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, operand_41935->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_41935->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1094))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_43144,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43144 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_43144->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (1113)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_43567 (operand_43144->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_43567 = NULL ;
      while (((operand_43567 = enumerator_43567.nextObject ()))) {
        macroValidPointer (operand_43567) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1115)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_43567->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1116)) ;
        }
      }
    }
    const GGS_bool cond_43983 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1119))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1119)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_43983.isBuiltAndTrue ()) {
      operand_43144->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)))).operator_concat (GGS_string ("' type, but this type does not support the '--' operator")) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, operand_43144->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_43144->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1125))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_44351,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44351 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44351->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44351->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1143)) ;
      }
    }
    const GGS_bool cond_45019 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1150))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_45019.isBuiltAndTrue ()) {
      operand_44351->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (1154)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_44351->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1156))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_45328,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45328 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_45531 (operand_45328->mLogList, true) ;
      const GGS_logListAST::cElement * operand_45531 = NULL ;
      while (((operand_45531 = enumerator_45531.nextObject ()))) {
        macroValidPointer (operand_45531) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45531->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_45531->mLogExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1173)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_45531->mLogMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1181)), var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1180))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_dropInstructionAST * operand_46090,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46090 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_46352 (operand_46090->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_46352 = NULL ;
      while (((operand_46352 = enumerator_46352.nextObject ()))) {
        macroValidPointer (operand_46352) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_46455_0 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_46352->mValue, automatic_var_46455_0, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (1198)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (1202))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_46822,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46822 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46822->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46822->m_if_expression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1218)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46822->m_then_instructionList,  operand_46822->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList COMMA_SOURCE_FILE_AT_LINE (1227)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46822->m_else_instructionList,  operand_46822->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1239)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_46822->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1249)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, operand_46822->mEndOf_then_branch, var_cas_if_expression, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1251))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_48368,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48368 != NULL) {
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1268)) ;
    var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) ;
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_48835 (operand_48368->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_48835 = NULL ;
      while (((operand_48835 = enumerator_48835.nextObject ()))) {
        macroValidPointer (operand_48835) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48835->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_48835->mEnumeratedExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_enumerationExpression COMMA_SOURCE_FILE_AT_LINE (1275)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_48835->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1282))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)) ;
        const GGS_bool cond_49565 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_49565.isBuiltAndTrue ()) {
          operand_48835->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1287)) ;
        }else if (cond_49565.isBuiltAndFalse ()) {
          const GGS_bool cond_50093 = ((operand_48835->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_48835->mEndsWithEllipsis).operator_not ()) ;
          if (cond_50093.isBuiltAndTrue ()) {
            const GGS_enumerationDescriptorList  var_cas_currentTypedAttributeList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)) ;
            {
              GGS_enumerationDescriptorList::cEnumerator enumerator_49788 (var_cas_currentTypedAttributeList, true) ;
              const GGS_enumerationDescriptorList::cElement * operand_49788 = NULL ;
              while (((operand_49788 = enumerator_49788.nextObject ()))) {
                macroValidPointer (operand_49788) ;
                var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_48835->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1291))).operator_concat (operand_49788->mEnumerationName), operand_48835->mEndOfEnumerationExpression COMMA_SOURCE_FILE_AT_LINE (1291)), operand_49788->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_49788->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1290)) ;
              }
            }
          }else if (cond_50093.isBuiltAndFalse ()) {
            const GGS_bool cond_50535 = ((operand_48835->mEndsWithEllipsis).operator_not ()).operator_and ((operand_48835->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_50535.isBuiltAndTrue ()) {
              operand_48835->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_48835->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1302))) COMMA_SOURCE_FILE_AT_LINE (1304)) ;
            }else if (cond_50535.isBuiltAndFalse ()) {
              const GGS_bool cond_50979 = (operand_48835->mEndsWithEllipsis).operator_and ((operand_48835->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_50979.isBuiltAndTrue ()) {
                operand_48835->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1307)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_48835->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1310))) COMMA_SOURCE_FILE_AT_LINE (1312)) ;
              }else if (cond_50979.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_51006 (operand_48835->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_51006 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_51033 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_51033 = NULL ;
                  while (((operand_51006 = enumerator_51006.nextObject ()))
                      && ((operand_51033 = enumerator_51033.nextObject ()))) {
                    macroValidPointer (operand_51006) ;
                    macroValidPointer (operand_51033) ;
                    const GGS_bool cond_51608 = (operand_51006->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1314))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_51608.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_51006->mTypeName COMMA_SOURCE_FILE_AT_LINE (1315)) ;
                      const GGS_bool cond_51420 = (var_cas_foundType).operator_isNotEqual (operand_51033->mEnumeratedType) ;
                      if (cond_51420.isBuiltAndTrue ()) {
                        operand_51006->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_51033->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1318)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_51006->mConstantName, operand_51033->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_51033->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1319)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_48835->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48368->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48368->mWhileExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_whileExpression COMMA_SOURCE_FILE_AT_LINE (1328)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_48368->mBeforeInstructionList,  operand_48368->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList COMMA_SOURCE_FILE_AT_LINE (1338)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    GGS_localConstantList  var_cas_indexDeclaration = GGS_localConstantList ::constructor_emptyList () ;
    const GGS_bool cond_52798 = (operand_48368->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1351))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_52798.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_48368->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1352))) ;
      var_cas_indexDeclaration.addAssign_operation (var_cas_inPredefinedTypes.mUIntType, operand_48368->mIndexVariableName, GGS_bool (false), var_cas_indexCppName) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_indexDeclaration,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_48368->mDoInstructionList,  operand_48368->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1362)) ;
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_48368->mBetweenInstructionList,  operand_48368->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList COMMA_SOURCE_FILE_AT_LINE (1374)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_48368->mAfterInstructionList,  operand_48368->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1386)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_48368->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1397)) ;
    var_cas_ioVariableMap.modifier_endBranch (inLexique, operand_48368->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1399)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_48368->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1400)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, operand_48368->mInstructionLocation, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1402))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_54538,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54538 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54538->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54538->mVariantExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_variantExpression COMMA_SOURCE_FILE_AT_LINE (1424)) ;
      }
    }
    const GGS_bool cond_55250 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1431))).operator_isNotEqual (var_cas_inPredefinedTypes.mUIntType) ;
    if (cond_55250.isBuiltAndTrue ()) {
      operand_54538->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1434)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54538->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54538->mLoopExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_loopExpression COMMA_SOURCE_FILE_AT_LINE (1437)) ;
      }
    }
    const GGS_bool cond_55756 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1444))).operator_isNotEqual (var_cas_inPredefinedTypes.mBoolType) ;
    if (cond_55756.isBuiltAndTrue ()) {
      operand_54538->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1447)) ;
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_54538->mFirstInstructions,  operand_54538->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList COMMA_SOURCE_FILE_AT_LINE (1452)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_54538->mSecondInstructions,  operand_54538->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1464)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_54538->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1475)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, operand_54538->mInstructionLocation, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1477))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@structuredCastInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structuredCastInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_structuredCastInstructionAST * operand_57035,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57035 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_castExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57035->mCastExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57035->mCastExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_castExpression COMMA_SOURCE_FILE_AT_LINE (1496)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)) ;
    GGS_castInstructionBranchListForGeneration  var_cas_castBranchList = GGS_castInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_castInstructionBranchListAST::cEnumerator enumerator_57650 (operand_57035->mCastInstructionBranchList, true) ;
      const GGS_castInstructionBranchListAST::cElement * operand_57650 = NULL ;
      while (((operand_57650 = enumerator_57650.nextObject ()))) {
        macroValidPointer (operand_57650) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_57650->mTypeName COMMA_SOURCE_FILE_AT_LINE (1508)) ;
        GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
        GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1511))) ;
        GGS_uint _variant_58095 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1512)) ;
        GGS_bool _condition_58095 (_variant_58095.isBuilt (), true) ;
        while (_condition_58095.isBuiltAndTrue ()) {
          _condition_58095 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1513)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1513))).operator_not ()) ;
          if (_condition_58095.isBuiltAndTrue ()) {
            if (_variant_58095.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1516)) ;
              _condition_58095 = GGS_bool (false) ;
            }else{
              _variant_58095.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1514)) ;
              var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1515))) ;
            }
          }
        }
        const GGS_bool cond_58291 = (var_cas_found).operator_not () ;
        if (cond_58291.isBuiltAndTrue ()) {
          operand_57650->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_57650->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1521)) ;
        }
        GGS_string var_cas_localConstantName ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        const GGS_bool cond_58722 = (operand_57650->mConstantVarName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_58722.isBuiltAndTrue ()) {
          var_cas_localConstantName = (((GGS_string ("cast_")).operator_concat (operand_57650->mConstantVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)))).operator_concat (GGS_string ("_"))).operator_concat (operand_57650->mConstantVarName) ;
          var_cas_localConstantList.addAssign_operation (var_cas_type, operand_57650->mConstantVarName, GGS_bool (false), var_cas_localConstantName) ;
        }else if (cond_58722.isBuiltAndFalse ()) {
          var_cas_localConstantName = GGS_string ("") ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_57650->mInstructionList,  operand_57650->mEndOfInstructions,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1538)) ;
        var_cas_castBranchList.addAssign_operation (operand_57650->mUseKindOfClass, var_cas_type, var_cas_localConstantName, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_57035->mElseInstructionList,  operand_57035->mEndOfCastInstruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1552)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_57035->mEndOfCastInstruction COMMA_SOURCE_FILE_AT_LINE (1563)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_structuredCastInstructionForGeneration ::constructor_new (inLexique, var_cas_castExpression, var_cas_castBranchList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1565))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_60002,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60002 != NULL) {
    GGS_grammarLabelMap  var_cas_grammarLabelMap ;
    if (var_cas_inSemanticContext.mGrammarMap.isBuilt ()) {
      var_cas_inSemanticContext.mGrammarMap (HERE)->method_searchKey (inLexique, operand_60002->mGrammarComponentName, var_cas_grammarLabelMap COMMA_SOURCE_FILE_AT_LINE (1582)) ;
    }
    GGS_formalParameterSignature  var_cas_labelSignature ;
    if (var_cas_grammarLabelMap.isBuilt ()) {
      var_cas_grammarLabelMap (HERE)->method_searchKey (inLexique, operand_60002->mLabelName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (1588)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_60002->mLabelName,  ((GGS_string ("label of the ")).operator_concat (operand_60002->mGrammarComponentName)).operator_concat (GGS_string (" grammar")),  var_cas_labelSignature,  operand_60002->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1594)) ;
    GGS_semanticExpressionForGeneration  var_cas_sourceExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60002->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60002->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (1606)) ;
      }
    }
    const GGS_bool cond_61461 = operand_60002->mSourceExpressionIsFile ;
    if (cond_61461.isBuiltAndTrue ()) {
      const GGS_bool cond_61448 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1614))).operator_isNotEqual (var_cas_inPredefinedTypes.mLStringType) ;
      if (cond_61448.isBuiltAndTrue ()) {
        operand_60002->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source file path and its type should be '@lstring', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1616)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1616)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1618)) ;
      }
    }else if (cond_61461.isBuiltAndFalse ()) {
      const GGS_bool cond_61700 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1619))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
      if (cond_61700.isBuiltAndTrue ()) {
        operand_60002->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source string and its type should be '@string', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1621)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1621)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1623)) ;
      }
    }
    const GGS_bool cond_62028 = operand_60002->mSourceExpressionIsFile ;
    if (cond_62028.isBuiltAndTrue ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceFileForGeneration ::constructor_new (inLexique, operand_60002->mInstructionLocation, operand_60002->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1628)), operand_60002->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1626))) ;
    }else if (cond_62028.isBuiltAndFalse ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceExpressionForGeneration ::constructor_new (inLexique, operand_60002->mInstructionLocation, operand_60002->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1636)), operand_60002->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1634))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readWriteAccessWithInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readWriteAccessWithInstructionAST * operand_62472,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62472 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_62472->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_62472->mKeyExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1654)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_62472->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1661)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1661))) ;
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_62472->mReceiverName, var_cas_targetType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (1665)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_63239 (operand_62472->mFieldList, true) ;
      const GGS_lstringlist::cElement * operand_63239 = NULL ;
      while (((operand_63239 = enumerator_63239.nextObject ()))) {
        macroValidPointer (operand_63239) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1667)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_63239->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1668)) ;
        }
      }
    }
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_targetType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1671)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_63565 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_62472->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1673))) ;
    if (NULL != operand_63565) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_63565->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_63878 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_63878.isBuiltAndTrue ()) {
        operand_62472->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1678)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1681)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_63878.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_63932 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_63932 = NULL ;
          while (((operand_63932 = enumerator_63932.nextObject ()))) {
            macroValidPointer (operand_63932) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_63932->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_63932->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1684))) ;
          }
        }
        operand_62472->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_62472->mAccessName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1692)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_64799 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_64799.isBuiltAndTrue ()) {
      operand_62472->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_62472->mAccessName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1697)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1698)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1699)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1700)) ;
    }else if (cond_64799.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_64835 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_64835 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_64853 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_64853 = NULL ;
        while (((operand_64835 = enumerator_64835.nextObject ()))
            && ((operand_64853 = enumerator_64853.nextObject ()))) {
          macroValidPointer (operand_64835) ;
          macroValidPointer (operand_64853) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_64853->mType,  operand_64835->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)),  operand_62472->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)) COMMA_SOURCE_FILE_AT_LINE (1702)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)) ;
    GGS_localInitializedVariableList  var_cas_localInitializedVariableList = GGS_localInitializedVariableList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_65149 (var_cas_targetType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)), true) ;
      const GGS_typedAttributeList::cElement * operand_65149 = NULL ;
      while (((operand_65149 = enumerator_65149.nextObject ()))) {
        macroValidPointer (operand_65149) ;
        var_cas_localInitializedVariableList.addAssign_operation (operand_65149->mAttributeTypeIndex, GGS_lstring ::constructor_new (inLexique, (operand_62472->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1712))).operator_concat (operand_65149->mAttributeName), operand_62472->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)) COMMA_SOURCE_FILE_AT_LINE (1712)), ((var_cas_objectArrayCppName).operator_concat (GGS_string ("->mAttribute_"))).operator_concat (operand_65149->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  var_cas_localInitializedVariableList,  operand_62472->m_do_Instructions,  operand_62472->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1717)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_62472->m_else_Instructions,  operand_62472->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1729)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_62472->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1739)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readWriteWithInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, var_cas_targetType, operand_62472->mFieldList, operand_62472->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1741))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readAccessWithInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readAccessWithInstructionAST * operand_66619,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66619 != NULL) {
    operand_66619->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @readAccessWithInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1764)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_67077,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_67077 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_67077->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_67077->mSwitchExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1776)) ;
      }
    }
    const GGS_bool cond_67822 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1783)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1783))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1783))) ;
    if (cond_67822.isBuiltAndTrue ()) {
      operand_67077->mEndOfSwitchExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the switch expression type should be an instance of an enumeration type (the '@")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1785)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1785)))).operator_concat (GGS_string ("' type is not an enumeration type)")) COMMA_SOURCE_FILE_AT_LINE (1786)) ;
    }
    const GGS_stringset  var_cas_enumConstantStringSet = var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)).reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)) ;
    GGS_stringset  var_cas_constantsNamedInSwitchInstruction = GGS_stringset ::constructor_emptySet () ;
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)) ;
    GGS_switchBranchesForGeneration  var_cas_switchBranchesForGeneration = GGS_switchBranchesForGeneration ::constructor_emptyList () ;
    {
      GGS_switchBranchesAST::cEnumerator enumerator_68171 (operand_67077->mBranches, true) ;
      const GGS_switchBranchesAST::cElement * operand_68171 = NULL ;
      while (((operand_68171 = enumerator_68171.nextObject ()))) {
        macroValidPointer (operand_68171) ;
        {
          GGS_lstringlist::cEnumerator enumerator_68206 (operand_68171->mSwitchConstantList, true) ;
          const GGS_lstringlist::cElement * operand_68206 = NULL ;
          while (((operand_68206 = enumerator_68206.nextObject ()))) {
            macroValidPointer (operand_68206) ;
            const GGS_bool cond_68561 = var_cas_enumConstantStringSet.reader_hasKey (operand_68206->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1795))) ;
            if (cond_68561.isBuiltAndTrue ()) {
              const GGS_bool cond_68481 = var_cas_constantsNamedInSwitchInstruction.reader_hasKey (operand_68206->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1796))) ;
              if (cond_68481.isBuiltAndTrue ()) {
                operand_68206->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_68206->mValue)).operator_concat (GGS_string ("' constant is already named in this switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1800)) ;
              }
              var_cas_constantsNamedInSwitchInstruction.addAssign_operation (operand_68206->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1801))) ;
            }else if (cond_68561.isBuiltAndFalse ()) {
              operand_68206->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("'")).operator_concat (operand_68206->mValue)).operator_concat (GGS_string ("' is not a constant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1806)) ;
            }
          }
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_68171->mInstructions,  operand_68171->mEndOfBranch,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1809)) ;
        var_cas_switchBranchesForGeneration.addAssign_operation (operand_68171->mSwitchConstantList, var_cas_instructionList) ;
      }
    }
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_67077->mEndOf_switch_instruction COMMA_SOURCE_FILE_AT_LINE (1821)) ;
    const GGS_stringset  var_cas_forgottenConstants = var_cas_enumConstantStringSet.substract_operation (inLexique, var_cas_constantsNamedInSwitchInstruction COMMA_SOURCE_FILE_AT_LINE (1823)) ;
    const GGS_bool cond_69639 = (var_cas_forgottenConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_69639.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_69445 (var_cas_forgottenConstants, true) ;
        while (enumerator_69445.hasCurrentObject ()) {
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (enumerator_69445._key (HERE)) ;
          enumerator_69445.next () ;
        }
      }
      operand_67077->mEndOf_switch_instruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the switch instruction should name all enumeration constants; missing constants are:")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1832)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_switchInstructionForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_switchBranchesForGeneration COMMA_SOURCE_FILE_AT_LINE (1834))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_69962,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_69962 != NULL) {
    GGS_semanticExpressionListForGeneration  var_cas_expressionList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_70247 (operand_69962->mMatchedExpressionList, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_70247 = NULL ;
      while (((operand_70247 = enumerator_70247.nextObject ()))) {
        macroValidPointer (operand_70247) ;
        GGS_semanticExpressionForGeneration  var_cas_matchedExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_70247->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_70247->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_matchedExpression COMMA_SOURCE_FILE_AT_LINE (1852)) ;
          }
        }
        var_cas_expressionList.addAssign_operation (var_cas_matchedExpression) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_matchedExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)) ;
        const GGS_bool cond_70944 = ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1861))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)))).operator_and ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1861))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)))) ;
        if (cond_70944.isBuiltAndTrue ()) {
          operand_70247->mEndOfExpressionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is an instance of '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1863)))).operator_concat (GGS_string ("' type, but this type is neither an enumeration, neither a class")) COMMA_SOURCE_FILE_AT_LINE (1865)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1868)) ;
    GGS_matchInstructionBranchListForGeneration  var_cas_matchInstructionBranchList = GGS_matchInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_matchInstructionBranchListAST::cEnumerator enumerator_71159 (operand_69962->mMatchInstructionBranchList, true) ;
      const GGS_matchInstructionBranchListAST::cElement * operand_71159 = NULL ;
      while (((operand_71159 = enumerator_71159.nextObject ()))) {
        macroValidPointer (operand_71159) ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        GGS_matchListForGeneration  var_cas_matchListForGeneration = GGS_matchListForGeneration ::constructor_emptyList () ;
        const GGS_bool cond_73667 = (var_cas_expressionList.reader_length ()).operator_isEqual (operand_71159->mMatchEntryList.reader_length ()) ;
        if (cond_73667.isBuiltAndTrue ()) {
          {
            GGS_semanticExpressionListForGeneration::cEnumerator enumerator_71393 (var_cas_expressionList, true) ;
            const GGS_semanticExpressionListForGeneration::cElement * operand_71393 = NULL ;
            GGS_matchEntryListAST::cEnumerator enumerator_71410 (operand_71159->mMatchEntryList, true) ;
            const GGS_matchEntryListAST::cElement * operand_71410 = NULL ;
            while (((operand_71393 = enumerator_71393.nextObject ()))
                && ((operand_71410 = enumerator_71410.nextObject ()))) {
              macroValidPointer (operand_71393) ;
              macroValidPointer (operand_71410) ;
              const GGS_unifiedTypeMapProxy  var_cas_type = operand_71393->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1876)) ;
              const GGS_bool cond_72774 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1877))).operator_isEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1877))) ;
              if (cond_72774.isBuiltAndTrue ()) {
                const GGS_bool cond_72455 = operand_71410->mIsType ;
                if (cond_72455.isBuiltAndTrue ()) {
                  const GGS_unifiedTypeMapProxy  var_cas_namedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_71410->mTypeNameOrEnumerationConstantName COMMA_SOURCE_FILE_AT_LINE (1879)) ;
                  GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
                  GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                  GGS_uint _variant_72001 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1882)) ;
                  GGS_bool _condition_72001 (_variant_72001.isBuilt (), true) ;
                  while (_condition_72001.isBuiltAndTrue ()) {
                    _condition_72001 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1883)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1883))).operator_not ()) ;
                    if (_condition_72001.isBuiltAndTrue ()) {
                      if (_variant_72001.uintValue () == 0) {
                        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1886)) ;
                        _condition_72001 = GGS_bool (false) ;
                      }else{
                        _variant_72001.decrement_operation (inLexique COMMA_HERE) ;
                        var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1884)) ;
                        var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                      }
                    }
                  }
                  const GGS_bool cond_72271 = (var_cas_found).operator_not () ;
                  if (cond_72271.isBuiltAndTrue ()) {
                    operand_71410->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_71410->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1891)) ;
                  }else if (cond_72271.isBuiltAndFalse ()) {
                    const GGS_bool cond_72435 = (operand_71410->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                    if (cond_72435.isBuiltAndTrue ()) {
                      var_cas_localConstantList.addAssign_operation (var_cas_t, operand_71410->mLocalConstantName, GGS_bool (false), GGS_string ("match_instruction_constant_name")) ;
                    }
                  }
                }else if (cond_72455.isBuiltAndFalse ()) {
                  operand_71410->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a type that inherits from '@")).operator_concat (operand_71393->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)))).operator_concat (GGS_string ("' class is expected here")) COMMA_SOURCE_FILE_AT_LINE (1898)) ;
                }
                var_cas_matchListForGeneration.addAssign_operation (GGS_bool (true), operand_71410->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1899)), operand_71410->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1899))) ;
              }else if (cond_72774.isBuiltAndFalse ()) {
                const GGS_bool cond_73550 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1900))).operator_isEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1900))) ;
                if (cond_73550.isBuiltAndTrue ()) {
                  const GGS_bool cond_73051 = operand_71410->mIsType ;
                  if (cond_73051.isBuiltAndTrue ()) {
                    operand_71410->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of the '@")).operator_concat (operand_71393->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (1905)) ;
                  }else if (cond_73051.isBuiltAndFalse ()) {
                    const GGS_bool cond_73369 = (var_cas_type.reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)).reader_hasKey (operand_71410->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)))).operator_not () ;
                    if (cond_73369.isBuiltAndTrue ()) {
                      operand_71410->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_71410->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' symbol is not a constant of the '@"))).operator_concat (operand_71393->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1907)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1907)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1909)) ;
                    }
                  }
                  var_cas_matchListForGeneration.addAssign_operation (GGS_bool (false), operand_71410->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1912)), operand_71393->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1913)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1913))) ;
                }else if (cond_73550.isBuiltAndFalse ()) {
                  operand_71410->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (1917)) ;
                }
              }
            }
          }
        }else if (cond_73667.isBuiltAndFalse ()) {
          operand_71159->mEndOfMatchEntryList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this match list should contain ")).operator_concat (var_cas_expressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1921)))).operator_concat (GGS_string (" elements, but it acually contains "))).operator_concat (operand_71159->mMatchEntryList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1922))) COMMA_SOURCE_FILE_AT_LINE (1924)) ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_71159->mMatchBranchInstructionList,  operand_71159->mEndOf_instructionList,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1927)) ;
        var_cas_matchInstructionBranchList.addAssign_operation (var_cas_matchListForGeneration, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_elseInstructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_69962->mElseInstructionList,  operand_69962->mEndOf_match_instruction,  var_cas_ioVariableMap,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1942)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_69962->mEndOf_match_instruction COMMA_SOURCE_FILE_AT_LINE (1953)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_matchInstructionForGeneration ::constructor_new (inLexique, var_cas_expressionList, var_cas_matchInstructionBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1955))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__structuredCastInstructionAST__analyzeSemanticInstruction, gClassInfoFor__structuredCastInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readWriteAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

