//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 14th, 2010, at 22h40'49"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_2424,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2424 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_2424->mTypeName,  operand_2424->mConstructorName,  operand_2424->mConstructorExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (49)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_2424->mTypeName COMMA_SOURCE_FILE_AT_LINE (61)) ;
    const GGS_bool cond_3393 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_3393.isBuiltAndTrue ()) {
      operand_2424->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (64)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_2424->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (66)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_2424->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_3650 = operand_2424->mIsConstant ;
    if (cond_3650.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_2424->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (70)) ;
    }else if (cond_3650.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_2424->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_2424->mIsConstant, var_cas_targetVariableCppName, operand_2424->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (75))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_4248,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4248 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_4248->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_4248->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4248->mTypeName COMMA_SOURCE_FILE_AT_LINE (102)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4248->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_5007 = operand_4248->mIsConstant ;
    if (cond_5007.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4248->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }else if (cond_5007.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4248->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (107)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (110)),  operand_4248->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (110)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_4248->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (112))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_5623,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5623 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5623->mTypeName COMMA_SOURCE_FILE_AT_LINE (129)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_5623->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_5623->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (131)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (133))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_6471,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6471 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6471->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6471->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (149)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_7119 = (operand_6471->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7119.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_6471->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }else if (cond_7119.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_6471->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (161)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_7257 (operand_6471->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_7257 = NULL ;
        while (((operand_7257 = enumerator_7257.nextObject ()))) {
          macroValidPointer (operand_7257) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_7257->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (164)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (168)),  operand_6471->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (168)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_6471->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (170))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_7868,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7868 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_7868->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7868->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (187)) ;
      }
    }
    const GGS_bool cond_8524 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (194))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_8524.isBuiltAndTrue ()) {
      operand_7868->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (196)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (198)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (199))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (217)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (224))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_10935 = var_cas_outUseLocationReader ;
  if (cond_10935.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (226)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
    elementOf_GGS_readerMap * operand_9664 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_9664) {
      const GGS_bool cond_10099 = (operand_9664->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_10099.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (230)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (230)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (233)) ;
      }else if (cond_10099.isBuiltAndFalse ()) {
        const GGS_bool cond_10566 = (operand_9664->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_10566.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (235)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (235)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_9664->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (236)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (239)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (242)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (242)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (245)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (248)) ;
    }
  }
  const GGS_bool cond_11427 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (255))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_11427.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (259)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_11590,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11590 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_11590->mLocationExpression,  operand_11590->mMessageExpression,  operand_11590->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (274)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_12293 (operand_11590->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_12293 = NULL ;
      while (((operand_12293 = enumerator_12293.nextObject ()))) {
        macroValidPointer (operand_12293) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_12387_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_12293->mValue, automatic_var_12387_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (290)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (294))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_12815,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12815 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_12815->mLocationExpression,  operand_12815->mMessageExpression,  operand_12815->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (314)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (327))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_14339,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14339 != NULL) {
    const GGS_bool cond_15248 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (359)))).operator_or ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (360)))) ;
    if (cond_15248.isBuiltAndTrue ()) {
      operand_14339->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (363)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (365)) ;
    }else if (cond_15248.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_14339->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_14339->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (367)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (374)),  operand_14339->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (374)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (376))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_15944,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15944 != NULL) {
    const GGS_bool cond_16771 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (394))) ;
    if (cond_16771.isBuiltAndTrue ()) {
      operand_15944->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (396)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (397)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (399)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_15944->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (403)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_17021 (operand_15944->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_17021 = NULL ;
      while (((operand_17021 = enumerator_17021.nextObject ()))) {
        macroValidPointer (operand_17021) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_17021->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (406)) ;
        }
      }
    }
    const GGS_bool cond_17454 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_17454.isBuiltAndTrue ()) {
      operand_15944->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (411)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (412)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (414)) ;
    }
    const GGS_bool cond_17712 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_15944->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (416))) ;
    if (cond_17712.isBuiltAndTrue ()) {
      operand_15944->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (420)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_15944->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_15944->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (423))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_18121,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18121 != NULL) {
    const GGS_bool cond_18946 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (441))) ;
    if (cond_18946.isBuiltAndTrue ()) {
      operand_18121->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (443)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (444)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (446)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_18121->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (449)) ;
    const GGS_bool cond_19414 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_19414.isBuiltAndTrue ()) {
      operand_18121->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (453)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (454)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (456)) ;
    }
    const GGS_bool cond_19660 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_18121->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (458))) ;
    if (cond_19660.isBuiltAndTrue ()) {
      operand_18121->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (462)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_18121->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (463))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (465))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_20042,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20042 != NULL) {
    const GGS_bool cond_20875 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (482))) ;
    if (cond_20875.isBuiltAndTrue ()) {
      operand_20042->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (484)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (485)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (487)) ;
    }else if (cond_20875.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_20042->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (488)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488)))).operator_concat (GGS_string ("_"))).operator_concat (operand_20042->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488))) ;
      var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration.addAssign_operation (var_cas_inFormalArgumentType, var_cas_cppVarName) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (492))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_22312 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_22312.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("the '")).operator_concat (var_cas_inRoutineName)).operator_concat (GGS_string ("' "))).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" header defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (513)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (515)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (518)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration.drop () ;
  }else if (cond_22312.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration = GGS_temporaryInputVariableForRoutineInvocationForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_22620 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_22620 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_22643 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_22643 = NULL ;
      while (((operand_22620 = enumerator_22620.nextObject ()))
          && ((operand_22643 = enumerator_22643.nextObject ()))) {
        macroValidPointer (operand_22620) ;
        macroValidPointer (operand_22643) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_22643->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_22643->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_22620->mFormalArgumentType, operand_22620->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (523)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_23189,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23189 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_23189->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (547)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_23189->mRoutineName,  GGS_string ("routine"),  var_cas_routineSignature,  operand_23189->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (551)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_23189->mRoutineName, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (563))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_24416,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24416 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_24416->mTypeName COMMA_SOURCE_FILE_AT_LINE (579)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_24876 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) ;
    if (temp_24876.isBuilt ()) {
      temp_24876 (HERE)->method_searchKey (inLexique, operand_24416->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (583)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_24416->mMethodName,  GGS_string ("class method"),  var_cas_routineSignature,  operand_24416->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (587)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_24416->mTypeName, operand_24416->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (599))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_25859,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25859 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_25859->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_25859->mReceiverExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (618)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_location  automatic_var_26486_0 ;
    GGS_readerQualifier automatic_var_26486_1 ;
    const GGS_instanceMethodMap  temp_26427 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (622)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (622)) ;
    if (temp_26427.isBuilt ()) {
      temp_26427 (HERE)->method_searchKey (inLexique, operand_25859->mMethodName, var_cas_routineSignature, automatic_var_26486_0, var_cas_hasCompilerArgument, automatic_var_26486_1 COMMA_SOURCE_FILE_AT_LINE (622)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_25859->mMethodName,  GGS_string ("instance method"),  var_cas_routineSignature,  operand_25859->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (626)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverExpression, operand_25859->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (640)), var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (638))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_27439,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27439 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_27439->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (658)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_27861 (operand_27439->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_27861 = NULL ;
      while (((operand_27861 = enumerator_27861.nextObject ()))) {
        macroValidPointer (operand_27861) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (660)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_27861->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (661)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_modifierMap  temp_28150 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (666)) ;
    if (temp_28150.isBuilt ()) {
      temp_28150 (HERE)->method_searchKey (inLexique, operand_27439->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (666)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_27439->mModifierName,  GGS_string ("modifier"),  var_cas_routineSignature,  operand_27439->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (670)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_27439->mReceiverStructAttributes, operand_27439->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (682))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_29178,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29178 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29178->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29178->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (702)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_29178->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (711)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_29807 (operand_29178->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_29807 = NULL ;
      while (((operand_29807 = enumerator_29807.nextObject ()))) {
        macroValidPointer (operand_29807) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_29807->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (714)) ;
        }
      }
    }
    const GGS_bool cond_30234 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_30234.isBuiltAndTrue ()) {
      operand_29178->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (719)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (721)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (723)),  operand_29178->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (723)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_29178->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (725))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_30689,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30689 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_30689->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (743)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_31103 (operand_30689->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_31103 = NULL ;
      while (((operand_31103 = enumerator_31103.nextObject ()))) {
        macroValidPointer (operand_31103) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (745)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_31103->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (746)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (749)) ;
    const GGS_bool cond_31690 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_31690.isBuiltAndTrue ()) {
      operand_30689->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (752)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (755)) ;
    }else if (cond_31690.isBuiltAndFalse ()) {
      const GGS_bool cond_32038 = (operand_30689->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_32038.isBuiltAndTrue ()) {
        operand_30689->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (757)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (758)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_30689->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (759)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (761)) ;
      }else if (cond_32038.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_32141 (operand_30689->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_32141 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_32169 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_32169 = NULL ;
          while (((operand_32141 = enumerator_32141.nextObject ()))
              && ((operand_32169 = enumerator_32169.nextObject ()))) {
            macroValidPointer (operand_32141) ;
            macroValidPointer (operand_32169) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32141->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_32141->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (765)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_32169->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (766)),  operand_32141->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (766)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_30689->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (770))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_32830,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32830 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_32830->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (789)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_33253 (operand_32830->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_33253 = NULL ;
      while (((operand_33253 = enumerator_33253.nextObject ()))) {
        macroValidPointer (operand_33253) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_33253->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (792)) ;
        }
      }
    }
    const GGS_bool cond_33669 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (795))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (795)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_33669.isBuiltAndTrue ()) {
      operand_32830->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (797)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (799)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_32830->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (801))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_33997,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33997 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_33997->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (818)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_34420 (operand_33997->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_34420 = NULL ;
      while (((operand_34420 = enumerator_34420.nextObject ()))) {
        macroValidPointer (operand_34420) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (820)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_34420->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (821)) ;
        }
      }
    }
    const GGS_bool cond_34836 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (824))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (824)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_34836.isBuiltAndTrue ()) {
      operand_33997->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (826)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (828)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_33997->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (830))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_35162,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35162 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_35162->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_35162->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (846)) ;
      }
    }
    const GGS_bool cond_35830 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (853))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_35830.isBuiltAndTrue ()) {
      operand_35162->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (855)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (855)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (857)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (859))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_36113,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36113 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_36316 (operand_36113->mLogList, true) ;
      const GGS_logListAST::cElement * operand_36316 = NULL ;
      while (((operand_36316 = enumerator_36316.nextObject ()))) {
        macroValidPointer (operand_36316) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36316->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_36316->mLogExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (875)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_36316->mLogMessage, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (882))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_36869,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36869 != NULL) {
    operand_36869->mGrammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction: grammarInstructionAST") COMMA_SOURCE_FILE_AT_LINE (900)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_37671 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_37671 = NULL ;
    while (((operand_37671 = enumerator_37671.nextObject ()))) {
      macroValidPointer (operand_37671) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_37671->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_37671->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap COMMA_SOURCE_FILE_AT_LINE (913)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_38010,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38010 != NULL) {
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (930)) ;
    GGS_ifBranchListForGeneration  var_cas_ifBranchListForGeneration = GGS_ifBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_ifBranchListAST::cEnumerator enumerator_38335 (operand_38010->mBranchList, true) ;
      const GGS_ifBranchListAST::cElement * operand_38335 = NULL ;
      while (((operand_38335 = enumerator_38335.nextObject ()))) {
        macroValidPointer (operand_38335) ;
        var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (933)) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38335->mIFexpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_38335->mIFexpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (935)) ;
          }
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_38335->mIFinstructionList,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (942)) ;
        var_cas_ifBranchListForGeneration.addAssign_operation (var_cas_expression, var_cas_instructionList) ;
        var_cas_ioVariableMap.modifier_endBranch (inLexique, operand_38335->mEndOfBranch COMMA_SOURCE_FILE_AT_LINE (950)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (952)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_38010->mElseInstructionList,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (954)) ;
    var_cas_ioVariableMap.modifier_endBranch (inLexique, operand_38010->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (961)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_38010->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (962)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, var_cas_ifBranchListForGeneration, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (963))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_39621,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39621 != NULL) {
    operand_39621->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @foreachInstructionAST") COMMA_SOURCE_FILE_AT_LINE (980)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@withInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__withInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_withInstructionAST * operand_40073,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40073 != NULL) {
    operand_40073->mTargetObjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @withInstructionAST") COMMA_SOURCE_FILE_AT_LINE (993)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_40521,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40521 != NULL) {
    operand_40521->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @switchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1006)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_40973,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40973 != NULL) {
    operand_40973->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @matchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1019)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_41423,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41423 != NULL) {
    operand_41423->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @loopInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1032)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_castInstructionAST * operand_41872,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41872 != NULL) {
    operand_41872->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @castInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1045)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__withInstructionAST__analyzeSemanticInstruction, gClassInfoFor__withInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__castInstructionAST__analyzeSemanticInstruction, gClassInfoFor__castInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

