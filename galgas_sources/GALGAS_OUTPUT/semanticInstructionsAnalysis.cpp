//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 2nd, 2010, at 13h20'31"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_variableMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_variableMap::e_variableMap (void) :
mTypeProxy (),
mNamePrefix () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@variableMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_variableMap ("variableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_variableMap::
elementOf_GGS_variableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_variableMap & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_variableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mNamePrefix.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_variableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_variableMap * ptr = dynamic_cast <const elementOf_GGS_variableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mNamePrefix.operator_isEqual (ptr->mInfo.mNamePrefix)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_variableMap::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_variableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isNotEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_unifiedTypeMapProxy & inParameter0,
                const GGS_string& inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_variableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mNamePrefix = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mNamePrefix ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_searchKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_variableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_variableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @variableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_variableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mNamePrefix (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mNamePrefix ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_variableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_variableMap * p = NULL ;
    macroMyNew (p, GGS_variableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_variableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_variableMap * p = dynamic_cast <const GGS_variableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_variableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_variableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_variableMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationWithInitializationAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationWithInitializationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationWithInitializationAST * operand_2995,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2995 != NULL) {
    inLexique.printMessage (GGS_string ("@localVariableDeclarationWithInitializationAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationWithAssignmentAST * operand_3430,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3430 != NULL) {
    inLexique.printMessage (GGS_string ("@localVariableDeclarationWithAssignmentAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (66)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localConstantDeclarationWithSourceExpressionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localConstantDeclarationWithSourceExpressionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localConstantDeclarationWithSourceExpressionAST * operand_3867,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3867 != NULL) {
    inLexique.printMessage (GGS_string ("@localConstantDeclarationWithSourceExpressionASTanalyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (76)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_4289,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4289 != NULL) {
    inLexique.printMessage (GGS_string ("@localVariableDeclarationAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localConstantDeclarationWithConstructorCallAST * operand_4711,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4711 != NULL) {
    inLexique.printMessage (GGS_string ("@localConstantDeclarationWithConstructorCallAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_5130,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5130 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetPrefix ;
    const GGS_variableMap  temp_5404 = var_cas_ioVariableMap ;
    if (temp_5404.isBuilt ()) {
      temp_5404 (HERE)->method_searchKey (inLexique, operand_5130->mTargetVariableName, var_cas_targetType, var_cas_targetPrefix COMMA_SOURCE_FILE_AT_LINE (109)) ;
    }
    inLexique.printMessage (GGS_string ("@assignmentInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_5681,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5681 != NULL) {
    inLexique.printMessage (GGS_string ("@appendInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_6068,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6068 != NULL) {
    inLexique.printMessage (GGS_string ("@sendInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_6456,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6456 != NULL) {
    inLexique.printMessage (GGS_string ("@foreachInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_6842,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6842 != NULL) {
    inLexique.printMessage (GGS_string ("@ifInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (150)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_7226,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7226 != NULL) {
    inLexique.printMessage (GGS_string ("@errorInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_7615,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7615 != NULL) {
    inLexique.printMessage (GGS_string ("@warningInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (170)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_8010,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8010 != NULL) {
    inLexique.printMessage (GGS_string ("@routineCallInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (180)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_8403,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8403 != NULL) {
    inLexique.printMessage (GGS_string ("@matchInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (190)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_castInstructionAST * operand_8789,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8789 != NULL) {
    inLexique.printMessage (GGS_string ("@castInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (200)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_9173,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9173 != NULL) {
    inLexique.printMessage (GGS_string ("@addInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (210)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@removeInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__removeInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_removeInstructionAST * operand_9559,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9559 != NULL) {
    inLexique.printMessage (GGS_string ("@removeInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (220)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_9951,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9951 != NULL) {
    inLexique.printMessage (GGS_string ("@incrementInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (230)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_10346,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10346 != NULL) {
    inLexique.printMessage (GGS_string ("@decrementInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (240)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_10736,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10736 != NULL) {
    inLexique.printMessage (GGS_string ("@loopInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (250)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_11124,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11124 != NULL) {
    inLexique.printMessage (GGS_string ("@messageInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (260)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_11511,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11511 != NULL) {
    inLexique.printMessage (GGS_string ("@logInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (270)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_11898,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11898 != NULL) {
    inLexique.printMessage (GGS_string ("@grammarInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (280)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@withInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__withInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_withInstructionAST * operand_12286,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12286 != NULL) {
    inLexique.printMessage (GGS_string ("@withInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (290)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_12673,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12673 != NULL) {
    inLexique.printMessage (GGS_string ("@switchInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (300)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_13070,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13070 != NULL) {
    inLexique.printMessage (GGS_string ("@typeMethodCallInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (310)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_13471,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13471 != NULL) {
    inLexique.printMessage (GGS_string ("@methodCallInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (320)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_13870,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13870 != NULL) {
    inLexique.printMessage (GGS_string ("@modifierCallInstructionAST analyzeSemanticInstruction\n") COMMA_SOURCE_FILE_AT_LINE (330)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationWithInitializationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationWithInitializationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localConstantDeclarationWithSourceExpressionAST__analyzeSemanticInstruction, gClassInfoFor__localConstantDeclarationWithSourceExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__castInstructionAST__analyzeSemanticInstruction, gClassInfoFor__castInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__removeInstructionAST__analyzeSemanticInstruction, gClassInfoFor__removeInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__withInstructionAST__analyzeSemanticInstruction, gClassInfoFor__withInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

