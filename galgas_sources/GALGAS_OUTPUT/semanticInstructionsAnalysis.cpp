//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 8th, 2010, at 20h5'8"                          *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_2424,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2424 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_2424->mTypeName,  operand_2424->mConstructorName,  operand_2424->mConstructorExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList COMMA_SOURCE_FILE_AT_LINE (48)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_2424->mTypeName COMMA_SOURCE_FILE_AT_LINE (59)) ;
    const GGS_bool cond_3338 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_3338.isBuiltAndTrue ()) {
      operand_2424->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (62)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_2424->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (64)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_2424->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_3595 = operand_2424->mIsConstant ;
    if (cond_3595.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_2424->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (68)) ;
    }else if (cond_3595.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_2424->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (70)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_2424->mIsConstant, var_cas_targetVariableCppName, operand_2424->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), var_cas_constructorEffectiveParameterList COMMA_SOURCE_FILE_AT_LINE (73))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_4168,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4168 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_4168->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_4168->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (92)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4168->mTypeName COMMA_SOURCE_FILE_AT_LINE (99)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4168->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_4927 = operand_4168->mIsConstant ;
    if (cond_4927.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4168->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (102)) ;
    }else if (cond_4927.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4168->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (104)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (107)),  operand_4168->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (107)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_4168->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (109))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_5543,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5543 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5543->mTypeName COMMA_SOURCE_FILE_AT_LINE (126)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_5543->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_5543->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (128)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (130))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_6391,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6391 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6391->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6391->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_7039 = (operand_6391->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7039.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_6391->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (156)) ;
    }else if (cond_7039.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_6391->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (158)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_7177 (operand_6391->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_7177 = NULL ;
        while (((operand_7177 = enumerator_7177.nextObject ()))) {
          macroValidPointer (operand_7177) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_7177->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (161)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (165)),  operand_6391->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (165)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_6391->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (167))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_7790,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7790 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_7790->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_7790->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (184)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_7790->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (193)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_8419 (operand_7790->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_8419 = NULL ;
      while (((operand_8419 = enumerator_8419.nextObject ()))) {
        macroValidPointer (operand_8419) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_8419->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (196)) ;
        }
      }
    }
    const GGS_bool cond_8846 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (199)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_8846.isBuiltAndTrue ()) {
      operand_7790->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (205)),  operand_7790->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (205)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_7790->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (207))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_9302,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9302 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_9302->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9302->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (224)) ;
      }
    }
    const GGS_bool cond_9958 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (231))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_9958.isBuiltAndTrue ()) {
      operand_9302->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (233)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (235)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (236))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (254)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (261))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_12369 = var_cas_outUseLocationReader ;
  if (cond_12369.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
    elementOf_GGS_readerMap * operand_11098 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_11098) {
      const GGS_bool cond_11533 = (operand_11098->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_11533.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (267)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (270)) ;
      }else if (cond_11533.isBuiltAndFalse ()) {
        const GGS_bool cond_12000 = (operand_11098->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_12000.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (272)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (272)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_11098->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (273)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (276)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (279)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (279)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (282)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (285)) ;
    }
  }
  const GGS_bool cond_12861 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_12861.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (294)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (294)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_13024,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13024 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_13024->mLocationExpression,  operand_13024->mMessageExpression,  operand_13024->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (311)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_13727 (operand_13024->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_13727 = NULL ;
      while (((operand_13727 = enumerator_13727.nextObject ()))) {
        macroValidPointer (operand_13727) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_13821_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_13727->mValue, automatic_var_13821_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (327)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (331))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_14249,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14249 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_14249->mLocationExpression,  operand_14249->mMessageExpression,  operand_14249->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (351)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (364))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_15773,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15773 != NULL) {
    const GGS_bool cond_16682 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (396)))).operator_or ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (397)))) ;
    if (cond_16682.isBuiltAndTrue ()) {
      operand_15773->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (399)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (400)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (402)) ;
    }else if (cond_16682.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_15773->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_15773->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (404)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (411)),  operand_15773->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (411)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (413))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_17378,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17378 != NULL) {
    const GGS_bool cond_18205 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (431))) ;
    if (cond_18205.isBuiltAndTrue ()) {
      operand_17378->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (433)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (434)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (436)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_17378->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (440)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_18455 (operand_17378->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_18455 = NULL ;
      while (((operand_18455 = enumerator_18455.nextObject ()))) {
        macroValidPointer (operand_18455) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (442)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_18455->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (443)) ;
        }
      }
    }
    const GGS_bool cond_18888 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_18888.isBuiltAndTrue ()) {
      operand_17378->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (448)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (449)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (451)) ;
    }
    const GGS_bool cond_19146 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_17378->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (453))) ;
    if (cond_19146.isBuiltAndTrue ()) {
      operand_17378->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (457)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_17378->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (458))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_17378->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (460))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_19555,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19555 != NULL) {
    const GGS_bool cond_20380 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (478))) ;
    if (cond_20380.isBuiltAndTrue ()) {
      operand_19555->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (480)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (481)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (483)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_19555->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (486)) ;
    const GGS_bool cond_20848 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_20848.isBuiltAndTrue ()) {
      operand_19555->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (490)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (491)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (493)) ;
    }
    const GGS_bool cond_21094 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_19555->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (495))) ;
    if (cond_21094.isBuiltAndTrue ()) {
      operand_19555->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (499)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_19555->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (500))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (502))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_21476,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21476 != NULL) {
    const GGS_bool cond_22309 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
    if (cond_22309.isBuiltAndTrue ()) {
      operand_21476->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (521)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (522)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (524)) ;
    }else if (cond_22309.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_21476->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (525)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (525)))).operator_concat (GGS_string ("_"))).operator_concat (operand_21476->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (525))) ;
      var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration.addAssign_operation (var_cas_inFormalArgumentType, var_cas_cppVarName) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (529))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_22874,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22874 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_22874->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (545)) ;
    }
    const GGS_bool cond_23562 = (var_cas_routineSignature.reader_length ()).operator_isNotEqual (operand_22874->mActualParameterList.reader_length ()) ;
    if (cond_23562.isBuiltAndTrue ()) {
      operand_22874->mRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_22874->mRoutineName)).operator_concat (GGS_string ("' routine header defines "))).operator_concat (var_cas_routineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (549)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (operand_22874->mActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (551)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (553)) ;
    }else if (cond_23562.isBuiltAndFalse ()) {
      GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
      GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration = GGS_temporaryInputVariableForRoutineInvocationForGeneration ::constructor_emptyList () ;
      GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
      {
        GGS_formalParameterSignature::cEnumerator enumerator_23856 (var_cas_routineSignature, true) ;
        const GGS_formalParameterSignature::cElement * operand_23856 = NULL ;
        GGS_actualParameterListAST::cEnumerator enumerator_23878 (operand_22874->mActualParameterList, true) ;
        const GGS_actualParameterListAST::cElement * operand_23878 = NULL ;
        while (((operand_23856 = enumerator_23856.nextObject ()))
            && ((operand_23878 = enumerator_23878.nextObject ()))) {
          macroValidPointer (operand_23856) ;
          macroValidPointer (operand_23878) ;
          { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_23878->mActualParameter.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_23878->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_23856->mFormalArgumentType, operand_23856->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableForRoutineInvocationForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (558)) ;
            }
          }
        }
      }
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_22874->mRoutineName, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (570))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_24649,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24649 != NULL) {
    operand_24649->mReceiverName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @addInstructionAST") COMMA_SOURCE_FILE_AT_LINE (589)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@removeInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__removeInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_removeInstructionAST * operand_25092,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25092 != NULL) {
    operand_25092->mReceiverName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @removeInstructionAST") COMMA_SOURCE_FILE_AT_LINE (602)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_25541,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25541 != NULL) {
    operand_25541->mReceiverName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @incrementInstructionAST") COMMA_SOURCE_FILE_AT_LINE (615)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_25993,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25993 != NULL) {
    operand_25993->mReceiverName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @decrementInstructionAST") COMMA_SOURCE_FILE_AT_LINE (628)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_26443,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26443 != NULL) {
    operand_26443->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @messageInstructionAST") COMMA_SOURCE_FILE_AT_LINE (641)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_26894,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26894 != NULL) {
    operand_26894->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @logInstructionAST") COMMA_SOURCE_FILE_AT_LINE (654)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_27352,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27352 != NULL) {
    operand_27352->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @typeMethodCallInstructionAST") COMMA_SOURCE_FILE_AT_LINE (667)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_27806,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27806 != NULL) {
    operand_27806->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @methodCallInstructionAST") COMMA_SOURCE_FILE_AT_LINE (680)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_28260,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28260 != NULL) {
    operand_28260->mReceiverName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @modifierCallInstructionAST") COMMA_SOURCE_FILE_AT_LINE (693)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_28713,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28713 != NULL) {
    operand_28713->mGrammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @grammarInstructionAST") COMMA_SOURCE_FILE_AT_LINE (706)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_29169,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29169 != NULL) {
    operand_29169->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @foreachInstructionAST") COMMA_SOURCE_FILE_AT_LINE (719)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_29619,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29619 != NULL) {
    operand_29619->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @ifInstructionAST") COMMA_SOURCE_FILE_AT_LINE (732)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@withInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__withInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_withInstructionAST * operand_30066,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30066 != NULL) {
    operand_30066->mTargetObjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @withInstructionAST") COMMA_SOURCE_FILE_AT_LINE (745)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_30514,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30514 != NULL) {
    operand_30514->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @switchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (758)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_30966,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30966 != NULL) {
    operand_30966->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @matchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (771)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_31416,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31416 != NULL) {
    operand_31416->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @loopInstructionAST") COMMA_SOURCE_FILE_AT_LINE (784)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_castInstructionAST * operand_31865,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31865 != NULL) {
    operand_31865->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @castInstructionAST") COMMA_SOURCE_FILE_AT_LINE (797)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__removeInstructionAST__analyzeSemanticInstruction, gClassInfoFor__removeInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__withInstructionAST__analyzeSemanticInstruction, gClassInfoFor__withInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__castInstructionAST__analyzeSemanticInstruction, gClassInfoFor__castInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

