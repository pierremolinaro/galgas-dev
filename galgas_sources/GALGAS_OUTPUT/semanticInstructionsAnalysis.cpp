//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 7th, 2010, at 16h18'2"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@localConstantList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localConstantList::
elementOf_GGS_localConstantList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mNoWarningIfUnused (argument_2),
mCppName (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localConstantList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localConstantList * ptr = dynamic_cast <const elementOf_GGS_localConstantList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mNoWarningIfUnused.operator_isEqual (ptr->mNoWarningIfUnused).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localConstantList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNoWarningIfUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@localConstantList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localConstantList ("localConstantList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
operator_concat (const GGS_localConstantList & inOperand) const {
  GGS_localConstantList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
dotAssign_operation (const GGS_localConstantList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localConstantList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_bool p_2 = p->mNoWarningIfUnused ;
          GGS_string p_3 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_bool& argument_2,
                     const GGS_string& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mNoWarningIfUnused,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_emptyList (void) {
  GGS_localConstantList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  GGS_localConstantList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalSubListWithRange (GGS_localConstantList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mNoWarningIfUnused, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localConstantList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_bool& _out_2,
              GGS_string& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_bool& _out_2,
             GGS_string& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_bool& _out_2,
                 GGS_string& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_bool& _out_2,
                GGS_string& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localConstantList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localConstantList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localConstantList::
reader_mNoWarningIfUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNoWarningIfUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNoWarningIfUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNoWarningIfUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localConstantList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localConstantList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_localConstantList::cEnumerator::_mNoWarningIfUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNoWarningIfUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localConstantList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localConstantList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localConstantList * p = NULL ;
    macroMyNew (p, GGS_localConstantList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localConstantList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localConstantList * p = dynamic_cast <const GGS_localConstantList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localConstantList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localConstantList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localConstantList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@localInitializedVariableList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localInitializedVariableList::
elementOf_GGS_localInitializedVariableList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mCppName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localInitializedVariableList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localInitializedVariableList * ptr = dynamic_cast <const elementOf_GGS_localInitializedVariableList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localInitializedVariableList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@localInitializedVariableList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localInitializedVariableList ("localInitializedVariableList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
operator_concat (const GGS_localInitializedVariableList & inOperand) const {
  GGS_localInitializedVariableList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
dotAssign_operation (const GGS_localInitializedVariableList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localInitializedVariableList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_string p_2 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_string& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_emptyList (void) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalSubListWithRange (GGS_localInitializedVariableList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localInitializedVariableList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_string& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_string& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_string& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_string& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localInitializedVariableList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localInitializedVariableList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localInitializedVariableList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localInitializedVariableList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localInitializedVariableList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localInitializedVariableList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localInitializedVariableList * p = NULL ;
    macroMyNew (p, GGS_localInitializedVariableList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localInitializedVariableList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localInitializedVariableList * p = dynamic_cast <const GGS_localInitializedVariableList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localInitializedVariableList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localInitializedVariableList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localInitializedVariableList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_localInitializedVariableList   var_cas_inLocalInitializedVariableList,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_3392 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_3392 = NULL ;
    while (((operand_3392 = enumerator_3392.nextObject ()))) {
      macroValidPointer (operand_3392) ;
      const GGS_bool cond_3509 = operand_3392->mNoWarningIfUnused ;
      if (cond_3509.isBuiltAndTrue ()) {
        var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_3392->mName, operand_3392->mType, operand_3392->mCppName COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }else if (cond_3509.isBuiltAndFalse ()) {
        var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3392->mName, operand_3392->mType, operand_3392->mCppName COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }
    }
  }
  {
    GGS_localInitializedVariableList::cEnumerator enumerator_3678 (var_cas_inLocalInitializedVariableList, true) ;
    const GGS_localInitializedVariableList::cElement * operand_3678 = NULL ;
    while (((operand_3678 = enumerator_3678.nextObject ()))) {
      macroValidPointer (operand_3678) ;
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3678->mName, operand_3678->mType, operand_3678->mCppName COMMA_SOURCE_FILE_AT_LINE (80)) ;
    }
  }
  GGS_stringlist  var_cas_localVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3886 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3886 = NULL ;
    while (((operand_3886 = enumerator_3886.nextObject ()))) {
      macroValidPointer (operand_3886) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3886->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3886->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap, var_cas_localVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (85)) ;
        }
      }
    }
  }
  var_cas_ioVariableMap.modifier_endBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (94)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_4369,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4369 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_4369->mTypeName,  operand_4369->mConstructorName,  operand_4369->mConstructorExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (110)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4369->mTypeName COMMA_SOURCE_FILE_AT_LINE (122)) ;
    const GGS_bool cond_5381 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_5381.isBuiltAndTrue ()) {
      operand_4369->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (125)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_4369->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (127)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4369->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_5695 = operand_4369->mIsConstant ;
    if (cond_5695.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4369->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (132)) ;
    }else if (cond_5695.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4369->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (134)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, operand_4369->mInstructionLocation, var_cas_targetType, operand_4369->mIsConstant, var_cas_targetVariableCppName, operand_4369->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (137))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_6319,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6319 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6319->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6319->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (159)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6319->mTypeName COMMA_SOURCE_FILE_AT_LINE (166)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_6319->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_7178 = operand_6319->mIsConstant ;
    if (cond_7178.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_6319->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (170)) ;
    }else if (cond_7178.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_6319->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (172)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (175)),  operand_6319->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (175)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_6319->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (177))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_7794,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7794 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7794->mTypeName COMMA_SOURCE_FILE_AT_LINE (195)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_7794->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_7794->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (198)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (200))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_8742,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8742 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_8742->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8742->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (217)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_9440 = (operand_8742->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_9440.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_8742->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (227)) ;
    }else if (cond_9440.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_8742->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (229)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_9578 (operand_8742->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_9578 = NULL ;
        while (((operand_9578 = enumerator_9578.nextObject ()))) {
          macroValidPointer (operand_9578) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_9578->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (232)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (236)),  operand_8742->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (236)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_8742->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (238))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_10189,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10189 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_10189->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10189->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (256)) ;
      }
    }
    const GGS_bool cond_10895 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (263))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_10895.isBuiltAndTrue ()) {
      operand_10189->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (265)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (267)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (268))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (286)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_13306 = var_cas_outUseLocationReader ;
  if (cond_13306.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (295)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (295)) ;
    elementOf_GGS_readerMap * operand_12035 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_12035) {
      const GGS_bool cond_12470 = (operand_12035->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_12470.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (299)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (299)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (302)) ;
      }else if (cond_12470.isBuiltAndFalse ()) {
        const GGS_bool cond_12937 = (operand_12035->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_12937.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (304)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (304)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_12035->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (305)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (308)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (311)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (311)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (314)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (317)) ;
    }
  }
  const GGS_bool cond_13798 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (324))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_13798.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (326)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (328)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_13961,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13961 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_13961->mLocationExpression,  operand_13961->mMessageExpression,  operand_13961->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (344)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_14714 (operand_13961->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_14714 = NULL ;
      while (((operand_14714 = enumerator_14714.nextObject ()))) {
        macroValidPointer (operand_14714) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_14808_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_14714->mValue, automatic_var_14808_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (360)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, operand_13961->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (364))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_15262,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15262 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_15262->mLocationExpression,  operand_15262->mMessageExpression,  operand_15262->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (386)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, operand_15262->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (399))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_16743,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16743 != NULL) {
    const GGS_bool cond_17526 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (430)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (431)))) ;
    if (cond_17526.isBuiltAndTrue ()) {
      operand_16743->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (433)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (434)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (436)) ;
    }else if (cond_17526.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_16743->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_16743->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (438)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (445)),  operand_16743->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (445)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (447))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_18222,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18222 != NULL) {
    const GGS_bool cond_18923 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (464))) ;
    if (cond_18923.isBuiltAndTrue ()) {
      operand_18222->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (467)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (469)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_18222->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (473)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_19173 (operand_18222->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_19173 = NULL ;
      while (((operand_19173 = enumerator_19173.nextObject ()))) {
        macroValidPointer (operand_19173) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (475)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_19173->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (476)) ;
        }
      }
    }
    const GGS_bool cond_19606 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_19606.isBuiltAndTrue ()) {
      operand_18222->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (481)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (482)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (484)) ;
    }
    const GGS_bool cond_19864 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_18222->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (486))) ;
    if (cond_19864.isBuiltAndTrue ()) {
      operand_18222->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_18222->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_18222->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (493))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_20273,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20273 != NULL) {
    const GGS_bool cond_20972 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (510))) ;
    if (cond_20972.isBuiltAndTrue ()) {
      operand_20273->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (512)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (513)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (515)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_20273->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (518)) ;
    const GGS_bool cond_21440 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_21440.isBuiltAndTrue ()) {
      operand_20273->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (522)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (523)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (525)) ;
    }
    const GGS_bool cond_21686 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_20273->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (527))) ;
    if (cond_21686.isBuiltAndTrue ()) {
      operand_20273->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (531)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_20273->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (532))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (534))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_22068,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22068 != NULL) {
    const GGS_bool cond_22782 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (550))) ;
    if (cond_22782.isBuiltAndTrue ()) {
      operand_22068->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (552)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (553)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (555)) ;
    }else if (cond_22782.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_22068->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (556)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (556)))).operator_concat (GGS_string ("_"))).operator_concat (operand_22068->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (556))) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputJokerParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName, var_cas_inFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (558))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_23905 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_23905.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (579)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (581)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (584)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
  }else if (cond_23905.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_24076 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_24076 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_24099 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_24099 = NULL ;
      while (((operand_24076 = enumerator_24076.nextObject ()))
          && ((operand_24099 = enumerator_24099.nextObject ()))) {
        macroValidPointer (operand_24076) ;
        macroValidPointer (operand_24099) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_24099->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_24099->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_24076->mFormalArgumentType, operand_24076->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (588)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_24576,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24576 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_24576->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (612)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_24576->mRoutineName,  ((GGS_string ("'")).operator_concat (operand_24576->mRoutineName)).operator_concat (GGS_string ("' routine header")),  var_cas_routineSignature,  operand_24576->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (615)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_24576->mRoutineName, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (626))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_25644,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25644 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_25644->mTypeName COMMA_SOURCE_FILE_AT_LINE (642)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_26154 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (646)) ;
    if (temp_26154.isBuilt ()) {
      temp_26154 (HERE)->method_searchKey (inLexique, operand_25644->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (646)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_25644->mMethodName,  ((GGS_string ("'")).operator_concat (operand_25644->mMethodName)).operator_concat (GGS_string ("' class method header")),  var_cas_routineSignature,  operand_25644->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (649)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_25644->mTypeName, operand_25644->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (660))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_26927,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26927 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_26927->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_26927->mReceiverExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_location  automatic_var_27623_0 ;
    GGS_readerQualifier automatic_var_27623_1 ;
    const GGS_instanceMethodMap  temp_27564 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (688)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (688)) ;
    if (temp_27564.isBuilt ()) {
      temp_27564 (HERE)->method_searchKey (inLexique, operand_26927->mMethodName, var_cas_routineSignature, automatic_var_27623_0, var_cas_hasCompilerArgument, automatic_var_27623_1 COMMA_SOURCE_FILE_AT_LINE (688)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_26927->mMethodName,  ((GGS_string ("'")).operator_concat (operand_26927->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_26927->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (691)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, operand_26927->mInstructionLocation, var_cas_receiverExpression, operand_26927->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (705)), var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (702))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_28392,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28392 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_28392->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (723)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_28864 (operand_28392->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_28864 = NULL ;
      while (((operand_28864 = enumerator_28864.nextObject ()))) {
        macroValidPointer (operand_28864) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (725)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_28864->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_readerQualifier automatic_var_29211_0 ;
    const GGS_modifierMap  temp_29153 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (731)) ;
    if (temp_29153.isBuilt ()) {
      temp_29153 (HERE)->method_searchKey (inLexique, operand_28392->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_29211_0 COMMA_SOURCE_FILE_AT_LINE (731)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_28392->mModifierName,  ((GGS_string ("'")).operator_concat (operand_28392->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_28392->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (734)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_28392->mReceiverStructAttributes, var_cas_receiverType, operand_28392->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (745))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_29994,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29994 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29994->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29994->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (766)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_29994->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (775)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_30673 (operand_29994->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_30673 = NULL ;
      while (((operand_30673 = enumerator_30673.nextObject ()))) {
        macroValidPointer (operand_30673) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_30673->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (778)) ;
        }
      }
    }
    const GGS_bool cond_31100 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (781))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (781)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_31100.isBuiltAndTrue ()) {
      operand_29994->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (783)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (785)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (787)),  operand_29994->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (787)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, operand_29994->mInstructionLocation, var_cas_targetType, var_cas_targetVariableCppName, operand_29994->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (789))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_31597,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31597 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_31597->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (810)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_32061 (operand_31597->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_32061 = NULL ;
      while (((operand_32061 = enumerator_32061.nextObject ()))) {
        macroValidPointer (operand_32061) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (812)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_32061->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (813)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) ;
    const GGS_bool cond_32648 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_32648.isBuiltAndTrue ()) {
      operand_31597->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (819)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (822)) ;
    }else if (cond_32648.isBuiltAndFalse ()) {
      const GGS_bool cond_32996 = (operand_31597->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_32996.isBuiltAndTrue ()) {
        operand_31597->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (824)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (825)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_31597->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (826)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (828)) ;
      }else if (cond_32996.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_33099 (operand_31597->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_33099 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_33127 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_33127 = NULL ;
          while (((operand_33099 = enumerator_33099.nextObject ()))
              && ((operand_33127 = enumerator_33127.nextObject ()))) {
            macroValidPointer (operand_33099) ;
            macroValidPointer (operand_33127) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_33099->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_33099->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (832)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_33127->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (838)),  operand_33099->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (838)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, var_cas_targetType, operand_31597->mInstructionLocation, operand_31597->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (842))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_33873,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33873 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_33873->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (864)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_34346 (operand_33873->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_34346 = NULL ;
      while (((operand_34346 = enumerator_34346.nextObject ()))) {
        macroValidPointer (operand_34346) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (866)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_34346->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (867)) ;
        }
      }
    }
    const GGS_bool cond_34762 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (870))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (870)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_34762.isBuiltAndTrue ()) {
      operand_33873->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (872)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (874)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, operand_33873->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_33873->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (876))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_35132,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35132 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_35132->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (896)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_35605 (operand_35132->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_35605 = NULL ;
      while (((operand_35605 = enumerator_35605.nextObject ()))) {
        macroValidPointer (operand_35605) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (898)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_35605->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (899)) ;
        }
      }
    }
    const GGS_bool cond_36021 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (902))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (902)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_36021.isBuiltAndTrue ()) {
      operand_35132->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (904)))).operator_concat (GGS_string ("' type, but this type does not support the '--' operator")) COMMA_SOURCE_FILE_AT_LINE (906)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, operand_35132->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_35132->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (908))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_36389,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36389 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36389->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36389->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (927)) ;
      }
    }
    const GGS_bool cond_37107 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (934))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_37107.isBuiltAndTrue ()) {
      operand_36389->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (936)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (936)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (938)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_36389->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (940))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_37416,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37416 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_37669 (operand_37416->mLogList, true) ;
      const GGS_logListAST::cElement * operand_37669 = NULL ;
      while (((operand_37669 = enumerator_37669.nextObject ()))) {
        macroValidPointer (operand_37669) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_37669->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_37669->mLogExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (958)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_37669->mLogMessage, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (965))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_dropInstructionAST * operand_38219,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38219 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_38531 (operand_38219->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_38531 = NULL ;
      while (((operand_38531 = enumerator_38531.nextObject ()))) {
        macroValidPointer (operand_38531) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_38634_0 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_38531->mValue, automatic_var_38634_0, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (984)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (988))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_39001,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39001 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39001->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39001->m_if_expression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1005)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_39001->m_then_instructionList,  operand_39001->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList COMMA_SOURCE_FILE_AT_LINE (1014)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_39001->m_else_instructionList,  operand_39001->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1026)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_39001->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1036)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, operand_39001->mEndOf_then_branch, var_cas_if_expression, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1038))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_40597,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40597 != NULL) {
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) ;
    var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) ;
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_41114 (operand_40597->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_41114 = NULL ;
      while (((operand_41114 = enumerator_41114.nextObject ()))) {
        macroValidPointer (operand_41114) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41114->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_41114->mEnumeratedExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_enumerationExpression COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_41114->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1070))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) ;
        const GGS_bool cond_41844 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_41844.isBuiltAndTrue ()) {
          operand_41114->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1075)) ;
        }else if (cond_41844.isBuiltAndFalse ()) {
          const GGS_bool cond_42366 = ((operand_41114->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_41114->mEndsWithEllipsis).operator_not ()) ;
          if (cond_42366.isBuiltAndTrue ()) {
            const GGS_enumerationDescriptorList  var_cas_currentTypedAttributeList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)) ;
            {
              GGS_enumerationDescriptorList::cEnumerator enumerator_42067 (var_cas_currentTypedAttributeList, true) ;
              const GGS_enumerationDescriptorList::cElement * operand_42067 = NULL ;
              while (((operand_42067 = enumerator_42067.nextObject ()))) {
                macroValidPointer (operand_42067) ;
                var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_41114->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1079))).operator_concat (operand_42067->mEnumerationName), operand_41114->mEndOfEnumerationExpression COMMA_SOURCE_FILE_AT_LINE (1079)), operand_42067->mEnumeratedType, ((var_cas_enumeratorCppName).operator_concat (GGS_string (".attribute_"))).operator_concat (operand_42067->mEnumerationName.reader_identifierRepresentation ()) COMMA_SOURCE_FILE_AT_LINE (1078)) ;
              }
            }
          }else if (cond_42366.isBuiltAndFalse ()) {
            const GGS_bool cond_42808 = ((operand_41114->mEndsWithEllipsis).operator_not ()).operator_and ((operand_41114->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_42808.isBuiltAndTrue ()) {
              operand_41114->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1086)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1086)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1087)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_41114->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
            }else if (cond_42808.isBuiltAndFalse ()) {
              const GGS_bool cond_43252 = (operand_41114->mEndsWithEllipsis).operator_and ((operand_41114->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_43252.isBuiltAndTrue ()) {
                operand_41114->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_41114->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1098))) COMMA_SOURCE_FILE_AT_LINE (1100)) ;
              }else if (cond_43252.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_43279 (operand_41114->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_43279 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_43306 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_43306 = NULL ;
                  while (((operand_43279 = enumerator_43279.nextObject ()))
                      && ((operand_43306 = enumerator_43306.nextObject ()))) {
                    macroValidPointer (operand_43279) ;
                    macroValidPointer (operand_43306) ;
                    const GGS_bool cond_43876 = (operand_43279->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1102))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_43876.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_43279->mTypeName COMMA_SOURCE_FILE_AT_LINE (1103)) ;
                      const GGS_bool cond_43693 = (var_cas_foundType).operator_isNotEqual (operand_43306->mEnumeratedType) ;
                      if (cond_43693.isBuiltAndTrue ()) {
                        operand_43279->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_43306->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_43279->mConstantName, operand_43306->mEnumeratedType, ((var_cas_enumeratorCppName).operator_concat (GGS_string (".attribute_"))).operator_concat (operand_43306->mEnumerationName.reader_identifierRepresentation ()) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_41114->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_40597->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_40597->mWhileExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_whileExpression COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_40597->mBeforeInstructionList,  operand_40597->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList COMMA_SOURCE_FILE_AT_LINE (1126)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    GGS_localConstantList  var_cas_indexDeclaration = GGS_localConstantList ::constructor_emptyList () ;
    const GGS_bool cond_45066 = (operand_40597->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1139))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_45066.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_40597->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1140))) ;
      var_cas_indexDeclaration.addAssign_operation (var_cas_inPredefinedTypes.mUIntType, operand_40597->mIndexVariableName, GGS_bool (false), var_cas_indexCppName) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_indexDeclaration,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_40597->mDoInstructionList,  operand_40597->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1150)) ;
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_40597->mBetweenInstructionList,  operand_40597->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList COMMA_SOURCE_FILE_AT_LINE (1162)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_40597->mAfterInstructionList,  operand_40597->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1174)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_40597->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1185)) ;
    var_cas_ioVariableMap.modifier_endBranch (inLexique, operand_40597->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1187)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_40597->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1188)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, operand_40597->mInstructionLocation, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1190))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_46806,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46806 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46806->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46806->mVariantExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_variantExpression COMMA_SOURCE_FILE_AT_LINE (1213)) ;
      }
    }
    const GGS_bool cond_47568 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1220))).operator_isNotEqual (var_cas_inPredefinedTypes.mUIntType) ;
    if (cond_47568.isBuiltAndTrue ()) {
      operand_46806->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1223)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46806->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46806->mLoopExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_loopExpression COMMA_SOURCE_FILE_AT_LINE (1226)) ;
      }
    }
    const GGS_bool cond_48074 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1233))).operator_isNotEqual (var_cas_inPredefinedTypes.mBoolType) ;
    if (cond_48074.isBuiltAndTrue ()) {
      operand_46806->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1236)) ;
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1238)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46806->mFirstInstructions,  operand_46806->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList COMMA_SOURCE_FILE_AT_LINE (1241)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46806->mSecondInstructions,  operand_46806->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1253)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_46806->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1264)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, operand_46806->mInstructionLocation, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1266))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@structuredCastInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structuredCastInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_structuredCastInstructionAST * operand_49353,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49353 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_castExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_49353->mCastExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49353->mCastExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_castExpression COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)) ;
    GGS_castInstructionBranchListForGeneration  var_cas_castBranchList = GGS_castInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_castInstructionBranchListAST::cEnumerator enumerator_50018 (operand_49353->mCastInstructionBranchList, true) ;
      const GGS_castInstructionBranchListAST::cElement * operand_50018 = NULL ;
      while (((operand_50018 = enumerator_50018.nextObject ()))) {
        macroValidPointer (operand_50018) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_50018->mTypeName COMMA_SOURCE_FILE_AT_LINE (1298)) ;
        GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
        GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1301))) ;
        GGS_uint _variant_50463 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1302)) ;
        GGS_bool _condition_50463 (_variant_50463.isBuilt (), true) ;
        while (_condition_50463.isBuiltAndTrue ()) {
          _condition_50463 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1303))).operator_not ()) ;
          if (_condition_50463.isBuiltAndTrue ()) {
            if (_variant_50463.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1306)) ;
              _condition_50463 = GGS_bool (false) ;
            }else{
              _variant_50463.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)) ;
              var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1305))) ;
            }
          }
        }
        const GGS_bool cond_50659 = (var_cas_found).operator_not () ;
        if (cond_50659.isBuiltAndTrue ()) {
          operand_50018->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_50018->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1309)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1309)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1311)) ;
        }
        GGS_string var_cas_localConstantName ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        const GGS_bool cond_51090 = (operand_50018->mConstantVarName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_51090.isBuiltAndTrue ()) {
          var_cas_localConstantName = (((GGS_string ("cast_")).operator_concat (operand_50018->mConstantVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)))).operator_concat (GGS_string ("_"))).operator_concat (operand_50018->mConstantVarName) ;
          var_cas_localConstantList.addAssign_operation (var_cas_type, operand_50018->mConstantVarName, GGS_bool (false), var_cas_localConstantName) ;
        }else if (cond_51090.isBuiltAndFalse ()) {
          var_cas_localConstantName = GGS_string ("") ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_50018->mInstructionList,  operand_50018->mEndOfInstructions,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1328)) ;
        var_cas_castBranchList.addAssign_operation (operand_50018->mUseKindOfClass, var_cas_type, var_cas_localConstantName, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_49353->mElseInstructionList,  operand_49353->mEndOfCastInstruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1342)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_49353->mEndOfCastInstruction COMMA_SOURCE_FILE_AT_LINE (1353)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_structuredCastInstructionForGeneration ::constructor_new (inLexique, var_cas_castExpression, var_cas_castBranchList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1355))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_52370,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52370 != NULL) {
    GGS_grammarLabelMap  var_cas_grammarLabelMap ;
    if (var_cas_inSemanticContext.mGrammarMap.isBuilt ()) {
      var_cas_inSemanticContext.mGrammarMap (HERE)->method_searchKey (inLexique, operand_52370->mGrammarComponentName, var_cas_grammarLabelMap COMMA_SOURCE_FILE_AT_LINE (1373)) ;
    }
    GGS_formalParameterSignature  var_cas_labelSignature ;
    if (var_cas_grammarLabelMap.isBuilt ()) {
      var_cas_grammarLabelMap (HERE)->method_searchKey (inLexique, operand_52370->mLabelName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (1379)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_52370->mLabelName,  ((GGS_string ("label of the ")).operator_concat (operand_52370->mGrammarComponentName)).operator_concat (GGS_string (" grammar")),  var_cas_labelSignature,  operand_52370->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1385)) ;
    GGS_semanticExpressionForGeneration  var_cas_sourceExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52370->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52370->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (1397)) ;
      }
    }
    const GGS_bool cond_53879 = operand_52370->mSourceExpressionIsFile ;
    if (cond_53879.isBuiltAndTrue ()) {
      const GGS_bool cond_53866 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1405))).operator_isNotEqual (var_cas_inPredefinedTypes.mLStringType) ;
      if (cond_53866.isBuiltAndTrue ()) {
        operand_52370->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source file path and its type should be '@lstring', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1409)) ;
      }
    }else if (cond_53879.isBuiltAndFalse ()) {
      const GGS_bool cond_54118 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1410))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
      if (cond_54118.isBuiltAndTrue ()) {
        operand_52370->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source string and its type should be '@string', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1412)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1412)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1414)) ;
      }
    }
    const GGS_bool cond_54446 = operand_52370->mSourceExpressionIsFile ;
    if (cond_54446.isBuiltAndTrue ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceFileForGeneration ::constructor_new (inLexique, operand_52370->mInstructionLocation, operand_52370->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1419)), operand_52370->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1417))) ;
    }else if (cond_54446.isBuiltAndFalse ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceExpressionForGeneration ::constructor_new (inLexique, operand_52370->mInstructionLocation, operand_52370->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427)), operand_52370->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1425))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readWriteAccessWithInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readWriteAccessWithInstructionAST * operand_54890,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54890 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54890->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54890->mKeyExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1446)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_54890->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1453))) ;
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_54890->mReceiverName, var_cas_targetType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (1457)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_55707 (operand_54890->mFieldList, true) ;
      const GGS_lstringlist::cElement * operand_55707 = NULL ;
      while (((operand_55707 = enumerator_55707.nextObject ()))) {
        macroValidPointer (operand_55707) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_55707->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1460)) ;
        }
      }
    }
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_targetType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1463)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_56033 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_54890->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1465))) ;
    if (NULL != operand_56033) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_56033->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_56346 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_56346.isBuiltAndTrue ()) {
        operand_54890->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1473)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_56346.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_56400 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_56400 = NULL ;
          while (((operand_56400 = enumerator_56400.nextObject ()))) {
            macroValidPointer (operand_56400) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_56400->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_56400->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1476))) ;
          }
        }
        operand_54890->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1479)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_54890->mAccessName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1484)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_57267 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_57267.isBuiltAndTrue ()) {
      operand_54890->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_54890->mAccessName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1492)) ;
    }else if (cond_57267.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_57303 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_57303 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_57321 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_57321 = NULL ;
        while (((operand_57303 = enumerator_57303.nextObject ()))
            && ((operand_57321 = enumerator_57321.nextObject ()))) {
          macroValidPointer (operand_57303) ;
          macroValidPointer (operand_57321) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_57321->mType,  operand_57303->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)),  operand_54890->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)) COMMA_SOURCE_FILE_AT_LINE (1494)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1498)) ;
    GGS_localInitializedVariableList  var_cas_localInitializedVariableList = GGS_localInitializedVariableList ::constructor_emptyList () ;
    {
        GGS_uint var_cas_IDX (true, 0) ;
      GGS_typedAttributeList::cEnumerator enumerator_57617 (var_cas_targetType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1501)), true) ;
      const GGS_typedAttributeList::cElement * operand_57617 = NULL ;
      while (((operand_57617 = enumerator_57617.nextObject ()))) {
        macroValidPointer (operand_57617) ;
        var_cas_localInitializedVariableList.addAssign_operation (operand_57617->mAttributeTypeIndex, GGS_lstring ::constructor_new (inLexique, (operand_54890->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1504))).operator_concat (operand_57617->mAttributeName), operand_54890->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1504)) COMMA_SOURCE_FILE_AT_LINE (1504)), ((((((((GGS_string ("* ((GALGASap_")).operator_concat (operand_57617->mAttributeTypeIndex.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)))).operator_concat (GGS_string (" *) "))).operator_concat (var_cas_objectArrayCppName)).operator_concat (GGS_string ("->pointerAtIndex ("))).operator_concat (var_cas_IDX.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1505)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)))).operator_concat (GGS_string (" /* "))).operator_concat (operand_57617->mAttributeName.ggs_string ().reader_identifierRepresentation ())).operator_concat (GGS_string (" */ COMMA_HERE))"))) ;
        var_cas_IDX.mValue ++ ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  var_cas_localInitializedVariableList,  operand_54890->m_do_Instructions,  operand_54890->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1509)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_54890->m_else_Instructions,  operand_54890->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1521)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_54890->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1531)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readWriteWithInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, var_cas_targetType, operand_54890->mFieldList, operand_54890->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1537)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1533))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readAccessWithInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readAccessWithInstructionAST * operand_59225,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59225 != NULL) {
    operand_59225->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @readAccessWithInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1557)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_59733,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59733 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_59733->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59733->mSwitchExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1570)) ;
      }
    }
    const GGS_bool cond_60528 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1577))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1577))) ;
    if (cond_60528.isBuiltAndTrue ()) {
      operand_59733->mEndOfSwitchExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the switch expression type should be an instance of an enumeration type (the '@")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)))).operator_concat (GGS_string ("' type is not an enumeration type)")) COMMA_SOURCE_FILE_AT_LINE (1580)) ;
    }
    GGS_stringset  var_cas_enumConstantStringSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_lstringlist::cEnumerator enumerator_60622 (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)).reader_mEnumConstantList (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)), true) ;
      const GGS_lstringlist::cElement * operand_60622 = NULL ;
      while (((operand_60622 = enumerator_60622.nextObject ()))) {
        macroValidPointer (operand_60622) ;
        var_cas_enumConstantStringSet.addAssign_operation (operand_60622->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1584))) ;
      }
    }
    GGS_stringset  var_cas_constantsNamedInSwitchInstruction = GGS_stringset ::constructor_emptySet () ;
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)) ;
    GGS_switchBranchesForGeneration  var_cas_switchBranchesForGeneration = GGS_switchBranchesForGeneration ::constructor_emptyList () ;
    {
      GGS_switchBranchesAST::cEnumerator enumerator_60957 (operand_59733->mBranches, true) ;
      const GGS_switchBranchesAST::cElement * operand_60957 = NULL ;
      while (((operand_60957 = enumerator_60957.nextObject ()))) {
        macroValidPointer (operand_60957) ;
        {
          GGS_lstringlist::cEnumerator enumerator_60992 (operand_60957->mSwitchConstantList, true) ;
          const GGS_lstringlist::cElement * operand_60992 = NULL ;
          while (((operand_60992 = enumerator_60992.nextObject ()))) {
            macroValidPointer (operand_60992) ;
            const GGS_bool cond_61347 = var_cas_enumConstantStringSet.reader_hasKey (operand_60992->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1592))) ;
            if (cond_61347.isBuiltAndTrue ()) {
              const GGS_bool cond_61267 = var_cas_constantsNamedInSwitchInstruction.reader_hasKey (operand_60992->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1593))) ;
              if (cond_61267.isBuiltAndTrue ()) {
                operand_60992->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_60992->mValue)).operator_concat (GGS_string ("' constant is already named in this switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1597)) ;
              }
              var_cas_constantsNamedInSwitchInstruction.addAssign_operation (operand_60992->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1598))) ;
            }else if (cond_61347.isBuiltAndFalse ()) {
              operand_60992->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("'")).operator_concat (operand_60992->mValue)).operator_concat (GGS_string ("' is not a constant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1601)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1601)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1603)) ;
            }
          }
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_60957->mInstructions,  operand_60957->mEndOfBranch,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        var_cas_switchBranchesForGeneration.addAssign_operation (operand_60957->mSwitchConstantList, var_cas_instructionList) ;
      }
    }
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_59733->mEndOf_switch_instruction COMMA_SOURCE_FILE_AT_LINE (1618)) ;
    const GGS_stringset  var_cas_forgottenConstants = var_cas_enumConstantStringSet.substract_operation (inLexique, var_cas_constantsNamedInSwitchInstruction COMMA_SOURCE_FILE_AT_LINE (1620)) ;
    const GGS_bool cond_62425 = (var_cas_forgottenConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_62425.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_62231 (var_cas_forgottenConstants, true) ;
        while (enumerator_62231.hasCurrentObject ()) {
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (enumerator_62231._key (HERE)) ;
          enumerator_62231.next () ;
        }
      }
      operand_59733->mEndOf_switch_instruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the switch instruction should name all enumeration constants; missing constants are:")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1629)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_switchInstructionForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_switchBranchesForGeneration COMMA_SOURCE_FILE_AT_LINE (1631))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_62748,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62748 != NULL) {
    operand_62748->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @matchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1649)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__structuredCastInstructionAST__analyzeSemanticInstruction, gClassInfoFor__structuredCastInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readWriteAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

