//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 16th, 2010, at 20h1'36"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ;
  GGS_stringlist  var_cas_localVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3007 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3007 = NULL ;
    while (((operand_3007 = enumerator_3007.nextObject ()))) {
      macroValidPointer (operand_3007) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3007->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3007->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap, var_cas_localVariableCppNameList, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (56)) ;
        }
      }
    }
  }
  const GGS_bool cond_3474 = (var_cas_localVariableCppNameList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_3474.isBuiltAndTrue ()) {
    var_cas_outInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_localVariableCppNameList, GGS_string ("end of scope") COMMA_SOURCE_FILE_AT_LINE (67))) ;
  }
  var_cas_ioVariableMap.modifier_endBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (73)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_3745,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3745 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_3745->mTypeName,  operand_3745->mConstructorName,  operand_3745->mConstructorExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (90)) ;
    const GGS_bool cond_4529 = var_cas_hasCompilerArgument ;
    if (cond_4529.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_3745->mTypeName COMMA_SOURCE_FILE_AT_LINE (106)) ;
    const GGS_bool cond_4897 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_4897.isBuiltAndTrue ()) {
      operand_3745->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (109)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_3745->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (111)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_3745->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_5211 = operand_3745->mIsConstant ;
    if (cond_5211.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3745->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (116)) ;
    }else if (cond_5211.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3745->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (118)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_3745->mIsConstant, var_cas_targetVariableCppName, operand_3745->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (121))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_5809,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5809 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_5809->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5809->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (143)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_5809->mTypeName COMMA_SOURCE_FILE_AT_LINE (151)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_5809->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_6730 = operand_5809->mIsConstant ;
    if (cond_6730.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_5809->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }else if (cond_6730.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_5809->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (160)),  operand_5809->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (160)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_5809->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (162))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_7346,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7346 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_7346->mTypeName COMMA_SOURCE_FILE_AT_LINE (181)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_7346->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_7346->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (184)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (186))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_8334,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8334 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_8334->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8334->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (204)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_9094 = (operand_8334->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_9094.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_8334->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (215)) ;
    }else if (cond_9094.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_8334->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (217)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_9232 (operand_8334->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_9232 = NULL ;
        while (((operand_9232 = enumerator_9232.nextObject ()))) {
          macroValidPointer (operand_9232) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (219)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_9232->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (220)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (224)),  operand_8334->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (224)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_8334->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (226))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_9843,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9843 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_9843->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9843->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (245)) ;
      }
    }
    const GGS_bool cond_10611 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (253))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_10611.isBuiltAndTrue ()) {
      operand_9843->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (255)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (255)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (258))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useless = GGS_bool (false) ;
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression, var_cas_useless COMMA_SOURCE_FILE_AT_LINE (277)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (285))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_13141 = var_cas_outUseLocationReader ;
  if (cond_13141.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (287)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (287)) ;
    elementOf_GGS_readerMap * operand_11870 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_11870) {
      const GGS_bool cond_12305 = (operand_11870->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_12305.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (291)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (291)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (294)) ;
      }else if (cond_12305.isBuiltAndFalse ()) {
        const GGS_bool cond_12772 = (operand_11870->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_12772.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (296)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_11870->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (297)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (300)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (303)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (306)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression, var_cas_useless COMMA_SOURCE_FILE_AT_LINE (309)) ;
    }
  }
  const GGS_bool cond_13647 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (317))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_13647.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (319)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (319)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (321)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_13810,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13810 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_13810->mLocationExpression,  operand_13810->mMessageExpression,  operand_13810->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (339)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_14631 (operand_13810->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_14631 = NULL ;
      while (((operand_14631 = enumerator_14631.nextObject ()))) {
        macroValidPointer (operand_14631) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_14725_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_14631->mValue, automatic_var_14725_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (355)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (359))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_15153,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15153 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_15153->mLocationExpression,  operand_15153->mMessageExpression,  operand_15153->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (382)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (395))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_16828,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16828 != NULL) {
    const GGS_bool cond_17770 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (429)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (430)))) ;
    if (cond_17770.isBuiltAndTrue ()) {
      operand_16828->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (432)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (433)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (435)) ;
    }else if (cond_17770.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_16828->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_16828->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (437)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (445)),  operand_16828->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (445)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (447))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_18497,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18497 != NULL) {
    const GGS_bool cond_19364 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (466))) ;
    if (cond_19364.isBuiltAndTrue ()) {
      operand_18497->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (468)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (469)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (471)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_18497->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (475)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_19614 (operand_18497->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_19614 = NULL ;
      while (((operand_19614 = enumerator_19614.nextObject ()))) {
        macroValidPointer (operand_19614) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (477)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_19614->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (478)) ;
        }
      }
    }
    const GGS_bool cond_20047 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_20047.isBuiltAndTrue ()) {
      operand_18497->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (483)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (484)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (486)) ;
    }
    const GGS_bool cond_20305 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_18497->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488))) ;
    if (cond_20305.isBuiltAndTrue ()) {
      operand_18497->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (492)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_18497->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (493))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_18497->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (495))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_20714,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20714 != NULL) {
    const GGS_bool cond_21579 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (514))) ;
    if (cond_21579.isBuiltAndTrue ()) {
      operand_20714->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (516)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (517)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (519)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_20714->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (522)) ;
    const GGS_bool cond_22047 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_22047.isBuiltAndTrue ()) {
      operand_20714->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (526)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (527)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (529)) ;
    }
    const GGS_bool cond_22293 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_20714->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531))) ;
    if (cond_22293.isBuiltAndTrue ()) {
      operand_20714->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (535)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_20714->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (536))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (538))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_22675,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22675 != NULL) {
    const GGS_bool cond_23548 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (556))) ;
    if (cond_23548.isBuiltAndTrue ()) {
      operand_22675->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (558)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (559)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (561)) ;
    }else if (cond_23548.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_22675->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (562)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562)))).operator_concat (GGS_string ("_"))).operator_concat (operand_22675->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))) ;
      var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration.addAssign_operation (var_cas_inFormalArgumentType, var_cas_cppVarName) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (566))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_25018 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_25018.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("the '")).operator_concat (var_cas_inRoutineName)).operator_concat (GGS_string ("' "))).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" header defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (588)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (590)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (593)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration.drop () ;
  }else if (cond_25018.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration = GGS_temporaryInputVariableForRoutineInvocationForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_25326 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_25326 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_25349 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_25349 = NULL ;
      while (((operand_25326 = enumerator_25326.nextObject ()))
          && ((operand_25349 = enumerator_25349.nextObject ()))) {
        macroValidPointer (operand_25326) ;
        macroValidPointer (operand_25349) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_25349->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_25349->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_25326->mFormalArgumentType, operand_25326->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration, var_cas_exclusiveVariableSet, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (598)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_25928,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25928 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_25928->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (626)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_25928->mRoutineName,  GGS_string ("routine"),  var_cas_routineSignature,  operand_25928->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (630)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_25928->mRoutineName, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (643))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_27302,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27302 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_27302->mTypeName COMMA_SOURCE_FILE_AT_LINE (661)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_27845 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (665)) ;
    if (temp_27845.isBuilt ()) {
      temp_27845 (HERE)->method_searchKey (inLexique, operand_27302->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (665)) ;
    }
    const GGS_bool cond_27973 = var_cas_hasCompilerArgument ;
    if (cond_27973.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_27302->mMethodName,  GGS_string ("class method"),  var_cas_routineSignature,  operand_27302->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (672)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_27302->mTypeName, operand_27302->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (685))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_28935,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28935 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_28935->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_28935->mReceiverExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (706)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_location  automatic_var_29693_0 ;
    GGS_readerQualifier automatic_var_29693_1 ;
    const GGS_instanceMethodMap  temp_29634 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (716)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (716)) ;
    if (temp_29634.isBuilt ()) {
      temp_29634 (HERE)->method_searchKey (inLexique, operand_28935->mMethodName, var_cas_routineSignature, automatic_var_29693_0, var_cas_hasCompilerArgument, automatic_var_29693_1 COMMA_SOURCE_FILE_AT_LINE (716)) ;
    }
    const GGS_bool cond_29768 = var_cas_hasCompilerArgument ;
    if (cond_29768.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_28935->mMethodName,  GGS_string ("instance method"),  var_cas_routineSignature,  operand_28935->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (723)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverExpression, operand_28935->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (738)), var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (736))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_30753,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30753 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_30753->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (758)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_31258 (operand_30753->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_31258 = NULL ;
      while (((operand_31258 = enumerator_31258.nextObject ()))) {
        macroValidPointer (operand_31258) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (760)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_31258->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (761)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_modifierMap  temp_31547 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (766)) ;
    if (temp_31547.isBuilt ()) {
      temp_31547 (HERE)->method_searchKey (inLexique, operand_30753->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (766)) ;
    }
    const GGS_bool cond_31677 = var_cas_hasCompilerArgument ;
    if (cond_31677.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_30753->mModifierName,  GGS_string ("modifier"),  var_cas_routineSignature,  operand_30753->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (773)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_30753->mReceiverStructAttributes, operand_30753->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (786))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_32682,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32682 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32682->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32682->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (808)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_32682->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (818)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_33423 (operand_32682->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_33423 = NULL ;
      while (((operand_33423 = enumerator_33423.nextObject ()))) {
        macroValidPointer (operand_33423) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (820)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_33423->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (821)) ;
        }
      }
    }
    const GGS_bool cond_33850 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (824))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (824)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_33850.isBuiltAndTrue ()) {
      operand_32682->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (826)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (828)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (830)),  operand_32682->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (830)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_32682->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (832))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_34305,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34305 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_34305->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (852)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_34803 (operand_34305->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_34803 = NULL ;
      while (((operand_34803 = enumerator_34803.nextObject ()))) {
        macroValidPointer (operand_34803) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (854)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_34803->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (855)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (858)) ;
    const GGS_bool cond_35390 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_35390.isBuiltAndTrue ()) {
      operand_34305->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (861)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (864)) ;
    }else if (cond_35390.isBuiltAndFalse ()) {
      const GGS_bool cond_35738 = (operand_34305->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_35738.isBuiltAndTrue ()) {
        operand_34305->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (866)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (867)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_34305->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (868)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }else if (cond_35738.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_35841 (operand_34305->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_35841 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_35869 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_35869 = NULL ;
          while (((operand_35841 = enumerator_35841.nextObject ()))
              && ((operand_35869 = enumerator_35869.nextObject ()))) {
            macroValidPointer (operand_35841) ;
            macroValidPointer (operand_35869) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_35841->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_35841->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (874)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_35869->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (881)),  operand_35841->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (881)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_34305->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (885))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_36602,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36602 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_36602->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (906)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_37115 (operand_36602->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_37115 = NULL ;
      while (((operand_37115 = enumerator_37115.nextObject ()))) {
        macroValidPointer (operand_37115) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (908)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_37115->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (909)) ;
        }
      }
    }
    const GGS_bool cond_37531 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (912))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (912)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_37531.isBuiltAndTrue ()) {
      operand_36602->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (914)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (916)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_36602->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (918))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_37859,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37859 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_37859->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (937)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_38372 (operand_37859->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_38372 = NULL ;
      while (((operand_38372 = enumerator_38372.nextObject ()))) {
        macroValidPointer (operand_38372) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (939)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_38372->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (940)) ;
        }
      }
    }
    const GGS_bool cond_38788 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (943))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (943)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_38788.isBuiltAndTrue ()) {
      operand_37859->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (945)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (947)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_37859->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (949))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_39114,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39114 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39114->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39114->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (967)) ;
      }
    }
    const GGS_bool cond_39894 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (975))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_39894.isBuiltAndTrue ()) {
      operand_39114->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (977)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (977)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (979)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (981))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_40177,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40177 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_40463 (operand_40177->mLogList, true) ;
      const GGS_logListAST::cElement * operand_40463 = NULL ;
      while (((operand_40463 = enumerator_40463.nextObject ()))) {
        macroValidPointer (operand_40463) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_40463->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_40463->mLogExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (999)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_40463->mLogMessage, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1007))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_dropInstructionAST * operand_41044,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41044 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_41396 (operand_41044->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_41396 = NULL ;
      while (((operand_41396 = enumerator_41396.nextObject ()))) {
        macroValidPointer (operand_41396) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_41499_0 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_41396->mValue, automatic_var_41499_0, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (1027)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (1031))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_41866,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41866 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41866->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41866->m_if_expression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_41866->m_then_instructionList,  operand_41866->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1059)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_41866->m_else_instructionList,  operand_41866->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1070)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_41866->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1079)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, var_cas_if_expression, operand_41866->mEndOf_then_branch, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1081))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_43416,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43416 != NULL) {
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_43832 (operand_43416->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_43832 = NULL ;
      while (((operand_43832 = enumerator_43832.nextObject ()))) {
        macroValidPointer (operand_43832) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43832->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_43832->mEnumeratedExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_enumerationExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1104)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_43832->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1112)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1112))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1113)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1113)) ;
        const GGS_bool cond_44593 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_44593.isBuiltAndTrue ()) {
          operand_43832->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1115)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1115)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
        }else if (cond_44593.isBuiltAndFalse ()) {
          const GGS_bool cond_44715 = ((operand_43832->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_43832->mEndsWithEllipsis).operator_not ()) ;
          if (cond_44715.isBuiltAndTrue ()) {
            operand_43832->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TO DO !") COMMA_SOURCE_FILE_AT_LINE (1119)) ;
          }else if (cond_44715.isBuiltAndFalse ()) {
            const GGS_bool cond_45157 = ((operand_43832->mEndsWithEllipsis).operator_not ()).operator_and ((operand_43832->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_45157.isBuiltAndTrue ()) {
              operand_43832->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_43832->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1125))) COMMA_SOURCE_FILE_AT_LINE (1127)) ;
            }else if (cond_45157.isBuiltAndFalse ()) {
              const GGS_bool cond_45601 = (operand_43832->mEndsWithEllipsis).operator_and ((operand_43832->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_45601.isBuiltAndTrue ()) {
                operand_43832->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_43832->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1133))) COMMA_SOURCE_FILE_AT_LINE (1135)) ;
              }else if (cond_45601.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_45628 (operand_43832->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_45628 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_45655 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_45655 = NULL ;
                  while (((operand_45628 = enumerator_45628.nextObject ()))
                      && ((operand_45655 = enumerator_45655.nextObject ()))) {
                    macroValidPointer (operand_45628) ;
                    macroValidPointer (operand_45655) ;
                    const GGS_bool cond_46232 = (operand_45628->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_46232.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_45628->mTypeName COMMA_SOURCE_FILE_AT_LINE (1138)) ;
                      const GGS_bool cond_46042 = (var_cas_foundType).operator_isNotEqual (operand_45655->mEnumeratedType) ;
                      if (cond_46042.isBuiltAndTrue ()) {
                        operand_45628->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_45655->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1141)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_45628->mConstantName, operand_45655->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".attribute_"))).operator_concat (operand_45655->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1142)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_43832->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43416->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43416->mWhileExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_whileExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1151)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_43416->mBeforeInstructionList,  operand_43416->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1162)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    const GGS_bool cond_47337 = (operand_43416->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1173))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_47337.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_43416->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1174))) ;
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_43416->mIndexVariableName, var_cas_inPredefinedTypes.mUIntType, var_cas_indexCppName COMMA_SOURCE_FILE_AT_LINE (1175)) ;
    }
    const GGS_bool cond_47485 = (operand_43416->mIndexVariableName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_47485.isBuiltAndTrue ()) {
      operand_43416->mIndexVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TO DO: handle index in foreach instruction") COMMA_SOURCE_FILE_AT_LINE (1180)) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_43416->mDoInstructionList,  operand_43416->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    const GGS_bool cond_47881 = (operand_43416->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1192))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_47881.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  automatic_var_47873_0 ;
      GGS_string automatic_var_47873_1 ;
      var_cas_ioVariableMap.modifier_removeKey (inLexique, operand_43416->mIndexVariableName, automatic_var_47873_0, automatic_var_47873_1 COMMA_SOURCE_FILE_AT_LINE (1193)) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_43416->mBetweenInstructionList,  operand_43416->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1197)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_43416->mAfterInstructionList,  operand_43416->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1208)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_43416->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1218)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1220))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_48997,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48997 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48997->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48997->mVariantExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_variantExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      }
    }
    const GGS_bool cond_49821 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1251))).operator_isNotEqual (var_cas_inPredefinedTypes.mUIntType) ;
    if (cond_49821.isBuiltAndTrue ()) {
      operand_48997->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1253)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1253)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1253)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1254)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48997->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48997->mLoopExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_loopExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      }
    }
    const GGS_bool cond_50356 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))).operator_isNotEqual (var_cas_inPredefinedTypes.mBoolType) ;
    if (cond_50356.isBuiltAndTrue ()) {
      operand_48997->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1268)) ;
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_48997->mFirstInstructions,  operand_48997->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1273)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_48997->mSecondInstructions,  operand_48997->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1284)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_48997->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1294)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1296))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_castInstructionAST * operand_51491,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51491 != NULL) {
    operand_51491->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @castInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1317)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@withInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__withInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_withInstructionAST * operand_52030,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52030 != NULL) {
    operand_52030->mTargetObjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @withInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1332)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_52568,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52568 != NULL) {
    operand_52568->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @switchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1347)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_53110,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53110 != NULL) {
    operand_53110->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @matchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1362)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_53653,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53653 != NULL) {
    operand_53653->mGrammarComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction: @grammarInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1377)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__castInstructionAST__analyzeSemanticInstruction, gClassInfoFor__castInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__withInstructionAST__analyzeSemanticInstruction, gClassInfoFor__withInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

