//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 13th, 2010, at 21h37'31"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
      result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
        gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@localConstantList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localConstantList::
elementOf_GGS_localConstantList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mNoWarningIfUnused (argument_2),
mCppName (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localConstantList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localConstantList * ptr = dynamic_cast <const elementOf_GGS_localConstantList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mNoWarningIfUnused.operator_isEqual (ptr->mNoWarningIfUnused).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localConstantList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNoWarningIfUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@localConstantList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localConstantList ("localConstantList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
operator_concat (const GGS_localConstantList & inOperand) const {
  GGS_localConstantList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
dotAssign_operation (const GGS_localConstantList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localConstantList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_bool p_2 = p->mNoWarningIfUnused ;
          GGS_string p_3 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_prependValue (C_CompilerEx & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_bool& argument_2,
                     const GGS_string& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mNoWarningIfUnused,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_emptyList (void) {
  GGS_localConstantList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  GGS_localConstantList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalSubListWithRange (GGS_localConstantList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mNoWarningIfUnused, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListWithRange (C_CompilerEx & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListFromIndex (C_CompilerEx & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localConstantList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_first (C_CompilerEx & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_bool& _out_2,
              GGS_string& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_last (C_CompilerEx & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_bool& _out_2,
             GGS_string& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popFirst (C_CompilerEx & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_bool& _out_2,
                 GGS_string& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popLast (C_CompilerEx & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_bool& _out_2,
                GGS_string& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localConstantList::
reader_mTypeAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localConstantList::
reader_mNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localConstantList::
reader_mNoWarningIfUnusedAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNoWarningIfUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_mCppNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMTypeAtIndex (C_CompilerEx & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNoWarningIfUnusedAtIndex (C_CompilerEx & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNoWarningIfUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMCppNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localConstantList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localConstantList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_localConstantList::cEnumerator::_mNoWarningIfUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNoWarningIfUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localConstantList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localConstantList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localConstantList * p = NULL ;
    macroMyNew (p, GGS_localConstantList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localConstantList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localConstantList * p = dynamic_cast <const GGS_localConstantList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localConstantList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localConstantList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localConstantList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@localInitializedVariableList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localInitializedVariableList::
elementOf_GGS_localInitializedVariableList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mCppName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localInitializedVariableList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localInitializedVariableList * ptr = dynamic_cast <const elementOf_GGS_localInitializedVariableList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localInitializedVariableList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@localInitializedVariableList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localInitializedVariableList ("localInitializedVariableList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
operator_concat (const GGS_localInitializedVariableList & inOperand) const {
  GGS_localInitializedVariableList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
dotAssign_operation (const GGS_localInitializedVariableList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localInitializedVariableList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_string p_2 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_prependValue (C_CompilerEx & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_string& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_emptyList (void) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalSubListWithRange (GGS_localInitializedVariableList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListWithRange (C_CompilerEx & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListFromIndex (C_CompilerEx & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localInitializedVariableList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_first (C_CompilerEx & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_string& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_last (C_CompilerEx & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_string& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popFirst (C_CompilerEx & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_string& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popLast (C_CompilerEx & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_string& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localInitializedVariableList::
reader_mTypeAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localInitializedVariableList::
reader_mNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_mCppNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMTypeAtIndex (C_CompilerEx & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMCppNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localInitializedVariableList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localInitializedVariableList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localInitializedVariableList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localInitializedVariableList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localInitializedVariableList * p = NULL ;
    macroMyNew (p, GGS_localInitializedVariableList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localInitializedVariableList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localInitializedVariableList * p = dynamic_cast <const GGS_localInitializedVariableList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localInitializedVariableList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localInitializedVariableList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localInitializedVariableList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_localInitializedVariableList   var_cas_inLocalInitializedVariableList,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_openBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_3256 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_3256 = NULL ;
    while (((operand_3256 = enumerator_3256.nextObject ()))) {
      macroValidPointer (operand_3256) ;
      const GGS_bool cond_3383 = operand_3256->mNoWarningIfUnused ;
      if (cond_3383.isBuiltAndTrue ()) {
        var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_3256->mName, operand_3256->mType, operand_3256->mCppName, operand_3256->mCppName COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }else if (cond_3383.isBuiltAndFalse ()) {
        var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3256->mName, operand_3256->mType, operand_3256->mCppName, operand_3256->mCppName COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
    }
  }
  {
    GGS_localInitializedVariableList::cEnumerator enumerator_3562 (var_cas_inLocalInitializedVariableList, true) ;
    const GGS_localInitializedVariableList::cElement * operand_3562 = NULL ;
    while (((operand_3562 = enumerator_3562.nextObject ()))) {
      macroValidPointer (operand_3562) ;
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3562->mName, operand_3562->mType, operand_3562->mCppName, operand_3562->mCppName COMMA_SOURCE_FILE_AT_LINE (77)) ;
    }
  }
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3727 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3727 = NULL ;
    while (((operand_3727 = enumerator_3727.nextObject ()))) {
      macroValidPointer (operand_3727) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3727->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3727->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap COMMA_SOURCE_FILE_AT_LINE (81)) ;
        }
      }
    }
  }
  var_cas_ioVariableMap.modifier_closeBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (88)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_4154,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4154 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  automatic_var_4705_0 ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inAnalysisContext,  var_cas_ioVariableMap,  operand_4154->mTypeName,  operand_4154->mConstructorName,  operand_4154->mConstructorExpressions,  var_cas_returnedType,  automatic_var_4705_0,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (102)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_4154->mTypeName COMMA_SOURCE_FILE_AT_LINE (114)) ;
    const GGS_bool cond_5086 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_5086.isBuiltAndTrue ()) {
      operand_4154->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (117)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_4154->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4154->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_5366 = operand_4154->mIsConstant ;
    if (cond_5366.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4154->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (123)) ;
    }else if (cond_5366.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4154->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (125)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, operand_4154->mInstructionLocation, var_cas_targetType, operand_4154->mIsConstant, var_cas_targetVariableCppName, operand_4154->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (128))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_6013,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6013 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6013->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6013->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_6013->mTypeName COMMA_SOURCE_FILE_AT_LINE (154)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_6013->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_6751 = operand_6013->mIsConstant ;
    if (cond_6751.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_6013->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }else if (cond_6751.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_6013->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (162)),  operand_6013->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (162)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_6013->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (164))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_7390,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7390 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_7390->mTypeName COMMA_SOURCE_FILE_AT_LINE (180)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_7390->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_7390->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (182)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (184))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_assignmentInstructionAST * operand_8233,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8233 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_8233->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8233->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (199)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_8822 = (operand_8233->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_8822.isBuiltAndTrue ()) {
      GGS_string automatic_var_8813_0 ;
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_8233->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_8813_0 COMMA_SOURCE_FILE_AT_LINE (208)) ;
    }else if (cond_8822.isBuiltAndFalse ()) {
      GGS_string automatic_var_8928_0 ;
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_8233->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_8928_0 COMMA_SOURCE_FILE_AT_LINE (210)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_8963 (operand_8233->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_8963 = NULL ;
        while (((operand_8963 = enumerator_8963.nextObject ()))) {
          macroValidPointer (operand_8963) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_8963->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (213)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (217)),  operand_8233->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (217)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName, operand_8233->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (219))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_sendInstructionAST * operand_9590,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9590 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_9590->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9590->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (236)) ;
      }
    }
    const GGS_bool cond_10202 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
    if (cond_10202.isBuiltAndTrue ()) {
      operand_9590->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (244)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (244)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (246)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (247))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (264)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (270))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
  const GGS_bool cond_12587 = var_cas_outUseLocationReader ;
  if (cond_12587.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (272)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (272)) ;
    elementOf_GGS_readerMap * operand_11298 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_11298) {
      const GGS_bool cond_11733 = (operand_11298->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_11733.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (279)) ;
      }else if (cond_11733.isBuiltAndFalse ()) {
        const GGS_bool cond_12218 = (operand_11298->mInfo.mReturnedType).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
        if (cond_12218.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (281)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_11298->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (282)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (285)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (288)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (288)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (291)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (294)) ;
    }
  }
  const GGS_bool cond_13074 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (300))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
  if (cond_13074.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (302)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (304)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_errorInstructionAST * operand_13237,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13237 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inAnalysisContext,  operand_13237->mLocationExpression,  operand_13237->mMessageExpression,  operand_13237->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (318)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_13878 (operand_13237->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_13878 = NULL ;
      while (((operand_13878 = enumerator_13878.nextObject ()))) {
        macroValidPointer (operand_13878) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_13975_0 ;
        GGS_string automatic_var_13975_1 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_13878->mValue, automatic_var_13975_0, var_cas_varCppName, automatic_var_13975_1 COMMA_SOURCE_FILE_AT_LINE (333)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, operand_13237->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (337))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_warningInstructionAST * operand_14429,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14429 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inAnalysisContext,  operand_14429->mLocationExpression,  operand_14429->mMessageExpression,  operand_14429->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (357)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, operand_14429->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (369))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
      result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
        gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_outputActualParameterAST * operand_15759,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15759 != NULL) {
    const GGS_bool cond_16503 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (398)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (399)))) ;
    if (cond_16503.isBuiltAndTrue ()) {
      operand_15759->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (401)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (402)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (404)) ;
    }else if (cond_16503.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_15759->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_15759->mOutputActualParameterExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (406)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (412)),  operand_15759->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (412)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (414))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_17174,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17174 != NULL) {
    const GGS_bool cond_17829 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (430))) ;
    if (cond_17829.isBuiltAndTrue ()) {
      operand_17174->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (432)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (433)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (435)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    GGS_string automatic_var_18049_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_17174->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName, automatic_var_18049_0 COMMA_SOURCE_FILE_AT_LINE (439)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_18082 (operand_17174->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_18082 = NULL ;
      while (((operand_18082 = enumerator_18082.nextObject ()))) {
        macroValidPointer (operand_18082) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (441)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_18082->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (442)) ;
        }
      }
    }
    const GGS_bool cond_18515 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_18515.isBuiltAndTrue ()) {
      operand_17174->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (447)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (448)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (450)) ;
    }
    const GGS_bool cond_18773 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_17174->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (452))) ;
    if (cond_18773.isBuiltAndTrue ()) {
      operand_17174->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (456)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_17174->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_17174->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (459))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_inputActualParameterAST * operand_19182,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19182 != NULL) {
    const GGS_bool cond_19835 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (475))) ;
    if (cond_19835.isBuiltAndTrue ()) {
      operand_19182->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (477)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (478)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (480)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_20022_0 ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_19182->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName, automatic_var_20022_0 COMMA_SOURCE_FILE_AT_LINE (483)) ;
    const GGS_bool cond_20306 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_20306.isBuiltAndTrue ()) {
      operand_19182->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (487)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (488)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (490)) ;
    }
    const GGS_bool cond_20552 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_19182->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (492))) ;
    if (cond_20552.isBuiltAndTrue ()) {
      operand_19182->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (496)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_19182->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (499))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_20934,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20934 != NULL) {
    const GGS_bool cond_21602 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (514))) ;
    if (cond_21602.isBuiltAndTrue ()) {
      operand_20934->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (516)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (517)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (519)) ;
    }else if (cond_21602.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_20934->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (520)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (520)))).operator_concat (GGS_string ("_"))).operator_concat (operand_20934->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (520))) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputJokerParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName, var_cas_inFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (522))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_22686 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_22686.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (542)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (544)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (547)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
  }else if (cond_22686.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_22857 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_22857 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_22880 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_22880 = NULL ;
      while (((operand_22857 = enumerator_22857.nextObject ()))
          && ((operand_22880 = enumerator_22880.nextObject ()))) {
        macroValidPointer (operand_22857) ;
        macroValidPointer (operand_22880) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_22880->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_22880->mActualParameter (HERE), var_cas_inAnalysisContext, operand_22857->mFormalArgumentType, operand_22857->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (551)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_routineCallInstructionAST * operand_23330,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23330 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inAnalysisContext.mSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_23330->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (572)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_23330->mRoutineName,  ((GGS_string ("'")).operator_concat (operand_23330->mRoutineName)).operator_concat (GGS_string ("' routine header")),  var_cas_routineSignature,  operand_23330->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (575)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_23330->mRoutineName, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (585))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_24304,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24304 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_24304->mTypeName COMMA_SOURCE_FILE_AT_LINE (599)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_24743 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (603)) ;
    if (temp_24743.isBuilt ()) {
      temp_24743 (HERE)->method_searchKey (inLexique, operand_24304->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (603)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_24304->mMethodName,  ((GGS_string ("'")).operator_concat (operand_24304->mMethodName)).operator_concat (GGS_string ("' class method header")),  var_cas_routineSignature,  operand_24304->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (606)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_24304->mTypeName, operand_24304->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (616))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_methodCallInstructionAST * operand_25493,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25493 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_25493->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_25493->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (633)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_26110_0 ;
    GGS_methodQualifier automatic_var_26110_1 ;
    const GGS_instanceMethodMap  temp_26039 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (642)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) ;
    if (temp_26039.isBuilt ()) {
      temp_26039 (HERE)->method_searchKey (inLexique, operand_25493->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_26110_0, var_cas_hasCompilerArgument, automatic_var_26110_1 COMMA_SOURCE_FILE_AT_LINE (642)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_25493->mMethodName,  ((GGS_string ("'")).operator_concat (operand_25493->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_25493->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (645)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, operand_25493->mInstructionLocation, var_cas_receiverExpression, operand_25493->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (658)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (655))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_thisMethodCallInstructionAST * operand_26874,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26874 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    GGS_string var_cas_currentObjectCppPointer ;
    const GGS_bool cond_27304 = var_cas_inAnalysisContext.mSelfTypeProxy.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
    if (cond_27304.isBuiltAndTrue ()) {
      operand_26874->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (677)) ;
      var_cas_currentObjectCppPointer.drop () ;
      var_cas_thisTypeProxy.drop () ;
    }else if (cond_27304.isBuiltAndFalse ()) {
      var_cas_currentObjectCppPointer = var_cas_inAnalysisContext.mSelfObjectCppPointer ;
      var_cas_thisTypeProxy = var_cas_inAnalysisContext.mSelfTypeProxy ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_27694_0 ;
    GGS_methodQualifier automatic_var_27694_1 ;
    const GGS_instanceMethodMap  temp_27623 = var_cas_thisTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (685)) ;
    if (temp_27623.isBuilt ()) {
      temp_27623 (HERE)->method_searchKey (inLexique, operand_26874->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_27694_0, var_cas_hasCompilerArgument, automatic_var_27694_1 COMMA_SOURCE_FILE_AT_LINE (685)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_26874->mMethodName,  ((GGS_string ("'")).operator_concat (operand_26874->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_26874->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (688)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisMethodCallInstructionForGeneration ::constructor_new (inLexique, var_cas_currentObjectCppPointer, operand_26874->mInstructionLocation, operand_26874->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (701)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (698))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of function "checkMethodImplementationInSuperClasses"    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkMethodImplementationInSuperClasses (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkMethodImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_28593 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
  if (cond_28593.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_28593.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_bool automatic_var_28713_0 ;
    GGS_formalParameterSignature  automatic_var_28713_1 ;
    GGS_location  automatic_var_28713_2 ;
    GGS_bool automatic_var_28713_3 ;
    const GGS_instanceMethodMap  temp_28675 = var_cas_inSuperClass.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) ;
    if (temp_28675.isBuilt ()) {
      temp_28675 (HERE)->method_searchKey (inLexique, var_cas_inMethodName, automatic_var_28713_0, automatic_var_28713_1, automatic_var_28713_2, automatic_var_28713_3, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (719)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkMethodImplementationInSuperClasses (inLexique, var_cas_inMethodName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (726)) COMMA_SOURCE_FILE_AT_LINE (726)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkMethodImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkMethodImplementationInSuperClasses (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkMethodImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkMethodImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkMethodImplementationInSuperClasses ("checkMethodImplementationInSuperClasses",
                              functionForGenericCall_checkMethodImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkMethodImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superMethodCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_superMethodCallInstructionAST * operand_29220,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29220 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_string var_cas_currentObjectCppPointer ;
    const GGS_bool cond_29653 = var_cas_inAnalysisContext.mSelfTypeProxy.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (741)) ;
    if (cond_29653.isBuiltAndTrue ()) {
      operand_29220->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (743)) ;
      var_cas_currentObjectCppPointer.drop () ;
      var_cas_superTypeProxy.drop () ;
    }else if (cond_29653.isBuiltAndFalse ()) {
      const GGS_bool cond_29822 = (var_cas_inAnalysisContext.mSelfObjectCppPointer).operator_isNotEqual (GGS_string ("this")) ;
      if (cond_29822.isBuiltAndTrue ()) {
        operand_29220->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used in a category") COMMA_SOURCE_FILE_AT_LINE (745)) ;
        var_cas_currentObjectCppPointer.drop () ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_29822.isBuiltAndFalse ()) {
        var_cas_currentObjectCppPointer = var_cas_inAnalysisContext.mSelfObjectCppPointer ;
        var_cas_superTypeProxy = var_cas_inAnalysisContext.mSelfTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_30227_0 ;
    GGS_methodQualifier automatic_var_30227_1 ;
    const GGS_instanceMethodMap  temp_30156 = var_cas_superTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (753)) ;
    if (temp_30156.isBuilt ()) {
      temp_30156 (HERE)->method_searchKey (inLexique, operand_29220->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_30227_0, var_cas_hasCompilerArgument, automatic_var_30227_1 COMMA_SOURCE_FILE_AT_LINE (753)) ;
    }
    const GGS_string var_cas_superClassThatImplementsMethod = function_checkMethodImplementationInSuperClasses (inLexique, operand_29220->mMethodName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (755)) ;
    const GGS_bool cond_30600 = (var_cas_superClassThatImplementsMethod).operator_isEqual (GGS_string ("")) ;
    if (cond_30600.isBuiltAndTrue ()) {
      operand_29220->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_29220->mMethodName)).operator_concat (GGS_string ("' method is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (758)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_29220->mMethodName,  ((GGS_string ("'")).operator_concat (operand_29220->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_29220->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (761)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superMethodCallInstructionForGeneration ::constructor_new (inLexique, operand_29220->mInstructionLocation, var_cas_superClassThatImplementsMethod, operand_29220->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (774)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (771))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_31382,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31382 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    GGS_string automatic_var_31730_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_31382->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName, automatic_var_31730_0 COMMA_SOURCE_FILE_AT_LINE (791)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_31768 (operand_31382->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_31768 = NULL ;
      while (((operand_31768 = enumerator_31768.nextObject ()))) {
        macroValidPointer (operand_31768) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_31768->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (794)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_32115_0 ;
    const GGS_modifierMap  temp_32057 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (799)) ;
    if (temp_32057.isBuilt ()) {
      temp_32057 (HERE)->method_searchKey (inLexique, operand_31382->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_32115_0 COMMA_SOURCE_FILE_AT_LINE (799)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_31382->mModifierName,  ((GGS_string ("'")).operator_concat (operand_31382->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_31382->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (802)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_31382->mReceiverStructAttributes, var_cas_receiverType, operand_31382->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (812))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_thisModifierCallInstructionAST * operand_32885,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32885 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    const GGS_bool cond_33272 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (831))) ;
    if (cond_33272.isBuiltAndTrue ()) {
      GGS_string automatic_var_33263_0 ;
      GGS_string automatic_var_33263_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (832)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (832)), var_cas_thisTypeProxy, automatic_var_33263_0, automatic_var_33263_1 COMMA_SOURCE_FILE_AT_LINE (832)) ;
    }else if (cond_33272.isBuiltAndFalse ()) {
      operand_32885->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (835)) ;
      var_cas_thisTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_33596_0 ;
    const GGS_modifierMap  temp_33538 = var_cas_thisTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) ;
    if (temp_33538.isBuilt ()) {
      temp_33538 (HERE)->method_searchKey (inLexique, operand_32885->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_33596_0 COMMA_SOURCE_FILE_AT_LINE (839)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_32885->mModifierName,  ((GGS_string ("'")).operator_concat (operand_32885->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_32885->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (842)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_thisTypeProxy, operand_32885->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (852))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of function "checkModifierImplementationInSuperClasses"   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkModifierImplementationInSuperClasses (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inModifierName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkModifierImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_34439 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (867)) ;
  if (cond_34439.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_34439.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_formalParameterSignature  automatic_var_34549_0 ;
    GGS_bool automatic_var_34549_1 ;
    const GGS_modifierMap  temp_34515 = var_cas_inSuperClass.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (871)) ;
    if (temp_34515.isBuilt ()) {
      temp_34515 (HERE)->method_searchKey (inLexique, var_cas_inModifierName, automatic_var_34549_0, automatic_var_34549_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (871)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (876)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkModifierImplementationInSuperClasses (inLexique, var_cas_inModifierName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) COMMA_SOURCE_FILE_AT_LINE (878)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkModifierImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkModifierImplementationInSuperClasses (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkModifierImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkModifierImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkModifierImplementationInSuperClasses ("checkModifierImplementationInSuperClasses",
                              functionForGenericCall_checkModifierImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkModifierImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superModifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_superModifierCallInstructionAST * operand_35062,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35062 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_35725 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (892))) ;
    if (cond_35725.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
      GGS_string automatic_var_35483_0 ;
      GGS_string automatic_var_35483_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (894)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (894)), var_cas_thisTypeProxy, automatic_var_35483_0, automatic_var_35483_1 COMMA_SOURCE_FILE_AT_LINE (894)) ;
      const GGS_bool cond_35652 = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (895)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (895)) ;
      if (cond_35652.isBuiltAndTrue ()) {
        operand_35062->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used, current class has no super class") COMMA_SOURCE_FILE_AT_LINE (897)) ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_35652.isBuiltAndFalse ()) {
        var_cas_superTypeProxy = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (898)) ;
      }
    }else if (cond_35725.isBuiltAndFalse ()) {
      operand_35062->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (902)) ;
      var_cas_superTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_36052_0 ;
    const GGS_modifierMap  temp_35994 = var_cas_superTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (906)) ;
    if (temp_35994.isBuilt ()) {
      temp_35994 (HERE)->method_searchKey (inLexique, operand_35062->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_36052_0 COMMA_SOURCE_FILE_AT_LINE (906)) ;
    }
    const GGS_string var_cas_superClassThatImplementsModifier = function_checkModifierImplementationInSuperClasses (inLexique, operand_35062->mModifierName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (908)) ;
    const GGS_bool cond_36441 = (var_cas_superClassThatImplementsModifier).operator_isEqual (GGS_string ("")) ;
    if (cond_36441.isBuiltAndTrue ()) {
      operand_35062->mModifierName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_35062->mModifierName)).operator_concat (GGS_string ("' modifier is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (911)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_35062->mModifierName,  ((GGS_string ("'")).operator_concat (operand_35062->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_35062->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (914)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_superTypeProxy, var_cas_superClassThatImplementsModifier, operand_35062->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (924))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_appendInstructionAST * operand_37189,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37189 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_37189->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37189->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (942)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_37726_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_37189->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_37726_0 COMMA_SOURCE_FILE_AT_LINE (950)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_37759 (operand_37189->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_37759 = NULL ;
      while (((operand_37759 = enumerator_37759.nextObject ()))) {
        macroValidPointer (operand_37759) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (952)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_37759->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (953)) ;
        }
      }
    }
    const GGS_bool cond_38186 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (956))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (956)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_38186.isBuiltAndTrue ()) {
      operand_37189->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (958)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (960)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (962)),  operand_37189->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (962)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, operand_37189->mInstructionLocation, var_cas_targetType, var_cas_targetVariableCppName, operand_37189->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (964))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_addInstructionAST * operand_38683,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38683 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_39028_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_38683->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_39028_0 COMMA_SOURCE_FILE_AT_LINE (983)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_39061 (operand_38683->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_39061 = NULL ;
      while (((operand_39061 = enumerator_39061.nextObject ()))) {
        macroValidPointer (operand_39061) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (985)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_39061->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (986)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (989)) ;
    const GGS_bool cond_39648 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_39648.isBuiltAndTrue ()) {
      operand_38683->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (992)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (995)) ;
    }else if (cond_39648.isBuiltAndFalse ()) {
      const GGS_bool cond_39996 = (operand_38683->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_39996.isBuiltAndTrue ()) {
        operand_38683->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (997)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (998)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_38683->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (999)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1001)) ;
      }else if (cond_39996.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_40099 (operand_38683->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_40099 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_40127 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_40127 = NULL ;
          while (((operand_40099 = enumerator_40099.nextObject ()))
              && ((operand_40127 = enumerator_40127.nextObject ()))) {
            macroValidPointer (operand_40099) ;
            macroValidPointer (operand_40127) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_40099->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_40099->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (1005)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_40127->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1010)),  operand_40099->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1010)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, var_cas_targetType, operand_38683->mInstructionLocation, operand_38683->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (1014))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_incrementInstructionAST * operand_40846,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40846 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_41193_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_40846->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_41193_0 COMMA_SOURCE_FILE_AT_LINE (1034)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_41226 (operand_40846->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_41226 = NULL ;
      while (((operand_41226 = enumerator_41226.nextObject ()))) {
        macroValidPointer (operand_41226) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_41226->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1037)) ;
        }
      }
    }
    const GGS_bool cond_41642 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1040))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_41642.isBuiltAndTrue ()) {
      operand_40846->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (1044)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, operand_40846->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_40846->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1046))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_decrementInstructionAST * operand_42012,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42012 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_42359_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_42012->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_42359_0 COMMA_SOURCE_FILE_AT_LINE (1064)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_42392 (operand_42012->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_42392 = NULL ;
      while (((operand_42392 = enumerator_42392.nextObject ()))) {
        macroValidPointer (operand_42392) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_42392->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1067)) ;
        }
      }
    }
    const GGS_bool cond_42808 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1070))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_42808.isBuiltAndTrue ()) {
      operand_42012->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1072)))).operator_concat (GGS_string ("' type, but this type does not support the '--' operator")) COMMA_SOURCE_FILE_AT_LINE (1074)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, operand_42012->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_42012->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1076))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_messageInstructionAST * operand_43176,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43176 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43176->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43176->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1093)) ;
      }
    }
    const GGS_bool cond_43800 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1099))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
    if (cond_43800.isBuiltAndTrue ()) {
      operand_43176->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1101)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1101)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_43176->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1105))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_logInstructionAST * operand_44109,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44109 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_44273 (operand_44109->mLogList, true) ;
      const GGS_logListAST::cElement * operand_44273 = NULL ;
      while (((operand_44273 = enumerator_44273.nextObject ()))) {
        macroValidPointer (operand_44273) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44273->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_44273->mLogExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1121)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_44273->mLogMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1128)), var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1127))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_dropInstructionAST * operand_44807,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44807 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_45023 (operand_44807->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_45023 = NULL ;
      while (((operand_45023 = enumerator_45023.nextObject ()))) {
        macroValidPointer (operand_45023) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_45129_0 ;
        GGS_string automatic_var_45129_1 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_45023->mValue, automatic_var_45129_0, var_cas_variableCppName, automatic_var_45129_1 COMMA_SOURCE_FILE_AT_LINE (1144)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (1148))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_ifInstructionAST * operand_45496,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45496 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45496->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45496->m_if_expression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_45496->m_then_instructionList,  operand_45496->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList COMMA_SOURCE_FILE_AT_LINE (1171)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_45496->m_else_instructionList,  operand_45496->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1182)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_45496->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1191)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, operand_45496->mEndOf_then_branch, var_cas_if_expression, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1193))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_foreachInstructionAST * operand_46935,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46935 != NULL) {
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) ;
    var_cas_ioVariableMap.modifier_openBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) ;
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_47361 (operand_46935->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_47361 = NULL ;
      while (((operand_47361 = enumerator_47361.nextObject ()))) {
        macroValidPointer (operand_47361) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47361->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_47361->mEnumeratedExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_enumerationExpression COMMA_SOURCE_FILE_AT_LINE (1216)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_47361->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1222))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)) ;
        const GGS_bool cond_48066 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_48066.isBuiltAndTrue ()) {
          operand_47361->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1227)) ;
        }else if (cond_48066.isBuiltAndFalse ()) {
          const GGS_bool cond_48697 = ((operand_47361->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_47361->mEndsWithEllipsis).operator_not ()) ;
          if (cond_48697.isBuiltAndTrue ()) {
            const GGS_enumerationDescriptorList  var_cas_currentTypedAttributeList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)) ;
            {
              GGS_enumerationDescriptorList::cEnumerator enumerator_48289 (var_cas_currentTypedAttributeList, true) ;
              const GGS_enumerationDescriptorList::cElement * operand_48289 = NULL ;
              while (((operand_48289 = enumerator_48289.nextObject ()))) {
                macroValidPointer (operand_48289) ;
                var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_47361->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1231))).operator_concat (operand_48289->mEnumerationName), operand_47361->mEndOfEnumerationExpression COMMA_SOURCE_FILE_AT_LINE (1231)), operand_48289->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_48289->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")), (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_48289->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")) COMMA_SOURCE_FILE_AT_LINE (1230)) ;
              }
            }
          }else if (cond_48697.isBuiltAndFalse ()) {
            const GGS_bool cond_49139 = ((operand_47361->mEndsWithEllipsis).operator_not ()).operator_and ((operand_47361->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_49139.isBuiltAndTrue ()) {
              operand_47361->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1239)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1239)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1240)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_47361->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1243))) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
            }else if (cond_49139.isBuiltAndFalse ()) {
              const GGS_bool cond_49583 = (operand_47361->mEndsWithEllipsis).operator_and ((operand_47361->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_49583.isBuiltAndTrue ()) {
                operand_47361->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1247)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1247)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_47361->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1251))) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
              }else if (cond_49583.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_49610 (operand_47361->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_49610 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_49637 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_49637 = NULL ;
                  while (((operand_49610 = enumerator_49610.nextObject ()))
                      && ((operand_49637 = enumerator_49637.nextObject ()))) {
                    macroValidPointer (operand_49610) ;
                    macroValidPointer (operand_49637) ;
                    const GGS_bool cond_50382 = (operand_49610->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1255))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_50382.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_49610->mTypeName COMMA_SOURCE_FILE_AT_LINE (1256)) ;
                      const GGS_bool cond_50042 = (var_cas_foundType).operator_isNotEqual (operand_49637->mEnumeratedType) ;
                      if (cond_50042.isBuiltAndTrue ()) {
                        operand_49610->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_49637->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_49610->mConstantName, operand_49637->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_49637->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")), (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_49637->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")) COMMA_SOURCE_FILE_AT_LINE (1260)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_47361->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46935->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46935->mWhileExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_whileExpression COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1280)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46935->mBeforeInstructionList,  operand_46935->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList COMMA_SOURCE_FILE_AT_LINE (1283)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    GGS_localConstantList  var_cas_indexDeclaration = GGS_localConstantList ::constructor_emptyList () ;
    const GGS_bool cond_51543 = (operand_46935->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1295))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_51543.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_46935->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1296))) ;
      var_cas_indexDeclaration.addAssign_operation (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, operand_46935->mIndexVariableName, GGS_bool (false), var_cas_indexCppName) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_indexDeclaration,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46935->mDoInstructionList,  operand_46935->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1306)) ;
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46935->mBetweenInstructionList,  operand_46935->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList COMMA_SOURCE_FILE_AT_LINE (1317)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46935->mAfterInstructionList,  operand_46935->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1328)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_46935->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1338)) ;
    var_cas_ioVariableMap.modifier_closeBranch (inLexique, operand_46935->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1340)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_46935->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1341)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, operand_46935->mInstructionLocation, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1343))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_loopInstructionAST * operand_53220,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53220 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53220->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53220->mVariantExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_variantExpression COMMA_SOURCE_FILE_AT_LINE (1364)) ;
      }
    }
    const GGS_bool cond_53906 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1370))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType) ;
    if (cond_53906.isBuiltAndTrue ()) {
      operand_53220->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1373)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53220->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53220->mLoopExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_loopExpression COMMA_SOURCE_FILE_AT_LINE (1376)) ;
      }
    }
    const GGS_bool cond_54425 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1382))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mBoolType) ;
    if (cond_54425.isBuiltAndTrue ()) {
      operand_53220->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inAnalysisContext.mPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1385)) ;
    }
    var_cas_ioVariableMap.modifier_openOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_53220->mFirstInstructions,  operand_53220->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList COMMA_SOURCE_FILE_AT_LINE (1390)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_53220->mSecondInstructions,  operand_53220->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1401)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_53220->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1411)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, operand_53220->mInstructionLocation, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1413))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@structuredCastInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structuredCastInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_structuredCastInstructionAST * operand_55659,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55659 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_castExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55659->mCastExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55659->mCastExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_castExpression COMMA_SOURCE_FILE_AT_LINE (1431)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) ;
    GGS_castInstructionBranchListForGeneration  var_cas_castBranchList = GGS_castInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_castInstructionBranchListAST::cEnumerator enumerator_56211 (operand_55659->mCastInstructionBranchList, true) ;
      const GGS_castInstructionBranchListAST::cElement * operand_56211 = NULL ;
      while (((operand_56211 = enumerator_56211.nextObject ()))) {
        macroValidPointer (operand_56211) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_56211->mTypeName COMMA_SOURCE_FILE_AT_LINE (1442)) ;
        GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
        GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1445))) ;
        GGS_uint _variant_56692 = var_cas_inAnalysisContext.mSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1446)) ;
        GGS_bool _condition_56692 (_variant_56692.isBuilt (), true) ;
        while (_condition_56692.isBuiltAndTrue ()) {
          _condition_56692 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1447))).operator_not ()) ;
          if (_condition_56692.isBuiltAndTrue ()) {
            if (_variant_56692.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1450)) ;
              _condition_56692 = GGS_bool (false) ;
            }else{
              _variant_56692.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)) ;
              var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1449))) ;
            }
          }
        }
        const GGS_bool cond_56888 = (var_cas_found).operator_not () ;
        if (cond_56888.isBuiltAndTrue ()) {
          operand_56211->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_56211->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1455)) ;
        }
        GGS_string var_cas_localConstantName ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        const GGS_bool cond_57340 = (operand_56211->mConstantVarName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_57340.isBuiltAndTrue ()) {
          var_cas_localConstantName = (((GGS_string ("cast_")).operator_concat (operand_56211->mConstantVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)))).operator_concat (GGS_string ("_"))).operator_concat (operand_56211->mConstantVarName) ;
          var_cas_localConstantList.addAssign_operation (var_cas_type, operand_56211->mConstantVarName, operand_56211->mConstantVarNameIsUnused, var_cas_localConstantName) ;
        }else if (cond_57340.isBuiltAndFalse ()) {
          var_cas_localConstantName = GGS_string ("") ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_56211->mInstructionList,  operand_56211->mEndOfInstructions,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1472)) ;
        var_cas_castBranchList.addAssign_operation (operand_56211->mUseKindOfClass, var_cas_type, var_cas_localConstantName, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_55659->mElseInstructionList,  operand_55659->mEndOfCastInstruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1485)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_55659->mEndOfCastInstruction COMMA_SOURCE_FILE_AT_LINE (1495)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_structuredCastInstructionForGeneration ::constructor_new (inLexique, var_cas_castExpression, var_cas_castBranchList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1497))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_grammarInstructionAST * operand_58574,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58574 != NULL) {
    GGS_grammarLabelMap  var_cas_grammarLabelMap ;
    if (var_cas_inAnalysisContext.mSemanticContext.mGrammarMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mGrammarMap (HERE)->method_searchKey (inLexique, operand_58574->mGrammarComponentName, var_cas_grammarLabelMap COMMA_SOURCE_FILE_AT_LINE (1513)) ;
    }
    GGS_formalParameterSignature  var_cas_labelSignature ;
    if (var_cas_grammarLabelMap.isBuilt ()) {
      var_cas_grammarLabelMap (HERE)->method_searchKey (inLexique, operand_58574->mLabelName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (1519)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_58574->mLabelName,  ((GGS_string ("label of the ")).operator_concat (operand_58574->mGrammarComponentName)).operator_concat (GGS_string (" grammar")),  var_cas_labelSignature,  operand_58574->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1525)) ;
    GGS_semanticExpressionForGeneration  var_cas_sourceExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_58574->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_58574->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (1536)) ;
      }
    }
    const GGS_bool cond_59984 = operand_58574->mSourceExpressionIsFile ;
    if (cond_59984.isBuiltAndTrue ()) {
      const GGS_bool cond_59971 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1543))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLStringType) ;
      if (cond_59971.isBuiltAndTrue ()) {
        operand_58574->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source file path and its type should be '@lstring', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1547)) ;
      }
    }else if (cond_59984.isBuiltAndFalse ()) {
      const GGS_bool cond_60241 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1548))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
      if (cond_60241.isBuiltAndTrue ()) {
        operand_58574->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source string and its type should be '@string', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1552)) ;
      }
    }
    const GGS_bool cond_60569 = operand_58574->mSourceExpressionIsFile ;
    if (cond_60569.isBuiltAndTrue ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceFileForGeneration ::constructor_new (inLexique, operand_58574->mInstructionLocation, operand_58574->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1557)), operand_58574->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1558)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1555))) ;
    }else if (cond_60569.isBuiltAndFalse ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceExpressionForGeneration ::constructor_new (inLexique, operand_58574->mInstructionLocation, operand_58574->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1565)), operand_58574->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1563))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readWriteAccessWithInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_readWriteAccessWithInstructionAST * operand_61013,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61013 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61013->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61013->mKeyExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1582)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_61013->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1588))) ;
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_receiverVariableCppName ;
    GGS_string automatic_var_61698_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_61013->mReceiverName, var_cas_targetType, var_cas_receiverVariableCppName, automatic_var_61698_0 COMMA_SOURCE_FILE_AT_LINE (1592)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_61721 (operand_61013->mFieldList, true) ;
      const GGS_lstringlist::cElement * operand_61721 = NULL ;
      while (((operand_61721 = enumerator_61721.nextObject ()))) {
        macroValidPointer (operand_61721) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1594)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_61721->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1595)) ;
        }
      }
    }
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_targetType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_62047 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_61013->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))) ;
    if (NULL != operand_62047) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_62047->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_62360 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_62360.isBuiltAndTrue ()) {
        operand_61013->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1608)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_62360.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_62414 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_62414 = NULL ;
          while (((operand_62414 = enumerator_62414.nextObject ()))) {
            macroValidPointer (operand_62414) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_62414->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_62414->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1611))) ;
          }
        }
        operand_61013->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1614)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_61013->mAccessName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1619)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_63281 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_63281.isBuiltAndTrue ()) {
      operand_61013->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_61013->mAccessName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1624)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1625)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1626)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1627)) ;
    }else if (cond_63281.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_63317 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_63317 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_63335 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_63335 = NULL ;
        while (((operand_63317 = enumerator_63317.nextObject ()))
            && ((operand_63335 = enumerator_63335.nextObject ()))) {
          macroValidPointer (operand_63317) ;
          macroValidPointer (operand_63335) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_63335->mType,  operand_63317->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)),  operand_61013->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)) COMMA_SOURCE_FILE_AT_LINE (1629)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)) ;
    GGS_localInitializedVariableList  var_cas_localInitializedVariableList = GGS_localInitializedVariableList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_63630 (var_cas_targetType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1636)), true) ;
      const GGS_typedAttributeList::cElement * operand_63630 = NULL ;
      while (((operand_63630 = enumerator_63630.nextObject ()))) {
        macroValidPointer (operand_63630) ;
        var_cas_localInitializedVariableList.addAssign_operation (operand_63630->mAttributeTypeProxy, GGS_lstring ::constructor_new (inLexique, (operand_61013->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1639))).operator_concat (operand_63630->mAttributeName), operand_61013->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)) COMMA_SOURCE_FILE_AT_LINE (1639)), ((var_cas_objectArrayCppName).operator_concat (GGS_string ("->mAttribute_"))).operator_concat (operand_63630->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  var_cas_localInitializedVariableList,  operand_61013->m_do_Instructions,  operand_61013->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1644)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_61013->m_else_Instructions,  operand_61013->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1655)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_61013->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1664)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readWriteWithInstructionForGeneration ::constructor_new (inLexique, operand_61013->mInstructionLocation, var_cas_receiverVariableCppName, var_cas_targetType, operand_61013->mFieldList, operand_61013->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1671)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1666))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readAccessWithInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readAccessWithInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_readAccessWithInstructionAST * operand_65082,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65082 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_65082->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_65082->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (1688)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1693)) ;
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_65082->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_65082->mKeyExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1696)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_65082->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1702))) ;
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_receiverType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_66022 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_65082->mSearchMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1706))) ;
    if (NULL != operand_66022) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_66022->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_66349 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_66349.isBuiltAndTrue ()) {
        operand_65082->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1714)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_66349.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_66403 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_66403 = NULL ;
          while (((operand_66403 = enumerator_66403.nextObject ()))) {
            macroValidPointer (operand_66403) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_66403->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_66403->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1717))) ;
          }
        }
        operand_65082->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_65082->mSearchMethodName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1725)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_67298 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_67298.isBuiltAndTrue ()) {
      operand_65082->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_65082->mSearchMethodName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1730)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1731)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1733)) ;
    }else if (cond_67298.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_67334 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_67334 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_67352 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_67352 = NULL ;
        while (((operand_67334 = enumerator_67334.nextObject ()))
            && ((operand_67352 = enumerator_67352.nextObject ()))) {
          macroValidPointer (operand_67334) ;
          macroValidPointer (operand_67352) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_67352->mType,  operand_67334->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)),  operand_65082->mSearchMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)) COMMA_SOURCE_FILE_AT_LINE (1735)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1739)) ;
    GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_67631 (var_cas_receiverType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1742)), true) ;
      const GGS_typedAttributeList::cElement * operand_67631 = NULL ;
      while (((operand_67631 = enumerator_67631.nextObject ()))) {
        macroValidPointer (operand_67631) ;
        var_cas_localConstantList.addAssign_operation (operand_67631->mAttributeTypeProxy, GGS_lstring ::constructor_new (inLexique, (operand_65082->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1745))).operator_concat (operand_67631->mAttributeName), operand_65082->mSearchMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) COMMA_SOURCE_FILE_AT_LINE (1745)), GGS_bool (true), ((var_cas_objectArrayCppName).operator_concat (GGS_string ("->mAttribute_"))).operator_concat (operand_67631->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_65082->mDoBranchInstructions,  operand_65082->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1751)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_65082->mElseBranchInstructions,  operand_65082->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1762)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_65082->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1771)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readOnlyWithInstructionForGeneration ::constructor_new (inLexique, operand_65082->mInstructionLocation, var_cas_receiverExpression, operand_65082->mSearchMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1773))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_switchInstructionAST * operand_69084,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_69084 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_69084->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_69084->mSwitchExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1793)) ;
      }
    }
    const GGS_bool cond_69767 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1799))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1799))) ;
    if (cond_69767.isBuiltAndTrue ()) {
      operand_69084->mEndOfSwitchExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the switch expression type should be an instance of an enumeration type (the '@")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)))).operator_concat (GGS_string ("' type is not an enumeration type)")) COMMA_SOURCE_FILE_AT_LINE (1802)) ;
    }
    const GGS_stringset  var_cas_enumConstantStringSet = var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)).reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1804)) ;
    GGS_stringset  var_cas_constantsNamedInSwitchInstruction = GGS_stringset ::constructor_emptySet () ;
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)) ;
    GGS_switchBranchesForGeneration  var_cas_switchBranchesForGeneration = GGS_switchBranchesForGeneration ::constructor_emptyList () ;
    {
      GGS_switchBranchesAST::cEnumerator enumerator_70115 (operand_69084->mBranches, true) ;
      const GGS_switchBranchesAST::cElement * operand_70115 = NULL ;
      while (((operand_70115 = enumerator_70115.nextObject ()))) {
        macroValidPointer (operand_70115) ;
        {
          GGS_lstringlist::cEnumerator enumerator_70150 (operand_70115->mSwitchConstantList, true) ;
          const GGS_lstringlist::cElement * operand_70150 = NULL ;
          while (((operand_70150 = enumerator_70150.nextObject ()))) {
            macroValidPointer (operand_70150) ;
            const GGS_bool cond_70505 = var_cas_enumConstantStringSet.reader_hasKey (operand_70150->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1811))) ;
            if (cond_70505.isBuiltAndTrue ()) {
              const GGS_bool cond_70425 = var_cas_constantsNamedInSwitchInstruction.reader_hasKey (operand_70150->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1812))) ;
              if (cond_70425.isBuiltAndTrue ()) {
                operand_70150->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_70150->mValue)).operator_concat (GGS_string ("' constant is already named in this switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1816)) ;
              }
              var_cas_constantsNamedInSwitchInstruction.addAssign_operation (operand_70150->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1817))) ;
            }else if (cond_70505.isBuiltAndFalse ()) {
              operand_70150->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("'")).operator_concat (operand_70150->mValue)).operator_concat (GGS_string ("' is not a constant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1822)) ;
            }
          }
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_70115->mInstructions,  operand_70115->mEndOfBranch,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1825)) ;
        var_cas_switchBranchesForGeneration.addAssign_operation (operand_70115->mSwitchConstantList, var_cas_instructionList) ;
      }
    }
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_69084->mEndOf_switch_instruction COMMA_SOURCE_FILE_AT_LINE (1836)) ;
    const GGS_stringset  var_cas_forgottenConstants = var_cas_enumConstantStringSet.substract_operation (inLexique, var_cas_constantsNamedInSwitchInstruction COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    const GGS_bool cond_71560 = (var_cas_forgottenConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_71560.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_71366 (var_cas_forgottenConstants, true) ;
        while (enumerator_71366.hasCurrentObject ()) {
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (enumerator_71366._key (HERE)) ;
          enumerator_71366.next () ;
        }
      }
      operand_69084->mEndOf_switch_instruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the switch instruction should name all enumeration constants; missing constants are:")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1847)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_switchInstructionForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_switchBranchesForGeneration COMMA_SOURCE_FILE_AT_LINE (1849))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_matchInstructionAST * operand_71883,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_71883 != NULL) {
    GGS_semanticExpressionListForGeneration  var_cas_expressionList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_72129 (operand_71883->mMatchedExpressionList, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_72129 = NULL ;
      while (((operand_72129 = enumerator_72129.nextObject ()))) {
        macroValidPointer (operand_72129) ;
        GGS_semanticExpressionForGeneration  var_cas_matchedExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_72129->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_72129->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_matchedExpression COMMA_SOURCE_FILE_AT_LINE (1866)) ;
          }
        }
        var_cas_expressionList.addAssign_operation (var_cas_matchedExpression) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_matchedExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1873)) ;
        const GGS_bool cond_72801 = ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)))).operator_and ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1874))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)))) ;
        if (cond_72801.isBuiltAndTrue ()) {
          operand_72129->mEndOfExpressionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is an instance of '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1876)))).operator_concat (GGS_string ("' type, but this type is neither an enumeration, neither a class")) COMMA_SOURCE_FILE_AT_LINE (1878)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1881)) ;
    GGS_matchInstructionBranchListForGeneration  var_cas_matchInstructionBranchList = GGS_matchInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_matchInstructionBranchListAST::cEnumerator enumerator_73015 (operand_71883->mMatchInstructionBranchList, true) ;
      const GGS_matchInstructionBranchListAST::cElement * operand_73015 = NULL ;
      while (((operand_73015 = enumerator_73015.nextObject ()))) {
        macroValidPointer (operand_73015) ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        GGS_matchListForGeneration  var_cas_matchListForGeneration = GGS_matchListForGeneration ::constructor_emptyList () ;
        const GGS_bool cond_75559 = (var_cas_expressionList.reader_length ()).operator_isEqual (operand_73015->mMatchEntryList.reader_length ()) ;
        if (cond_75559.isBuiltAndTrue ()) {
          {
            GGS_semanticExpressionListForGeneration::cEnumerator enumerator_73249 (var_cas_expressionList, true) ;
            const GGS_semanticExpressionListForGeneration::cElement * operand_73249 = NULL ;
            GGS_matchEntryListAST::cEnumerator enumerator_73266 (operand_73015->mMatchEntryList, true) ;
            const GGS_matchEntryListAST::cElement * operand_73266 = NULL ;
            while (((operand_73249 = enumerator_73249.nextObject ()))
                && ((operand_73266 = enumerator_73266.nextObject ()))) {
              macroValidPointer (operand_73249) ;
              macroValidPointer (operand_73266) ;
              const GGS_unifiedTypeMapProxy  var_cas_type = operand_73249->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)) ;
              const GGS_bool cond_74666 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1890))).operator_isEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1890))) ;
              if (cond_74666.isBuiltAndTrue ()) {
                const GGS_bool cond_74347 = operand_73266->mIsType ;
                if (cond_74347.isBuiltAndTrue ()) {
                  const GGS_unifiedTypeMapProxy  var_cas_namedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_73266->mTypeNameOrEnumerationConstantName COMMA_SOURCE_FILE_AT_LINE (1892)) ;
                  GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
                  GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                  GGS_uint _variant_73893 = var_cas_inAnalysisContext.mSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1895)) ;
                  GGS_bool _condition_73893 (_variant_73893.isBuilt (), true) ;
                  while (_condition_73893.isBuiltAndTrue ()) {
                    _condition_73893 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1896))).operator_not ()) ;
                    if (_condition_73893.isBuiltAndTrue ()) {
                      if (_variant_73893.uintValue () == 0) {
                        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1899)) ;
                        _condition_73893 = GGS_bool (false) ;
                      }else{
                        _variant_73893.decrement_operation (inLexique COMMA_HERE) ;
                        var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)) ;
                        var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                      }
                    }
                  }
                  const GGS_bool cond_74163 = (var_cas_found).operator_not () ;
                  if (cond_74163.isBuiltAndTrue ()) {
                    operand_73266->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_73266->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1904)) ;
                  }else if (cond_74163.isBuiltAndFalse ()) {
                    const GGS_bool cond_74327 = (operand_73266->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1904)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                    if (cond_74327.isBuiltAndTrue ()) {
                      var_cas_localConstantList.addAssign_operation (var_cas_t, operand_73266->mLocalConstantName, GGS_bool (false), GGS_string ("match_instruction_constant_name")) ;
                    }
                  }
                }else if (cond_74347.isBuiltAndFalse ()) {
                  operand_73266->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a type that inherits from '@")).operator_concat (operand_73249->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1909)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1909)))).operator_concat (GGS_string ("' class is expected here")) COMMA_SOURCE_FILE_AT_LINE (1911)) ;
                }
                var_cas_matchListForGeneration.addAssign_operation (GGS_bool (true), operand_73266->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1912)), operand_73266->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1912))) ;
              }else if (cond_74666.isBuiltAndFalse ()) {
                const GGS_bool cond_75442 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1913))).operator_isEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1913))) ;
                if (cond_75442.isBuiltAndTrue ()) {
                  const GGS_bool cond_74943 = operand_73266->mIsType ;
                  if (cond_74943.isBuiltAndTrue ()) {
                    operand_73266->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of the '@")).operator_concat (operand_73249->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1916)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1916)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (1918)) ;
                  }else if (cond_74943.isBuiltAndFalse ()) {
                    const GGS_bool cond_75261 = (var_cas_type.reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1918)).reader_hasKey (operand_73266->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1918)))).operator_not () ;
                    if (cond_75261.isBuiltAndTrue ()) {
                      operand_73266->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_73266->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' symbol is not a constant of the '@"))).operator_concat (operand_73249->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1920)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1920)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1922)) ;
                    }
                  }
                  var_cas_matchListForGeneration.addAssign_operation (GGS_bool (false), operand_73266->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1925)), operand_73249->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1926))) ;
                }else if (cond_75442.isBuiltAndFalse ()) {
                  operand_73266->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (1930)) ;
                }
              }
            }
          }
        }else if (cond_75559.isBuiltAndFalse ()) {
          operand_73015->mEndOfMatchEntryList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this match list should contain ")).operator_concat (var_cas_expressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1934)))).operator_concat (GGS_string (" elements, but it acually contains "))).operator_concat (operand_73015->mMatchEntryList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1935))) COMMA_SOURCE_FILE_AT_LINE (1937)) ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_73015->mMatchBranchInstructionList,  operand_73015->mEndOf_instructionList,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1940)) ;
        var_cas_matchInstructionBranchList.addAssign_operation (var_cas_matchListForGeneration, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_elseInstructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_71883->mElseInstructionList,  operand_71883->mEndOf_match_instruction,  var_cas_ioVariableMap,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1954)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_71883->mEndOf_match_instruction COMMA_SOURCE_FILE_AT_LINE (1964)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_matchInstructionForGeneration ::constructor_new (inLexique, var_cas_expressionList, var_cas_matchInstructionBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1966))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__structuredCastInstructionAST__analyzeSemanticInstruction, gClassInfoFor__structuredCastInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readWriteAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

