//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 18th, 2010, at 21h48'46"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
    result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
      gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@localConstantList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localConstantList::
elementOf_GGS_localConstantList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mNoWarningIfUnused (argument_2),
mCppName (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localConstantList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localConstantList * ptr = dynamic_cast <const elementOf_GGS_localConstantList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mNoWarningIfUnused.operator_isEqual (ptr->mNoWarningIfUnused).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localConstantList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNoWarningIfUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@localConstantList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localConstantList ("localConstantList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
operator_concat (const GGS_localConstantList & inOperand) const {
  GGS_localConstantList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
dotAssign_operation (const GGS_localConstantList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localConstantList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_bool p_2 = p->mNoWarningIfUnused ;
          GGS_string p_3 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_bool& argument_2,
                     const GGS_string& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mNoWarningIfUnused,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_emptyList (void) {
  GGS_localConstantList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  GGS_localConstantList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalSubListWithRange (GGS_localConstantList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mNoWarningIfUnused, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localConstantList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_bool& _out_2,
              GGS_string& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_bool& _out_2,
             GGS_string& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_bool& _out_2,
                 GGS_string& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_bool& _out_2,
                GGS_string& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localConstantList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localConstantList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localConstantList::
reader_mNoWarningIfUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNoWarningIfUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNoWarningIfUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNoWarningIfUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localConstantList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localConstantList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_localConstantList::cEnumerator::_mNoWarningIfUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNoWarningIfUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localConstantList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localConstantList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localConstantList * p = NULL ;
    macroMyNew (p, GGS_localConstantList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localConstantList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localConstantList * p = dynamic_cast <const GGS_localConstantList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localConstantList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localConstantList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localConstantList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@localInitializedVariableList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localInitializedVariableList::
elementOf_GGS_localInitializedVariableList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mCppName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localInitializedVariableList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localInitializedVariableList * ptr = dynamic_cast <const elementOf_GGS_localInitializedVariableList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localInitializedVariableList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@localInitializedVariableList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localInitializedVariableList ("localInitializedVariableList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
operator_concat (const GGS_localInitializedVariableList & inOperand) const {
  GGS_localInitializedVariableList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
dotAssign_operation (const GGS_localInitializedVariableList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localInitializedVariableList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_string p_2 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_string& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_emptyList (void) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalSubListWithRange (GGS_localInitializedVariableList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localInitializedVariableList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_first (C_Compiler & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_string& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_last (C_Compiler & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_string& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_string& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popLast (C_Compiler & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_string& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localInitializedVariableList::
reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localInitializedVariableList::
reader_mNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_mCppNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMCppNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localInitializedVariableList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localInitializedVariableList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localInitializedVariableList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localInitializedVariableList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localInitializedVariableList * p = NULL ;
    macroMyNew (p, GGS_localInitializedVariableList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localInitializedVariableList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localInitializedVariableList * p = dynamic_cast <const GGS_localInitializedVariableList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localInitializedVariableList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localInitializedVariableList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localInitializedVariableList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_localInitializedVariableList   var_cas_inLocalInitializedVariableList,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_3458 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_3458 = NULL ;
    while (((operand_3458 = enumerator_3458.nextObject ()))) {
      macroValidPointer (operand_3458) ;
      const GGS_bool cond_3575 = operand_3458->mNoWarningIfUnused ;
      if (cond_3575.isBuiltAndTrue ()) {
        var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_3458->mName, operand_3458->mType, operand_3458->mCppName COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }else if (cond_3575.isBuiltAndFalse ()) {
        var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3458->mName, operand_3458->mType, operand_3458->mCppName COMMA_SOURCE_FILE_AT_LINE (77)) ;
      }
    }
  }
  {
    GGS_localInitializedVariableList::cEnumerator enumerator_3744 (var_cas_inLocalInitializedVariableList, true) ;
    const GGS_localInitializedVariableList::cElement * operand_3744 = NULL ;
    while (((operand_3744 = enumerator_3744.nextObject ()))) {
      macroValidPointer (operand_3744) ;
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3744->mName, operand_3744->mType, operand_3744->mCppName COMMA_SOURCE_FILE_AT_LINE (82)) ;
    }
  }
  GGS_stringlist  var_cas_localVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3952 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3952 = NULL ;
    while (((operand_3952 = enumerator_3952.nextObject ()))) {
      macroValidPointer (operand_3952) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3952->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3952->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap, var_cas_localVariableCppNameList, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (87)) ;
        }
      }
    }
  }
  const GGS_bool cond_4419 = (var_cas_localVariableCppNameList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_4419.isBuiltAndTrue ()) {
    var_cas_outInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_localVariableCppNameList, GGS_string ("end of scope") COMMA_SOURCE_FILE_AT_LINE (98))) ;
  }
  var_cas_ioVariableMap.modifier_endBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (104)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_4690,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4690 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_4690->mTypeName,  operand_4690->mConstructorName,  operand_4690->mConstructorExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (121)) ;
    const GGS_bool cond_5474 = var_cas_hasCompilerArgument ;
    if (cond_5474.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_4690->mTypeName COMMA_SOURCE_FILE_AT_LINE (137)) ;
    const GGS_bool cond_5842 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_5842.isBuiltAndTrue ()) {
      operand_4690->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_4690->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4690->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_6156 = operand_4690->mIsConstant ;
    if (cond_6156.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4690->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (147)) ;
    }else if (cond_6156.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4690->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (149)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_4690->mIsConstant, var_cas_targetVariableCppName, operand_4690->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (152))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_6754,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6754 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6754->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6754->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_6754->mTypeName COMMA_SOURCE_FILE_AT_LINE (182)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_6754->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    const GGS_bool cond_7675 = operand_6754->mIsConstant ;
    if (cond_7675.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_6754->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (186)) ;
    }else if (cond_7675.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_6754->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (188)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (191)),  operand_6754->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (191)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_6754->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (193))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_8291,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8291 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8291->mTypeName COMMA_SOURCE_FILE_AT_LINE (212)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_8291->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_targetVariableCppName) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_8291->mVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (215)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (217))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_assignmentInstructionAST * operand_9279,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9279 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_9279->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_9279->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (235)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_10039 = (operand_9279->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_10039.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_9279->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (246)) ;
    }else if (cond_10039.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_9279->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (248)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_10177 (operand_9279->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_10177 = NULL ;
        while (((operand_10177 = enumerator_10177.nextObject ()))) {
          macroValidPointer (operand_10177) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (250)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_10177->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (251)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (255)),  operand_9279->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (255)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_9279->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (257))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@sendInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_sendInstructionAST * operand_10788,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10788 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_10788->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10788->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (276)) ;
      }
    }
    const GGS_bool cond_11556 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (284))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_11556.isBuiltAndTrue ()) {
      operand_10788->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the send expression type is '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (286)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (286)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (288)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_sendInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (289))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useless = GGS_bool (false) ;
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outLocationExpression, var_cas_useless COMMA_SOURCE_FILE_AT_LINE (308)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (316))).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
  const GGS_bool cond_14086 = var_cas_outUseLocationReader ;
  if (cond_14086.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (318)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
    elementOf_GGS_readerMap * operand_12815 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_12815) {
      const GGS_bool cond_13250 = (operand_12815->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_13250.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (322)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (322)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (325)) ;
      }else if (cond_13250.isBuiltAndFalse ()) {
        const GGS_bool cond_13717 = (operand_12815->mInfo.mReturnedType).operator_isNotEqual (var_cas_inPredefinedTypes.mLocationType) ;
        if (cond_13717.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (327)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_12815->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (328)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (334)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (334)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (337)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_outMessageExpression, var_cas_useless COMMA_SOURCE_FILE_AT_LINE (340)) ;
    }
  }
  const GGS_bool cond_14592 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (348))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
  if (cond_14592.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (350)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (352)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_errorInstructionAST * operand_14755,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14755 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_14755->mLocationExpression,  operand_14755->mMessageExpression,  operand_14755->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (370)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_15576 (operand_14755->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_15576 = NULL ;
      while (((operand_15576 = enumerator_15576.nextObject ()))) {
        macroValidPointer (operand_15576) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_15670_0 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_15576->mValue, automatic_var_15670_0, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (386)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (390))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_warningInstructionAST * operand_16098,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16098 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_16098->mLocationExpression,  operand_16098->mMessageExpression,  operand_16098->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (413)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (426))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
    result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
      gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputActualParameterAST * operand_17773,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17773 != NULL) {
    const GGS_bool cond_18715 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (460)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (461)))) ;
    if (cond_18715.isBuiltAndTrue ()) {
      operand_17773->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (463)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (464)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (466)) ;
    }else if (cond_18715.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_17773->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_17773->mOutputActualParameterExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (468)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (476)),  operand_17773->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (476)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (478))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_19442,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19442 != NULL) {
    const GGS_bool cond_20309 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
    if (cond_20309.isBuiltAndTrue ()) {
      operand_19442->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (500)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (502)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_19442->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (506)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_20559 (operand_19442->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_20559 = NULL ;
      while (((operand_20559 = enumerator_20559.nextObject ()))) {
        macroValidPointer (operand_20559) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (508)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_20559->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (509)) ;
        }
      }
    }
    const GGS_bool cond_20992 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_20992.isBuiltAndTrue ()) {
      operand_19442->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (514)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (515)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (517)) ;
    }
    const GGS_bool cond_21250 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_19442->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
    if (cond_21250.isBuiltAndTrue ()) {
      operand_19442->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (523)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_19442->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (524))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_19442->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (526))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputActualParameterAST * operand_21659,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & /* var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration */,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21659 != NULL) {
    const GGS_bool cond_22524 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (545))) ;
    if (cond_22524.isBuiltAndTrue ()) {
      operand_21659->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (547)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (548)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (550)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_21659->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (553)) ;
    const GGS_bool cond_22992 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_22992.isBuiltAndTrue ()) {
      operand_21659->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (557)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (558)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (560)) ;
    }
    const GGS_bool cond_23238 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_21659->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))) ;
    if (cond_23238.isBuiltAndTrue ()) {
      operand_21659->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (566)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_21659->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (567))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (569))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_Compiler & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_23620,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23620 != NULL) {
    const GGS_bool cond_24493 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (587))) ;
    if (cond_24493.isBuiltAndTrue ()) {
      operand_23620->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (589)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (590)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (592)) ;
    }else if (cond_24493.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_23620->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (593)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (593)))).operator_concat (GGS_string ("_"))).operator_concat (operand_23620->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (593))) ;
      var_cas_ioTemporaryInputVariableForRoutineInvocationForGeneration.addAssign_operation (var_cas_inFormalArgumentType, var_cas_cppVarName) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName COMMA_SOURCE_FILE_AT_LINE (597))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration,
                                GGS_temporaryInputVariableForRoutineInvocationForGeneration  & var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_25963 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_25963.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("the '")).operator_concat (var_cas_inRoutineName)).operator_concat (GGS_string ("' "))).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" header defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (619)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (621)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (624)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration.drop () ;
  }else if (cond_25963.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration = GGS_temporaryInputVariableForRoutineInvocationForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_26271 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_26271 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_26294 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_26294 = NULL ;
      while (((operand_26271 = enumerator_26271.nextObject ()))
          && ((operand_26294 = enumerator_26294.nextObject ()))) {
        macroValidPointer (operand_26271) ;
        macroValidPointer (operand_26294) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_26294->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_26294->mActualParameter (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, operand_26271->mFormalArgumentType, operand_26271->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_outTemporaryInputVariableForRoutineInvocationForGeneration, var_cas_exclusiveVariableSet, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (629)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_routineCallInstructionAST * operand_26873,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26873 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_26873->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (657)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_26873->mRoutineName,  GGS_string ("routine"),  var_cas_routineSignature,  operand_26873->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (661)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_26873->mRoutineName, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (674))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_28247,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28247 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_28247->mTypeName COMMA_SOURCE_FILE_AT_LINE (692)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_28790 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (696)) ;
    if (temp_28790.isBuilt ()) {
      temp_28790 (HERE)->method_searchKey (inLexique, operand_28247->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (696)) ;
    }
    const GGS_bool cond_28918 = var_cas_hasCompilerArgument ;
    if (cond_28918.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_28247->mMethodName,  GGS_string ("class method"),  var_cas_routineSignature,  operand_28247->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (703)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_28247->mTypeName, operand_28247->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (716))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_methodCallInstructionAST * operand_29880,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29880 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29880->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29880->mReceiverExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (737)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_location  automatic_var_30638_0 ;
    GGS_readerQualifier automatic_var_30638_1 ;
    const GGS_instanceMethodMap  temp_30579 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (747)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
    if (temp_30579.isBuilt ()) {
      temp_30579 (HERE)->method_searchKey (inLexique, operand_29880->mMethodName, var_cas_routineSignature, automatic_var_30638_0, var_cas_hasCompilerArgument, automatic_var_30638_1 COMMA_SOURCE_FILE_AT_LINE (747)) ;
    }
    const GGS_bool cond_30713 = var_cas_hasCompilerArgument ;
    if (cond_30713.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_29880->mMethodName,  GGS_string ("instance method"),  var_cas_routineSignature,  operand_29880->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (754)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverExpression, operand_29880->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (769)), var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (767))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_31698,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31698 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_31698->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (789)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_32203 (operand_31698->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_32203 = NULL ;
      while (((operand_32203 = enumerator_32203.nextObject ()))) {
        macroValidPointer (operand_32203) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_32203->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (792)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_readerQualifier automatic_var_32550_0 ;
    const GGS_modifierMap  temp_32492 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) ;
    if (temp_32492.isBuilt ()) {
      temp_32492 (HERE)->method_searchKey (inLexique, operand_31698->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_32550_0 COMMA_SOURCE_FILE_AT_LINE (797)) ;
    }
    const GGS_bool cond_32625 = var_cas_hasCompilerArgument ;
    if (cond_32625.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableForRoutineInvocationForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_31698->mModifierName,  GGS_string ("modifier"),  var_cas_routineSignature,  operand_31698->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableForRoutineInvocationForGeneration,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (804)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_31698->mReceiverStructAttributes, operand_31698->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument, var_cas_temporaryInputVariableForRoutineInvocationForGeneration COMMA_SOURCE_FILE_AT_LINE (817))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_appendInstructionAST * operand_33630,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33630 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_33630->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33630->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (839)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_33630->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (849)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_34371 (operand_33630->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_34371 = NULL ;
      while (((operand_34371 = enumerator_34371.nextObject ()))) {
        macroValidPointer (operand_34371) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (851)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_34371->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (852)) ;
        }
      }
    }
    const GGS_bool cond_34798 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (855))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (855)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_34798.isBuiltAndTrue ()) {
      operand_33630->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (857)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (859)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (861)),  operand_33630->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (861)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_33630->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (863))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_addInstructionAST * operand_35253,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35253 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_35253->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (883)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_35751 (operand_35253->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_35751 = NULL ;
      while (((operand_35751 = enumerator_35751.nextObject ()))) {
        macroValidPointer (operand_35751) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_35751->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (886)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
    const GGS_bool cond_36338 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_36338.isBuiltAndTrue ()) {
      operand_35253->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (892)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (895)) ;
    }else if (cond_36338.isBuiltAndFalse ()) {
      const GGS_bool cond_36686 = (operand_35253->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_36686.isBuiltAndTrue ()) {
        operand_35253->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (898)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_35253->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (899)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (901)) ;
      }else if (cond_36686.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_36789 (operand_35253->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_36789 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_36817 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_36817 = NULL ;
          while (((operand_36789 = enumerator_36789.nextObject ()))
              && ((operand_36817 = enumerator_36817.nextObject ()))) {
            macroValidPointer (operand_36789) ;
            macroValidPointer (operand_36817) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36789->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_36789->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (905)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_36817->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (912)),  operand_36789->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (912)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_35253->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (916))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_incrementInstructionAST * operand_37550,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37550 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_37550->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (937)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_38063 (operand_37550->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_38063 = NULL ;
      while (((operand_38063 = enumerator_38063.nextObject ()))) {
        macroValidPointer (operand_38063) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (939)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_38063->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (940)) ;
        }
      }
    }
    const GGS_bool cond_38479 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (943))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (943)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_38479.isBuiltAndTrue ()) {
      operand_37550->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (945)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (947)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_37550->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (949))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_decrementInstructionAST * operand_38807,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38807 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_38807->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (968)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_39320 (operand_38807->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_39320 = NULL ;
      while (((operand_39320 = enumerator_39320.nextObject ()))) {
        macroValidPointer (operand_39320) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (970)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_39320->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (971)) ;
        }
      }
    }
    const GGS_bool cond_39736 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (974))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (974)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_39736.isBuiltAndTrue ()) {
      operand_38807->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (976)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, operand_38807->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (980))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_messageInstructionAST * operand_40062,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40062 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_40062->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_40062->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (998)) ;
      }
    }
    const GGS_bool cond_40842 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1006))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
    if (cond_40842.isBuiltAndTrue ()) {
      operand_40062->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (1010)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1012))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_logInstructionAST * operand_41125,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41125 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_41411 (operand_41125->mLogList, true) ;
      const GGS_logListAST::cElement * operand_41411 = NULL ;
      while (((operand_41411 = enumerator_41411.nextObject ()))) {
        macroValidPointer (operand_41411) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41411->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_41411->mLogExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1030)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_41411->mLogMessage, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1038))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_dropInstructionAST * operand_41992,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41992 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_42344 (operand_41992->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_42344 = NULL ;
      while (((operand_42344 = enumerator_42344.nextObject ()))) {
        macroValidPointer (operand_42344) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_42447_0 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_42344->mValue, automatic_var_42447_0, var_cas_variableCppName COMMA_SOURCE_FILE_AT_LINE (1058)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (1062))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_ifInstructionAST * operand_42814,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42814 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42814->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42814->m_if_expression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1087)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_42814->m_then_instructionList,  operand_42814->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_42814->m_else_instructionList,  operand_42814->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1103)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_42814->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1114)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, var_cas_if_expression, operand_42814->mEndOf_then_branch, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1116))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_foreachInstructionAST * operand_44530,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44530 != NULL) {
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) ;
    var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_45080 (operand_44530->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_45080 = NULL ;
      while (((operand_45080 = enumerator_45080.nextObject ()))) {
        macroValidPointer (operand_45080) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45080->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_45080->mEnumeratedExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_enumerationExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1142)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_45080->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1150))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)) ;
        const GGS_bool cond_45841 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_45841.isBuiltAndTrue ()) {
          operand_45080->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1155)) ;
        }else if (cond_45841.isBuiltAndFalse ()) {
          const GGS_bool cond_46370 = ((operand_45080->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_45080->mEndsWithEllipsis).operator_not ()) ;
          if (cond_46370.isBuiltAndTrue ()) {
            const GGS_enumerationDescriptorList  var_cas_currentTypedAttributeList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)) ;
            {
              GGS_enumerationDescriptorList::cEnumerator enumerator_46064 (var_cas_currentTypedAttributeList, true) ;
              const GGS_enumerationDescriptorList::cElement * operand_46064 = NULL ;
              while (((operand_46064 = enumerator_46064.nextObject ()))) {
                macroValidPointer (operand_46064) ;
                var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_45080->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1159))).operator_concat (operand_46064->mEnumerationName), operand_45080->mEndOfEnumerationExpression COMMA_SOURCE_FILE_AT_LINE (1159)), operand_46064->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".attribute_"))).operator_concat (operand_46064->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
              }
            }
          }else if (cond_46370.isBuiltAndFalse ()) {
            const GGS_bool cond_46812 = ((operand_45080->mEndsWithEllipsis).operator_not ()).operator_and ((operand_45080->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_46812.isBuiltAndTrue ()) {
              operand_45080->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_45080->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1170))) COMMA_SOURCE_FILE_AT_LINE (1172)) ;
            }else if (cond_46812.isBuiltAndFalse ()) {
              const GGS_bool cond_47256 = (operand_45080->mEndsWithEllipsis).operator_and ((operand_45080->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_47256.isBuiltAndTrue ()) {
                operand_45080->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_45080->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1178))) COMMA_SOURCE_FILE_AT_LINE (1180)) ;
              }else if (cond_47256.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_47283 (operand_45080->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_47283 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_47310 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_47310 = NULL ;
                  while (((operand_47283 = enumerator_47283.nextObject ()))
                      && ((operand_47310 = enumerator_47310.nextObject ()))) {
                    macroValidPointer (operand_47283) ;
                    macroValidPointer (operand_47310) ;
                    const GGS_bool cond_47887 = (operand_47283->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1182))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_47887.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_47283->mTypeName COMMA_SOURCE_FILE_AT_LINE (1183)) ;
                      const GGS_bool cond_47697 = (var_cas_foundType).operator_isNotEqual (operand_47310->mEnumeratedType) ;
                      if (cond_47697.isBuiltAndTrue ()) {
                        operand_47283->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_47310->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1186)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_47283->mConstantName, operand_47310->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".attribute_"))).operator_concat (operand_47310->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" ()")) COMMA_SOURCE_FILE_AT_LINE (1187)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_45080->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44530->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44530->mWhileExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_whileExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1196)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44530->mBeforeInstructionList,  operand_44530->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1207)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    GGS_localConstantList  var_cas_indexDeclaration = GGS_localConstantList ::constructor_emptyList () ;
    const GGS_bool cond_49135 = (operand_44530->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1221))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_49135.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_44530->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1222))) ;
      var_cas_indexDeclaration.addAssign_operation (var_cas_inPredefinedTypes.mUIntType, operand_44530->mIndexVariableName, GGS_bool (false), var_cas_indexCppName) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_indexDeclaration,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44530->mDoInstructionList,  operand_44530->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1232)) ;
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44530->mBetweenInstructionList,  operand_44530->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1245)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44530->mAfterInstructionList,  operand_44530->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1258)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_44530->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1270)) ;
    var_cas_ioVariableMap.modifier_endBranch (inLexique, operand_44530->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1272)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_44530->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1273)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1275))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_loopInstructionAST * operand_50936,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50936 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50936->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50936->mVariantExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_variantExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1298)) ;
      }
    }
    const GGS_bool cond_51760 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1306))).operator_isNotEqual (var_cas_inPredefinedTypes.mUIntType) ;
    if (cond_51760.isBuiltAndTrue ()) {
      operand_50936->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1308)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1308)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1308)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1309)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50936->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50936->mLoopExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_loopExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      }
    }
    const GGS_bool cond_52295 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1320))).operator_isNotEqual (var_cas_inPredefinedTypes.mBoolType) ;
    if (cond_52295.isBuiltAndTrue ()) {
      operand_50936->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1323)) ;
    }
    var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_50936->mFirstInstructions,  operand_50936->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1328)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_50936->mSecondInstructions,  operand_50936->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1341)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_50936->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1353)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1355))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@structuredCastInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structuredCastInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_structuredCastInstructionAST * operand_53606,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53606 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_castExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53606->mCastExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53606->mCastExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_castExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1375)) ;
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)) ;
    GGS_castInstructionBranchListForGeneration  var_cas_castBranchList = GGS_castInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_castInstructionBranchListAST::cEnumerator enumerator_54333 (operand_53606->mCastInstructionBranchList, true) ;
      const GGS_castInstructionBranchListAST::cElement * operand_54333 = NULL ;
      while (((operand_54333 = enumerator_54333.nextObject ()))) {
        macroValidPointer (operand_54333) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_54333->mTypeName COMMA_SOURCE_FILE_AT_LINE (1388)) ;
        GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
        GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1391))) ;
        GGS_uint _variant_54802 = var_cas_inSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1392)) ;
        GGS_bool _condition_54802 (_variant_54802.isBuilt (), true) ;
        while (_condition_54802.isBuiltAndTrue ()) {
          _condition_54802 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1393))).operator_not ()) ;
          if (_condition_54802.isBuiltAndTrue ()) {
            if (_variant_54802.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1396)) ;
              _condition_54802 = GGS_bool (false) ;
            }else{
              _variant_54802.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1394)) ;
              var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1395))) ;
            }
          }
        }
        const GGS_bool cond_54998 = (var_cas_found).operator_not () ;
        if (cond_54998.isBuiltAndTrue ()) {
          operand_54333->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_54333->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1401)) ;
        }
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        const GGS_bool cond_55349 = (operand_54333->mConstantVarName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55349.isBuiltAndTrue ()) {
          var_cas_localConstantList.addAssign_operation (var_cas_type, operand_54333->mConstantVarName, GGS_bool (false), (((GGS_string ("cast_")).operator_concat (operand_54333->mConstantVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)))).operator_concat (GGS_string ("_"))).operator_concat (operand_54333->mConstantVarName)) ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_54333->mInstructionList,  operand_54333->mEndOfInstructions,  var_cas_ioVariableMap,  var_cas_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1414)) ;
        var_cas_castBranchList.addAssign_operation (operand_54333->mUseKindOfClass, var_cas_type, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_53606->mElseInstructionList,  operand_53606->mEndOfCastInstruction,  var_cas_ioVariableMap,  var_cas_else_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1429)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_53606->mEndOfCastInstruction COMMA_SOURCE_FILE_AT_LINE (1441)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_structuredCastInstructionForGeneration ::constructor_new (inLexique, var_cas_castExpression, var_cas_castBranchList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1443))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_grammarInstructionAST * operand_56616,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56616 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_grammarLabelMap  var_cas_grammarLabelMap ;
    if (var_cas_inSemanticContext.mGrammarMap.isBuilt ()) {
      var_cas_inSemanticContext.mGrammarMap (HERE)->method_searchKey (inLexique, operand_56616->mGrammarComponentName, var_cas_grammarLabelMap COMMA_SOURCE_FILE_AT_LINE (1463)) ;
    }
    GGS_formalParameterSignature  var_cas_labelSignature ;
    if (var_cas_grammarLabelMap.isBuilt ()) {
      var_cas_grammarLabelMap (HERE)->method_searchKey (inLexique, operand_56616->mLabelName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (1469)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    GGS_temporaryInputVariableForRoutineInvocationForGeneration  var_cas_temporaryInputVariableList ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_56616->mLabelName,  ((GGS_string ("label of the ")).operator_concat (operand_56616->mGrammarComponentName)).operator_concat (GGS_string (" grammar")),  var_cas_labelSignature,  operand_56616->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration,  var_cas_temporaryInputVariableList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1476)) ;
    GGS_semanticExpressionForGeneration  var_cas_sourceExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_56616->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_56616->mSourceExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_sourceExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1490)) ;
      }
    }
    const GGS_bool cond_58367 = operand_56616->mSourceExpressionIsFile ;
    if (cond_58367.isBuiltAndTrue ()) {
      const GGS_bool cond_58354 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1499))).operator_isNotEqual (var_cas_inPredefinedTypes.mLStringType) ;
      if (cond_58354.isBuiltAndTrue ()) {
        operand_56616->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is a file reference and its type should be '@lstring', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1501)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1501)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      }
    }else if (cond_58367.isBuiltAndFalse ()) {
      const GGS_bool cond_58606 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1504))).operator_isNotEqual (var_cas_inPredefinedTypes.mStringType) ;
      if (cond_58606.isBuiltAndTrue ()) {
        operand_56616->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source string and its type should be '@string', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1506)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1506)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1508)) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionForGeneration ::constructor_new (inLexique, operand_56616->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1511)), operand_56616->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1512)), var_cas_sourceExpression, operand_56616->mSourceExpressionIsFile, var_cas_actualParameterListForGeneration, var_cas_temporaryInputVariableList COMMA_SOURCE_FILE_AT_LINE (1510))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readWriteAccessWithInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readWriteAccessWithInstructionAST * operand_59071,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59071 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_59071->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59071->mKeyExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_keyExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1533)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_receiverVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_59071->mReceiverName, var_cas_targetType, var_cas_receiverVariableCppName COMMA_SOURCE_FILE_AT_LINE (1543)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_59855 (operand_59071->mFieldList, true) ;
      const GGS_lstringlist::cElement * operand_59855 = NULL ;
      while (((operand_59855 = enumerator_59855.nextObject ()))) {
        macroValidPointer (operand_59855) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_59855->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1546)) ;
        }
      }
    }
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_targetType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_60181 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_59071->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551))) ;
    if (NULL != operand_60181) {
      var_cas_argumentTypeList = operand_60181->mInfo.mArgumentTypeList ;
    }else{
      const GGS_bool cond_60456 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_60456.isBuiltAndTrue ()) {
        operand_59071->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1556)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1559)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_60456.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_60510 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_60510 = NULL ;
          while (((operand_60510 = enumerator_60510.nextObject ()))) {
            macroValidPointer (operand_60510) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_60510->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_60578 (operand_60510->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_60578 = NULL ;
              while (((operand_60578 = enumerator_60578.nextObject ()))) {
                macroValidPointer (operand_60578) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_60578->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1564))) ;
              }
            }
          }
        }
        operand_59071->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_59071->mAccessName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1573)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_61444 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_61444.isBuiltAndTrue ()) {
      operand_59071->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_59071->mAccessName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1578)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1581)) ;
    }else if (cond_61444.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_61480 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_61480 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_61498 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_61498 = NULL ;
        while (((operand_61480 = enumerator_61480.nextObject ()))
            && ((operand_61498 = enumerator_61498.nextObject ()))) {
          macroValidPointer (operand_61480) ;
          macroValidPointer (operand_61498) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_61498->mType,  operand_61480->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)),  operand_59071->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)) COMMA_SOURCE_FILE_AT_LINE (1583)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1587)) ;
    GGS_localInitializedVariableList  var_cas_localInitializedVariableList = GGS_localInitializedVariableList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_61794 (var_cas_targetType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1590)), true) ;
      const GGS_typedAttributeList::cElement * operand_61794 = NULL ;
      while (((operand_61794 = enumerator_61794.nextObject ()))) {
        macroValidPointer (operand_61794) ;
        var_cas_localInitializedVariableList.addAssign_operation (operand_61794->mAttributeTypeIndex, GGS_lstring ::constructor_new (inLexique, (operand_59071->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1593))).operator_concat (operand_61794->mAttributeName), operand_59071->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)) COMMA_SOURCE_FILE_AT_LINE (1593)), (GGS_string ("with_rw_access_for_")).operator_concat (operand_61794->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  var_cas_localInitializedVariableList,  operand_59071->m_do_Instructions,  operand_59071->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1598)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_59071->m_else_Instructions,  operand_59071->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1611)) ;
    var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_59071->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1622)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readWriteWithInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_59071->mFieldList, operand_59071->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1627)), var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1624))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readAccessWithInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readAccessWithInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_readAccessWithInstructionAST * operand_63267,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63267 != NULL) {
    operand_63267->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @readAccessWithInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1647)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_switchInstructionAST * operand_63815,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63815 != NULL) {
    operand_63815->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @switchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1662)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_Compiler & inLexique,
                                const cPtr_matchInstructionAST * operand_64357,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64357 != NULL) {
    operand_64357->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled instruction @matchInstructionAST") COMMA_SOURCE_FILE_AT_LINE (1677)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__sendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__sendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__structuredCastInstructionAST__analyzeSemanticInstruction, gClassInfoFor__structuredCastInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readWriteAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

