//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'semanticInstructionsAnalysis.cpp'                   *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 14th, 2010, at 19h10'10"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticInstructionsAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction> gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction
findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.count ()) {
      result = gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (superClassPtr) ;
        gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@localConstantList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localConstantList::
elementOf_GGS_localConstantList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mNoWarningIfUnused (argument_2),
mCppName (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localConstantList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localConstantList * ptr = dynamic_cast <const elementOf_GGS_localConstantList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mNoWarningIfUnused.operator_isEqual (ptr->mNoWarningIfUnused).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localConstantList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNoWarningIfUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@localConstantList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localConstantList ("localConstantList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_bool& argument_2,
                    const GGS_string& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
operator_concat (const GGS_localConstantList & inOperand) const {
  GGS_localConstantList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
dotAssign_operation (const GGS_localConstantList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localConstantList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_bool p_2 = p->mNoWarningIfUnused ;
          GGS_string p_3 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_prependValue (C_CompilerEx & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_bool& argument_2,
                     const GGS_string& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mNoWarningIfUnused,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_emptyList (void) {
  GGS_localConstantList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList  GGS_localConstantList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2,
                                const GGS_string& argument_3) {
  GGS_localConstantList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
internalSubListWithRange (GGS_localConstantList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mNoWarningIfUnused, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListWithRange (C_CompilerEx & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::
reader_subListFromIndex (C_CompilerEx & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localConstantList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localConstantList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_first (C_CompilerEx & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_bool& _out_2,
              GGS_string& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
method_last (C_CompilerEx & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_bool& _out_2,
             GGS_string& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popFirst (C_CompilerEx & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_bool& _out_2,
                 GGS_string& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_popLast (C_CompilerEx & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_bool& _out_2,
                GGS_string& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mNoWarningIfUnused ;
    _out_3 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localConstantList::
reader_mTypeAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localConstantList::
reader_mNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_localConstantList::
reader_mNoWarningIfUnusedAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNoWarningIfUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localConstantList::
reader_mCppNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMTypeAtIndex (C_CompilerEx & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMNoWarningIfUnusedAtIndex (C_CompilerEx & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNoWarningIfUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localConstantList::
modifier_setMCppNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localConstantList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localConstantList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_localConstantList::cEnumerator::_mNoWarningIfUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNoWarningIfUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localConstantList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localConstantList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localConstantList * p = NULL ;
    macroMyNew (p, GGS_localConstantList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localConstantList GGS_localConstantList::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localConstantList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localConstantList * p = dynamic_cast <const GGS_localConstantList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localConstantList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localConstantList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localConstantList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@localInitializedVariableList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_localInitializedVariableList::
elementOf_GGS_localInitializedVariableList (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mType (argument_0),
mName (argument_1),
mCppName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_localInitializedVariableList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_localInitializedVariableList * ptr = dynamic_cast <const elementOf_GGS_localInitializedVariableList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mType.operator_isEqual (ptr->mType).boolValue ()
         && mName.operator_isEqual (ptr->mName).boolValue ()
         && mCppName.operator_isEqual (ptr->mCppName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_localInitializedVariableList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mType.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mCppName.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@localInitializedVariableList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_localInitializedVariableList ("localInitializedVariableList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalAppendValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalPrependValues (const GGS_unifiedTypeMapProxy & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_string& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
addAssign_operation (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
operator_concat (const GGS_localInitializedVariableList & inOperand) const {
  GGS_localInitializedVariableList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
dotAssign_operation (const GGS_localInitializedVariableList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_localInitializedVariableList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_unifiedTypeMapProxy  p_0 = p->mType ;
          GGS_lstring  p_1 = p->mName ;
          GGS_string p_2 = p->mCppName ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_prependValue (C_CompilerEx & /* inLexique */,
                     const GGS_unifiedTypeMapProxy & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_string& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mType,
                                ptr->mName,
                                ptr->mCppName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_emptyList (void) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList  GGS_localInitializedVariableList::
constructor_listWithValue (const GGS_unifiedTypeMapProxy & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_string& argument_2) {
  GGS_localInitializedVariableList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
internalSubListWithRange (GGS_localInitializedVariableList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mType, ptr->mName, ptr->mCppName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListWithRange (C_CompilerEx & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::
reader_subListFromIndex (C_CompilerEx & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_localInitializedVariableList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@localInitializedVariableList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_first (C_CompilerEx & inLexique,
              GGS_unifiedTypeMapProxy & _out_0,
              GGS_lstring & _out_1,
              GGS_string& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
method_last (C_CompilerEx & inLexique,
             GGS_unifiedTypeMapProxy & _out_0,
             GGS_lstring & _out_1,
             GGS_string& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popFirst (C_CompilerEx & inLexique,
                 GGS_unifiedTypeMapProxy & _out_0,
                 GGS_lstring & _out_1,
                 GGS_string& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_popLast (C_CompilerEx & inLexique,
                GGS_unifiedTypeMapProxy & _out_0,
                GGS_lstring & _out_1,
                GGS_string& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mType ;
    _out_1 = ptr->mName ;
    _out_2 = ptr->mCppName ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxy  GGS_localInitializedVariableList::
reader_mTypeAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxy  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mType ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_localInitializedVariableList::
reader_mNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_localInitializedVariableList::
reader_mCppNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mCppName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMTypeAtIndex (C_CompilerEx & inLexique,
                              const GGS_unifiedTypeMapProxy  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mType = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_localInitializedVariableList::
modifier_setMCppNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mCppName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_localInitializedVariableList::cEnumerator::_mType (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mType ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_localInitializedVariableList::cEnumerator::_mName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_localInitializedVariableList::cEnumerator::_mCppName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_localInitializedVariableList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_localInitializedVariableList * p = NULL ;
    macroMyNew (p, GGS_localInitializedVariableList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_localInitializedVariableList GGS_localInitializedVariableList::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_localInitializedVariableList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_localInitializedVariableList * p = dynamic_cast <const GGS_localInitializedVariableList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_localInitializedVariableList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_localInitializedVariableList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_localInitializedVariableList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "analyzeSemanticInstructionList"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSemanticInstructionList (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_localConstantList   var_cas_inLocalConstantList,
                                const GGS_localInitializedVariableList   var_cas_inLocalInitializedVariableList,
                                const GGS_semanticInstructionListAST   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSemanticInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
  var_cas_ioVariableMap.modifier_openBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  {
    GGS_localConstantList::cEnumerator enumerator_3256 (var_cas_inLocalConstantList, true) ;
    const GGS_localConstantList::cElement * operand_3256 = NULL ;
    while (((operand_3256 = enumerator_3256.nextObject ()))) {
      macroValidPointer (operand_3256) ;
      const GGS_bool cond_3383 = operand_3256->mNoWarningIfUnused ;
      if (cond_3383.isBuiltAndTrue ()) {
        var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_3256->mName, operand_3256->mType, operand_3256->mCppName, operand_3256->mCppName COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }else if (cond_3383.isBuiltAndFalse ()) {
        var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_3256->mName, operand_3256->mType, operand_3256->mCppName, operand_3256->mCppName COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
    }
  }
  {
    GGS_localInitializedVariableList::cEnumerator enumerator_3562 (var_cas_inLocalInitializedVariableList, true) ;
    const GGS_localInitializedVariableList::cElement * operand_3562 = NULL ;
    while (((operand_3562 = enumerator_3562.nextObject ()))) {
      macroValidPointer (operand_3562) ;
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_3562->mName, operand_3562->mType, operand_3562->mCppName, operand_3562->mCppName COMMA_SOURCE_FILE_AT_LINE (77)) ;
    }
  }
  {
    GGS_semanticInstructionListAST::cEnumerator enumerator_3727 (var_cas_inSemanticInstructionListAST, true) ;
    const GGS_semanticInstructionListAST::cElement * operand_3727 = NULL ;
    while (((operand_3727 = enumerator_3727.nextObject ()))) {
      macroValidPointer (operand_3727) ;
      { typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (operand_3727->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_3727->mInstruction (HERE), var_cas_inAnalysisContext, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap COMMA_SOURCE_FILE_AT_LINE (81)) ;
        }
      }
    }
  }
  var_cas_ioVariableMap.modifier_closeBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (88)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSemanticInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithConstructorCallAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithConstructorCallAST * operand_4154,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4154 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  automatic_var_4705_0 ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inAnalysisContext,  var_cas_ioVariableMap,  operand_4154->mTypeName,  operand_4154->mConstructorName,  operand_4154->mConstructorExpressions,  var_cas_returnedType,  automatic_var_4705_0,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (102)) ;
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_4154->mTypeName COMMA_SOURCE_FILE_AT_LINE (114)) ;
    const GGS_bool cond_5086 = (var_cas_targetType).operator_isNotEqual (var_cas_returnedType) ;
    if (cond_5086.isBuiltAndTrue ()) {
      operand_4154->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("this constructor returns an '@")).operator_concat (var_cas_returnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (117)))).operator_concat (GGS_string ("' object, you should use a constructor that return an '@"))).operator_concat (operand_4154->mTypeName)).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (119)) ;
    }
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_4154->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_5366 = operand_4154->mIsConstant ;
    if (cond_5366.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_4154->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (123)) ;
    }else if (cond_5366.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_4154->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (125)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithConstructorCallForGeneration ::constructor_new (inLexique, operand_4154->mInstructionLocation, var_cas_targetType, operand_4154->mIsConstant, var_cas_targetVariableCppName, operand_4154->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (128))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableOrConstantDeclarationWithAssignmentAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableOrConstantDeclarationWithAssignmentAST * operand_6013,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6013 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_6013->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_6013->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (148)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_6013->mTypeName COMMA_SOURCE_FILE_AT_LINE (154)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_6013->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    const GGS_bool cond_6751 = operand_6013->mIsConstant ;
    if (cond_6751.isBuiltAndTrue ()) {
      var_cas_ioVariableMap.modifier_insertLocalConstant (inLexique, operand_6013->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (157)) ;
    }else if (cond_6751.isBuiltAndFalse ()) {
      var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_6013->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (159)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (162)),  operand_6013->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (162)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableOrConstantDeclarationWithSourceExpressionForGeneration ::constructor_new (inLexique, var_cas_targetType, operand_6013->mIsConstant, var_cas_targetVariableCppName, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (164))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_localVariableDeclarationAST * operand_7390,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7390 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_targetType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_7390->mTypeName COMMA_SOURCE_FILE_AT_LINE (180)) ;
    const GGS_string var_cas_targetVariableCppName = (GGS_string ("var_")).operator_concat (operand_7390->mVariableName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_ioVariableMap.modifier_insertUndefinedLocalVariable (inLexique, operand_7390->mVariableName, var_cas_targetType, var_cas_targetVariableCppName, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (182)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_localVariableDeclarationForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (184))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@assignmentInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_assignmentInstructionAST * operand_8233,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8233 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_8233->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_8233->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (199)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    const GGS_bool cond_8822 = (operand_8233->mStructAttributeList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_8822.isBuiltAndTrue ()) {
      GGS_string automatic_var_8813_0 ;
      var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_8233->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_8813_0 COMMA_SOURCE_FILE_AT_LINE (208)) ;
    }else if (cond_8822.isBuiltAndFalse ()) {
      GGS_string automatic_var_8928_0 ;
      var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_8233->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_8928_0 COMMA_SOURCE_FILE_AT_LINE (210)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_8963 (operand_8233->mStructAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_8963 = NULL ;
        while (((operand_8963 = enumerator_8963.nextObject ()))) {
          macroValidPointer (operand_8963) ;
          const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
          if (var_cas_attributeMap.isBuilt ()) {
            var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_8963->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (213)) ;
          }
        }
      }
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (217)),  operand_8233->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (217)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_assignmentInstructionForGeneration ::constructor_new (inLexique, var_cas_targetType, var_cas_targetVariableCppName, operand_8233->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (219))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "analyzeErrorOrWarningInstruction"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeErrorOrWarningInstruction (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_semanticExpressionAST   var_cas_inLocationExpression,
                                const GGS_semanticExpressionAST   var_cas_inMessageExpression,
                                const GGS_location   var_cas_inErrorLocation,
                                const GGS_string  var_cas_inErrorOrWarningString,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outLocationExpression,
                                GGS_semanticExpressionForGeneration  & var_cas_outMessageExpression,
                                GGS_bool & var_cas_outUseLocationReader
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeErrorOrWarningInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inLocationExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inLocationExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_outLocationExpression COMMA_SOURCE_FILE_AT_LINE (241)) ;
    }
  }
  var_cas_outUseLocationReader = (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (247))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
  const GGS_bool cond_11727 = var_cas_outUseLocationReader ;
  if (cond_11727.isBuiltAndTrue ()) {
    const GGS_readerMap  var_cas_readerMap = var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (249)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ;
    elementOf_GGS_readerMap * operand_10438 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
    if (NULL != operand_10438) {
      const GGS_bool cond_10873 = (operand_10438->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
      if (cond_10873.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (253)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
          " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (256)) ;
      }else if (cond_10873.isBuiltAndFalse ()) {
        const GGS_bool cond_11358 = (operand_10438->mInfo.mReturnedType).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
        if (cond_11358.isBuiltAndTrue ()) {
          var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (258)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (258)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_10438->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (259)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (262)) ;
        }
      }
    }else{
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" location expression type is '@"))).operator_concat (var_cas_outLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (265)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
        "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (268)) ;
    }
  }
  { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (var_cas_inMessageExpression.galgasObjectRunTimeInfo ()) ;
    if (method != NULL) {
      method (inLexique, var_cas_inMessageExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_outMessageExpression COMMA_SOURCE_FILE_AT_LINE (271)) ;
    }
  }
  const GGS_bool cond_12214 = (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (277))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
  if (cond_12214.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the ")).operator_concat (var_cas_inErrorOrWarningString)).operator_concat (GGS_string (" message expression type is '@"))).operator_concat (var_cas_outMessageExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (279)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (279)))).operator_concat (GGS_string ("'; it should be of the '@string' type")) COMMA_SOURCE_FILE_AT_LINE (281)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeErrorOrWarningInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@errorInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_errorInstructionAST * operand_12377,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12377 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inAnalysisContext,  operand_12377->mLocationExpression,  operand_12377->mMessageExpression,  operand_12377->mInstructionLocation,  GGS_string ("error"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (295)) ;
    GGS_stringlist  var_cas_builtVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_13018 (operand_12377->mBuiltVariableList, true) ;
      const GGS_lstringlist::cElement * operand_13018 = NULL ;
      while (((operand_13018 = enumerator_13018.nextObject ()))) {
        macroValidPointer (operand_13018) ;
        GGS_string var_cas_varCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_13115_0 ;
        GGS_string automatic_var_13115_1 ;
        var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_13018->mValue, automatic_var_13115_0, var_cas_varCppName, automatic_var_13115_1 COMMA_SOURCE_FILE_AT_LINE (310)) ;
        var_cas_builtVariableCppNameList.addAssign_operation (var_cas_varCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_errorInstructionForGeneration ::constructor_new (inLexique, operand_12377->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression, var_cas_builtVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (314))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@warningInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_warningInstructionAST * operand_13569,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13569 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_locationExpression ;
    GGS_semanticExpressionForGeneration  var_cas_messageExpression ;
    GGS_bool var_cas_useLocationReader ;
    ::routine_analyzeErrorOrWarningInstruction (inLexique,  var_cas_inAnalysisContext,  operand_13569->mLocationExpression,  operand_13569->mMessageExpression,  operand_13569->mInstructionLocation,  GGS_string ("warning"),  var_cas_ioVariableMap,  var_cas_locationExpression,  var_cas_messageExpression,  var_cas_useLocationReader COMMA_SOURCE_FILE_AT_LINE (334)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_warningInstructionForGeneration ::constructor_new (inLexique, operand_13569->mInstructionLocation, var_cas_locationExpression, var_cas_useLocationReader, var_cas_messageExpression COMMA_SOURCE_FILE_AT_LINE (346))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@actualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument> gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument (typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument
findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.count ()) {
      result = gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (superClassPtr) ;
        gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@outputActualParameterAST.checkAgainstFormalArgument'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_outputActualParameterAST * operand_14899,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14899 != NULL) {
    const GGS_bool cond_15643 = ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (375)))).operator_and ((var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (376)))) ;
    if (cond_15643.isBuiltAndTrue ()) {
      operand_14899->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (379)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (381)) ;
    }else if (cond_15643.isBuiltAndFalse ()) {
      GGS_semanticExpressionForGeneration  var_cas_expression ;
      { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_14899->mOutputActualParameterExpression.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_14899->mOutputActualParameterExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (383)) ;
        }
      }
      ::routine_checkAssignmentTypes (inLexique,  var_cas_inFormalArgumentType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (389)),  operand_14899->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (389)) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputActualParameterForGeneration ::constructor_new (inLexique, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (391))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@outputInputActualParameterAST.checkAgainstFormalArgument'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__outputInputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_outputInputActualParameterAST * operand_16314,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16314 != NULL) {
    const GGS_bool cond_16969 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (407))) ;
    if (cond_16969.isBuiltAndTrue ()) {
      operand_16314->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (409)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (410)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (412)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_variableCppName ;
    GGS_string automatic_var_17189_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_16314->mOutputInputActualParameterName, var_cas_parameterType, var_cas_variableCppName, automatic_var_17189_0 COMMA_SOURCE_FILE_AT_LINE (416)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_17222 (operand_16314->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_17222 = NULL ;
      while (((operand_17222 = enumerator_17222.nextObject ()))) {
        macroValidPointer (operand_17222) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_parameterType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_17222->mValue, var_cas_parameterType COMMA_SOURCE_FILE_AT_LINE (419)) ;
        }
      }
    }
    const GGS_bool cond_17655 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_17655.isBuiltAndTrue ()) {
      operand_16314->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (424)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (425)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (427)) ;
    }
    const GGS_bool cond_17913 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_16314->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (429))) ;
    if (cond_17913.isBuiltAndTrue ()) {
      operand_16314->mOutputInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_16314->mOutputInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (434))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_outputInputActualParameterForGeneration ::constructor_new (inLexique, var_cas_variableCppName, operand_16314->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (436))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@inputActualParameterAST.checkAgainstFormalArgument'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_inputActualParameterAST * operand_18322,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & var_cas_ioExclusiveVariableSet
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18322 != NULL) {
    const GGS_bool cond_18975 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (452))) ;
    if (cond_18975.isBuiltAndTrue ()) {
      operand_18322->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (454)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (455)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (457)) ;
    }
    GGS_unifiedTypeMapProxy  var_cas_parameterType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_19162_0 ;
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_18322->mInputActualParameterName, var_cas_parameterType, var_cas_targetVariableCppName, automatic_var_19162_0 COMMA_SOURCE_FILE_AT_LINE (460)) ;
    const GGS_bool cond_19446 = (var_cas_inFormalArgumentType).operator_isNotEqual (var_cas_parameterType) ;
    if (cond_19446.isBuiltAndTrue ()) {
      operand_18322->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the parameter object has the '@")).operator_concat (var_cas_parameterType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (464)))).operator_concat (GGS_string ("', it should be the same as the corresponding formal argument: '@"))).operator_concat (var_cas_inFormalArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (465)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (467)) ;
    }
    const GGS_bool cond_19692 = var_cas_ioExclusiveVariableSet.reader_hasKey (operand_18322->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (469))) ;
    if (cond_19692.isBuiltAndTrue ()) {
      operand_18322->mInputActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this variable is already named as input or output/input effective parameter") COMMA_SOURCE_FILE_AT_LINE (473)) ;
    }
    var_cas_ioExclusiveVariableSet.addAssign_operation (operand_18322->mInputActualParameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (474))) ;
    var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputActualParameterForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName COMMA_SOURCE_FILE_AT_LINE (476))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@inputJokerActualParameterAST.checkAgainstFormalArgument' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__inputJokerActualParameterAST__checkAgainstFormalArgument (C_CompilerEx & inLexique,
                                const cPtr_inputJokerActualParameterAST * operand_20074,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                const GGS_unifiedTypeMapProxy   var_cas_inFormalArgumentType,
                                const GGS_formalArgumentPassingModeAST  var_cas_inFormalArgumentPassingMode,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_actualParameterListForGeneration  & var_cas_ioActualParameterListForGeneration,
                                GGS_stringset  & /* var_cas_ioExclusiveVariableSet */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20074 != NULL) {
    const GGS_bool cond_20742 = (var_cas_inFormalArgumentPassingMode).operator_isNotEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (491))) ;
    if (cond_20742.isBuiltAndTrue ()) {
      operand_20074->mQualifierLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the corresponding formal argument has the '")).operator_concat (var_cas_inFormalArgumentPassingMode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (493)))).operator_concat (GGS_string ("' passing mode: this parameter should be passed with '"))).operator_concat (var_cas_inFormalArgumentPassingMode.reader_correspondingEffectiveParameterString (inLexique COMMA_SOURCE_FILE_AT_LINE (494)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (496)) ;
    }else if (cond_20742.isBuiltAndFalse ()) {
      const GGS_string var_cas_cppVarName = (((GGS_string ("joker_")).operator_concat (operand_20074->mQualifierLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (497)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497)))).operator_concat (GGS_string ("_"))).operator_concat (operand_20074->mJokerIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
      var_cas_ioActualParameterListForGeneration.addAssign_operation (GGS_inputJokerParameterForGeneration ::constructor_new (inLexique, var_cas_cppVarName, var_cas_inFormalArgumentType COMMA_SOURCE_FILE_AT_LINE (499))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "analyzeRoutineArguments"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeRoutineArguments (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                const GGS_lstring   var_cas_inRoutineName,
                                const GGS_string  var_cas_inInvokedEntityName,
                                const GGS_formalParameterSignature   var_cas_inRoutineSignature,
                                const GGS_actualParameterListAST   var_cas_inActualParameterList,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_actualParameterListForGeneration  & var_cas_outActualParameterListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeRoutineArguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_21826 = (var_cas_inRoutineSignature.reader_length ()).operator_isNotEqual (var_cas_inActualParameterList.reader_length ()) ;
  if (cond_21826.isBuiltAndTrue ()) {
    var_cas_inRoutineName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the ")).operator_concat (var_cas_inInvokedEntityName)).operator_concat (GGS_string (" defines "))).operator_concat (var_cas_inRoutineSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (519)))).operator_concat (GGS_string (" formal argument(s), but this invocation names "))).operator_concat (var_cas_inActualParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (521)))).operator_concat (GGS_string (" argument(s)")) COMMA_SOURCE_FILE_AT_LINE (524)) ;
    var_cas_outActualParameterListForGeneration.drop () ;
  }else if (cond_21826.isBuiltAndFalse ()) {
    var_cas_outActualParameterListForGeneration = GGS_actualParameterListForGeneration ::constructor_emptyList () ;
    GGS_stringset  var_cas_exclusiveVariableSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_formalParameterSignature::cEnumerator enumerator_21997 (var_cas_inRoutineSignature, true) ;
      const GGS_formalParameterSignature::cElement * operand_21997 = NULL ;
      GGS_actualParameterListAST::cEnumerator enumerator_22020 (var_cas_inActualParameterList, true) ;
      const GGS_actualParameterListAST::cElement * operand_22020 = NULL ;
      while (((operand_21997 = enumerator_21997.nextObject ()))
          && ((operand_22020 = enumerator_22020.nextObject ()))) {
        macroValidPointer (operand_21997) ;
        macroValidPointer (operand_22020) ;
        { typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument method = findCategoryMethod__actualParameterAST__checkAgainstFormalArgument (operand_22020->mActualParameter.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_22020->mActualParameter (HERE), var_cas_inAnalysisContext, operand_21997->mFormalArgumentType, operand_21997->mFormalArgumentPassingMode, var_cas_ioVariableMap, var_cas_outActualParameterListForGeneration, var_cas_exclusiveVariableSet COMMA_SOURCE_FILE_AT_LINE (528)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeRoutineArguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@routineCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_routineCallInstructionAST * operand_22470,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22470 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature ;
    if (var_cas_inAnalysisContext.mSemanticContext.mRoutineMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mRoutineMap (HERE)->method_searchKey (inLexique, operand_22470->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (549)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_22470->mRoutineName,  ((GGS_string ("'")).operator_concat (operand_22470->mRoutineName)).operator_concat (GGS_string ("' routine header")),  var_cas_routineSignature,  operand_22470->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (552)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_routineCallInstructionForGeneration ::constructor_new (inLexique, operand_22470->mRoutineName, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (562))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@typeMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_typeMethodCallInstructionAST * operand_23444,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23444 != NULL) {
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_23444->mTypeName COMMA_SOURCE_FILE_AT_LINE (576)) ;
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    const GGS_classMethodMap  temp_23883 = var_cas_type.reader_mClassMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (580)) ;
    if (temp_23883.isBuilt ()) {
      temp_23883 (HERE)->method_searchKey (inLexique, operand_23444->mMethodName, var_cas_routineSignature, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (580)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_23444->mMethodName,  ((GGS_string ("'")).operator_concat (operand_23444->mMethodName)).operator_concat (GGS_string ("' class method header")),  var_cas_routineSignature,  operand_23444->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (583)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_typeMethodInstructionForGeneration ::constructor_new (inLexique, operand_23444->mTypeName, operand_23444->mMethodName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (593))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@methodCallInstructionAST.analyzeSemanticInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_methodCallInstructionAST * operand_24633,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24633 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_24633->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_24633->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (610)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_25250_0 ;
    GGS_methodQualifier automatic_var_25250_1 ;
    const GGS_instanceMethodMap  temp_25179 = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (619)).reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ;
    if (temp_25179.isBuilt ()) {
      temp_25179 (HERE)->method_searchKey (inLexique, operand_24633->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_25250_0, var_cas_hasCompilerArgument, automatic_var_25250_1 COMMA_SOURCE_FILE_AT_LINE (619)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_24633->mMethodName,  ((GGS_string ("'")).operator_concat (operand_24633->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_24633->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (622)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_methodCallInstructionForGeneration ::constructor_new (inLexique, operand_24633->mInstructionLocation, var_cas_receiverExpression, operand_24633->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (635)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (632))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisMethodCallInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_thisMethodCallInstructionAST * operand_26014,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26014 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    GGS_string var_cas_currentObjectCppPointer ;
    const GGS_bool cond_26444 = var_cas_inAnalysisContext.mSelfTypeProxy.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (652)) ;
    if (cond_26444.isBuiltAndTrue ()) {
      operand_26014->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (654)) ;
      var_cas_currentObjectCppPointer.drop () ;
      var_cas_thisTypeProxy.drop () ;
    }else if (cond_26444.isBuiltAndFalse ()) {
      var_cas_currentObjectCppPointer = var_cas_inAnalysisContext.mSelfObjectCppPointer ;
      var_cas_thisTypeProxy = var_cas_inAnalysisContext.mSelfTypeProxy ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_26834_0 ;
    GGS_methodQualifier automatic_var_26834_1 ;
    const GGS_instanceMethodMap  temp_26763 = var_cas_thisTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (662)) ;
    if (temp_26763.isBuilt ()) {
      temp_26763 (HERE)->method_searchKey (inLexique, operand_26014->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_26834_0, var_cas_hasCompilerArgument, automatic_var_26834_1 COMMA_SOURCE_FILE_AT_LINE (662)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_26014->mMethodName,  ((GGS_string ("'")).operator_concat (operand_26014->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_26014->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (665)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisMethodCallInstructionForGeneration ::constructor_new (inLexique, var_cas_currentObjectCppPointer, operand_26014->mInstructionLocation, operand_26014->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (678)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (675))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of function "checkMethodImplementationInSuperClasses"    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkMethodImplementationInSuperClasses (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkMethodImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_27733 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (692)) ;
  if (cond_27733.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_27733.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_bool automatic_var_27853_0 ;
    GGS_formalParameterSignature  automatic_var_27853_1 ;
    GGS_location  automatic_var_27853_2 ;
    GGS_bool automatic_var_27853_3 ;
    const GGS_instanceMethodMap  temp_27815 = var_cas_inSuperClass.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (696)) ;
    if (temp_27815.isBuilt ()) {
      temp_27815 (HERE)->method_searchKey (inLexique, var_cas_inMethodName, automatic_var_27853_0, automatic_var_27853_1, automatic_var_27853_2, automatic_var_27853_3, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (696)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkMethodImplementationInSuperClasses (inLexique, var_cas_inMethodName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkMethodImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkMethodImplementationInSuperClasses (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkMethodImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkMethodImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkMethodImplementationInSuperClasses ("checkMethodImplementationInSuperClasses",
                              functionForGenericCall_checkMethodImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkMethodImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superMethodCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superMethodCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_superMethodCallInstructionAST * operand_28360,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28360 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_string var_cas_currentObjectCppPointer ;
    const GGS_bool cond_28793 = var_cas_inAnalysisContext.mSelfTypeProxy.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) ;
    if (cond_28793.isBuiltAndTrue ()) {
      operand_28360->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (720)) ;
      var_cas_currentObjectCppPointer.drop () ;
      var_cas_superTypeProxy.drop () ;
    }else if (cond_28793.isBuiltAndFalse ()) {
      const GGS_bool cond_28962 = (var_cas_inAnalysisContext.mSelfObjectCppPointer).operator_isNotEqual (GGS_string ("this")) ;
      if (cond_28962.isBuiltAndTrue ()) {
        operand_28360->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used in a category") COMMA_SOURCE_FILE_AT_LINE (722)) ;
        var_cas_currentObjectCppPointer.drop () ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_28962.isBuiltAndFalse ()) {
        var_cas_currentObjectCppPointer = var_cas_inAnalysisContext.mSelfObjectCppPointer ;
        var_cas_superTypeProxy = var_cas_inAnalysisContext.mSelfTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) ;
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_bool var_cas_isCategory ;
    GGS_location  automatic_var_29367_0 ;
    GGS_methodQualifier automatic_var_29367_1 ;
    const GGS_instanceMethodMap  temp_29296 = var_cas_superTypeProxy.reader_mInstanceMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (730)) ;
    if (temp_29296.isBuilt ()) {
      temp_29296 (HERE)->method_searchKey (inLexique, operand_28360->mMethodName, var_cas_isCategory, var_cas_routineSignature, automatic_var_29367_0, var_cas_hasCompilerArgument, automatic_var_29367_1 COMMA_SOURCE_FILE_AT_LINE (730)) ;
    }
    const GGS_string var_cas_superClassThatImplementsMethod = function_checkMethodImplementationInSuperClasses (inLexique, operand_28360->mMethodName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (732)) ;
    const GGS_bool cond_29740 = (var_cas_superClassThatImplementsMethod).operator_isEqual (GGS_string ("")) ;
    if (cond_29740.isBuiltAndTrue ()) {
      operand_28360->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_28360->mMethodName)).operator_concat (GGS_string ("' method is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (735)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_28360->mMethodName,  ((GGS_string ("'")).operator_concat (operand_28360->mMethodName)).operator_concat (GGS_string ("' instance method header")),  var_cas_routineSignature,  operand_28360->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (738)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superMethodCallInstructionForGeneration ::constructor_new (inLexique, operand_28360->mInstructionLocation, var_cas_superClassThatImplementsMethod, operand_28360->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (751)), var_cas_isCategory, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (748))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@modifierCallInstructionAST.analyzeSemanticInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_modifierCallInstructionAST * operand_30522,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30522 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_receiverType ;
    GGS_string var_cas_receiverVariableCppName ;
    GGS_string automatic_var_30870_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_30522->mReceiverName, var_cas_receiverType, var_cas_receiverVariableCppName, automatic_var_30870_0 COMMA_SOURCE_FILE_AT_LINE (768)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_30908 (operand_30522->mReceiverStructAttributes, true) ;
      const GGS_lstringlist::cElement * operand_30908 = NULL ;
      while (((operand_30908 = enumerator_30908.nextObject ()))) {
        macroValidPointer (operand_30908) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_receiverType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (770)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_30908->mValue, var_cas_receiverType COMMA_SOURCE_FILE_AT_LINE (771)) ;
        }
      }
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_31255_0 ;
    const GGS_modifierMap  temp_31197 = var_cas_receiverType.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
    if (temp_31197.isBuilt ()) {
      temp_31197 (HERE)->method_searchKey (inLexique, operand_30522->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_31255_0 COMMA_SOURCE_FILE_AT_LINE (776)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_30522->mModifierName,  ((GGS_string ("'")).operator_concat (operand_30522->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_30522->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (779)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_modifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_receiverVariableCppName, operand_30522->mReceiverStructAttributes, var_cas_receiverType, operand_30522->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (789))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@thisModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_thisModifierCallInstructionAST * operand_32025,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32025 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    const GGS_bool cond_32412 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (808))) ;
    if (cond_32412.isBuiltAndTrue ()) {
      GGS_string automatic_var_32403_0 ;
      GGS_string automatic_var_32403_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (809)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (809)), var_cas_thisTypeProxy, automatic_var_32403_0, automatic_var_32403_1 COMMA_SOURCE_FILE_AT_LINE (809)) ;
    }else if (cond_32412.isBuiltAndFalse ()) {
      operand_32025->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (812)) ;
      var_cas_thisTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_32736_0 ;
    const GGS_modifierMap  temp_32678 = var_cas_thisTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) ;
    if (temp_32678.isBuilt ()) {
      temp_32678 (HERE)->method_searchKey (inLexique, operand_32025->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_32736_0 COMMA_SOURCE_FILE_AT_LINE (816)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_32025->mModifierName,  ((GGS_string ("'")).operator_concat (operand_32025->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_32025->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (819)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_thisModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_thisTypeProxy, operand_32025->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (829))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of function "checkModifierImplementationInSuperClasses"   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkModifierImplementationInSuperClasses (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inModifierName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkModifierImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_33579 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (844)) ;
  if (cond_33579.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_33579.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_formalParameterSignature  automatic_var_33689_0 ;
    GGS_bool automatic_var_33689_1 ;
    const GGS_modifierMap  temp_33655 = var_cas_inSuperClass.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (848)) ;
    if (temp_33655.isBuilt ()) {
      temp_33655 (HERE)->method_searchKey (inLexique, var_cas_inModifierName, automatic_var_33689_0, automatic_var_33689_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (848)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkModifierImplementationInSuperClasses (inLexique, var_cas_inModifierName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (855)) COMMA_SOURCE_FILE_AT_LINE (855)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkModifierImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkModifierImplementationInSuperClasses (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkModifierImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkModifierImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkModifierImplementationInSuperClasses ("checkModifierImplementationInSuperClasses",
                              functionForGenericCall_checkModifierImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkModifierImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superModifierCallInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superModifierCallInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_superModifierCallInstructionAST * operand_34202,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34202 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_34865 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (869))) ;
    if (cond_34865.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
      GGS_string automatic_var_34623_0 ;
      GGS_string automatic_var_34623_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (871)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (871)), var_cas_thisTypeProxy, automatic_var_34623_0, automatic_var_34623_1 COMMA_SOURCE_FILE_AT_LINE (871)) ;
      const GGS_bool cond_34792 = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (872)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) ;
      if (cond_34792.isBuiltAndTrue ()) {
        operand_34202->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used, current class has no super class") COMMA_SOURCE_FILE_AT_LINE (874)) ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_34792.isBuiltAndFalse ()) {
        var_cas_superTypeProxy = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (875)) ;
      }
    }else if (cond_34865.isBuiltAndFalse ()) {
      operand_34202->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (879)) ;
      var_cas_superTypeProxy.drop () ;
    }
    GGS_formalParameterSignature  var_cas_routineSignature ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_methodQualifier automatic_var_35192_0 ;
    const GGS_modifierMap  temp_35134 = var_cas_superTypeProxy.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (883)) ;
    if (temp_35134.isBuilt ()) {
      temp_35134 (HERE)->method_searchKey (inLexique, operand_34202->mModifierName, var_cas_routineSignature, var_cas_hasCompilerArgument, automatic_var_35192_0 COMMA_SOURCE_FILE_AT_LINE (883)) ;
    }
    const GGS_string var_cas_superClassThatImplementsModifier = function_checkModifierImplementationInSuperClasses (inLexique, operand_34202->mModifierName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (885)) ;
    const GGS_bool cond_35581 = (var_cas_superClassThatImplementsModifier).operator_isEqual (GGS_string ("")) ;
    if (cond_35581.isBuiltAndTrue ()) {
      operand_34202->mModifierName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_34202->mModifierName)).operator_concat (GGS_string ("' modifier is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (888)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_34202->mModifierName,  ((GGS_string ("'")).operator_concat (operand_34202->mModifierName)).operator_concat (GGS_string ("' modifier header")),  var_cas_routineSignature,  operand_34202->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (891)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_superModifierCallInstructionForGeneration ::constructor_new (inLexique, var_cas_superTypeProxy, var_cas_superClassThatImplementsModifier, operand_34202->mModifierName, var_cas_actualParameterListForGeneration, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (901))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@appendInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_appendInstructionAST * operand_36329,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36329 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36329->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36329->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (919)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_36866_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_36329->mTargetVariableName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_36866_0 COMMA_SOURCE_FILE_AT_LINE (927)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_36899 (operand_36329->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_36899 = NULL ;
      while (((operand_36899 = enumerator_36899.nextObject ()))) {
        macroValidPointer (operand_36899) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (929)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_36899->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (930)) ;
        }
      }
    }
    const GGS_bool cond_37326 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (933))).operator_and (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (933)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_37326.isBuiltAndTrue ()) {
      operand_36329->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (935)))).operator_concat (GGS_string ("' type, but this type does not support the '.=' operator")) COMMA_SOURCE_FILE_AT_LINE (937)) ;
    }
    ::routine_checkAssignmentTypes (inLexique,  var_cas_targetType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (939)),  operand_36329->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (939)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_appendInstructionForGeneration ::constructor_new (inLexique, operand_36329->mInstructionLocation, var_cas_targetType, var_cas_targetVariableCppName, operand_36329->mStructAttributeList, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (941))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@addInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_addInstructionAST * operand_37823,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37823 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_38168_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_37823->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_38168_0 COMMA_SOURCE_FILE_AT_LINE (960)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_38201 (operand_37823->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_38201 = NULL ;
      while (((operand_38201 = enumerator_38201.nextObject ()))) {
        macroValidPointer (operand_38201) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (962)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_38201->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (963)) ;
        }
      }
    }
    const GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorArguments = var_cas_targetType.reader_mAddAssignOperatorArguments (inLexique COMMA_SOURCE_FILE_AT_LINE (966)) ;
    const GGS_bool cond_38788 = (var_cas_addAssignOperatorArguments.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_38788.isBuiltAndTrue ()) {
      operand_37823->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (969)))).operator_concat (GGS_string ("' type, but this type does not support the '+=' operator")) COMMA_SOURCE_FILE_AT_LINE (972)) ;
    }else if (cond_38788.isBuiltAndFalse ()) {
      const GGS_bool cond_39136 = (operand_37823->mExpressions.reader_length ()).operator_isNotEqual (var_cas_addAssignOperatorArguments.reader_length ()) ;
      if (cond_39136.isBuiltAndTrue ()) {
        operand_37823->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("calling the '+=' operator on an '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (974)))).operator_concat (GGS_string ("' object requires "))).operator_concat (var_cas_addAssignOperatorArguments.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (975)))).operator_concat (GGS_string (" parameter(s), while this invocation has "))).operator_concat (operand_37823->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (976)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (978)) ;
      }else if (cond_39136.isBuiltAndFalse ()) {
        GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
        {
          GGS_semanticExpressionListAST::cEnumerator enumerator_39239 (operand_37823->mExpressions, true) ;
          const GGS_semanticExpressionListAST::cElement * operand_39239 = NULL ;
          GGS_unifiedTypeMapProxyList::cEnumerator enumerator_39267 (var_cas_addAssignOperatorArguments, true) ;
          const GGS_unifiedTypeMapProxyList::cElement * operand_39267 = NULL ;
          while (((operand_39239 = enumerator_39239.nextObject ()))
              && ((operand_39267 = enumerator_39267.nextObject ()))) {
            macroValidPointer (operand_39239) ;
            macroValidPointer (operand_39267) ;
            GGS_semanticExpressionForGeneration  var_cas_exp ;
            { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39239->mExpression.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_39239->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (982)) ;
              }
            }
            ::routine_checkAssignmentTypes (inLexique,  operand_39267->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (987)),  operand_39239->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (987)) ;
            var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_addAssignInstructionForGeneration ::constructor_new (inLexique, var_cas_targetVariableCppName, var_cas_targetType, operand_37823->mInstructionLocation, operand_37823->mStructAttributeList, var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (991))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@incrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_incrementInstructionAST * operand_39986,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39986 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_40333_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_39986->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_40333_0 COMMA_SOURCE_FILE_AT_LINE (1011)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_40366 (operand_39986->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_40366 = NULL ;
      while (((operand_40366 = enumerator_40366.nextObject ()))) {
        macroValidPointer (operand_40366) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_40366->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1014)) ;
        }
      }
    }
    const GGS_bool cond_40782 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1017))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_40782.isBuiltAndTrue ()) {
      operand_39986->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)))).operator_concat (GGS_string ("' type, but this type does not support the '++' operator")) COMMA_SOURCE_FILE_AT_LINE (1021)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_incrementInstructionForGeneration ::constructor_new (inLexique, operand_39986->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_39986->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1023))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@decrementInstructionAST.analyzeSemanticInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_decrementInstructionAST * operand_41152,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41152 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_targetVariableCppName ;
    GGS_string automatic_var_41499_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_41152->mReceiverName, var_cas_targetType, var_cas_targetVariableCppName, automatic_var_41499_0 COMMA_SOURCE_FILE_AT_LINE (1041)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_41532 (operand_41152->mStructAttributeList, true) ;
      const GGS_lstringlist::cElement * operand_41532 = NULL ;
      while (((operand_41532 = enumerator_41532.nextObject ()))) {
        macroValidPointer (operand_41532) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_41532->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1044)) ;
        }
      }
    }
    const GGS_bool cond_41948 = ((var_cas_targetType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1047))).operator_and (function_incDecOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_41948.isBuiltAndTrue ()) {
      operand_41152->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the target object has the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1049)))).operator_concat (GGS_string ("' type, but this type does not support the '--' operator")) COMMA_SOURCE_FILE_AT_LINE (1051)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_decrementInstructionForGeneration ::constructor_new (inLexique, operand_41152->mInstructionLocation, var_cas_targetVariableCppName, var_cas_targetType, operand_41152->mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (1053))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@messageInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_messageInstructionAST * operand_42316,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42316 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42316->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42316->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1070)) ;
      }
    }
    const GGS_bool cond_42940 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1076))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
    if (cond_42940.isBuiltAndTrue ()) {
      operand_42316->mInstructionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the expression has the '@")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1078)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1078)))).operator_concat (GGS_string ("' type, but the 'message' instruction requires an '@string' expression")) COMMA_SOURCE_FILE_AT_LINE (1080)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_messageInstructionForGeneration ::constructor_new (inLexique, var_cas_expression, operand_42316->mInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1082))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@logInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_logInstructionAST * operand_43249,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43249 != NULL) {
    {
      GGS_logListAST::cEnumerator enumerator_43413 (operand_43249->mLogList, true) ;
      const GGS_logListAST::cElement * operand_43413 = NULL ;
      while (((operand_43413 = enumerator_43413.nextObject ()))) {
        macroValidPointer (operand_43413) ;
        GGS_semanticExpressionForGeneration  var_cas_expression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43413->mLogExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_43413->mLogExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1098)) ;
          }
        }
        var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_logInstructionForGeneration ::constructor_new (inLexique, operand_43413->mLogMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)), var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1104))) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@dropInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__dropInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_dropInstructionAST * operand_43947,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43947 != NULL) {
    GGS_stringlist  var_cas_cppNameDropList = GGS_stringlist ::constructor_emptyList () ;
    {
      GGS_lstringlist::cEnumerator enumerator_44163 (operand_43947->mDropList, true) ;
      const GGS_lstringlist::cElement * operand_44163 = NULL ;
      while (((operand_44163 = enumerator_44163.nextObject ()))) {
        macroValidPointer (operand_44163) ;
        GGS_string var_cas_variableCppName ;
        GGS_unifiedTypeMapProxy  automatic_var_44269_0 ;
        GGS_string automatic_var_44269_1 ;
        var_cas_ioVariableMap.modifier_searchForDropAccess (inLexique, operand_44163->mValue, automatic_var_44269_0, var_cas_variableCppName, automatic_var_44269_1 COMMA_SOURCE_FILE_AT_LINE (1121)) ;
        var_cas_cppNameDropList.addAssign_operation (var_cas_variableCppName) ;
      }
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_cppNameDropList, GGS_string ("drop instruction") COMMA_SOURCE_FILE_AT_LINE (1125))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@ifInstructionAST.analyzeSemanticInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_ifInstructionAST * operand_44636,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44636 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44636->m_if_expression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44636->m_if_expression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) ;
    GGS_semanticInstructionListForGeneration  var_cas_then_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44636->m_then_instructionList,  operand_44636->mEndOf_then_branch,  var_cas_ioVariableMap,  var_cas_then_instructionList COMMA_SOURCE_FILE_AT_LINE (1148)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_44636->m_else_instructionList,  operand_44636->mEndOf_if_instruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1159)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_44636->mEndOf_if_instruction COMMA_SOURCE_FILE_AT_LINE (1168)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_ifInstructionForGeneration ::constructor_new (inLexique, operand_44636->mEndOf_then_branch, var_cas_if_expression, var_cas_then_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1170))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@foreachInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_foreachInstructionAST * operand_46075,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46075 != NULL) {
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1186)) ;
    var_cas_ioVariableMap.modifier_openBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ;
    GGS_foreachInstructionEnumeratedObjectListForGeneration  var_cas_enumerationList = GGS_foreachInstructionEnumeratedObjectListForGeneration ::constructor_emptyList () ;
    {
      GGS_foreachInstructionEnumeratedObjectListAST::cEnumerator enumerator_46501 (operand_46075->mEnumeratedObjectList, true) ;
      const GGS_foreachInstructionEnumeratedObjectListAST::cElement * operand_46501 = NULL ;
      while (((operand_46501 = enumerator_46501.nextObject ()))) {
        macroValidPointer (operand_46501) ;
        GGS_semanticExpressionForGeneration  var_cas_enumerationExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46501->mEnumeratedExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_46501->mEnumeratedExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_enumerationExpression COMMA_SOURCE_FILE_AT_LINE (1193)) ;
          }
        }
        const GGS_string var_cas_enumeratorCppName = (GGS_string ("enumerator_")).operator_concat (operand_46501->mEndOfEnumerationExpression.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1199)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1199))) ;
        const GGS_enumerationDescriptorList  var_cas_enumerationDescriptorList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1200)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1200)) ;
        const GGS_bool cond_47206 = (var_cas_enumerationDescriptorList.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_47206.isBuiltAndTrue ()) {
          operand_46501->mEndOfEnumerationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("an '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1202)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1202)))).operator_concat (GGS_string ("' object cannot be enumerated")) COMMA_SOURCE_FILE_AT_LINE (1204)) ;
        }else if (cond_47206.isBuiltAndFalse ()) {
          const GGS_bool cond_47837 = ((operand_46501->mElementList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_46501->mEndsWithEllipsis).operator_not ()) ;
          if (cond_47837.isBuiltAndTrue ()) {
            const GGS_enumerationDescriptorList  var_cas_currentTypedAttributeList = var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)).reader_mEnumerationDescriptor (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)) ;
            {
              GGS_enumerationDescriptorList::cEnumerator enumerator_47429 (var_cas_currentTypedAttributeList, true) ;
              const GGS_enumerationDescriptorList::cElement * operand_47429 = NULL ;
              while (((operand_47429 = enumerator_47429.nextObject ()))) {
                macroValidPointer (operand_47429) ;
                var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_46501->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1208))).operator_concat (operand_47429->mEnumerationName), operand_46501->mEndOfEnumerationExpression COMMA_SOURCE_FILE_AT_LINE (1208)), operand_47429->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_47429->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")), (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_47429->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
              }
            }
          }else if (cond_47837.isBuiltAndFalse ()) {
            const GGS_bool cond_48279 = ((operand_46501->mEndsWithEllipsis).operator_not ()).operator_and ((operand_46501->mElementList.reader_length ()).operator_isNotEqual (var_cas_enumerationDescriptorList.reader_length ())) ;
            if (cond_48279.isBuiltAndTrue ()) {
              operand_46501->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1217)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" for enumeration: this list provides "))).operator_concat (operand_46501->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1220))) COMMA_SOURCE_FILE_AT_LINE (1222)) ;
            }else if (cond_48279.isBuiltAndFalse ()) {
              const GGS_bool cond_48723 = (operand_46501->mEndsWithEllipsis).operator_and ((operand_46501->mElementList.reader_length ()).operator_strictSup (var_cas_enumerationDescriptorList.reader_length ())) ;
              if (cond_48723.isBuiltAndTrue ()) {
                operand_46501->mEndOfElementList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_enumerationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)))).operator_concat (GGS_string ("' type requires "))).operator_concat (var_cas_enumerationDescriptorList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)))).operator_concat (GGS_string (" argument"))).operator_concat ((((var_cas_enumerationDescriptorList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (" or less for enumeration: this list provides "))).operator_concat (operand_46501->mElementList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1228))) COMMA_SOURCE_FILE_AT_LINE (1230)) ;
              }else if (cond_48723.isBuiltAndFalse ()) {
                {
                  GGS_foreachInstructionEnumeratedObjectElementListAST::cEnumerator enumerator_48750 (operand_46501->mElementList, true) ;
                  const GGS_foreachInstructionEnumeratedObjectElementListAST::cElement * operand_48750 = NULL ;
                  GGS_enumerationDescriptorList::cEnumerator enumerator_48777 (var_cas_enumerationDescriptorList, true) ;
                  const GGS_enumerationDescriptorList::cElement * operand_48777 = NULL ;
                  while (((operand_48750 = enumerator_48750.nextObject ()))
                      && ((operand_48777 = enumerator_48777.nextObject ()))) {
                    macroValidPointer (operand_48750) ;
                    macroValidPointer (operand_48777) ;
                    const GGS_bool cond_49522 = (operand_48750->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1232))).operator_isNotEqual (GGS_string ("")) ;
                    if (cond_49522.isBuiltAndTrue ()) {
                      const GGS_unifiedTypeMapProxy  var_cas_foundType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_48750->mTypeName COMMA_SOURCE_FILE_AT_LINE (1233)) ;
                      const GGS_bool cond_49182 = (var_cas_foundType).operator_isNotEqual (operand_48777->mEnumeratedType) ;
                      if (cond_49182.isBuiltAndTrue ()) {
                        operand_48750->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect '@")).operator_concat (var_cas_foundType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)))).operator_concat (GGS_string ("' type: '@"))).operator_concat (operand_48777->mEnumeratedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)))).operator_concat (GGS_string ("' type required here")) COMMA_SOURCE_FILE_AT_LINE (1236)) ;
                      }
                      var_cas_ioVariableMap.modifier_insertUsedLocalConstant (inLexique, operand_48750->mConstantName, operand_48777->mEnumeratedType, (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_48777->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")), (((var_cas_enumeratorCppName).operator_concat (GGS_string (".current_"))).operator_concat (operand_48777->mEnumerationName.reader_identifierRepresentation ())).operator_concat (GGS_string (" (HERE)")) COMMA_SOURCE_FILE_AT_LINE (1237)) ;
                    }
                  }
                }
              }
            }
          }
        }
        var_cas_enumerationList.addAssign_operation (operand_46501->mIsAscending, var_cas_enumerationExpression, var_cas_enumeratorCppName) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_whileExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46075->mWhileExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46075->mWhileExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_whileExpression COMMA_SOURCE_FILE_AT_LINE (1251)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    GGS_semanticInstructionListForGeneration  var_cas_before_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46075->mBeforeInstructionList,  operand_46075->mEndOf_before_branch,  var_cas_ioVariableMap,  var_cas_before_instructionList COMMA_SOURCE_FILE_AT_LINE (1260)) ;
    GGS_string var_cas_indexCppName = GGS_string ("") ;
    GGS_localConstantList  var_cas_indexDeclaration = GGS_localConstantList ::constructor_emptyList () ;
    const GGS_bool cond_50683 = (operand_46075->mIndexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1272))).operator_isNotEqual (GGS_string ("")) ;
    if (cond_50683.isBuiltAndTrue ()) {
      var_cas_indexCppName = (GGS_string ("index_")).operator_concat (operand_46075->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273))) ;
      var_cas_indexDeclaration.addAssign_operation (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, operand_46075->mIndexVariableName, GGS_bool (false), var_cas_indexCppName) ;
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_indexDeclaration,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46075->mDoInstructionList,  operand_46075->mEndOf_do_branch,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1283)) ;
    GGS_semanticInstructionListForGeneration  var_cas_between_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46075->mBetweenInstructionList,  operand_46075->mEndOf_between_branch,  var_cas_ioVariableMap,  var_cas_between_instructionList COMMA_SOURCE_FILE_AT_LINE (1294)) ;
    GGS_semanticInstructionListForGeneration  var_cas_after_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_46075->mAfterInstructionList,  operand_46075->mEndOf_after_branch,  var_cas_ioVariableMap,  var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1305)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_46075->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1315)) ;
    var_cas_ioVariableMap.modifier_closeBranch (inLexique, operand_46075->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1317)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_46075->mEndOf_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (1318)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_foreachInstructionForGeneration ::constructor_new (inLexique, operand_46075->mInstructionLocation, var_cas_enumerationList, var_cas_indexCppName, var_cas_whileExpression, var_cas_before_instructionList, var_cas_between_instructionList, var_cas_do_instructionList, var_cas_after_instructionList COMMA_SOURCE_FILE_AT_LINE (1320))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@loopInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_loopInstructionAST * operand_52360,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52360 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_variantExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52360->mVariantExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52360->mVariantExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_variantExpression COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      }
    }
    const GGS_bool cond_53046 = (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1347))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType) ;
    if (cond_53046.isBuiltAndTrue ()) {
      operand_52360->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type should be '@")).operator_concat (var_cas_inAnalysisContext.mPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_variantExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1350)) ;
    }
    GGS_semanticExpressionForGeneration  var_cas_loopExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52360->mLoopExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52360->mLoopExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_loopExpression COMMA_SOURCE_FILE_AT_LINE (1353)) ;
      }
    }
    const GGS_bool cond_53565 = (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1359))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mBoolType) ;
    if (cond_53565.isBuiltAndTrue ()) {
      operand_52360->mEndOfLoopExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the loop expression type should be '@")).operator_concat (var_cas_inAnalysisContext.mPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)))).operator_concat (GGS_string ("', but it has '@"))).operator_concat (var_cas_loopExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (1362)) ;
    }
    var_cas_ioVariableMap.modifier_openOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
    GGS_semanticInstructionListForGeneration  var_cas_first_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_52360->mFirstInstructions,  operand_52360->mEndOfFirstInstructions,  var_cas_ioVariableMap,  var_cas_first_instructionList COMMA_SOURCE_FILE_AT_LINE (1367)) ;
    GGS_semanticInstructionListForGeneration  var_cas_second_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_52360->mSecondInstructions,  operand_52360->mEndOfSecondInstructions,  var_cas_ioVariableMap,  var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1378)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_52360->mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1388)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_loopInstructionForGeneration ::constructor_new (inLexique, operand_52360->mInstructionLocation, var_cas_variantExpression, var_cas_first_instructionList, var_cas_loopExpression, var_cas_second_instructionList COMMA_SOURCE_FILE_AT_LINE (1390))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@structuredCastInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structuredCastInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_structuredCastInstructionAST * operand_54799,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54799 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_castExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54799->mCastExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54799->mCastExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_castExpression COMMA_SOURCE_FILE_AT_LINE (1408)) ;
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) ;
    GGS_castInstructionBranchListForGeneration  var_cas_castBranchList = GGS_castInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_castInstructionBranchListAST::cEnumerator enumerator_55351 (operand_54799->mCastInstructionBranchList, true) ;
      const GGS_castInstructionBranchListAST::cElement * operand_55351 = NULL ;
      while (((operand_55351 = enumerator_55351.nextObject ()))) {
        macroValidPointer (operand_55351) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_55351->mTypeName COMMA_SOURCE_FILE_AT_LINE (1419)) ;
        GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
        GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))) ;
        GGS_uint _variant_55832 = var_cas_inAnalysisContext.mSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1423)) ;
        GGS_bool _condition_55832 (_variant_55832.isBuilt (), true) ;
        while (_condition_55832.isBuiltAndTrue ()) {
          _condition_55832 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1424)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1424))).operator_not ()) ;
          if (_condition_55832.isBuiltAndTrue ()) {
            if (_variant_55832.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1427)) ;
              _condition_55832 = GGS_bool (false) ;
            }else{
              _variant_55832.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)) ;
              var_cas_found = (var_cas_t).operator_isEqual (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1426))) ;
            }
          }
        }
        const GGS_bool cond_56028 = (var_cas_found).operator_not () ;
        if (cond_56028.isBuiltAndTrue ()) {
          operand_55351->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_55351->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_castExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1432)) ;
        }
        GGS_string var_cas_localConstantName ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        const GGS_bool cond_56480 = (operand_55351->mConstantVarName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_56480.isBuiltAndTrue ()) {
          var_cas_localConstantName = (((GGS_string ("cast_")).operator_concat (operand_55351->mConstantVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)))).operator_concat (GGS_string ("_"))).operator_concat (operand_55351->mConstantVarName) ;
          var_cas_localConstantList.addAssign_operation (var_cas_type, operand_55351->mConstantVarName, operand_55351->mConstantVarNameIsUnused, var_cas_localConstantName) ;
        }else if (cond_56480.isBuiltAndFalse ()) {
          var_cas_localConstantName = GGS_string ("") ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_55351->mInstructionList,  operand_55351->mEndOfInstructions,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1449)) ;
        var_cas_castBranchList.addAssign_operation (operand_55351->mUseKindOfClass, var_cas_type, var_cas_localConstantName, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_54799->mElseInstructionList,  operand_54799->mEndOfCastInstruction,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1462)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_54799->mEndOfCastInstruction COMMA_SOURCE_FILE_AT_LINE (1472)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_structuredCastInstructionForGeneration ::constructor_new (inLexique, var_cas_castExpression, var_cas_castBranchList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1474))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@grammarInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_grammarInstructionAST * operand_57714,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57714 != NULL) {
    GGS_grammarLabelMap  var_cas_grammarLabelMap ;
    if (var_cas_inAnalysisContext.mSemanticContext.mGrammarMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mGrammarMap (HERE)->method_searchKey (inLexique, operand_57714->mGrammarComponentName, var_cas_grammarLabelMap COMMA_SOURCE_FILE_AT_LINE (1490)) ;
    }
    GGS_formalParameterSignature  var_cas_labelSignature ;
    if (var_cas_grammarLabelMap.isBuilt ()) {
      var_cas_grammarLabelMap (HERE)->method_searchKey (inLexique, operand_57714->mLabelName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (1496)) ;
    }
    GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
    ::routine_analyzeRoutineArguments (inLexique,  var_cas_inAnalysisContext,  operand_57714->mLabelName,  ((GGS_string ("label of the ")).operator_concat (operand_57714->mGrammarComponentName)).operator_concat (GGS_string (" grammar")),  var_cas_labelSignature,  operand_57714->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1502)) ;
    GGS_semanticExpressionForGeneration  var_cas_sourceExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57714->mSourceExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57714->mSourceExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (1513)) ;
      }
    }
    const GGS_bool cond_59124 = operand_57714->mSourceExpressionIsFile ;
    if (cond_59124.isBuiltAndTrue ()) {
      const GGS_bool cond_59111 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1520))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLStringType) ;
      if (cond_59111.isBuiltAndTrue ()) {
        operand_57714->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source file path and its type should be '@lstring', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1524)) ;
      }
    }else if (cond_59124.isBuiltAndFalse ()) {
      const GGS_bool cond_59381 = (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1525))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mStringType) ;
      if (cond_59381.isBuiltAndTrue ()) {
        operand_57714->mEndOfSourceExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is the source string and its type should be '@string', but it is '@")).operator_concat (var_cas_sourceExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1529)) ;
      }
    }
    const GGS_bool cond_59709 = operand_57714->mSourceExpressionIsFile ;
    if (cond_59709.isBuiltAndTrue ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceFileForGeneration ::constructor_new (inLexique, operand_57714->mInstructionLocation, operand_57714->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1534)), operand_57714->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1535)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1532))) ;
    }else if (cond_59709.isBuiltAndFalse ()) {
      var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_grammarInstructionWithSourceExpressionForGeneration ::constructor_new (inLexique, operand_57714->mInstructionLocation, operand_57714->mGrammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1542)), operand_57714->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1543)), var_cas_sourceExpression, var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (1540))) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readWriteAccessWithInstructionAST.analyzeSemanticInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_readWriteAccessWithInstructionAST * operand_60153,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60153 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60153->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60153->mKeyExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1559)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_60153->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1565)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1565))) ;
    GGS_unifiedTypeMapProxy  var_cas_targetType ;
    GGS_string var_cas_receiverVariableCppName ;
    GGS_string automatic_var_60838_0 ;
    var_cas_ioVariableMap.modifier_searchForReadWriteAccess (inLexique, operand_60153->mReceiverName, var_cas_targetType, var_cas_receiverVariableCppName, automatic_var_60838_0 COMMA_SOURCE_FILE_AT_LINE (1569)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_60861 (operand_60153->mFieldList, true) ;
      const GGS_lstringlist::cElement * operand_60861 = NULL ;
      while (((operand_60861 = enumerator_60861.nextObject ()))) {
        macroValidPointer (operand_60861) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_targetType.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_60861->mValue, var_cas_targetType COMMA_SOURCE_FILE_AT_LINE (1572)) ;
        }
      }
    }
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_targetType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1575)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_61187 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_60153->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1577))) ;
    if (NULL != operand_61187) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_61187->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_61500 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_61500.isBuiltAndTrue ()) {
        operand_60153->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1585)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_61500.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_61554 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_61554 = NULL ;
          while (((operand_61554 = enumerator_61554.nextObject ()))) {
            macroValidPointer (operand_61554) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_61554->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_61554->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1588))) ;
          }
        }
        operand_60153->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_60153->mAccessName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1596)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_62421 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_62421.isBuiltAndTrue ()) {
      operand_60153->mAccessName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_60153->mAccessName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_targetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1601)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1602)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1604)) ;
    }else if (cond_62421.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_62457 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_62457 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_62475 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_62475 = NULL ;
        while (((operand_62457 = enumerator_62457.nextObject ()))
            && ((operand_62475 = enumerator_62475.nextObject ()))) {
          macroValidPointer (operand_62457) ;
          macroValidPointer (operand_62475) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_62475->mType,  operand_62457->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1606)),  operand_60153->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1606)) COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1610)) ;
    GGS_localInitializedVariableList  var_cas_localInitializedVariableList = GGS_localInitializedVariableList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_62770 (var_cas_targetType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)), true) ;
      const GGS_typedAttributeList::cElement * operand_62770 = NULL ;
      while (((operand_62770 = enumerator_62770.nextObject ()))) {
        macroValidPointer (operand_62770) ;
        var_cas_localInitializedVariableList.addAssign_operation (operand_62770->mAttributeTypeProxy, GGS_lstring ::constructor_new (inLexique, (operand_60153->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1616))).operator_concat (operand_62770->mAttributeName), operand_60153->mAccessName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1616)) COMMA_SOURCE_FILE_AT_LINE (1616)), ((var_cas_objectArrayCppName).operator_concat (GGS_string ("->mAttribute_"))).operator_concat (operand_62770->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  var_cas_localInitializedVariableList,  operand_60153->m_do_Instructions,  operand_60153->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1621)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_60153->m_else_Instructions,  operand_60153->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1632)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_60153->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1641)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readWriteWithInstructionForGeneration ::constructor_new (inLexique, operand_60153->mInstructionLocation, var_cas_receiverVariableCppName, var_cas_targetType, operand_60153->mFieldList, operand_60153->mAccessName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1648)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1643))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@readAccessWithInstructionAST.analyzeSemanticInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readAccessWithInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_readAccessWithInstructionAST * operand_64222,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64222 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_64222->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_64222->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (1665)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1670)) ;
    GGS_semanticExpressionForGeneration  var_cas_keyExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_64222->mKeyExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_64222->mKeyExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_keyExpression COMMA_SOURCE_FILE_AT_LINE (1673)) ;
      }
    }
    const GGS_string var_cas_objectArrayCppName = (GGS_string ("objectArray_")).operator_concat (operand_64222->mInstructionLocation.reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (1679)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1679))) ;
    const GGS_withAccessorMap  var_cas_withAccessorMap = var_cas_receiverType.reader_mWithAccessorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1681)) ;
    GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
    elementOf_GGS_withAccessorMap * operand_65162 = (elementOf_GGS_withAccessorMap *) var_cas_withAccessorMap.searchForReadWithInstruction (operand_64222->mSearchMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1683))) ;
    if (NULL != operand_65162) {
      var_cas_argumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_listWithValue (operand_65162->mInfo.mArgumentType) ;
    }else{
      const GGS_bool cond_65489 = (var_cas_withAccessorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_65489.isBuiltAndTrue ()) {
        operand_64222->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1688)))).operator_concat (GGS_string ("' type cannot be used in a 'with' instruction")) COMMA_SOURCE_FILE_AT_LINE (1691)) ;
        var_cas_argumentTypeList.drop () ;
      }else if (cond_65489.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_withAccessorMap::cEnumerator enumerator_65543 (var_cas_withAccessorMap, true) ;
          const GGS_withAccessorMap::cElement * operand_65543 = NULL ;
          while (((operand_65543 = enumerator_65543.nextObject ()))) {
            macroValidPointer (operand_65543) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_65543->mKey) ;
            var_cas_s.appendCString (" \?@") ;
            var_cas_s.dotAssign_operation (operand_65543->mInfo.mArgumentType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1694))) ;
          }
        }
        operand_64222->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1697)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_64222->mSearchMethodName)).operator_concat (GGS_string ("' accessor for the 'with' instruction; available "))).operator_concat ((((var_cas_withAccessorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("accessors are")) : (GGS_string ("accessor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1702)) ;
        var_cas_argumentTypeList.drop () ;
      }
    }
    const GGS_semanticExpressionListForGeneration  var_cas_effectiveExpressionList = GGS_semanticExpressionListForGeneration ::constructor_listWithValue (var_cas_keyExpression) ;
    const GGS_bool cond_66438 = (var_cas_effectiveExpressionList.reader_length ()).operator_isNotEqual (var_cas_argumentTypeList.reader_length ()) ;
    if (cond_66438.isBuiltAndTrue ()) {
      operand_64222->mSearchMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_64222->mSearchMethodName)).operator_concat (GGS_string ("' accessor of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_argumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_effectiveExpressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1710)) ;
    }else if (cond_66438.isBuiltAndFalse ()) {
      {
        GGS_semanticExpressionListForGeneration::cEnumerator enumerator_66474 (var_cas_effectiveExpressionList, true) ;
        const GGS_semanticExpressionListForGeneration::cElement * operand_66474 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_66492 (var_cas_argumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_66492 = NULL ;
        while (((operand_66474 = enumerator_66474.nextObject ()))
            && ((operand_66492 = enumerator_66492.nextObject ()))) {
          macroValidPointer (operand_66474) ;
          macroValidPointer (operand_66492) ;
          ::routine_checkAssignmentTypes (inLexique,  operand_66492->mType,  operand_66474->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)),  operand_64222->mSearchMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)) COMMA_SOURCE_FILE_AT_LINE (1712)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) ;
    GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_66771 (var_cas_receiverType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1719)), true) ;
      const GGS_typedAttributeList::cElement * operand_66771 = NULL ;
      while (((operand_66771 = enumerator_66771.nextObject ()))) {
        macroValidPointer (operand_66771) ;
        var_cas_localConstantList.addAssign_operation (operand_66771->mAttributeTypeProxy, GGS_lstring ::constructor_new (inLexique, (operand_64222->mPrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1722))).operator_concat (operand_66771->mAttributeName), operand_64222->mSearchMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1722)) COMMA_SOURCE_FILE_AT_LINE (1722)), GGS_bool (true), ((var_cas_objectArrayCppName).operator_concat (GGS_string ("->mAttribute_"))).operator_concat (operand_66771->mAttributeName.ggs_string ().reader_identifierRepresentation ())) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_do_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_64222->mDoBranchInstructions,  operand_64222->mEndOf_do_instructions,  var_cas_ioVariableMap,  var_cas_do_instructionList COMMA_SOURCE_FILE_AT_LINE (1728)) ;
    GGS_semanticInstructionListForGeneration  var_cas_else_instructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_64222->mElseBranchInstructions,  operand_64222->mEndOf_else_instructions,  var_cas_ioVariableMap,  var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1739)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_64222->mEndOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (1748)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_readOnlyWithInstructionForGeneration ::constructor_new (inLexique, operand_64222->mInstructionLocation, var_cas_receiverExpression, operand_64222->mSearchMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1753)), var_cas_objectArrayCppName, var_cas_keyExpression, var_cas_do_instructionList, var_cas_else_instructionList COMMA_SOURCE_FILE_AT_LINE (1750))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@switchInstructionAST.analyzeSemanticInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_switchInstructionAST * operand_68224,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_68224 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_switchExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68224->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68224->mSwitchExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_switchExpression COMMA_SOURCE_FILE_AT_LINE (1770)) ;
      }
    }
    const GGS_bool cond_68907 = (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1776))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1776))) ;
    if (cond_68907.isBuiltAndTrue ()) {
      operand_68224->mEndOfSwitchExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the switch expression type should be an instance of an enumeration type (the '@")).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)))).operator_concat (GGS_string ("' type is not an enumeration type)")) COMMA_SOURCE_FILE_AT_LINE (1779)) ;
    }
    const GGS_stringset  var_cas_enumConstantStringSet = var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1781)).reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1781)) ;
    GGS_stringset  var_cas_constantsNamedInSwitchInstruction = GGS_stringset ::constructor_emptySet () ;
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1784)) ;
    GGS_switchBranchesForGeneration  var_cas_switchBranchesForGeneration = GGS_switchBranchesForGeneration ::constructor_emptyList () ;
    {
      GGS_switchBranchesAST::cEnumerator enumerator_69255 (operand_68224->mBranches, true) ;
      const GGS_switchBranchesAST::cElement * operand_69255 = NULL ;
      while (((operand_69255 = enumerator_69255.nextObject ()))) {
        macroValidPointer (operand_69255) ;
        {
          GGS_lstringlist::cEnumerator enumerator_69290 (operand_69255->mSwitchConstantList, true) ;
          const GGS_lstringlist::cElement * operand_69290 = NULL ;
          while (((operand_69290 = enumerator_69290.nextObject ()))) {
            macroValidPointer (operand_69290) ;
            const GGS_bool cond_69645 = var_cas_enumConstantStringSet.reader_hasKey (operand_69290->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1788))) ;
            if (cond_69645.isBuiltAndTrue ()) {
              const GGS_bool cond_69565 = var_cas_constantsNamedInSwitchInstruction.reader_hasKey (operand_69290->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1789))) ;
              if (cond_69565.isBuiltAndTrue ()) {
                operand_69290->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_69290->mValue)).operator_concat (GGS_string ("' constant is already named in this switch instruction")) COMMA_SOURCE_FILE_AT_LINE (1793)) ;
              }
              var_cas_constantsNamedInSwitchInstruction.addAssign_operation (operand_69290->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1794))) ;
            }else if (cond_69645.isBuiltAndFalse ()) {
              operand_69290->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("'")).operator_concat (operand_69290->mValue)).operator_concat (GGS_string ("' is not a constant of '@"))).operator_concat (var_cas_switchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1799)) ;
            }
          }
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_69255->mInstructions,  operand_69255->mEndOfBranch,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1802)) ;
        var_cas_switchBranchesForGeneration.addAssign_operation (operand_69255->mSwitchConstantList, var_cas_instructionList) ;
      }
    }
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_68224->mEndOf_switch_instruction COMMA_SOURCE_FILE_AT_LINE (1813)) ;
    const GGS_stringset  var_cas_forgottenConstants = var_cas_enumConstantStringSet.substract_operation (inLexique, var_cas_constantsNamedInSwitchInstruction COMMA_SOURCE_FILE_AT_LINE (1815)) ;
    const GGS_bool cond_70700 = (var_cas_forgottenConstants.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_70700.isBuiltAndTrue ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_stringset::cEnumerator enumerator_70506 (var_cas_forgottenConstants, true) ;
        while (enumerator_70506.hasCurrentObject ()) {
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (enumerator_70506._key (HERE)) ;
          enumerator_70506.next () ;
        }
      }
      operand_68224->mEndOf_switch_instruction.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("the switch instruction should name all enumeration constants; missing constants are:")).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (1824)) ;
    }
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_switchInstructionForGeneration ::constructor_new (inLexique, var_cas_switchExpression, var_cas_switchBranchesForGeneration COMMA_SOURCE_FILE_AT_LINE (1826))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@matchInstructionAST.analyzeSemanticInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstructionAST__analyzeSemanticInstruction (C_CompilerEx & inLexique,
                                const cPtr_matchInstructionAST * operand_71023,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_71023 != NULL) {
    GGS_semanticExpressionListForGeneration  var_cas_expressionList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_71269 (operand_71023->mMatchedExpressionList, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_71269 = NULL ;
      while (((operand_71269 = enumerator_71269.nextObject ()))) {
        macroValidPointer (operand_71269) ;
        GGS_semanticExpressionForGeneration  var_cas_matchedExpression ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_71269->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_71269->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_matchedExpression COMMA_SOURCE_FILE_AT_LINE (1843)) ;
          }
        }
        var_cas_expressionList.addAssign_operation (var_cas_matchedExpression) ;
        const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_matchedExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1850)) ;
        const GGS_bool cond_71941 = ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1851))).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1851)))).operator_and ((var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1851))).operator_isNotEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1851)))) ;
        if (cond_71941.isBuiltAndTrue ()) {
          operand_71269->mEndOfExpressionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this expression is an instance of '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1853)))).operator_concat (GGS_string ("' type, but this type is neither an enumeration, neither a class")) COMMA_SOURCE_FILE_AT_LINE (1855)) ;
        }
      }
    }
    var_cas_ioVariableMap.modifier_openOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1858)) ;
    GGS_matchInstructionBranchListForGeneration  var_cas_matchInstructionBranchList = GGS_matchInstructionBranchListForGeneration ::constructor_emptyList () ;
    {
      GGS_matchInstructionBranchListAST::cEnumerator enumerator_72155 (operand_71023->mMatchInstructionBranchList, true) ;
      const GGS_matchInstructionBranchListAST::cElement * operand_72155 = NULL ;
      while (((operand_72155 = enumerator_72155.nextObject ()))) {
        macroValidPointer (operand_72155) ;
        GGS_localConstantList  var_cas_localConstantList = GGS_localConstantList ::constructor_emptyList () ;
        GGS_matchListForGeneration  var_cas_matchListForGeneration = GGS_matchListForGeneration ::constructor_emptyList () ;
        const GGS_bool cond_74699 = (var_cas_expressionList.reader_length ()).operator_isEqual (operand_72155->mMatchEntryList.reader_length ()) ;
        if (cond_74699.isBuiltAndTrue ()) {
          {
            GGS_semanticExpressionListForGeneration::cEnumerator enumerator_72389 (var_cas_expressionList, true) ;
            const GGS_semanticExpressionListForGeneration::cElement * operand_72389 = NULL ;
            GGS_matchEntryListAST::cEnumerator enumerator_72406 (operand_72155->mMatchEntryList, true) ;
            const GGS_matchEntryListAST::cElement * operand_72406 = NULL ;
            while (((operand_72389 = enumerator_72389.nextObject ()))
                && ((operand_72406 = enumerator_72406.nextObject ()))) {
              macroValidPointer (operand_72389) ;
              macroValidPointer (operand_72406) ;
              const GGS_unifiedTypeMapProxy  var_cas_type = operand_72389->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)) ;
              const GGS_bool cond_73806 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1867))).operator_isEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1867))) ;
              if (cond_73806.isBuiltAndTrue ()) {
                const GGS_bool cond_73487 = operand_72406->mIsType ;
                if (cond_73487.isBuiltAndTrue ()) {
                  const GGS_unifiedTypeMapProxy  var_cas_namedType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_72406->mTypeNameOrEnumerationConstantName COMMA_SOURCE_FILE_AT_LINE (1869)) ;
                  GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
                  GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                  GGS_uint _variant_73033 = var_cas_inAnalysisContext.mSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1872)) ;
                  GGS_bool _condition_73033 (_variant_73033.isBuilt (), true) ;
                  while (_condition_73033.isBuiltAndTrue ()) {
                    _condition_73033 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1873)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1873))).operator_not ()) ;
                    if (_condition_73033.isBuiltAndTrue ()) {
                      if (_variant_73033.uintValue () == 0) {
                        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1876)) ;
                        _condition_73033 = GGS_bool (false) ;
                      }else{
                        _variant_73033.decrement_operation (inLexique COMMA_HERE) ;
                        var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)) ;
                        var_cas_found = (var_cas_t).operator_isEqual (var_cas_namedType) ;
                      }
                    }
                  }
                  const GGS_bool cond_73303 = (var_cas_found).operator_not () ;
                  if (cond_73303.isBuiltAndTrue ()) {
                    operand_72406->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_72406->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1879)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1881)) ;
                  }else if (cond_73303.isBuiltAndFalse ()) {
                    const GGS_bool cond_73467 = (operand_72406->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1881)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
                    if (cond_73467.isBuiltAndTrue ()) {
                      var_cas_localConstantList.addAssign_operation (var_cas_t, operand_72406->mLocalConstantName, GGS_bool (false), GGS_string ("match_instruction_constant_name")) ;
                    }
                  }
                }else if (cond_73487.isBuiltAndFalse ()) {
                  operand_72406->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a type that inherits from '@")).operator_concat (operand_72389->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)))).operator_concat (GGS_string ("' class is expected here")) COMMA_SOURCE_FILE_AT_LINE (1888)) ;
                }
                var_cas_matchListForGeneration.addAssign_operation (GGS_bool (true), operand_72406->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1889)), operand_72406->mLocalConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1889))) ;
              }else if (cond_73806.isBuiltAndFalse ()) {
                const GGS_bool cond_74582 = (var_cas_type.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1890))).operator_isEqual (GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (1890))) ;
                if (cond_74582.isBuiltAndTrue ()) {
                  const GGS_bool cond_74083 = operand_72406->mIsType ;
                  if (cond_74083.isBuiltAndTrue ()) {
                    operand_72406->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of the '@")).operator_concat (operand_72389->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (1895)) ;
                  }else if (cond_74083.isBuiltAndFalse ()) {
                    const GGS_bool cond_74401 = (var_cas_type.reader_mEnumConstantSet (inLexique COMMA_SOURCE_FILE_AT_LINE (1895)).reader_hasKey (operand_72406->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1895)))).operator_not () ;
                    if (cond_74401.isBuiltAndTrue ()) {
                      operand_72406->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (operand_72406->mTypeNameOrEnumerationConstantName)).operator_concat (GGS_string ("' symbol is not a constant of the '@"))).operator_concat (operand_72389->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)))).operator_concat (GGS_string ("' enumeration type")) COMMA_SOURCE_FILE_AT_LINE (1899)) ;
                    }
                  }
                  var_cas_matchListForGeneration.addAssign_operation (GGS_bool (false), operand_72406->mTypeNameOrEnumerationConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)), operand_72389->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1903))) ;
                }else if (cond_74582.isBuiltAndFalse ()) {
                  operand_72406->mTypeNameOrEnumerationConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error") COMMA_SOURCE_FILE_AT_LINE (1907)) ;
                }
              }
            }
          }
        }else if (cond_74699.isBuiltAndFalse ()) {
          operand_72155->mEndOfMatchEntryList.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("this match list should contain ")).operator_concat (var_cas_expressionList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1911)))).operator_concat (GGS_string (" elements, but it acually contains "))).operator_concat (operand_72155->mMatchEntryList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1912))) COMMA_SOURCE_FILE_AT_LINE (1914)) ;
        }
        GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
        ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  var_cas_localConstantList,  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_72155->mMatchBranchInstructionList,  operand_72155->mEndOf_instructionList,  var_cas_ioVariableMap,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1917)) ;
        var_cas_matchInstructionBranchList.addAssign_operation (var_cas_matchListForGeneration, var_cas_instructionList) ;
      }
    }
    GGS_semanticInstructionListForGeneration  var_cas_elseInstructionList ;
    ::routine_analyzeSemanticInstructionList (inLexique,  var_cas_inAnalysisContext,  GGS_localConstantList ::constructor_emptyList (),  GGS_localInitializedVariableList ::constructor_emptyList (),  operand_71023->mElseInstructionList,  operand_71023->mEndOf_match_instruction,  var_cas_ioVariableMap,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1931)) ;
    var_cas_ioVariableMap.modifier_closeOverride (inLexique, operand_71023->mEndOf_match_instruction COMMA_SOURCE_FILE_AT_LINE (1941)) ;
    var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_matchInstructionForGeneration ::constructor_new (inLexique, var_cas_expressionList, var_cas_matchInstructionBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (1943))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticInstructionsAnalysis (void) {
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithConstructorCallAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithConstructorCallAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableOrConstantDeclarationWithAssignmentAST__analyzeSemanticInstruction, gClassInfoFor__localVariableOrConstantDeclarationWithAssignmentAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__localVariableDeclarationAST__analyzeSemanticInstruction, gClassInfoFor__localVariableDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__assignmentInstructionAST__analyzeSemanticInstruction, gClassInfoFor__assignmentInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__errorInstructionAST__analyzeSemanticInstruction, gClassInfoFor__errorInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__warningInstructionAST__analyzeSemanticInstruction, gClassInfoFor__warningInstructionAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__outputInputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__outputInputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputActualParameterAST.slotID ()) ;
  enterCategoryMethod__actualParameterAST__checkAgainstFormalArgument ((typeCategoryMethod__actualParameterAST__checkAgainstFormalArgument) category_method__inputJokerActualParameterAST__checkAgainstFormalArgument, gClassInfoFor__inputJokerActualParameterAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__routineCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__routineCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__typeMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__typeMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__methodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__methodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superMethodCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superMethodCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__modifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__modifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__thisModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__thisModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__superModifierCallInstructionAST__analyzeSemanticInstruction, gClassInfoFor__superModifierCallInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__appendInstructionAST__analyzeSemanticInstruction, gClassInfoFor__appendInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__addInstructionAST__analyzeSemanticInstruction, gClassInfoFor__addInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__incrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__incrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__decrementInstructionAST__analyzeSemanticInstruction, gClassInfoFor__decrementInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__messageInstructionAST__analyzeSemanticInstruction, gClassInfoFor__messageInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__logInstructionAST__analyzeSemanticInstruction, gClassInfoFor__logInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__dropInstructionAST__analyzeSemanticInstruction, gClassInfoFor__dropInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__ifInstructionAST__analyzeSemanticInstruction, gClassInfoFor__ifInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__foreachInstructionAST__analyzeSemanticInstruction, gClassInfoFor__foreachInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__loopInstructionAST__analyzeSemanticInstruction, gClassInfoFor__loopInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__structuredCastInstructionAST__analyzeSemanticInstruction, gClassInfoFor__structuredCastInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__grammarInstructionAST__analyzeSemanticInstruction, gClassInfoFor__grammarInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readWriteAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readWriteAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__readAccessWithInstructionAST__analyzeSemanticInstruction, gClassInfoFor__readAccessWithInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__switchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__switchInstructionAST.slotID ()) ;
  enterCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction ((typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction) category_method__matchInstructionAST__analyzeSemanticInstruction, gClassInfoFor__matchInstructionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticInstructionsAnalysis (void) {
  gDispatchTableForMethod__semanticInstructionAST__analyzeSemanticInstruction.free () ;
  gDispatchTableForMethod__actualParameterAST__checkAgainstFormalArgument.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticInstructionsAnalysis (prologueRoutineFor_semanticInstructionsAnalysis, epilogueRoutineFor_semanticInstructionsAnalysis) ;

//---------------------------------------------------------------------------*

