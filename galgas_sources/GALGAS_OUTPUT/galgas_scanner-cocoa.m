//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'galgas_scanner-cocoa.m'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 22th, 2009, at 18h11'55"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1


//---------------------------------------------------------------------------*

#import "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#import "galgas_scanner-cocoa.h"

//---------------------------------------------------------------------------*

@implementation galgas_scanner

//---------------------------------------------------------------------------*

- (id) init {
  self = [super init] ;
  if (self) {
    mLexicalAttribute_charValue = 0 ;
    mLexicalAttribute_floatValue = 0.0 ;
    mLexicalAttribute_identifierString = [[NSMutableString alloc] init] ;
    mLexicalAttribute_sint32value = 0 ;
    mLexicalAttribute_sint64value = 0 ;
    mLexicalAttribute_tokenString = [[NSMutableString alloc] init] ;
    mLexicalAttribute_uint32value = 0 ;
    mLexicalAttribute_uint64value = 0 ;

 }
  return self ;
}

//---------------------------------------------------------------------------*

- (void) dealloc {
  [mLexicalAttribute_identifierString release] ;
  [mLexicalAttribute_tokenString release] ;
  [super dealloc] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Delimiters                             *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//                           Template Replacements                           *
//                                                                           *
//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*
//                                                                           *
//            Terminal Symbols as end of script in template mark             *
//                                                                           *
//---------------------------------------------------------------------------*

static const bool kEndOfScriptInTemplateArray [143] = {
  false /* identifier */,
  false /* literal_double */,
  false /* unsigned_literal_integer */,
  false /* signed_literal_integer */,
  false /* unsigned_literal_integer64 */,
  false /* signed_literal_integer64 */,
  false /* . */,
  false /* .= */,
  false /* ... */,
  false /* type_name */,
  false /* literal_char */,
  false /* terminal */,
  false /* < */,
  false /* <-> */,
  false /* <= */,
  false /* << */,
  false /* non_terminal_symbol */,
  false /* literal_string */,
  false /* comment */,
  false /* abstract */,
  false /* after */,
  false /* before */,
  false /* between */,
  false /* block */,
  false /* cast */,
  false /* class */,
  false /* compile */,
  false /* const */,
  false /* constructor */,
  false /* default */,
  false /* description */,
  false /* dependency */,
  false /* do */,
  false /* domain */,
  false /* drop */,
  false /* else */,
  false /* elsif */,
  false /* end */,
  false /* enum */,
  false /* error */,
  false /* extends */,
  false /* extern */,
  false /* extract */,
  false /* false */,
  false /* feature */,
  false /* filewrapper */,
  false /* foreach */,
  false /* function */,
  false /* grammar */,
  false /* gui */,
  false /* here */,
  false /* if */,
  false /* import */,
  false /* import__ */,
  false /* in */,
  false /* insert */,
  false /* label */,
  false /* lazy */,
  false /* lexique */,
  false /* list */,
  false /* listmap */,
  false /* log */,
  false /* loop */,
  false /* map */,
  false /* mapindex */,
  false /* match */,
  false /* message */,
  false /* method */,
  false /* mod */,
  false /* modifier */,
  false /* nonterminal */,
  false /* not */,
  false /* on */,
  false /* operator */,
  false /* option */,
  false /* or */,
  false /* override */,
  false /* parse */,
  false /* project */,
  false /* program */,
  false /* reader */,
  false /* remove */,
  false /* replace */,
  false /* repeat */,
  false /* rewind */,
  false /* root */,
  false /* routine */,
  false /* rule */,
  false /* search */,
  false /* select */,
  false /* self */,
  false /* semantics */,
  false /* send */,
  false /* sortedlist */,
  false /* state */,
  false /* struct */,
  false /* style */,
  false /* switch */,
  false /* syntax */,
  false /* tag */,
  false /* template */,
  false /* then */,
  false /* true */,
  false /* unused */,
  false /* warning */,
  false /* when */,
  false /* while */,
  false /* with */,
  false /* * */,
  false /* | */,
  false /* , */,
  false /* + */,
  false /* -- */,
  false /* :: */,
  false /* > */,
  false /* ; */,
  false /* : */,
  false /* - */,
  false /* ( */,
  false /* ) */,
  false /* -> */,
  false /* ? */,
  false /* == */,
  false /* ?? */,
  false /* ! */,
  false /* := */,
  false /* ++ */,
  false /* [ */,
  false /* ] */,
  false /* += */,
  false /* ?! */,
  false /* !? */,
  false /* / */,
  false /* != */,
  false /* >= */,
  false /* & */,
  false /* { */,
  false /* } */,
  false /* -= */,
  false /* ^ */,
  false /* >> */,
  false /* ~ */,
  false /* <- */
} ;


//---------------------------------------------------------------------------*
//                                                                           *
//             Key words table 'galgasKeyWordList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

static const C_cocoa_lexique_table_entry ktable_for_galgasKeyWordList [89] = {
  {@"do", galgas_scanner_1_do},
  {@"if", galgas_scanner_1_if},
  {@"in", galgas_scanner_1_in},
  {@"on", galgas_scanner_1_on},
  {@"or", galgas_scanner_1_or},
  {@"end", galgas_scanner_1_end},
  {@"gui", galgas_scanner_1_gui},
  {@"log", galgas_scanner_1_log},
  {@"map", galgas_scanner_1_map},
  {@"mod", galgas_scanner_1_mod},
  {@"not", galgas_scanner_1_not},
  {@"tag", galgas_scanner_1_tag},
  {@"cast", galgas_scanner_1_cast},
  {@"drop", galgas_scanner_1_drop},
  {@"else", galgas_scanner_1_else},
  {@"enum", galgas_scanner_1_enum},
  {@"here", galgas_scanner_1_here},
  {@"lazy", galgas_scanner_1_lazy},
  {@"list", galgas_scanner_1_list},
  {@"loop", galgas_scanner_1_loop},
  {@"root", galgas_scanner_1_root},
  {@"rule", galgas_scanner_1_rule},
  {@"self", galgas_scanner_1_self},
  {@"send", galgas_scanner_1_send},
  {@"then", galgas_scanner_1_then},
  {@"true", galgas_scanner_1_true},
  {@"when", galgas_scanner_1_when},
  {@"with", galgas_scanner_1_with},
  {@"after", galgas_scanner_1_after},
  {@"block", galgas_scanner_1_block},
  {@"class", galgas_scanner_1_class},
  {@"const", galgas_scanner_1_const},
  {@"elsif", galgas_scanner_1_elsif},
  {@"error", galgas_scanner_1_error},
  {@"false", galgas_scanner_1_false},
  {@"label", galgas_scanner_1_label},
  {@"match", galgas_scanner_1_match},
  {@"parse", galgas_scanner_1_parse},
  {@"state", galgas_scanner_1_state},
  {@"style", galgas_scanner_1_style},
  {@"while", galgas_scanner_1_while},
  {@"before", galgas_scanner_1_before},
  {@"domain", galgas_scanner_1_domain},
  {@"extern", galgas_scanner_1_extern},
  {@"import", galgas_scanner_1_import},
  {@"insert", galgas_scanner_1_insert},
  {@"method", galgas_scanner_1_method},
  {@"option", galgas_scanner_1_option},
  {@"reader", galgas_scanner_1_reader},
  {@"remove", galgas_scanner_1_remove},
  {@"repeat", galgas_scanner_1_repeat},
  {@"rewind", galgas_scanner_1_rewind},
  {@"search", galgas_scanner_1_search},
  {@"select", galgas_scanner_1_select},
  {@"struct", galgas_scanner_1_struct},
  {@"switch", galgas_scanner_1_switch},
  {@"syntax", galgas_scanner_1_syntax},
  {@"unused", galgas_scanner_1_unused},
  {@"between", galgas_scanner_1_between},
  {@"compile", galgas_scanner_1_compile},
  {@"default", galgas_scanner_1_default},
  {@"extends", galgas_scanner_1_extends},
  {@"extract", galgas_scanner_1_extract},
  {@"feature", galgas_scanner_1_feature},
  {@"foreach", galgas_scanner_1_foreach},
  {@"grammar", galgas_scanner_1_grammar},
  {@"lexique", galgas_scanner_1_lexique},
  {@"listmap", galgas_scanner_1_listmap},
  {@"message", galgas_scanner_1_message},
  {@"program", galgas_scanner_1_program},
  {@"project", galgas_scanner_1_project},
  {@"replace", galgas_scanner_1_replace},
  {@"routine", galgas_scanner_1_routine},
  {@"warning", galgas_scanner_1_warning},
  {@"abstract", galgas_scanner_1_abstract},
  {@"function", galgas_scanner_1_function},
  {@"import__", galgas_scanner_1_import_5F__5F_},
  {@"mapindex", galgas_scanner_1_mapindex},
  {@"modifier", galgas_scanner_1_modifier},
  {@"operator", galgas_scanner_1_operator},
  {@"override", galgas_scanner_1_override},
  {@"template", galgas_scanner_1_template},
  {@"semantics", galgas_scanner_1_semantics},
  {@"dependency", galgas_scanner_1_dependency},
  {@"sortedlist", galgas_scanner_1_sortedlist},
  {@"constructor", galgas_scanner_1_constructor},
  {@"description", galgas_scanner_1_description},
  {@"filewrapper", galgas_scanner_1_filewrapper},
  {@"nonterminal", galgas_scanner_1_nonterminal}
} ;

static SInt32 search_into_galgasKeyWordList (NSString * inSearchedString) {
  return searchStringInTable (inSearchedString, ktable_for_galgasKeyWordList, 89) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//               P A R S E    L E X I C A L    T O K E N                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (void) parseLexicalTokenForLexicalColoring {
  mLoop = YES ;
  mNoLexicalError = YES ;
  mTokenCode = -1 ;
  while ((mTokenCode < 0) && (mCurrentChar != '\0')) {
    mLexicalAttribute_charValue= 0 ;
    mLexicalAttribute_floatValue= 0.0 ;
    [mLexicalAttribute_identifierString setString:@""] ;
    mLexicalAttribute_sint32value= 0 ;
    mLexicalAttribute_sint64value= 0 ;
    [mLexicalAttribute_tokenString setString:@""] ;
    mLexicalAttribute_uint32value= 0 ;
    mLexicalAttribute_uint64value= 0 ;
    mTokenFirstLocation = mCurrentLocation ;
    if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90])) {
      do {
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_identifierString, scanner_cocoa_function_toLower (mPreviousChar)) ;
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && mNoLexicalError) ;
      mLoop = YES ;
      if (mTokenCode == -1) {
        mTokenCode = search_into_galgasKeyWordList (mLexicalAttribute_identifierString) ;
      }
      if (mTokenCode == -1) {
        mTokenCode = galgas_scanner_1_identifier ;
      }
      /* enterToken (token) ; */
    }else if (mNoLexicalError && ([self testForInputString:@"0x" advance:YES])) {
      do {
        if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        }else if (mNoLexicalError && ([self testForInputFromChar:97 toChar:102])) {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        }else if (mNoLexicalError && ([self testForInputFromChar:65 toChar:70])) {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        }else if (mNoLexicalError && ([self testForInputChar:95])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && mNoLexicalError) ;
      mLoop = YES ;
      if (mNoLexicalError && ([self testForInputString:@"LS" advance:YES])) {
        scanner_cocoa_routine_convertHexStringIntoSInt64 (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_sint64value) ;
        mTokenCode = galgas_scanner_1_signed_5F_literal_5F_integer_36__34_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputChar:83] || [self testForInputChar:115])) {
        scanner_cocoa_routine_convertHexStringIntoSInt (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_sint32value) ;
        mTokenCode = galgas_scanner_1_signed_5F_literal_5F_integer ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputChar:76])) {
        scanner_cocoa_routine_convertHexStringIntoUInt64 (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_uint64value) ;
        mTokenCode = galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_ ;
        /* enterToken (token) ; */
      }else{
        scanner_cocoa_routine_convertHexStringIntoUInt (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_uint32value) ;
        mTokenCode = galgas_scanner_1_unsigned_5F_literal_5F_integer ;
        /* enterToken (token) ; */
      }
    }else if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
      scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
      do {
        if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        }else if (mNoLexicalError && ([self testForInputChar:95])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && mNoLexicalError) ;
      mLoop = YES ;
      if (mNoLexicalError && ([self testForInputChar:83] || [self testForInputChar:115])) {
        scanner_cocoa_routine_convertDecimalStringIntoSInt (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_sint32value) ;
        mTokenCode = galgas_scanner_1_signed_5F_literal_5F_integer ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputString:@"LS" advance:YES])) {
        scanner_cocoa_routine_convertDecimalStringIntoSInt64 (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_sint64value) ;
        mTokenCode = galgas_scanner_1_signed_5F_literal_5F_integer_36__34_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputChar:76])) {
        scanner_cocoa_routine_convertDecimalStringIntoUInt64 (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_uint64value) ;
        mTokenCode = galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputChar:46])) {
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 46) ;
        do {
          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
          }else if (mNoLexicalError && ([self testForInputChar:95])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && mNoLexicalError) ;
        mLoop = YES ;
        scanner_cocoa_routine_convertStringToDouble (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_floatValue) ;
        mTokenCode = galgas_scanner_1_literal_5F_double ;
        /* enterToken (token) ; */
      }else{
        scanner_cocoa_routine_convertDecimalStringIntoUInt (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_uint32value) ;
        mTokenCode = galgas_scanner_1_unsigned_5F_literal_5F_integer ;
        /* enterToken (token) ; */
      }
    }else if (mNoLexicalError && ([self testForInputChar:46])) {
      if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 48) ;
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 46) ;
        scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        do {
          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
          }else if (mNoLexicalError && ([self testForInputChar:95])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && mNoLexicalError) ;
        mLoop = YES ;
        scanner_cocoa_routine_convertStringToDouble (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_floatValue) ;
        mTokenCode = galgas_scanner_1_literal_5F_double ;
        /* enterToken (token) ; */
      }else{
        if (mNoLexicalError && ([self testForInputString:@".." advance:YES])) {
          mTokenCode = galgas_scanner_1__2E__2E__2E_ ;
          /* enterToken (token) ; */
        }else if (mNoLexicalError && ([self testForInputString:@"=" advance:YES])) {
          mTokenCode = galgas_scanner_1__2E__3D_ ;
          /* enterToken (token) ; */
        }else{
          mTokenCode = galgas_scanner_1__2E_ ;
          /* enterToken (token) ; */
        }
      }
    }else if (mNoLexicalError && ([self testForInputChar:64])) {
      if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95])) {
        do {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
          if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputChar:95] || [self testForInputFromChar:48 toChar:57])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && mNoLexicalError) ;
        mLoop = YES ;
      }else{
        mNoLexicalError = NO ;
      }
      mTokenCode = galgas_scanner_1_type_5F_name ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && ([self testForInputChar:39])) {
      if (mNoLexicalError && ([self testForInputChar:92])) {
        if (mNoLexicalError && ([self testForInputChar:102])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 12) ;
        }else if (mNoLexicalError && ([self testForInputChar:110])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 10) ;
        }else if (mNoLexicalError && ([self testForInputChar:114])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 13) ;
        }else if (mNoLexicalError && ([self testForInputChar:116])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 9) ;
        }else if (mNoLexicalError && ([self testForInputChar:118])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 11) ;
        }else if (mNoLexicalError && ([self testForInputChar:92])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 92) ;
        }else if (mNoLexicalError && ([self testForInputChar:48])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 0) ;
        }else if (mNoLexicalError && ([self testForInputChar:39])) {
          scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, 39) ;
        }else if (mNoLexicalError && ([self testForInputChar:117])) {
          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
            scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
            if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& mNoLexicalError, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                }else{
                  mNoLexicalError = NO ;
                }
              }else{
                mNoLexicalError = NO ;
              }
            }else{
              mNoLexicalError = NO ;
            }
          }else{
            mNoLexicalError = NO ;
          }
        }else if (mNoLexicalError && ([self testForInputChar:85])) {
          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
            scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
            if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                      scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                      if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                        scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                        if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                          scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                          scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& mNoLexicalError, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                        }else{
                          mNoLexicalError = NO ;
                        }
                      }else{
                        mNoLexicalError = NO ;
                      }
                    }else{
                      mNoLexicalError = NO ;
                    }
                  }else{
                    mNoLexicalError = NO ;
                  }
                }else{
                  mNoLexicalError = NO ;
                }
              }else{
                mNoLexicalError = NO ;
              }
            }else{
              mNoLexicalError = NO ;
            }
          }else{
            mNoLexicalError = NO ;
          }
        }else if (mNoLexicalError && ([self testForInputChar:120] || [self testForInputChar:88])) {
          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
            do {
              scanner_cocoa_routine_enterHexDigitIntoASCIIcharacter (& mNoLexicalError, & mLexicalAttribute_charValue, mPreviousChar) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              }else{
                mLoop = NO ;
              }
            }while (mLoop && mNoLexicalError) ;
            mLoop = YES ;
          }else{
            mNoLexicalError = NO ;
          }
        }else if (mNoLexicalError && ([self testForInputChar:38])) {
          do {
            if (mNoLexicalError && ([self notTestForInputString:@";" error:& mNoLexicalError])) {
              scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
            }else{
              mLoop = NO ;
            }
          }while (mLoop && mNoLexicalError) ;
          mLoop = YES ;
          scanner_cocoa_routine_convertHTMLSequenceToUnicodeCharacter (& mNoLexicalError, mLexicalAttribute_tokenString, & mLexicalAttribute_charValue) ;
        }else{
          mNoLexicalError = NO ;
        }
      }else if (mNoLexicalError && ([self testForInputFromChar:32 toChar:65533])) {
        scanner_cocoa_routine_enterCharacterIntoCharacter (& mNoLexicalError, & mLexicalAttribute_charValue, mPreviousChar) ;
      }else{
        mNoLexicalError = NO ;
      }
      if (mNoLexicalError && ([self testForInputChar:39])) {
        mTokenCode = galgas_scanner_1_literal_5F_char ;
        /* enterToken (token) ; */
      }else{
        mNoLexicalError = NO ;
      }
    }else if (mNoLexicalError && ([self testForInputChar:36])) {
      if (mNoLexicalError && ([self testForInputFromChar:33 toChar:35] || [self testForInputFromChar:37 toChar:126])) {
        do {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
          if (mNoLexicalError && ([self testForInputFromChar:33 toChar:35] || [self testForInputFromChar:37 toChar:126])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && mNoLexicalError) ;
        mLoop = YES ;
      }else{
        mNoLexicalError = NO ;
      }
      if (mNoLexicalError && ([self testForInputChar:36])) {
      }else{
        mNoLexicalError = NO ;
      }
      mTokenCode = galgas_scanner_1_terminal ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"\?\?" advance:YES]) {
      mTokenCode = galgas_scanner_1__3F__3F_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"\?!" advance:YES]) {
      mTokenCode = galgas_scanner_1__3F__21_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@">>" advance:YES]) {
      mTokenCode = galgas_scanner_1__3E__3E_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@">=" advance:YES]) {
      mTokenCode = galgas_scanner_1__3E__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"==" advance:YES]) {
      mTokenCode = galgas_scanner_1__3D__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"<-" advance:YES]) {
      mTokenCode = galgas_scanner_1__3C__2D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@":=" advance:YES]) {
      mTokenCode = galgas_scanner_1__3A__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"::" advance:YES]) {
      mTokenCode = galgas_scanner_1__3A__3A_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"->" advance:YES]) {
      mTokenCode = galgas_scanner_1__2D__3E_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"-=" advance:YES]) {
      mTokenCode = galgas_scanner_1__2D__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"--" advance:YES]) {
      mTokenCode = galgas_scanner_1__2D__2D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"+=" advance:YES]) {
      mTokenCode = galgas_scanner_1__2B__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"++" advance:YES]) {
      mTokenCode = galgas_scanner_1__2B__2B_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"!\?" advance:YES]) {
      mTokenCode = galgas_scanner_1__21__3F_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"!=" advance:YES]) {
      mTokenCode = galgas_scanner_1__21__3D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"~" advance:YES]) {
      mTokenCode = galgas_scanner_1__7E_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"}" advance:YES]) {
      mTokenCode = galgas_scanner_1__7D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"|" advance:YES]) {
      mTokenCode = galgas_scanner_1__7C_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"{" advance:YES]) {
      mTokenCode = galgas_scanner_1__7B_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"^" advance:YES]) {
      mTokenCode = galgas_scanner_1__5E_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"]" advance:YES]) {
      mTokenCode = galgas_scanner_1__5D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"[" advance:YES]) {
      mTokenCode = galgas_scanner_1__5B_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"\?" advance:YES]) {
      mTokenCode = galgas_scanner_1__3F_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@">" advance:YES]) {
      mTokenCode = galgas_scanner_1__3E_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@";" advance:YES]) {
      mTokenCode = galgas_scanner_1__3B_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@":" advance:YES]) {
      mTokenCode = galgas_scanner_1__3A_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"/" advance:YES]) {
      mTokenCode = galgas_scanner_1__2F_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"-" advance:YES]) {
      mTokenCode = galgas_scanner_1__2D_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"," advance:YES]) {
      mTokenCode = galgas_scanner_1__2C_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"+" advance:YES]) {
      mTokenCode = galgas_scanner_1__2B_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"*" advance:YES]) {
      mTokenCode = galgas_scanner_1__2A_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@")" advance:YES]) {
      mTokenCode = galgas_scanner_1__29_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"(" advance:YES]) {
      mTokenCode = galgas_scanner_1__28_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"&" advance:YES]) {
      mTokenCode = galgas_scanner_1__26_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && [self testForInputString:@"!" advance:YES]) {
      mTokenCode = galgas_scanner_1__21_ ;
      /* enterToken (token) ; */
    }else if (mNoLexicalError && ([self testForInputChar:60])) {
      const UInt32 locationForTag_onlyInfDelimiter = mCurrentLocation ;
      if (mNoLexicalError && ([self testForInputChar:61])) {
        mTokenCode = galgas_scanner_1__3C__3D_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputString:@"->" advance:YES])) {
        mTokenCode = galgas_scanner_1__3C__2D__3E_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputChar:60])) {
        mTokenCode = galgas_scanner_1__3C__3C_ ;
        /* enterToken (token) ; */
      }else if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90])) {
        do {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
          if (mNoLexicalError && ([self testForInputFromChar:97 toChar:122] || [self testForInputFromChar:65 toChar:90] || [self testForInputFromChar:48 toChar:57] || [self testForInputChar:95])) {
          }else{
            mLoop = NO ;
          }
        }while (mLoop && mNoLexicalError) ;
        mLoop = YES ;
        if (mNoLexicalError && ([self testForInputChar:62])) {
          mTokenCode = galgas_scanner_1_non_5F_terminal_5F_symbol ;
          /* enterToken (token) ; */
        }else{
          mCurrentLocation = locationForTag_onlyInfDelimiter ;
          mTokenCode = galgas_scanner_1__3C_ ;
          /* enterToken (token) ; */
        }
      }else{
        mTokenCode = galgas_scanner_1__3C_ ;
        /* enterToken (token) ; */
      }
    }else if (mNoLexicalError && ([self testForInputChar:34])) {
      do {
        if (mNoLexicalError && ([self testForInputChar:92])) {
          if (mNoLexicalError && ([self testForInputChar:102])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 12) ;
          }else if (mNoLexicalError && ([self testForInputChar:110])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 10) ;
          }else if (mNoLexicalError && ([self testForInputChar:114])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 13) ;
          }else if (mNoLexicalError && ([self testForInputChar:116])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 9) ;
          }else if (mNoLexicalError && ([self testForInputChar:118])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 11) ;
          }else if (mNoLexicalError && ([self testForInputChar:92])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 92) ;
          }else if (mNoLexicalError && ([self testForInputChar:34])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 34) ;
          }else if (mNoLexicalError && ([self testForInputChar:39])) {
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, 39) ;
          }else if (mNoLexicalError && ([self testForInputChar:38])) {
            do {
              if (mNoLexicalError && ([self notTestForInputString:@";" error:& mNoLexicalError])) {
                scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_identifierString, mPreviousChar) ;
              }else{
                mLoop = NO ;
              }
            }while (mLoop && mNoLexicalError) ;
            mLoop = YES ;
            scanner_cocoa_routine_convertHTMLSequenceToUnicodeCharacter (& mNoLexicalError, mLexicalAttribute_identifierString, & mLexicalAttribute_charValue) ;
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
          }else if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
            do {
              scanner_cocoa_routine_enterHexDigitIntoASCIIcharacter (& mNoLexicalError, & mLexicalAttribute_charValue, mPreviousChar) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57])) {
              }else{
                mLoop = NO ;
              }
            }while (mLoop && mNoLexicalError) ;
            mLoop = YES ;
            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
          }else if (mNoLexicalError && ([self testForInputChar:117])) {
            if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& mNoLexicalError, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                    scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
                  }else{
                    mNoLexicalError = NO ;
                  }
                }else{
                  mNoLexicalError = NO ;
                }
              }else{
                mNoLexicalError = NO ;
              }
            }else{
              mNoLexicalError = NO ;
            }
          }else if (mNoLexicalError && ([self testForInputChar:85])) {
            if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
              scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
              if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                  scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                  if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                    scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                    if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                      scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                      if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                        scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                        if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                          scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                          if (mNoLexicalError && ([self testForInputFromChar:48 toChar:57] || [self testForInputFromChar:97 toChar:102] || [self testForInputFromChar:65 toChar:70])) {
                            scanner_cocoa_routine_enterHexDigitIntoUInt (& mNoLexicalError, mPreviousChar, & mLexicalAttribute_uint32value) ;
                            scanner_cocoa_routine_convertUnsignedNumberToUnicodeChar (& mNoLexicalError, & mLexicalAttribute_uint32value, & mLexicalAttribute_charValue) ;
                            scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mLexicalAttribute_charValue) ;
                          }else{
                            mNoLexicalError = NO ;
                          }
                        }else{
                          mNoLexicalError = NO ;
                        }
                      }else{
                        mNoLexicalError = NO ;
                      }
                    }else{
                      mNoLexicalError = NO ;
                    }
                  }else{
                    mNoLexicalError = NO ;
                  }
                }else{
                  mNoLexicalError = NO ;
                }
              }else{
                mNoLexicalError = NO ;
              }
            }else{
              mNoLexicalError = NO ;
            }
          }else{
            mNoLexicalError = NO ;
          }
        }else if (mNoLexicalError && ([self testForInputChar:32] || [self testForInputChar:33] || [self testForInputFromChar:35 toChar:65533])) {
          scanner_cocoa_routine_enterCharacterIntoString (& mNoLexicalError, mLexicalAttribute_tokenString, mPreviousChar) ;
        }else{
          mLoop = NO ;
        }
      }while (mLoop && mNoLexicalError) ;
      mLoop = YES ;
      if (mNoLexicalError && ([self testForInputChar:34])) {
        mTokenCode = galgas_scanner_1_literal_5F_string ;
        /* enterToken (token) ; */
      }else{
        mNoLexicalError = NO ;
      }
    }else if (mNoLexicalError && ([self testForInputChar:35])) {
      do {
        if (mNoLexicalError && ([self testForInputFromChar:1 toChar:9] || [self testForInputChar:11] || [self testForInputChar:12] || [self testForInputFromChar:14 toChar:65533])) {
        }else{
          mLoop = NO ;
        }
      }while (mLoop && mNoLexicalError) ;
      mLoop = YES ;
    }else if (mNoLexicalError && ([self testForInputFromChar:1 toChar:32])) {
    }else if ([self testForInputChar:'\0']) { // End of source text ? 
        mTokenCode = galgas_scanner_1_ ; // Empty string code
      }else{ // Unknown input character
        mNoLexicalError = NO ;
      }
  }
  if ((mCurrentChar == '\0') && ([mTemplateStringBeforeToken length] > 0)) {
    mTokenCode = 0 ;
    /* enterToken (token) ; */
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   T E R M I N A L    C O U N T                            *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) terminalVocabularyCount {
  return 143 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     S T Y L E   C O U N T                                 *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) stylesCount {
  return 11 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              S T Y L E   F O R    T E R M I N A L                         *
//                                                                           *
//---------------------------------------------------------------------------*

- (UInt32) styleIndexForTerminal: (SInt32) inTerminal {
  static const UInt32 kTerminalSymbolStyles [144] = {0,
    0 /* galgas_scanner_1_identifier */,
    6 /* galgas_scanner_1_literal_5F_double */,
    5 /* galgas_scanner_1_unsigned_5F_literal_5F_integer */,
    5 /* galgas_scanner_1_signed_5F_literal_5F_integer */,
    5 /* galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_ */,
    5 /* galgas_scanner_1_signed_5F_literal_5F_integer_36__34_ */,
    2 /* galgas_scanner_1__2E_ */,
    2 /* galgas_scanner_1__2E__3D_ */,
    2 /* galgas_scanner_1__2E__2E__2E_ */,
    9 /* galgas_scanner_1_type_5F_name */,
    7 /* galgas_scanner_1_literal_5F_char */,
    3 /* galgas_scanner_1_terminal */,
    2 /* galgas_scanner_1__3C_ */,
    2 /* galgas_scanner_1__3C__2D__3E_ */,
    2 /* galgas_scanner_1__3C__3D_ */,
    2 /* galgas_scanner_1__3C__3C_ */,
    4 /* galgas_scanner_1_non_5F_terminal_5F_symbol */,
    8 /* galgas_scanner_1_literal_5F_string */,
    10 /* galgas_scanner_1_comment */,
    1 /* galgas_scanner_1_abstract */,
    1 /* galgas_scanner_1_after */,
    1 /* galgas_scanner_1_before */,
    1 /* galgas_scanner_1_between */,
    1 /* galgas_scanner_1_block */,
    1 /* galgas_scanner_1_cast */,
    1 /* galgas_scanner_1_class */,
    1 /* galgas_scanner_1_compile */,
    1 /* galgas_scanner_1_const */,
    1 /* galgas_scanner_1_constructor */,
    1 /* galgas_scanner_1_default */,
    1 /* galgas_scanner_1_description */,
    1 /* galgas_scanner_1_dependency */,
    1 /* galgas_scanner_1_do */,
    1 /* galgas_scanner_1_domain */,
    1 /* galgas_scanner_1_drop */,
    1 /* galgas_scanner_1_else */,
    1 /* galgas_scanner_1_elsif */,
    1 /* galgas_scanner_1_end */,
    1 /* galgas_scanner_1_enum */,
    1 /* galgas_scanner_1_error */,
    1 /* galgas_scanner_1_extends */,
    1 /* galgas_scanner_1_extern */,
    1 /* galgas_scanner_1_extract */,
    1 /* galgas_scanner_1_false */,
    1 /* galgas_scanner_1_feature */,
    1 /* galgas_scanner_1_filewrapper */,
    1 /* galgas_scanner_1_foreach */,
    1 /* galgas_scanner_1_function */,
    1 /* galgas_scanner_1_grammar */,
    1 /* galgas_scanner_1_gui */,
    1 /* galgas_scanner_1_here */,
    1 /* galgas_scanner_1_if */,
    1 /* galgas_scanner_1_import */,
    1 /* galgas_scanner_1_import_5F__5F_ */,
    1 /* galgas_scanner_1_in */,
    1 /* galgas_scanner_1_insert */,
    1 /* galgas_scanner_1_label */,
    1 /* galgas_scanner_1_lazy */,
    1 /* galgas_scanner_1_lexique */,
    1 /* galgas_scanner_1_list */,
    1 /* galgas_scanner_1_listmap */,
    1 /* galgas_scanner_1_log */,
    1 /* galgas_scanner_1_loop */,
    1 /* galgas_scanner_1_map */,
    1 /* galgas_scanner_1_mapindex */,
    1 /* galgas_scanner_1_match */,
    1 /* galgas_scanner_1_message */,
    1 /* galgas_scanner_1_method */,
    1 /* galgas_scanner_1_mod */,
    1 /* galgas_scanner_1_modifier */,
    1 /* galgas_scanner_1_nonterminal */,
    1 /* galgas_scanner_1_not */,
    1 /* galgas_scanner_1_on */,
    1 /* galgas_scanner_1_operator */,
    1 /* galgas_scanner_1_option */,
    1 /* galgas_scanner_1_or */,
    1 /* galgas_scanner_1_override */,
    1 /* galgas_scanner_1_parse */,
    1 /* galgas_scanner_1_project */,
    1 /* galgas_scanner_1_program */,
    1 /* galgas_scanner_1_reader */,
    1 /* galgas_scanner_1_remove */,
    1 /* galgas_scanner_1_replace */,
    1 /* galgas_scanner_1_repeat */,
    1 /* galgas_scanner_1_rewind */,
    1 /* galgas_scanner_1_root */,
    1 /* galgas_scanner_1_routine */,
    1 /* galgas_scanner_1_rule */,
    1 /* galgas_scanner_1_search */,
    1 /* galgas_scanner_1_select */,
    1 /* galgas_scanner_1_self */,
    1 /* galgas_scanner_1_semantics */,
    1 /* galgas_scanner_1_send */,
    1 /* galgas_scanner_1_sortedlist */,
    1 /* galgas_scanner_1_state */,
    1 /* galgas_scanner_1_struct */,
    1 /* galgas_scanner_1_style */,
    1 /* galgas_scanner_1_switch */,
    1 /* galgas_scanner_1_syntax */,
    1 /* galgas_scanner_1_tag */,
    1 /* galgas_scanner_1_template */,
    1 /* galgas_scanner_1_then */,
    1 /* galgas_scanner_1_true */,
    1 /* galgas_scanner_1_unused */,
    1 /* galgas_scanner_1_warning */,
    1 /* galgas_scanner_1_when */,
    1 /* galgas_scanner_1_while */,
    1 /* galgas_scanner_1_with */,
    2 /* galgas_scanner_1__2A_ */,
    2 /* galgas_scanner_1__7C_ */,
    2 /* galgas_scanner_1__2C_ */,
    2 /* galgas_scanner_1__2B_ */,
    2 /* galgas_scanner_1__2D__2D_ */,
    2 /* galgas_scanner_1__3A__3A_ */,
    2 /* galgas_scanner_1__3E_ */,
    2 /* galgas_scanner_1__3B_ */,
    2 /* galgas_scanner_1__3A_ */,
    2 /* galgas_scanner_1__2D_ */,
    2 /* galgas_scanner_1__28_ */,
    2 /* galgas_scanner_1__29_ */,
    2 /* galgas_scanner_1__2D__3E_ */,
    2 /* galgas_scanner_1__3F_ */,
    2 /* galgas_scanner_1__3D__3D_ */,
    2 /* galgas_scanner_1__3F__3F_ */,
    2 /* galgas_scanner_1__21_ */,
    2 /* galgas_scanner_1__3A__3D_ */,
    2 /* galgas_scanner_1__2B__2B_ */,
    2 /* galgas_scanner_1__5B_ */,
    2 /* galgas_scanner_1__5D_ */,
    2 /* galgas_scanner_1__2B__3D_ */,
    2 /* galgas_scanner_1__3F__21_ */,
    2 /* galgas_scanner_1__21__3F_ */,
    2 /* galgas_scanner_1__2F_ */,
    2 /* galgas_scanner_1__21__3D_ */,
    2 /* galgas_scanner_1__3E__3D_ */,
    2 /* galgas_scanner_1__26_ */,
    2 /* galgas_scanner_1__7B_ */,
    2 /* galgas_scanner_1__7D_ */,
    2 /* galgas_scanner_1__2D__3D_ */,
    2 /* galgas_scanner_1__5E_ */,
    2 /* galgas_scanner_1__3E__3E_ */,
    2 /* galgas_scanner_1__7E_ */,
    2 /* galgas_scanner_1__3C__2D_ */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             S T Y L E   N A M E    F O R    I N D E X                     *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleNameForStyleIndex: (SInt32) inIndex {
  NSString * kStyleArray [11] = {
    @"Default Style",
    @"Keywords",
    @"Delimiters",
    @"Terminal Symbols",
    @"Non Terminal Symbols",
    @"Integer Constants",
    @"Floating Point Constants",
    @"Character Constants",
    @"String Constants",
    @"Type Names (@...)",
    @"Comments"
  } ;
  return kStyleArray [inIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         S T Y L E   I D E N T I F I E R    F O R    I N D E X             *
//                                                                           *
//---------------------------------------------------------------------------*

- (NSString *) styleIdentifierForStyleIndex: (SInt32) inIndex {
  NSString * kStyleArray [11] = {
    @"galgas_scanner",
    @"galgas_scanner-keywordsStyle",
    @"galgas_scanner-delimitersStyle",
    @"galgas_scanner-terminalStyle",
    @"galgas_scanner-nonTerminalStyle",
    @"galgas_scanner-integerStyle",
    @"galgas_scanner-float_csts",
    @"galgas_scanner-characterStyle",
    @"galgas_scanner-stringStyle",
    @"galgas_scanner-typeNameStyle",
    @"galgas_scanner-commentStyle"
  } ;
  return kStyleArray [inIndex] ;
}

//---------------------------------------------------------------------------*

@end

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2



