//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'mda_galgas_prgm.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 20th, 2009, at 18h47'15"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"
#include "command_line_interface/C_StringCommandLineOption.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "XcodeProjectGeneration.h"
#include "galgas_LL1_grammar.h"
#include "grammarCompilation.h"
#include "grammarMetamodel.h"
#include "guiCompilation.h"
#include "guiMetamodel.h"
#include "lexiqueCompilation.h"
#include "lexiqueLL1grammar.h"
#include "lexiqueSemantics.h"
#include "mda_galgas_prgm.h"
#include "mda_galgas_routines.h"
#include "optionCompilation.h"
#include "optionMetamodel.h"
#include "optionSemantics.h"
#include "predefinedLexicalActions.h"
#include "programSLRgrammar.h"
#include "projectCreation.h"
#include "projectLL1grammar.h"
#include "semanticsMetamodel.h"
#include "semanticsSemantics.h"
#include "semantics_semantics.h"
#include "syntaxCompilation.h"
#include "syntaxMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "mda_galgas_prgm.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
mda_galgas_prgm_prologue (C_Compiler & inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  GGS_string var_cas_creationProjectName ;
  var_cas_creationProjectName = gOption_galgas_5F_cli_5F_options_create_5F_project.value () ;
  ::routine_projectCreation (inLexique,  var_cas_creationProjectName COMMA_SOURCE_FILE_AT_LINE (49)) ;
  if ((gOption_galgas_5F_cli_5F_options_printPredefinedLexicalActions.value ()).isBuiltAndTrue ()) {
    ::routine_printPredefinedLexicalActions (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
mda_galgas_prgm_epilogue (C_Compiler & /* inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
//--- Fix parameters for BDD package
  C_BDD::setHashMapSize (19) ;
  C_BDD::setITEcacheSize (17) ;
  C_BDD::setANDcacheSize (1) ;
  C_BDD::forAllOnBitsGreaterCacheSize (18) ;
  C_PrologueEpilogueAction::runPrologueActions () ;
  {
  //--- Input/output parameters
    const char * extensions [] = {"ggs", "gOption", "gLexique", "gSemantics", "gSyntax", "gGrammar", "gGui", "gProgram", "gProject", NULL} ;
    const char * helpMessages [] = {"a '.ggs' GALGAS source file", "a GALGAS option source file", "a GALGAS lexique source file", "a GALGAS semantics source file", "a GALGAS syntax source file", "a GALGAS grammar source file", "a GALGAS GUI source file", "a GALGAS program source file", "a GALGAS project source file", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    F_Analyze_CLI_Options (argc, argv,
                                 #ifndef DO_NOT_GENERATE_CHECKINGS
        "version GALGAS_BETA_VERSION" " [debug]",
      #else
        "version GALGAS_BETA_VERSION",
      #endif
                           sourceFilesArray,
                           extensions,
                           helpMessages) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;
  //--- Common lexique object
    C_Compiler * _commonLexique = NULL ;
    macroMyNew (_commonLexique, C_Compiler (NULL, "", "", galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      mda_galgas_prgm_prologue (* _commonLexique, sourceFilesArray) ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        try {
          const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
          PMSInt16 r = 0 ;
          if (fileExtension.compare ("ggs") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            if (var_cas_inSourceFile.isBuilt ()) {
              ::routine_fixFileGenerationStartDirectory (inLexique,  var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (60)) ;
            }
            GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse ;
            var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
            var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
            var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_M_optionComponents  var_cas_optionComponentsMap ;
            var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_EXsemanticContext var_cas_semanticContext ;
            var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappers ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            const GGS_string _depExtension = GGS_string ("galgas-dep") ;
            const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              galgas_LL1_grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_lexiqueMapForUse,
                                            var_cas_semanticsComponentsMap,
                                            var_cas_syntaxComponentsMap,
                                            var_cas_grammarComponentsMap,
                                            var_cas_optionComponentsMap,
                                            var_cas_semanticContext
                                            COMMA_SOURCE_FILE_AT_LINE (73)) ;
            }
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gOption") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileOptionComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (94)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (94)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gLexique") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileLexiqueComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (108)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (108)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gSemantics") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileSemanticsComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (122)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (122)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gSyntax") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileSyntaxComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (136)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (136)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gGrammar") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileGrammarComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (150)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (150)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gGui") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            ::routine_compileGuiComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (164)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (164)) ;
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gProgram") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_programComponentRoot  var_cas_programComponentRoot ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              programSLRgrammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_programComponentRoot
                                            COMMA_SOURCE_FILE_AT_LINE (173)) ;
            }
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else if (fileExtension.compare ("gProject") == 0) {
            C_Compiler & inLexique = * _commonLexique ;
            const GGS_string _source (true, sourceFilesArray (i COMMA_HERE)) ;
            const GGS_location _here (inLexique) ;
            const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, _source, _here COMMA_HERE)) ;
            GGS_string var_cas_outputDirectoryTEMP ;
            var_cas_outputDirectoryTEMP = function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (185)) ;
            GGS_string var_cas_outputDirectory ;
            var_cas_outputDirectory = function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (186)) ;
            GGS_projectSourceList  var_cas_projectSourceList ;
            GGS_lstring  var_cas_projectName ;
            GGS_location  var_cas_endOfSourceFile ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              projectLL1grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_projectSourceList,
                                            var_cas_projectName,
                                            var_cas_endOfSourceFile
                                            COMMA_SOURCE_FILE_AT_LINE (191)) ;
            }
            GGS_sourceFileMap  var_cas_sourceFileMap ;
            var_cas_sourceFileMap = GGS_sourceFileMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
            GGS_targetFileListMap var_cas_targetFileListMap ;
            var_cas_targetFileListMap = GGS_targetFileListMap::constructor_emptyMap () ;
            {
              GGS_projectSourceList::cEnumerator enumerator_8616 (var_cas_projectSourceList, true) ;
              const GGS_projectSourceList::cElement * operand_8616 = NULL ;
              while (((operand_8616 = enumerator_8616.nextObject ()))) {
                macroValidPointer (operand_8616) ;
                GGS_string var_cas_baseName ;
                var_cas_baseName = operand_8616->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
                var_cas_sourceFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_baseName, operand_8616->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_HERE), operand_8616->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), operand_8616->mSourceKind COMMA_SOURCE_FILE_AT_LINE (197)) ;
                {
                  GGS_lstringlist::cEnumerator enumerator_8855 (operand_8616->mTargetList, true) ;
                  const GGS_lstringlist::cElement * operand_8855 = NULL ;
                  while (((operand_8855 = enumerator_8855.nextObject ()))) {
                    macroValidPointer (operand_8855) ;
                    if (((((operand_8855->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_isNotEqual (GGS_string ("makefile"))).operator_and ((operand_8855->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_isNotEqual (GGS_string ("xcode_tool")))).operator_and ((operand_8855->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).operator_isNotEqual (GGS_string ("xcode_app")))).isBuiltAndTrue ()) {
                      operand_8855->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"") COMMA_SOURCE_FILE_AT_LINE (201)) ;
                    }else{
                      var_cas_targetFileListMap._addAssign_operation (operand_8855->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)), var_cas_baseName) ;
                    }
                  }
                }
              }
            }
            GGS_parsedComponentStruct var_cas_parsedComponentStruct ;
            var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
            {
              GGS_projectSourceList::cEnumerator enumerator_9504 (var_cas_projectSourceList, true) ;
              const GGS_projectSourceList::cElement * operand_9504 = NULL ;
              while (((operand_9504 = enumerator_9504.nextObject ()))) {
                macroValidPointer (operand_9504) ;
                GGS_string var_cas_extension ;
                var_cas_extension = operand_9504->mFilePath.ggs_string ().reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
                GGS_lstring  var_cas_fullFilePath ;
                var_cas_fullFilePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (217))).operator_concat (GGS_string ("/"))).operator_concat (operand_9504->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217))), operand_9504->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (218)) COMMA_HERE) ;
                if (((operand_9504->mSourceKind).operator_isNotEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("----- Compiling '")).operator_concat (operand_9504->mFilePath)).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (221)) ;
                }
                switch (operand_9504->mSourceKind.enumValue ()) {
                case GGS_sourceFileKind::enum_externSourceFile:
                  {
                  }
                  break ;
                case GGS_sourceFileKind::enum_guiSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gGui"))).isBuiltAndTrue ()) {
                    ::routine_compileGuiComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (227)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a gui component should be '.gGui'.") COMMA_SOURCE_FILE_AT_LINE (230)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_lexiqueSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gLexique"))).isBuiltAndTrue ()) {
                    ::routine_compileLexiqueComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (233)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a lexique component should be '.gLexique'.") COMMA_SOURCE_FILE_AT_LINE (236)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_optionSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gOption"))).isBuiltAndTrue ()) {
                    ::routine_compileOptionComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (239)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of an option component should be '.gOption'.") COMMA_SOURCE_FILE_AT_LINE (242)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_semanticsSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gSemantics"))).isBuiltAndTrue ()) {
                    ::routine_compileSemanticsComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectoryTEMP,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (245)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a semantics component should be '.gSemantics'.") COMMA_SOURCE_FILE_AT_LINE (248)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_syntaxSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gSyntax"))).isBuiltAndTrue ()) {
                    ::routine_compileSyntaxComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (251)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (251)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a syntax component should be '.gSyntax'.") COMMA_SOURCE_FILE_AT_LINE (254)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_grammarSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gGrammar"))).isBuiltAndTrue ()) {
                    ::routine_compileGrammarComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectoryTEMP (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (257)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (257)) ;
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a grammar component should be '.gGrammar'.") COMMA_SOURCE_FILE_AT_LINE (260)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_programSourceFile:
                  {
                  if (((var_cas_extension).operator_isEqual (GGS_string ("gProgram"))).isBuiltAndTrue ()) {
                  }else{
                    operand_9504->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a program component should be '.gProgram'.") COMMA_SOURCE_FILE_AT_LINE (266)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::kNotBuilt:
                  break ;
                }
              }
            }
            if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string ("----- Perform global checkings\n") COMMA_SOURCE_FILE_AT_LINE (271)) ;
              ::routine_performProjectGlobalCheckings (inLexique,  var_cas_parsedComponentStruct,  var_cas_endOfSourceFile COMMA_SOURCE_FILE_AT_LINE (272)) ;
            }
            if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
              GGS_stringlist  var_cas_makefileFiles ;
              var_cas_makefileFiles = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("makefile") COMMA_SOURCE_FILE_AT_LINE (276)) ;
              if (((var_cas_makefileFiles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (277))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                GGS_string var_cas_externSourceFileList ;
                var_cas_externSourceFileList = GGS_string ("") ;
                GGS_string var_cas_galgasSourceList ;
                var_cas_galgasSourceList = GGS_string ("") ;
                GGS_stringset  var_cas_pathSet ;
                var_cas_pathSet = GGS_stringset ::constructor_emptySet () ;
                var_cas_pathSet._addAssign_operation (GGS_string ("SOURCES_DIR += ../hand_coded_sources\n")) ;
                {
                  GGS_stringlist::cEnumerator enumerator_12390 (var_cas_makefileFiles, true) ;
                  const GGS_stringlist::cElement * operand_12390 = NULL ;
                  while (((operand_12390 = enumerator_12390.nextObject ()))) {
                    macroValidPointer (operand_12390) ;
                    GGS_string var_cas_fullPath ;
                    GGS_sourceFileKind var_cas_sourceKind ;
                    const GGS_sourceFileMap  temp_12490 = var_cas_sourceFileMap ;
                    if (temp_12490.isBuilt ()) {
                      temp_12490 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12390->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (285)) ;
                    }
                    GGS_string var_cas_filePath ;
                    var_cas_filePath = var_cas_fullPath.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) ;
                    if (((var_cas_sourceKind).operator_isEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
                      if (((var_cas_filePath.reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (288))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
                        var_cas_pathSet._addAssign_operation (((GGS_string ("SOURCES_DIR += ")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                      }else if (((var_cas_filePath).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                        var_cas_pathSet._addAssign_operation (((GGS_string ("SOURCES_DIR += ../hand_coded_sources/")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                      }
                      var_cas_externSourceFileList.appendCString ("SOURCES += ") ;
                      var_cas_externSourceFileList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (293))) ;
                      var_cas_externSourceFileList.appendCString ("\n") ;
                    }else{
                      var_cas_galgasSourceList.appendCString ("SOURCES += ") ;
                      var_cas_galgasSourceList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (295)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (295))) ;
                      var_cas_galgasSourceList.appendCString (".cpp\n") ;
                    }
                  }
                }
                GGS_string var_cas_pathesString ;
                var_cas_pathesString = GGS_string ("") ;
                {
                  GGS_stringset::cEnumerator enumerator_13257 (var_cas_pathSet, true) ;
                  while (enumerator_13257.hasCurrentObject ()) {
                    var_cas_pathesString.dotAssign_operation (enumerator_13257._key (HERE)) ;
                    enumerator_13257.next () ;
                  }
                }
                GGS_string var_cas_newFileListContents ;
                var_cas_newFileListContents = template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (inLexique, var_cas_pathesString, var_cas_galgasSourceList, var_cas_externSourceFileList) ;
                GGS_string var_cas_fileListPath ;
                var_cas_fileListPath = (var_cas_outputDirectoryTEMP).operator_concat (GGS_string ("/file_list.mke")) ;
                GGS_bool automatic_var_0 ;
                const GGS_string temp_13624 = var_cas_newFileListContents ;
                if (temp_13624.isBuilt ()) {
                  temp_13624 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_fileListPath, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (308)) ;
                }
              }
            }
            GGS_stringlist  var_cas_xcode_tool_files ;
            var_cas_xcode_tool_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_tool") COMMA_SOURCE_FILE_AT_LINE (312)) ;
            GGS_stringlist  var_cas_xcode_app_files ;
            var_cas_xcode_app_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_app") COMMA_SOURCE_FILE_AT_LINE (313)) ;
            if (((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
              GGS_string var_cas_XcodeProjectDir ;
              var_cas_XcodeProjectDir = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (315)).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (315))).operator_concat (GGS_string ("/project_xcode")) ;
              GGS_stringlist  var_cas_iconFiles ;
              var_cas_iconFiles = var_cas_XcodeProjectDir.reader_regularFilesWithExtensions (inLexique, GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("icns")) COMMA_SOURCE_FILE_AT_LINE (317)) ;
              GGS_stringlist  var_cas_xcodeProjects ;
              var_cas_xcodeProjects = var_cas_XcodeProjectDir.reader_directoriesWithExtensions (inLexique, GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("xcodeproj")) COMMA_SOURCE_FILE_AT_LINE (318)) ;
              if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (320))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
                inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, no project found in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (321)) ;
              }else if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (322))).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue ()) {
                inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, more than one project exist in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (323)) ;
              }else if (((var_cas_xcodeProjects.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (324))).operator_isEqual (GGS_uint (1U))).isBuiltAndTrue ()) {
                GGS_string var_cas_name ;
                const GGS_stringlist  temp_14769 = var_cas_xcodeProjects ;
                if (temp_14769.isBuilt ()) {
                  temp_14769 (HERE)->method_first (inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (325)) ;
                }
                GGS_string var_cas_fullXcodePath ;
                var_cas_fullXcodePath = (((var_cas_XcodeProjectDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_name)).operator_concat (GGS_string ("/project.pbxproj")) ;
                GGS_string var_cas_intermediateFilePath ;
                var_cas_intermediateFilePath = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (328))).operator_concat (GGS_string ("/DEPENDENCIES/file_list_for_xcode_project.txt")) ;
                GGS_stringset  var_cas_externSourceSet_tool ;
                var_cas_externSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_guiSourceSet_tool ;
                var_cas_guiSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_scannerSourceSet_tool ;
                var_cas_scannerSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_optionSourceSet_tool ;
                var_cas_optionSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_semanticsSourceSet_tool ;
                var_cas_semanticsSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_syntaxSourceSet_tool ;
                var_cas_syntaxSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_grammarSourceSet_tool ;
                var_cas_grammarSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_programSourceSet_tool ;
                var_cas_programSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                {
                  GGS_stringlist::cEnumerator enumerator_15528 (var_cas_xcode_tool_files, true) ;
                  const GGS_stringlist::cElement * operand_15528 = NULL ;
                  while (((operand_15528 = enumerator_15528.nextObject ()))) {
                    macroValidPointer (operand_15528) ;
                    GGS_string var_cas_fullPath ;
                    GGS_sourceFileKind var_cas_sourceKind ;
                    const GGS_sourceFileMap  temp_15628 = var_cas_sourceFileMap ;
                    if (temp_15628.isBuilt ()) {
                      temp_15628 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_15528->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (341)) ;
                    }
                    switch (var_cas_sourceKind.enumValue ()) {
                    case GGS_sourceFileKind::enum_externSourceFile:
                      {
                      var_cas_externSourceSet_tool._addAssign_operation (var_cas_fullPath) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_lexiqueSourceFile:
                      {
                      var_cas_scannerSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_guiSourceFile:
                      {
                      var_cas_guiSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_optionSourceFile:
                      {
                      var_cas_optionSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_syntaxSourceFile:
                      {
                      var_cas_syntaxSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_semanticsSourceFile:
                      {
                      var_cas_semanticsSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_grammarSourceFile:
                      {
                      var_cas_grammarSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_programSourceFile:
                      {
                      var_cas_programSourceSet_tool._addAssign_operation (operand_15528->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::kNotBuilt:
                      break ;
                    }
                  }
                }
                GGS_stringset  var_cas_externSourceSet_app ;
                var_cas_externSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_guiSourceSet_app ;
                var_cas_guiSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_scannerSourceSet_app ;
                var_cas_scannerSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_optionSourceSet_app ;
                var_cas_optionSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_semanticsSourceSet_app ;
                var_cas_semanticsSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_syntaxSourceSet_app ;
                var_cas_syntaxSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_grammarSourceSet_app ;
                var_cas_grammarSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                GGS_stringset  var_cas_programSourceSet_app ;
                var_cas_programSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                {
                  GGS_stringlist::cEnumerator enumerator_16800 (var_cas_xcode_app_files, true) ;
                  const GGS_stringlist::cElement * operand_16800 = NULL ;
                  while (((operand_16800 = enumerator_16800.nextObject ()))) {
                    macroValidPointer (operand_16800) ;
                    GGS_string var_cas_fullPath ;
                    GGS_sourceFileKind var_cas_sourceKind ;
                    const GGS_sourceFileMap  temp_16900 = var_cas_sourceFileMap ;
                    if (temp_16900.isBuilt ()) {
                      temp_16900 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_16800->mValue, GGS_location (inLexique) COMMA_HERE), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (372)) ;
                    }
                    switch (var_cas_sourceKind.enumValue ()) {
                    case GGS_sourceFileKind::enum_externSourceFile:
                      {
                      var_cas_externSourceSet_app._addAssign_operation (var_cas_fullPath) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_lexiqueSourceFile:
                      {
                      var_cas_scannerSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_guiSourceFile:
                      {
                      var_cas_guiSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_optionSourceFile:
                      {
                      var_cas_optionSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_syntaxSourceFile:
                      {
                      var_cas_syntaxSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_semanticsSourceFile:
                      {
                      var_cas_semanticsSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_grammarSourceFile:
                      {
                      var_cas_grammarSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::enum_programSourceFile:
                      {
                      var_cas_programSourceSet_app._addAssign_operation (operand_16800->mValue) ;
                      }
                      break ;
                    case GGS_sourceFileKind::kNotBuilt:
                      break ;
                    }
                  }
                }
                ::routine_generateXcodeProject (inLexique,  var_cas_externSourceSet_tool,  var_cas_guiSourceSet_tool,  var_cas_scannerSourceSet_tool,  var_cas_optionSourceSet_tool,  var_cas_semanticsSourceSet_tool,  var_cas_syntaxSourceSet_tool,  var_cas_grammarSourceSet_tool,  var_cas_programSourceSet_tool,  var_cas_externSourceSet_app,  var_cas_guiSourceSet_app,  var_cas_scannerSourceSet_app,  var_cas_optionSourceSet_app,  var_cas_semanticsSourceSet_app,  var_cas_syntaxSourceSet_app,  var_cas_grammarSourceSet_app,  var_cas_programSourceSet_app,  var_cas_name.reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (410)),  var_cas_fullXcodePath.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (411)),  var_cas_iconFiles,  var_cas_intermediateFilePath COMMA_SOURCE_FILE_AT_LINE (393)) ;
              }
            }
            if (verboseOptionOn) {
              co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
              switch (_commonLexique->totalErrorCount ()) {
              case 0 :
                co << "No error, " ;
                break ;
              case 1 :
                co << "1 error, " ;
                returnCode = 1 ; // Error code
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalErrorCount ()) << " errors, " ;
                returnCode = 1 ; // Error code
                break ;
              }
              switch (_commonLexique->totalWarningCount ()) {
              case 0 :
                co << "no warning" ;
                break ;
              case 1 :
                co << "1 warning" ;
                break ;
              default :
                co << cStringWithSigned (_commonLexique->totalWarningCount ()) << " warnings" ;
                break ;
              }
              if (verboseOptionOn || ((_commonLexique->totalErrorCount () + _commonLexique->totalWarningCount ()) > 0)) {
                co << ".\n" ;
              }
            }
          }else{
            printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
            r = 1 ;
          }
          if (r != 0) {
            returnCode = r ;
          }
        }catch (C_ScanOrParseOnlyException) { // Raised when scan only or parse only options are set
          // Do nothing: accept silently exception
        }
      }
    //--- Error or warnings ?
      if (_commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (_commonLexique->totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      mda_galgas_prgm_epilogue (* _commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroDetachPointer (galgasIOptr, C_galgas_io) ;
    macroDetachPointer (_commonLexique, C_Compiler) ;
  }
  C_PrologueEpilogueAction::runEpilogueActions () ;
  runAllReleaseRoutines () ;
  C_StringCommandLineOption::releaseStrings () ;
  C_String::freeUnusedRegisteredStrings () ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    C_GGS_Object::checkAllObjectsHaveBeenReleased () ;
  #endif
  if (verboseOptionOn) {
    #ifndef DO_NOT_GENERATE_CHECKINGS
      const PMUInt64 maxUsedMemorySize = getMaxUsedMemorySize () ;
      const PMUInt64 oneMegaByte = 1 << 20 ;
      const PMUInt64 megaBytes = maxUsedMemorySize / oneMegaByte ;
      const PMUInt64 fraction = ((maxUsedMemorySize % oneMegaByte) * 1000) / oneMegaByte ;
      co << cStringWithSigned (getCreatedDynamicObjectsTotalCount ())
         << " C++ objects have been created (" ;
      co.appendUnsigned64 (megaBytes) ;
      co << "." ;
      co.appendUnsignedWithZeroFill ((PMUInt32) fraction, 3) ;
      co << " MB).\n" ;
      deactivateMemoryControl () ;
      if ((getAllocationBalance () != 0) && (returnCode == 0)) {
        display_pointers () ;
      }
    #endif
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


