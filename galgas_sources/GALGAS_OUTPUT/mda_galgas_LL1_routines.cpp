//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'mda_galgas_LL1_routines.cpp'                     *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      august 30th, 2007, at 14h28'6"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "mda_galgas_LL1_routines.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "mda_galgas_LL1_routines.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "buildMapsForMetamodel.h"
#include "buildMapsForSemantics.h"
#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "guiLL1grammar.h"
#include "lexiqueLL1grammar.h"
#include "lexiqueTreewalkingForBuildingTerminalMap.h"
#include "metamodelLL1grammar.h"
#include "optionHeaderGeneration.h"
#include "optionImplementationGeneration.h"
#include "optionLL1grammar.h"
#include "optionTreewalkingForBuildingOptionMap.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "semanticsSLRgrammar.h"
#include "syntaxSLRgrammar.h"
#include "treewalkingSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "getOutputDirectory"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getOutputDirectory (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_string & var_cas_outOuputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getOutputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
  var_cas_outOuputDirectory.writeString ("/GALGAS_OUTPUT_TEMP") ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getOutputDirectory\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileOptionComponentLL1"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileOptionComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileOptionComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_optionComponentRoot  var_cas_optionComponentRoot ;
    var_cas_optionComponentRoot = optionLL1grammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_commandLineOptionMap  var_cas_boolOptionMap ;
  GGS_commandLineOptionMap  var_cas_uintOptionMap ;
  GGS_commandLineOptionMap  var_cas_stringOptionMap ;
  _walk_throught_optionTreewalkingForBuildingOptionMap (_inLexique, var_cas_optionComponentRoot, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) ;
  _walk_throught_optionHeaderGeneration (_inLexique, var_cas_optionComponentRoot, var_cas_inOutputDirectory, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) ;
  _walk_throught_optionImplementationGeneration (_inLexique, var_cas_optionComponentRoot, var_cas_inOutputDirectory, var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)), var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileOptionComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compileMetamodelComponentLL1"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileMetamodelComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileMetamodelComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_metamodelComponentName ;
  var_cas_metamodelComponentName = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
  GGS_metamodelComponentRoot  var_cas_metamodelComponentRoot ;
  GGS_location  var_cas_endOfSourceFile ;
    var_cas_metamodelComponentRoot = metamodelLL1grammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile,
                                  var_cas_endOfSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (110)) ;
  GGS_typeMap  var_cas_typeMap ;
  ::routine_constructBuiltinTypeMap (_inLexique,  var_cas_typeMap COMMA_SOURCE_FILE_AT_LINE (113)) ;
  GGS_stringset  var_cas_importedComponentSet ;
  var_cas_importedComponentSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeList  var_cas_typeList ;
  _walk_throught_buildMapsForMetamodel (_inLexique, var_cas_metamodelComponentRoot, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)), var_cas_endOfSourceFile, var_cas_importedComponentSet, var_cas_typeMap, var_cas_routineMap, var_cas_typeList) ;
  if (((var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_m ;
    var_cas_m = (var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (127)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (127)))._operator_concat (GGS_string (true, " type")) ;
    if (((var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)))._operator_isEqual (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
      var_cas_m = GGS_string (true, "1 type is not defined:") ;
    }else{
      var_cas_m = (var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)))._operator_concat (GGS_string (true, " types are not defined:")) ;
    }
    const GGS_stringlist _var_6450 = var_cas_typeMap.reader_unsolvedIndexKeyStringList (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
    const GGS_stringlist::element_type * operand_6450 = _var_6450.firstObject () ;
    while ((operand_6450 != NULL)) {
      macroValidPointer (operand_6450) ;
      var_cas_m.writeString ("\n  - @") ;
      var_cas_m._dotAssign_operation (operand_6450->mValue) ;
      operand_6450 = operand_6450->nextObject () ;
    }
    var_cas_endOfSourceFile.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
  const GGS_typeMap _var_6648 = var_cas_typeMap ;
  const GGS_typeMap::element_type * operand_6648 = _var_6648.firstObject () ;
  while ((operand_6648 != NULL)) {
    macroValidPointer (operand_6648) ;
    if (operand_6648->mInfo.mType._isBuilt ()) {
      operand_6648->mInfo.mType (HERE)->method_checkNoCircularity (_inLexique, var_cas_typeMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
    }
    operand_6648 = operand_6648->nextObject () ;
  }
  GGS_sortedTypeList  var_cas_sortedTypeList ;
  var_cas_sortedTypeList = GGS_sortedTypeList::constructor_emptySortedList (_inLexique COMMA_HERE) ;
  if (((GGS_uint::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    const GGS_typeList _var_6929 = var_cas_typeList ;
    const GGS_typeList::element_type * operand_6929 = _var_6929.firstObject () ;
    while ((operand_6929 != NULL)) {
      macroValidPointer (operand_6929) ;
      if (operand_6929->mType._isBuilt ()) {
        operand_6929->mType (HERE)->method_enterInSortedList (_inLexique, var_cas_sortedTypeList, var_cas_typeMap COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }
      operand_6929 = operand_6929->nextObject () ;
    }
  }
  if (((GGS_uint::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_generatedUserZone2 ;
    var_cas_generatedUserZone2 = GGS_string (true, "") ;
    var_cas_generatedUserZone2.writeString ("#ifndef ") ;
    var_cas_generatedUserZone2._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedUserZone2.writeString ("_METAMODEL_DEFINED\n"
    "#define ") ;
    var_cas_generatedUserZone2._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedUserZone2.writeString ("_METAMODEL_DEFINED\n"
    "\n"
    "#include <string.h>\n"
    "\n") ;
    var_cas_generatedUserZone2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedUserZone2.writeString ("#include \"galgas/predefined_types.h\"\n") ;
    const GGS_stringset _var_7485 = var_cas_importedComponentSet ;
    const GGS_stringset::element_type * operand_7485 = _var_7485.firstObject () ;
    while ((operand_7485 != NULL)) {
      macroValidPointer (operand_7485) ;
      var_cas_generatedUserZone2.writeString ("#include \"") ;
      var_cas_generatedUserZone2._dotAssign_operation (operand_7485->mKey) ;
      var_cas_generatedUserZone2.writeString (".h\"\n") ;
      operand_7485 = operand_7485->nextObject () ;
    }
    var_cas_generatedUserZone2.writeString ("\n") ;
    GGS_string var_cas_generatedUserZone3 ;
    var_cas_generatedUserZone3 = GGS_string (true, "") ;
    var_cas_generatedUserZone3.modifier_setCapacity (_inLexique, GGS_uint (true, 50000U) COMMA_SOURCE_FILE_AT_LINE (167)) ;
    var_cas_generatedUserZone3._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedUserZone3.writeString ("sint32 _metamodel_index_for_") ;
    var_cas_generatedUserZone3._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedUserZone3.writeString (" (void) ;\n\n") ;
    var_cas_generatedUserZone3._dotAssign_operation (GGS_string::constructor_CppTitleComment (_inLexique, GGS_string (true, "Class Predeclarations") COMMA_HERE)) ;
    const GGS_sortedTypeList _var_7974 = var_cas_sortedTypeList ;
    const GGS_sortedTypeList::element_type * operand_7974 = _var_7974.firstObject () ;
    while ((operand_7974 != NULL)) {
      macroValidPointer (operand_7974) ;
      if (operand_7974->mType._isBuilt ()) {
        operand_7974->mType (HERE)->method_generatePredeclarationInHeader (_inLexique, var_cas_generatedUserZone3 COMMA_SOURCE_FILE_AT_LINE (173)) ;
      }
      operand_7974 = operand_7974->nextObject () ;
    }
    var_cas_generatedUserZone3.writeString ("\n") ;
    const GGS_sortedTypeList _var_8164 = var_cas_sortedTypeList ;
    const GGS_sortedTypeList::element_type * operand_8164 = _var_8164.firstObject () ;
    while ((operand_8164 != NULL)) {
      macroValidPointer (operand_8164) ;
      if (operand_8164->mType._isBuilt ()) {
        operand_8164->mType (HERE)->method_generateDeclaration_1_inHeader (_inLexique, var_cas_generatedUserZone3 COMMA_SOURCE_FILE_AT_LINE (177)) ;
      }
      operand_8164 = operand_8164->nextObject () ;
    }
    const GGS_sortedTypeList _var_8321 = var_cas_sortedTypeList ;
    const GGS_sortedTypeList::element_type * operand_8321 = _var_8321.firstObject () ;
    while ((operand_8321 != NULL)) {
      macroValidPointer (operand_8321) ;
      if (operand_8321->mType._isBuilt ()) {
        operand_8321->mType (HERE)->method_generateDeclaration_2_inHeader (_inLexique, var_cas_generatedUserZone3 COMMA_SOURCE_FILE_AT_LINE (180)) ;
      }
      operand_8321 = operand_8321->nextObject () ;
    }
    var_cas_generatedUserZone3._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedUserZone3.writeString ("#endif\n") ;
    GGS_string::class_method_generateFile (_inLexique, var_cas_inOutputDirectory, (var_cas_metamodelComponentName)._operator_concat (GGS_string (true, ".h")), GGS_string (true, "//"), GGS_string (true, "\n\n"), var_cas_generatedUserZone2, GGS_string (true, "\n\n"), var_cas_generatedUserZone3 COMMA_SOURCE_FILE_AT_LINE (185)) ;
  }
  if (((GGS_uint::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_generatedCode2 ;
    var_cas_generatedCode2 = GGS_string (true, "") ;
    var_cas_generatedCode2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedCode2.writeString ("#include \"version_libpm.h\"\n"
    "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
    "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
    "#endif\n\n"
    "#include \"") ;
    var_cas_generatedCode2._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedCode2.writeString (".h\"\n"
    "#include \"utilities/MF_MemoryControl.h\"\n\n") ;
    var_cas_generatedCode2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedCode2.writeString ("#include <typeinfo>\n\n") ;
    var_cas_generatedCode2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedCode2.writeString ("#ifndef DO_NOT_GENERATE_CHECKINGS\n"
    "  #define SOURCE_FILE_AT_LINE(line) \"") ;
    var_cas_generatedCode2._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedCode2.writeString (".gMetamodel\", line\n"
    "  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)\n"
    "#else\n"
    "  #define SOURCE_FILE_AT_LINE(line)\n"
    "  #define COMMA_SOURCE_FILE_AT_LINE(line)\n"
    "#endif\n\n") ;
    var_cas_generatedCode2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    GGS_string var_cas_generatedCode3 ;
    var_cas_generatedCode3 = GGS_string (true, "") ;
    var_cas_generatedCode3.modifier_setCapacity (_inLexique, GGS_uint (true, 500000U) COMMA_SOURCE_FILE_AT_LINE (220)) ;
    var_cas_generatedCode3._dotAssign_operation (GGS_string::constructor_CppTitleComment (_inLexique, GGS_string (true, "Metamodel Management") COMMA_HERE)) ;
    var_cas_generatedCode3.writeString ("static C_MetamodelManager gMetamodelManager (\"") ;
    var_cas_generatedCode3._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedCode3.writeString ("\", ") ;
    var_cas_generatedCode3._dotAssign_operation (var_cas_sortedTypeList.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (224))) ;
    var_cas_generatedCode3.writeString (") ;\n\n") ;
    var_cas_generatedCode3._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    var_cas_generatedCode3.writeString ("sint32 _metamodel_index_for_") ;
    var_cas_generatedCode3._dotAssign_operation (var_cas_metamodelComponentName) ;
    var_cas_generatedCode3.writeString (" (void) {\n"
    "  return gMetamodelManager.mMetamodelComponentIndex ;\n"
    "}\n\n") ;
    const GGS_sortedTypeList _var_10308 = var_cas_sortedTypeList ;
    const GGS_sortedTypeList::element_type * operand_10308 = _var_10308.firstObject () ;
    while ((operand_10308 != NULL)) {
      macroValidPointer (operand_10308) ;
      if (operand_10308->mType._isBuilt ()) {
        operand_10308->mType (HERE)->method_generateImplementation (_inLexique, var_cas_generatedCode3 COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }
      operand_10308 = operand_10308->nextObject () ;
    }
    var_cas_generatedCode3._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
    GGS_string::class_method_generateFile (_inLexique, var_cas_inOutputDirectory, (var_cas_metamodelComponentName)._operator_concat (GGS_string (true, ".cpp")), GGS_string (true, "//"), GGS_string (true, "\n\n"), var_cas_generatedCode2, GGS_string (true, "\n\n"), var_cas_generatedCode3 COMMA_SOURCE_FILE_AT_LINE (234)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileMetamodelComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileLexiqueComponentLL1"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileLexiqueComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileLexiqueComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexiqueComponentRoot  var_cas_lexiqueComponentRoot ;
    var_cas_lexiqueComponentRoot = lexiqueLL1grammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (253)) ;
  GGS_terminalMap  var_cas_terminalMap ;
  _walk_throught_lexiqueTreewalkingForBuildingTerminalMap (_inLexique, var_cas_lexiqueComponentRoot, var_cas_terminalMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileLexiqueComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compileSemanticsComponentLL1"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSemanticsComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSemanticsComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
  GGS_location  var_cas_endOfSourceFile ;
    var_cas_semanticsComponentRoot = semanticsSLRgrammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile,
                                  var_cas_endOfSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (270)) ;
  GGS_typeMap  var_cas_typeMap ;
  ::routine_constructBuiltinTypeMap (_inLexique,  var_cas_typeMap COMMA_SOURCE_FILE_AT_LINE (273)) ;
  GGS_stringset  var_cas_importedComponentSet ;
  var_cas_importedComponentSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_routineMap  var_cas_routineMap ;
  var_cas_routineMap = GGS_routineMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeList  var_cas_typeList ;
  _walk_throught_buildMapsForSemantics (_inLexique, var_cas_semanticsComponentRoot, var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)), var_cas_endOfSourceFile, var_cas_importedComponentSet, var_cas_typeMap, var_cas_routineMap, var_cas_typeList) ;
  if (((var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (286)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_m ;
    var_cas_m = (var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)))._operator_concat (GGS_string (true, " type")) ;
    if (((var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (288)))._operator_isEqual (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
      var_cas_m = GGS_string (true, "1 type is not defined:") ;
    }else{
      var_cas_m = (var_cas_typeMap.reader_unsolvedIndexCount (_inLexique COMMA_SOURCE_FILE_AT_LINE (291)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (291)))._operator_concat (GGS_string (true, " types are not defined:")) ;
    }
    const GGS_stringlist _var_12363 = var_cas_typeMap.reader_unsolvedIndexKeyStringList (_inLexique COMMA_SOURCE_FILE_AT_LINE (293)) ;
    const GGS_stringlist::element_type * operand_12363 = _var_12363.firstObject () ;
    while ((operand_12363 != NULL)) {
      macroValidPointer (operand_12363) ;
      var_cas_m.writeString ("\n  - @") ;
      var_cas_m._dotAssign_operation (operand_12363->mValue) ;
      operand_12363 = operand_12363->nextObject () ;
    }
    var_cas_endOfSourceFile.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (297)) ;
  }
  const GGS_typeMap _var_12561 = var_cas_typeMap ;
  const GGS_typeMap::element_type * operand_12561 = _var_12561.firstObject () ;
  while ((operand_12561 != NULL)) {
    macroValidPointer (operand_12561) ;
    if (operand_12561->mInfo.mType._isBuilt ()) {
      operand_12561->mInfo.mType (HERE)->method_checkNoCircularity (_inLexique, var_cas_typeMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300)) ;
    }
    operand_12561 = operand_12561->nextObject () ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSemanticsComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileSyntaxComponentLL1"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSyntaxComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSyntaxComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_syntaxComponentRoot  var_cas_syntaxComponentRoot ;
    var_cas_syntaxComponentRoot = syntaxSLRgrammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (311)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSyntaxComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileGrammarComponentLL1"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGrammarComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGrammarComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_grammarComponentRoot  var_cas_grammarComponentRoot ;
    var_cas_grammarComponentRoot = grammarLL1grammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (321)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGrammarComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileGuiComponentLL1"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileGuiComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileGuiComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_guiComponentRoot  var_cas_guiComponentRoot ;
    var_cas_guiComponentRoot = guiLL1grammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (331)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileGuiComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileProgramComponentLL1"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileProgramComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileProgramComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_programComponentRoot  var_cas_programComponentRoot ;
    var_cas_programComponentRoot = programSLRgrammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (341)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileProgramComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "compileTreewalkingComponentLL1"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileTreewalkingComponentLL1 (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileTreewalkingComponentLL1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_treewalkingComponentRoot  var_cas_treewalkingComponentRoot ;
    var_cas_treewalkingComponentRoot = treewalkingSLRgrammar::_performParsing (_inLexique,
                                  var_cas_inSourceFile
                                  COMMA_SOURCE_FILE_AT_LINE (351)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileTreewalkingComponentLL1\n") ;
  #endif
}

//---------------------------------------------------------------------------*

