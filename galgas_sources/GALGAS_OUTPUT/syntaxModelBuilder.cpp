//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'syntaxModelBuilder.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 10th, 2009, at 15h17'49"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "syntaxModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxModelBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'syntax_component_start_symbol'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_component_start_symbol_syntaxModelBuilder_63_36_ (galgas_scanner & inLexique,
                                GGS_syntaxComponentRoot  &var_cas_outSyntaxComponentRoot) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_mSyntaxComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSyntaxComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_syntaxModelBuilder_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_syntaxModelBuilder_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_nonterminalDeclarationList  var_cas_mNonterminalDeclarationList ;
  var_cas_mNonterminalDeclarationList = GGS_nonterminalDeclarationList ::constructor_emptyList () ;
  GGS_syntaxRuleList  var_cas_mRuleList ;
  var_cas_mRuleList = GGS_syntaxRuleList ::constructor_emptyList () ;
  GGS_semanticDeclarationStruct var_cas_mSemanticDeclarations ;
  var_cas_mSemanticDeclarations = GGS_semanticDeclarationStruct::constructor_new (GGS_semanticDeclarationList ::constructor_emptyList (), GGS_abstractCategoryMethodListMap::constructor_emptyMap (), GGS_categoryMethodListMap::constructor_emptyMap (), GGS_overridingCategoryMethodListMap::constructor_emptyMap ()) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_syntaxModelBuilder_2 (inLexique)) {
        case 2 : {
          nt_nonterminal_declaration_ (inLexique, var_cas_mNonterminalDeclarationList) ;
          } break ;
        case 3 : {
          nt_syntax_rule_declaration_ (inLexique, var_cas_mRuleList) ;
          } break ;
        case 4 : {
          nt_semantic_declaration_ (inLexique, var_cas_mSemanticDeclarations) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outSyntaxComponentRoot = GGS_syntaxComponentRoot ::constructor_new (inLexique, var_cas_mSyntaxComponentName, var_cas_mNonterminalDeclarationList, var_cas_mRuleList, var_cas_mSemanticDeclarations COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'nonterminal_label_declaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_nonterminal_label_declaration_syntaxModelBuilder_125_36_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inLabelName,
                                GGS_nonTerminalLabelList  &var_cas_ioNonTerminalLabelList) {
  GGS_formalParameterList  var_cas_mFormalParameters ;
  nt_formal_parameter_list_ (inLexique, var_cas_mFormalParameters) ;
  var_cas_ioNonTerminalLabelList._addAssign_operation (var_cas_inLabelName, var_cas_mFormalParameters) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'nonterminal_declaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_nonterminal_declaration_syntaxModelBuilder_136_30_ (galgas_scanner & inLexique,
                                GGS_nonterminalDeclarationList  &var_cas_ioNonterminalDeclarationList) {
  GGS_bool var_cas_mHasParseLabel ;
  var_cas_mHasParseLabel = GGS_bool (false) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_nonTerminalLabelList  var_cas_mLabels ;
  var_cas_mLabels = GGS_nonTerminalLabelList ::constructor_emptyList () ;
  nt_nonterminal_label_declaration_ (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_mLabels) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_syntaxModelBuilder_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          switch (select_syntaxModelBuilder_4 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_labelName ;
              inLexique.assignFromAttribute_tokenString (var_cas_labelName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_nonterminal_label_declaration_ (inLexique, var_cas_labelName, var_cas_mLabels) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
              if ((var_cas_mHasParseLabel).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'parse' id already defined for this nonterminal") COMMA_SOURCE_FILE_AT_LINE (153)) ;
              }
              var_cas_mHasParseLabel = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioNonterminalDeclarationList._addAssign_operation (var_cas_mNonterminalName, var_cas_mLabels, var_cas_mHasParseLabel) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_rule_label'            *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_rule_label_syntaxModelBuilder_178_24_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inLabelName,
                                GGS_syntaxRuleLabelList  &var_cas_ioLabelList) {
  GGS_formalParameterList  var_cas_mFormalParameters ;
  nt_formal_parameter_list_ (inLexique, var_cas_mFormalParameters) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_mSyntaxInstructionList ;
  nt_syntax_instruction_list_ (inLexique, var_cas_mSyntaxInstructionList) ;
  var_cas_ioLabelList._addAssign_operation (var_cas_inLabelName, var_cas_mFormalParameters, var_cas_mSyntaxInstructionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_rule_declaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_rule_declaration_syntaxModelBuilder_196_30_ (galgas_scanner & inLexique,
                                GGS_syntaxRuleList  &var_cas_ioRuleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_labelName ;
  var_cas_labelName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_syntaxRuleLabelList  var_cas_mLabelList ;
  var_cas_mLabelList = GGS_syntaxRuleLabelList ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_syntax_rule_label_ (inLexique, var_cas_labelName, var_cas_mLabelList) ;
      switch (select_repeat_syntaxModelBuilder_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_labelName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioRuleList._addAssign_operation (var_cas_mNonterminalName, var_cas_mLabelList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instruction_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_list_syntaxModelBuilder_222_30_ (galgas_scanner & inLexique,
                                GGS_syntaxInstructionList  &var_cas_outSyntaxInstructionList) {
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_syntaxModelBuilder_6 (inLexique)) {
        case 2 : {
          GGS_semanticInstruction  var_cas_instruction ;
          nt_semantic_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outSyntaxInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_syntaxInstruction  var_cas_instruction ;
          nt_syntax_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outSyntaxInstructionList._addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_242_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_mLabelName ;
  switch (select_syntaxModelBuilder_7 (inLexique)) {
    case 1 : {
      var_cas_mLabelName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      var_cas_mLabelName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.assignFromAttribute_tokenString (var_cas_mLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_actualParameterList  var_cas_mActualParameterList ;
  nt_actual_parameter_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_nonterminalCallInstruction ::constructor_new (inLexique, var_cas_mNonterminalName, var_cas_mLabelName, var_cas_mActualParameterList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_269_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mTerminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTerminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_actualInputParameterList  var_cas_mActualInputParameterList ;
  nt_actual_input_parameter_list_ (inLexique, var_cas_mActualInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_terminalCheckInstruction ::constructor_new (inLexique, var_cas_mTerminalName, var_cas_mActualInputParameterList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_286_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_mRepeatedInstructionList ;
  nt_syntax_instruction_list_ (inLexique, var_cas_mRepeatedInstructionList) ;
  GGS_listOfSyntaxInstructionList  var_cas_mRepeatBranchList ;
  var_cas_mRepeatBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
        GGS_syntaxInstructionList  var_cas_mInstructionList ;
        nt_syntax_instruction_list_ (inLexique, var_cas_mInstructionList) ;
        var_cas_mRepeatBranchList._addAssign_operation (var_cas_mInstructionList) ;
      switch (select_repeat_syntaxModelBuilder_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_repeatInstruction ::constructor_new (inLexique, var_cas_mRepeatedInstructionList, var_cas_mRepeatBranchList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_313_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_listOfSyntaxInstructionList  var_cas_mSelectBranchList ;
  var_cas_mSelectBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionList  var_cas_instructionList ;
  nt_syntax_instruction_list_ (inLexique, var_cas_instructionList) ;
  var_cas_mSelectBranchList._addAssign_operation (var_cas_instructionList) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
        nt_syntax_instruction_list_ (inLexique, var_cas_instructionList) ;
        var_cas_mSelectBranchList._addAssign_operation (var_cas_instructionList) ;
      switch (select_repeat_syntaxModelBuilder_9 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_selectInstruction ::constructor_new (inLexique, var_cas_mSelectBranchList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_339_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  GGS_listOfSyntaxInstructionList  var_cas_mParseDoBranchList ;
  var_cas_mParseDoBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionList  var_cas_instructionList ;
  nt_syntax_instruction_list_ (inLexique, var_cas_instructionList) ;
  var_cas_mParseDoBranchList._addAssign_operation (var_cas_instructionList) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
        nt_syntax_instruction_list_ (inLexique, var_cas_instructionList) ;
        var_cas_mParseDoBranchList._addAssign_operation (var_cas_instructionList) ;
      switch (select_repeat_syntaxModelBuilder_10 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_parseDoInstruction ::constructor_new (inLexique, var_cas_mParseDoBranchList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::
pr_syntax_instruction_syntaxModelBuilder_366_25_ (galgas_scanner & inLexique,
                                GGS_syntaxInstruction  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_lstring  var_cas_mReceiverVariable ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mBlockMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mBlockMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_actualParameterList  var_cas_mPrologActualParameterList ;
  nt_actual_parameter_list_ (inLexique, var_cas_mPrologActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_mInstructionList ;
  nt_syntax_instruction_list_ (inLexique, var_cas_mInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_actualParameterList  var_cas_mEpilogActualParameterList ;
  nt_actual_parameter_list_ (inLexique, var_cas_mEpilogActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_blockInstruction ::constructor_new (inLexique, var_cas_mReceiverVariable, var_cas_mBlockMethodName, var_cas_mPrologActualParameterList, var_cas_mInstructionList, var_cas_mEpilogActualParameterList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

