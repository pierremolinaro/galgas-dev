//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'syntaxModelBuilder.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 22th, 2010, at 20h51'33"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxModelBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'syntax_component_start_symbol'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_component_5F_start_5F_symbol_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxComponentAST &var_cas_outSyntaxComponentRoot) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_mSyntaxComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSyntaxComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
  GGS_lstring  var_cas_importedLexiqueReference ;
  inLexique.assignFromAttribute_tokenString (var_cas_importedLexiqueReference) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstringlist  var_cas_importedComponentPathList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_syntaxModelBuilder_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
          switch (select_syntaxModelBuilder_1 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_path ;
              inLexique.assignFromAttribute_tokenString (var_cas_path) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_importedComponentPathList.addAssign_operation (var_cas_path) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_semantics) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_nonterminalDeclarationListAST  var_cas_mNonterminalDeclarationList = GGS_nonterminalDeclarationListAST ::constructor_emptyList () ;
  GGS_syntaxRuleListAST  var_cas_mRuleList = GGS_syntaxRuleListAST ::constructor_emptyList () ;
  GGS_semanticDeclarationListAST  var_cas_mSemanticDeclarations = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_syntaxModelBuilder_2 (inLexique)) {
        case 2 : {
          nt_nonterminal_5F_declaration_ (inLexique, var_cas_mNonterminalDeclarationList) ;
          } break ;
        case 3 : {
          nt_syntax_5F_rule_5F_declaration_ (inLexique, var_cas_mRuleList) ;
          } break ;
        case 4 : {
          nt_semantic_5F_declaration_ (inLexique, var_cas_mSemanticDeclarations) ;
          } break ;
        case 5 : {
          nt_obsolete_5F_declaration_ (inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfSource = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outSyntaxComponentRoot = GGS_syntaxComponentAST::constructor_new (var_cas_mSyntaxComponentName, var_cas_importedLexiqueReference, var_cas_importedComponentPathList, var_cas_mNonterminalDeclarationList, var_cas_mRuleList, var_cas_mSemanticDeclarations, var_cas_endOfSource) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'nonterminal_label_declaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_nonterminal_5F_label_5F_declaration_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_lstring  var_cas_inLabelName,
                                GGS_nonTerminalLabelListAST  &var_cas_ioNonTerminalLabelList) {
  GGS_formalParameterListAST  var_cas_mFormalParameters ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameters) ;
  var_cas_ioNonTerminalLabelList.addAssign_operation (var_cas_inLabelName, var_cas_mFormalParameters, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'nonterminal_declaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_nonterminal_5F_declaration_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_nonterminalDeclarationListAST  &var_cas_ioNonterminalDeclarationList) {
  GGS_bool var_cas_mHasParseLabel = GGS_bool (false) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_nonTerminalLabelListAST  var_cas_mLabels = GGS_nonTerminalLabelListAST ::constructor_emptyList () ;
  nt_nonterminal_5F_label_5F_declaration_ (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (164)), var_cas_mLabels) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_syntaxModelBuilder_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_syntaxModelBuilder_4 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_labelName ;
              inLexique.assignFromAttribute_tokenString (var_cas_labelName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_nonterminal_5F_label_5F_declaration_ (inLexique, var_cas_labelName, var_cas_mLabels) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              const GGS_bool cond_6764 = var_cas_mHasParseLabel ;
              if (cond_6764.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'parse' id already defined for this nonterminal") COMMA_SOURCE_FILE_AT_LINE (176)) ;
              }
              var_cas_mHasParseLabel = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioNonterminalDeclarationList.addAssign_operation (var_cas_mNonterminalName, var_cas_mLabels, var_cas_mHasParseLabel) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_rule_label'            *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_rule_5F_label_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_lstring  var_cas_inLabelName,
                                GGS_syntaxRuleLabelListAST  &var_cas_ioLabelList) {
  GGS_formalParameterListAST  var_cas_mFormalParameters ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameters) ;
  const GGS_location  var_cas_endOfArguments = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_mSyntaxInstructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_mSyntaxInstructionList) ;
  var_cas_ioLabelList.addAssign_operation (var_cas_inLabelName, var_cas_mFormalParameters, var_cas_endOfArguments, var_cas_mSyntaxInstructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_rule_declaration'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_rule_5F_declaration_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxRuleListAST  &var_cas_ioRuleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_labelName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (225)) ;
  GGS_syntaxRuleLabelListAST  var_cas_mLabelList = GGS_syntaxRuleLabelListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_syntax_5F_rule_5F_label_ (inLexique, var_cas_labelName, var_cas_mLabelList) ;
      switch (select_syntaxModelBuilder_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_labelName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioRuleList.addAssign_operation (var_cas_mNonterminalName, var_cas_mLabelList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instruction_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_5F_list_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionList  &var_cas_outSyntaxInstructionList) {
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_syntaxModelBuilder_6 (inLexique)) {
        case 2 : {
          GGS_semanticInstructionAST  var_cas_instruction ;
          nt_semantic_5F_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outSyntaxInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        case 3 : {
          GGS_syntaxInstructionAST  var_cas_instruction ;
          nt_syntax_5F_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outSyntaxInstructionList.addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mNonterminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mNonterminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_mLabelName ;
  switch (select_syntaxModelBuilder_7 (inLexique)) {
    case 1 : {
      var_cas_mLabelName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (272)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
      var_cas_mLabelName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (275)) ;
      } break ;
    case 3 : {
      inLexique.assignFromAttribute_tokenString (var_cas_mLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_nonterminalCallInstruction ::constructor_new (inLexique, var_cas_mNonterminalName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (283)), var_cas_mNonterminalName, var_cas_mLabelName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (282)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mTerminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTerminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_actualInputParameterListAST  var_cas_mActualInputParameterList ;
  nt_actual_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_mActualInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_terminalCheckInstruction ::constructor_new (inLexique, var_cas_mTerminalName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (302)), var_cas_mTerminalName, var_cas_mActualInputParameterList COMMA_SOURCE_FILE_AT_LINE (301)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  GGS_location  var_cas_mRepeatInstructionLocation = GGS_location (inLexique) ;
  GGS_syntaxInstructionList  var_cas_mRepeatedInstructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_mRepeatedInstructionList) ;
  const GGS_location  var_cas_endOf_repeated_instructions = GGS_location (inLexique) ;
  GGS_listOfSyntaxInstructionList  var_cas_mRepeatBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
        GGS_syntaxInstructionList  var_cas_mInstructionList ;
        nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_mInstructionList) ;
        var_cas_mRepeatBranchList.addAssign_operation (var_cas_mInstructionList, GGS_location (inLexique)) ;
      switch (select_syntaxModelBuilder_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOf_repeat_instruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_repeatInstruction ::constructor_new (inLexique, var_cas_mRepeatInstructionLocation, var_cas_mRepeatedInstructionList, var_cas_endOf_repeated_instructions, var_cas_mRepeatBranchList, var_cas_endOf_repeat_instruction COMMA_SOURCE_FILE_AT_LINE (332)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  GGS_location  var_cas_mSelectInstructionLocation = GGS_location (inLexique) ;
  GGS_listOfSyntaxInstructionList  var_cas_mSelectBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionList  var_cas_instructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_instructionList) ;
  var_cas_mSelectBranchList.addAssign_operation (var_cas_instructionList, GGS_location (inLexique)) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
        nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_instructionList) ;
        var_cas_mSelectBranchList.addAssign_operation (var_cas_instructionList, GGS_location (inLexique)) ;
      switch (select_syntaxModelBuilder_9 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOf_select_instruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_selectInstruction ::constructor_new (inLexique, var_cas_mSelectInstructionLocation, var_cas_mSelectBranchList, var_cas_endOf_select_instruction COMMA_SOURCE_FILE_AT_LINE (364)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_listOfSyntaxInstructionList  var_cas_mParseDoBranchList = GGS_listOfSyntaxInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionList  var_cas_instructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_instructionList) ;
  var_cas_mParseDoBranchList.addAssign_operation (var_cas_instructionList, GGS_location (inLexique)) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
        nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_instructionList) ;
        var_cas_mParseDoBranchList.addAssign_operation (var_cas_instructionList, GGS_location (inLexique)) ;
      switch (select_syntaxModelBuilder_10 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfInstruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_parseRewindInstruction ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mParseDoBranchList, var_cas_endOfInstruction COMMA_SOURCE_FILE_AT_LINE (395)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'branchOfParseWhenInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_branchOfParseWhenInstruction_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionList  &var_cas_outElseInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_outElseInstructionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'branchOfParseWhenInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_branchOfParseWhenInstruction_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionList  &var_cas_outElseInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_whenExpression ;
  nt_expression_ (inLexique, var_cas_whenExpression) ;
  const GGS_location  var_cas_endOfWhenExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_whenInstructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_whenInstructionList) ;
  const GGS_location  var_cas_endOfWhenInstructions = GGS_location (inLexique) ;
  GGS_syntaxInstructionList  var_cas_elseInstructionList ;
  nt_branchOfParseWhenInstruction_ (inLexique, var_cas_elseInstructionList) ;
  const GGS_location  var_cas_endOfElseInstructions = GGS_location (inLexique) ;
  var_cas_outElseInstructionList = GGS_syntaxInstructionList ::constructor_emptyList () ;
  var_cas_outElseInstructionList.addAssign_operation (GGS_parseWhenInstruction ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_whenExpression, var_cas_endOfWhenExpression, var_cas_whenInstructionList, var_cas_endOfWhenInstructions, var_cas_elseInstructionList, var_cas_endOfElseInstructions COMMA_SOURCE_FILE_AT_LINE (434))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_whenExpression ;
  nt_expression_ (inLexique, var_cas_whenExpression) ;
  const GGS_location  var_cas_endOfWhenExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_whenInstructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_whenInstructionList) ;
  const GGS_location  var_cas_endOfWhenInstructions = GGS_location (inLexique) ;
  GGS_syntaxInstructionList  var_cas_elseInstructionList ;
  nt_branchOfParseWhenInstruction_ (inLexique, var_cas_elseInstructionList) ;
  const GGS_location  var_cas_endOfElseInstructions = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_parseWhenInstruction ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_whenExpression, var_cas_endOfWhenExpression, var_cas_whenInstructionList, var_cas_endOfWhenInstructions, var_cas_elseInstructionList, var_cas_endOfElseInstructions COMMA_SOURCE_FILE_AT_LINE (465)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_variantExpression ;
  nt_expression_ (inLexique, var_cas_variantExpression) ;
  const GGS_location  var_cas_endOfVariantExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_whileExpression ;
  nt_expression_ (inLexique, var_cas_whileExpression) ;
  const GGS_location  var_cas_endOfWhileExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_instructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_instructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfInstructionList = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_parseLoopInstruction ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_variantExpression, var_cas_endOfVariantExpression, var_cas_whileExpression, var_cas_endOfWhileExpression, var_cas_instructionList, var_cas_endOfInstructionList COMMA_SOURCE_FILE_AT_LINE (500)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void syntaxModelBuilder::rule_syntaxModelBuilder_syntax_5F_instruction_i15_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstring  var_cas_mReceiverVariable ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mBlockMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mBlockMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mPrologActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mPrologActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionList  var_cas_mInstructionList ;
  nt_syntax_5F_instruction_5F_list_ (inLexique, var_cas_mInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mEpilogActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mEpilogActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_blockInstruction ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverVariable, var_cas_mBlockMethodName, var_cas_mPrologActualParameterList, var_cas_mInstructionList, var_cas_mEpilogActualParameterList COMMA_SOURCE_FILE_AT_LINE (537)) ;
}

//---------------------------------------------------------------------------*

