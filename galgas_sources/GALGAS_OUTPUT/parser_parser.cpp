//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'parser_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 10th, 2009, at 17h22'11"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "parser_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parser_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_basename ;
  var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (278)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_tableTerminaux ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (inLexique, var_cas_tableTerminaux, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_string var_cas_defLexique ;
  var_cas_defLexique = var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_EXsemanticContext var_cas_semanticContext ;
  var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappers ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
  nt_import_headers_semantics_and_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_semanticContext) ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent ::constructor_emptyList () ;
  GGS_M_nonTerminalSymbolForSyntax  var_cas_nonTerminalSymbolsMapForSyntax ;
  var_cas_nonTerminalSymbolsMapForSyntax = GGS_M_nonTerminalSymbolForSyntax ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_ (inLexique, var_cas_defLexique, var_cas_nonTerminalSymbolsMapForSyntax, var_cas_entitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_componentName, var_cas_ioSemanticContext) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_ (inLexique, var_cas_entitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_13644 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_13644 = NULL ;
    while (((operand_13644 = enumerator_13644.nextObject ()))) {
      macroValidPointer (operand_13644) ;
      if (((var_cas_tableRoutinesAimplementer.reader_hasKey (inLexique, operand_13644->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366)) COMMA_SOURCE_FILE_AT_LINE (366))).operator_not ()).isBuiltAndTrue ()) {
        operand_13644->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the routine '")).operator_concat (operand_13644->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367)))).operator_concat (GGS_string ("' is not implemented within the component")) COMMA_SOURCE_FILE_AT_LINE (369)) ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (372)) ;
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (379)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_lexique_infos_parse (inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_lexique_infos_parse (inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_lexique_infos_parse (inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_lexique_infos_parse (inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_258_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_syntaxComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  switch (select_parser_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_lexiqueName ;
  GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse ;
  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  automatic_var_0 ;
  nt_get_lexique_infos_ (inLexique, automatic_var_0, var_cas_lexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_lexiqueMapForUse, var_cas_semanticsComponentsMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent ::constructor_emptyList () ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_parser_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_declaration_importSyntax (inLexique, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (inLexique, var_cas_syntaxComponentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (459)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'get_lexique_infos'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_576_24_ (galgas_scanner & inLexique,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_lstring  &var_cas_outLexiqueName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueComponentsMap ;
  switch (select_parser_parser_2 (inLexique)) {
    case 1 : {
      var_cas_lexiqueComponentsMap = var_cas_ioLexiqueMapForUse ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_fileName ;
      inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      var_cas_lexiqueComponentsMap = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_parse_lexique_for_importing_ (inLexique, var_cas_fileName, var_cas_lexiqueComponentsMap) ;
      } break ;
    default :
      break ;
  }
  const GGS_M_lexiqueComponents  temp_19668 = var_cas_lexiqueComponentsMap ;
  if (temp_19668.isBuilt ()) {
    temp_19668 (HERE)->method_searchKey (inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (600)) ;
  }
  if (((var_cas_ioLexiqueMapForUse.reader_hasKey (inLexique, var_cas_outLexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) COMMA_SOURCE_FILE_AT_LINE (602))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioLexiqueMapForUse.modifier_insertKey (inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (603)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_576_24_getLexiqueName (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outLexiqueName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_576_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_625_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_lstring  var_cas_nomTable ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomTable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableTable ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomTable, var_cas_typeEntite, var_cas_nomCppVariableTable COMMA_SOURCE_FILE_AT_LINE (645)) ;
  GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
  var_cas_tableMethodesBloc = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_typeEntite.getPtr (), true, var_cas_nomTable COMMA_SOURCE_FILE_AT_LINE (647)).reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (647)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomMethodeBloc ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethodeBloc) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureDebut ;
  GGS_L_EXsignature  var_cas_signatureFin ;
  const GGS_typeTableBlocsDeTable  temp_21515 = var_cas_tableMethodesBloc ;
  if (temp_21515.isBuilt ()) {
    temp_21515 (HERE)->method_searchKey (inLexique, var_cas_nomMethodeBloc, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (654)) ;
  }
  GGS_typeExpressionList  var_cas_prologueExpressionList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureDebut, var_cas_prologueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMapBlockPrologueInstruction ::constructor_new (inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_prologueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_typeExpressionList  var_cas_epilogueExpressionList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureFin, var_cas_epilogueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  GGS_AC_galgasType  automatic_var_1 ;
  GGS_typeCplusPlusName  automatic_var_2 ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomTable, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (706)) ;
  var_cas_instruction = GGS_typeMapBlockEpilogueInstruction ::constructor_new (inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_epilogueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_625_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_625_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_actual_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "implicitDeclaration"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_implicitDeclaration (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inNonterminalBaseName,
                                const GGS_uint   var_cas_inLevel,
                                const GGS_string  var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  & var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_nonTerminalSymbolsForGrammar  & var_cas_ioNonTerminalSymbolsMap,
                                GGS_typeEntitiesToGenerateList  & var_cas_listeEntitesAengendrer,
                                GGS_L_productionRules_ForGrammarComponent  & var_cas_ioProductionRulesListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_implicitDeclaration at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMapNoArgument ;
  var_cas_parametersMapNoArgument = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammarNoArgument ;
  var_cas_parametersMapForGrammarNoArgument = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_parametersMapNoArgument.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_L_EXsignature ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (749)) ;
  var_cas_parametersMapForGrammarNoArgument.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_L_signature ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (750)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMapOneArgument ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammarOneArgument ;
  var_cas_parametersMapOneArgument = var_cas_parametersMapNoArgument ;
  var_cas_parametersMapForGrammarOneArgument = var_cas_parametersMapForGrammarNoArgument ;
  GGS_lstring  var_cas_actualRuleName ;
  var_cas_actualRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (761))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (761))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_parametersMapForGrammarNoArgument COMMA_SOURCE_FILE_AT_LINE (762)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_parametersMapNoArgument COMMA_SOURCE_FILE_AT_LINE (763)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_actualRuleName, var_cas_parametersMapNoArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualPrefixName ;
  var_cas_actualPrefixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (767))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (767))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (767)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualPrefixName, var_cas_parametersMapForGrammarNoArgument COMMA_SOURCE_FILE_AT_LINE (768)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_actualPrefixName, var_cas_parametersMapNoArgument COMMA_SOURCE_FILE_AT_LINE (769)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_actualPrefixName, var_cas_parametersMapNoArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualInfixName ;
  var_cas_actualInfixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (773))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (773))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (773)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualInfixName, var_cas_parametersMapForGrammarOneArgument COMMA_SOURCE_FILE_AT_LINE (774)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_actualInfixName, var_cas_parametersMapOneArgument COMMA_SOURCE_FILE_AT_LINE (775)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_actualInfixName, var_cas_parametersMapOneArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualPostfixName ;
  var_cas_actualPostfixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (779))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (779))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (779)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualPostfixName, var_cas_parametersMapForGrammarOneArgument COMMA_SOURCE_FILE_AT_LINE (780)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_actualPostfixName, var_cas_parametersMapOneArgument COMMA_SOURCE_FILE_AT_LINE (781)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_actualPostfixName, var_cas_parametersMapOneArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_actualPrefixName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  GGS_typeExpressionList  var_cas_effectiveArguments ;
  var_cas_effectiveArguments = GGS_typeExpressionList ::constructor_emptyList () ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_actualInfixName, var_cas_effectiveArguments, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  var_cas_effectiveArguments = GGS_typeExpressionList ::constructor_emptyList () ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_actualPostfixName, var_cas_effectiveArguments, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList (), var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (811)) ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_actualRuleName, var_cas_altProductionsMap, GGS_string (""), var_cas_inLexiqueClassName, GGS_bool (false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualRuleName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  GGS_lstring  var_cas_nextRuleName ;
  var_cas_nextRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (837))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_inLevel.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (837)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (837))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (837)) COMMA_HERE) ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_nextRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
  var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList (), var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (845)) ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_actualPrefixName, var_cas_altProductionsMap, GGS_string (""), var_cas_inLexiqueClassName, GGS_bool (false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualPrefixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (872)) ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_actualInfixName, var_cas_altProductionsMap, GGS_string (""), var_cas_inLexiqueClassName, GGS_bool (false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualInfixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (897)) ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_actualPostfixName, var_cas_altProductionsMap, GGS_string (""), var_cas_inLexiqueClassName, GGS_bool (false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualPostfixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_implicitDeclaration\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "implicitDeclarationImportSyntax"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_implicitDeclarationImportSyntax (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inNonterminalBaseName,
                                const GGS_uint   var_cas_inLevel,
                                GGS_M_nonTerminalSymbolsForGrammar  & var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  & var_cas_ioProductionRulesListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_implicitDeclarationImportSyntax at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMapNoParameter ;
  var_cas_nonterminalSymbolParametersMapNoParameter = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_nonterminalSymbolParametersMapNoParameter.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_L_signature ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (930)) ;
  GGS_lstring  var_cas_actualRuleName ;
  var_cas_actualRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (935))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (935))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (935)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (936)) ;
  GGS_lstring  var_cas_actualPrefixName ;
  var_cas_actualPrefixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (938)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualPrefixName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (939)) ;
  GGS_lstring  var_cas_actualInfixName ;
  var_cas_actualInfixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (941)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualInfixName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (942)) ;
  GGS_lstring  var_cas_actualPostfixName ;
  var_cas_actualPostfixName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (944))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_inLevel.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (944))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (944)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualPostfixName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (945)) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_actualPrefixName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (949)), var_cas_actualPrefixName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_actualInfixName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (956)), var_cas_actualInfixName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_actualPostfixName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (963)), var_cas_actualPostfixName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualRuleName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  GGS_lstring  var_cas_nextRuleName ;
  var_cas_nextRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_inNonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (976))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_inLevel.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (976)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (976))), var_cas_inNonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (976)) COMMA_HERE) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_nextRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (978)), var_cas_nextRuleName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualPrefixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualInfixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_actualPostfixName, GGS_uint (0U), var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_implicitDeclarationImportSyntax\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1008_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  GGS_lstring  var_cas_operatorAttributes ;
  inLexique.assignFromAttribute_tokenString (var_cas_operatorAttributes) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalBaseName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalBaseName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_luint  var_cas_operatorPriority ;
  inLexique.assignFromAttribute_uint32value (var_cas_operatorPriority) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionVerifSyntaxique ::constructor_new (inLexique, var_cas_terminalSymbolName, GGS_L_assignedVariables ::constructor_emptyList (), var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  GGS_lstring  var_cas_leftNonTerminalName ;
  if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1043))).operator_isEqual (GGS_string ("multiple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1049))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1049)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1049))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_calledRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1058))).operator_isEqual (GGS_string ("simple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1060))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1060))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1064))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1064)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1064))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_calledRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))).operator_isEqual (GGS_string ("infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1075))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1075))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1079))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1079)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1079)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1079))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1080)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_calledRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1088))).operator_isEqual (GGS_string ("right infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1094))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1094))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_calledRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1103))).operator_isEqual (GGS_string ("left infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1106)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1109)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1109)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1110)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_calledRuleName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
    GGS_typeExpressionList  var_cas_effectiveArguments ;
    var_cas_effectiveArguments = GGS_typeExpressionList ::constructor_emptyList () ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_leftNonTerminalName, var_cas_effectiveArguments, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1125))).operator_isEqual (GGS_string ("simple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1127))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1127)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1127))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1128)) COMMA_HERE) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1130))).operator_isEqual (GGS_string ("multiple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1132)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_leftNonTerminalName, GGS_typeExpressionList ::constructor_emptyList (), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
  }else{
    var_cas_operatorAttributes.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\".") COMMA_SOURCE_FILE_AT_LINE (1152)) ;
    var_cas_leftNonTerminalName.drop () ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1156)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_leftNonTerminalName, var_cas_altProductionsMap, GGS_string (""), var_cas_inLexiqueClassName, GGS_bool (false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_leftNonTerminalName, GGS_uint (0U), var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1008_25_importSyntax (galgas_scanner & inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  GGS_lstring  var_cas_operatorAttributes ;
  inLexique.assignFromAttribute_tokenString (var_cas_operatorAttributes) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalBaseName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalBaseName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_luint  var_cas_operatorPriority ;
  inLexique.assignFromAttribute_uint32value (var_cas_operatorPriority) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_terminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_terminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), var_cas_terminalSymbolName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  GGS_lstring  var_cas_leftNonTerminalName ;
  if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1203))).operator_isEqual (GGS_string ("multiple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1205))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1205))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1209))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1209))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_calledRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)), var_cas_calledRuleName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1218))).operator_isEqual (GGS_string ("simple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1220))).operator_concat (GGS_string ("__prefix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1220))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1221)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1224))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1224)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1224))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_calledRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)), var_cas_calledRuleName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1233))).operator_isEqual (GGS_string ("infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1235))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1235))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1239))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1239)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1239)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1239))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1240)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_calledRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)), var_cas_calledRuleName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248))).operator_isEqual (GGS_string ("right infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1250))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1250)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1250))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1251)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1254))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1254))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1255)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_calledRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1258)), var_cas_calledRuleName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1263))).operator_isEqual (GGS_string ("left infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))).operator_concat (GGS_string ("__infix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1265)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1266)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1269)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_calledRuleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)), var_cas_calledRuleName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_leftNonTerminalName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)), var_cas_leftNonTerminalName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1284))).operator_isEqual (GGS_string ("simple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)) COMMA_HERE) ;
  }else if (((var_cas_operatorAttributes.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1289))).operator_isEqual (GGS_string ("multiple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalBaseName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1291))).operator_concat (GGS_string ("__postfix__"))).operator_concat (var_cas_operatorPriority.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1291))), var_cas_nonterminalBaseName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1292)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_leftNonTerminalName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)), var_cas_leftNonTerminalName, GGS_uint (0U) COMMA_HERE) ;
    var_cas_syntaxSignature.addAssign_operation (var_cas_instruction) ;
  }else{
    var_cas_operatorAttributes.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\".") COMMA_SOURCE_FILE_AT_LINE (1311)) ;
    var_cas_leftNonTerminalName.drop () ;
  }
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_leftNonTerminalName, GGS_uint (0U), var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1008_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1323_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  inLexique.assignFromAttribute_tokenString (var_cas_ruleName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (inLexique)) {
    case 1 : {
      GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
      var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
      var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
      GGS_luint  var_cas_levelCount ;
      inLexique.assignFromAttribute_uint32value (var_cas_levelCount) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
      if (((var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1344))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_levelCount.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the level count should be > 0") COMMA_SOURCE_FILE_AT_LINE (1346)) ;
      }
      GGS_uint  var_cas_i ;
      var_cas_i = GGS_uint (1U) ;
      GGS_uint _variant_48237 = var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)) ;
      GGS_bool _condition_48237 (_variant_48237.isBuilt (), true) ;
      while (_condition_48237.isBuiltAndTrue ()) {
        ::routine_implicitDeclaration (inLexique,  var_cas_ruleName,  var_cas_i,  var_cas_inLexiqueClassName,  var_cas_ioNonTerminalSymbolMapForSyntax,  var_cas_ioNonTerminalSymbolsMap,  var_cas_listeEntitesAengendrer,  var_cas_ioProductionRulesListForGrammar COMMA_SOURCE_FILE_AT_LINE (1349)) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) ;
        _condition_48237 = (var_cas_i).operator_infOrEqual (var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1359))) ;
        if (_condition_48237.isBuiltAndTrue ()) {
          if (_variant_48237.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1360)) ;
            _condition_48237 = GGS_bool (false) ;
          }else{
            _variant_48237.decrement_operation (inLexique COMMA_HERE) ;
          }
        }
      }
      GGS_L_signature  var_cas_signatureForGrammar ;
      var_cas_signatureForGrammar = GGS_L_signature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
      var_cas_listeDeTypesFormels = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
      var_cas_parametersMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
      var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_emptyId ;
      var_cas_emptyId = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels COMMA_SOURCE_FILE_AT_LINE (1367)) ;
      var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_signatureForGrammar COMMA_SOURCE_FILE_AT_LINE (1368)) ;
      GGS_lstring  var_cas_actualRuleName ;
      var_cas_actualRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_ruleName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1373))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1373)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1373))), var_cas_ruleName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1374)) COMMA_HERE) ;
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (1376)) ;
      var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (1377)) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_actualRuleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      } break ;
    case 2 : {
      GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
      GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
      var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
      GGS_L_signature  var_cas_signatureForGrammar ;
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
      var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
      var_cas_parametersMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_formal_arguments_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
      GGS_lstring  var_cas_emptyId ;
      var_cas_emptyId = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels COMMA_SOURCE_FILE_AT_LINE (1396)) ;
      var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_signatureForGrammar COMMA_SOURCE_FILE_AT_LINE (1397)) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
          switch (select_repeat_parser_parser_4 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_5 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
                  var_cas_listeDeTypesFormels = GGS_L_EXsignature ::constructor_emptyList () ;
                  GGS_L_signature  var_cas_signatureForGrammarComponent ;
                  var_cas_signatureForGrammarComponent = GGS_L_signature ::constructor_emptyList () ;
                  GGS_lstring  var_cas_altName ;
                  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_HERE) ;
                  var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeDeTypesFormels COMMA_SOURCE_FILE_AT_LINE (1409)) ;
                  var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_altName, var_cas_signatureForGrammarComponent COMMA_SOURCE_FILE_AT_LINE (1410)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_altName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
                  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
                  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
                  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
                  GGS_L_signature  var_cas_signatureForGrammarComponent ;
                  nt_formal_arguments_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
                  var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeDeTypesFormels COMMA_SOURCE_FILE_AT_LINE (1429)) ;
                  var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_altName, var_cas_signatureForGrammarComponent COMMA_SOURCE_FILE_AT_LINE (1430)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_ruleName, var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (1436)) ;
      var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_ruleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (1437)) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_ruleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1323_25_importSyntax (galgas_scanner & inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (inLexique)) {
    case 1 : {
      GGS_luint  var_cas_levelCount ;
      inLexique.assignFromAttribute_uint32value (var_cas_levelCount) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
      GGS_uint  var_cas_i ;
      var_cas_i = GGS_uint (1U) ;
      GGS_uint _variant_52055 = var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)) ;
      GGS_bool _condition_52055 (_variant_52055.isBuilt (), true) ;
      while (_condition_52055.isBuiltAndTrue ()) {
        ::routine_implicitDeclarationImportSyntax (inLexique,  var_cas_nonterminalSymbolName,  var_cas_i,  var_cas_ioNonTerminalSymbolsMap,  var_cas_ioProductionRulesListForGrammar COMMA_SOURCE_FILE_AT_LINE (1454)) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)) ;
        _condition_52055 = (var_cas_i).operator_infOrEqual (var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1461))) ;
        if (_condition_52055.isBuiltAndTrue ()) {
          if (_variant_52055.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1462)) ;
            _condition_52055 = GGS_bool (false) ;
          }else{
            _variant_52055.decrement_operation (inLexique COMMA_HERE) ;
          }
        }
      }
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
      var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
      var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_L_signature ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      GGS_lstring  var_cas_actualRuleName ;
      var_cas_actualRuleName = GGS_lstring ::constructor_new (inLexique, ((var_cas_nonterminalSymbolName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1470))).operator_concat (GGS_string ("__"))).operator_concat (var_cas_levelCount.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1470)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1470))), var_cas_nonterminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1471)) COMMA_HERE) ;
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_actualRuleName, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (1473)) ;
      } break ;
    case 2 : {
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
      var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_L_signature  var_cas_signature ;
      nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
      GGS_lstring  var_cas_altName ;
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (1479)) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
          switch (select_repeat_parser_parser_4 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_5 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  GGS_L_signature  var_cas_signature ;
                  var_cas_signature = GGS_L_signature ::constructor_emptyList () ;
                  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_HERE), var_cas_signature COMMA_SOURCE_FILE_AT_LINE (1489)) ;
                  } break ;
                case 2 : {
                  inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_L_signature  var_cas_signature ;
                  nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
                  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (1497)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1323_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_formal_arguments_list_parse (inLexique) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
          switch (select_repeat_parser_parser_4 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_5 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  nt_formal_arguments_list_parse (inLexique) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1512_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  inLexique.assignFromAttribute_tokenString (var_cas_ruleName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammar ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  const GGS_M_nonTerminalSymbolForSyntax  temp_54967 = var_cas_ioNonTerminalSymbolMapForSyntax ;
  if (temp_54967.isBuilt ()) {
    temp_54967 (HERE)->method_searchKey (inLexique, var_cas_ruleName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (1542)) ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_bool var_cas_hasParseLabel ;
  var_cas_hasParseLabel = var_cas_nonterminalSymbolAltMap.reader_hasKey (inLexique, GGS_string ("parse") COMMA_SOURCE_FILE_AT_LINE (1547)) ;
  GGS_bool var_cas_checkNonTerminalsAreDeclaredWithParseLabel ;
  var_cas_checkNonTerminalsAreDeclaredWithParseLabel = var_cas_hasParseLabel ;
  GGS_string var_cas_productionTagName ;
  switch (select_parser_parser_6 (inLexique)) {
    case 1 : {
      var_cas_productionTagName = GGS_string ("") ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      GGS_lstring  var_cas_tagName ;
      inLexique.assignFromAttribute_tokenString (var_cas_tagName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      var_cas_productionTagName = var_cas_tagName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1557)) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_firstBranchErrorLocation ;
  var_cas_firstBranchErrorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signaturePremiereBrancheFournieParPrototype ;
  const GGS_M_nonterminalSymbolAlts  temp_55861 = var_cas_nonterminalSymbolAltMap ;
  if (temp_55861.isBuilt ()) {
    temp_55861 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signaturePremiereBrancheFournieParPrototype COMMA_SOURCE_FILE_AT_LINE (1563)) ;
  }
  ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_signaturePremiereBrancheFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_firstBranchErrorLocation COMMA_SOURCE_FILE_AT_LINE (1567)) ;
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  nt_syntax_instructions_list_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_checkNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature, GGS_bool (false), var_cas_ioSemanticContext) ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1590)) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_repeat_parser_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
          const GGS_M_nonterminalSymbolAlts  temp_57314 = var_cas_nonterminalSymbolAltMap ;
          if (temp_57314.isBuilt ()) {
            temp_57314 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signatureFournieParPrototype COMMA_SOURCE_FILE_AT_LINE (1614)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (1615)) ;
          GGS_typeInstructionList  var_cas_branchInstructionList ;
          var_cas_branchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
          GGS_L_ruleSyntaxSignature  var_cas_branchSyntaxSignature ;
          var_cas_branchSyntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
          nt_syntax_instructions_list_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, GGS_bool (false), var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_branchInstructionList, var_cas_tableTerminaux, var_cas_branchSyntaxSignature, GGS_bool (false), var_cas_ioSemanticContext) ;
          var_cas_altProductionsMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_branchInstructionList, var_cas_branchSyntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1636)) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  if (var_cas_altProductionsMap.isBuilt ()) {
    ::routine_checkLabelSignatures (inLexique,  var_cas_altProductionsMap COMMA_SOURCE_FILE_AT_LINE (1648)) ;
  }
  {
    GGS_M_nonterminalSymbolAlts::cEnumerator enumerator_58393 (var_cas_nonterminalSymbolAltMap, true) ;
    const GGS_M_nonterminalSymbolAlts::cElement * operand_58393 = NULL ;
    while (((operand_58393 = enumerator_58393.nextObject ()))) {
      macroValidPointer (operand_58393) ;
      if ((((operand_58393->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1651))).operator_isNotEqual (GGS_string ("parse"))).operator_and ((var_cas_altProductionsMap.reader_hasKey (inLexique, operand_58393->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1651)) COMMA_SOURCE_FILE_AT_LINE (1651))).operator_not ())).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_58393->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1652)))).operator_concat (GGS_string ("' label is not implemented within the rule")) COMMA_SOURCE_FILE_AT_LINE (1653)) ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_ruleName, var_cas_altProductionsMap, var_cas_productionTagName, var_cas_inLexiqueClassName, var_cas_hasParseLabel COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_uint  var_cas_ruleIndex ;
  var_cas_ruleIndex = GGS_uint (0U) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_ruleName, var_cas_ruleIndex, var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1512_25_importSyntax (galgas_scanner & inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
  switch (select_parser_parser_6 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_instructionsList ;
  var_cas_instructionsList = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  nt_syntax_instructions_list_importSyntax (inLexique, var_cas_instructionsList) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_repeat_parser_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_leftNonterminalSymbolIndex ;
  var_cas_leftNonterminalSymbolIndex = GGS_uint (0U) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_nonterminalSymbolName, var_cas_leftNonterminalSymbolIndex, var_cas_instructionsList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1512_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  switch (select_parser_parser_6 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_syntax_instructions_list_parse (inLexique) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_repeat_parser_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1711_31_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (inLexique COMMA_SOURCE_FILE_AT_LINE (1725)) ;
  nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  GGS_location  var_cas_positionErreur ;
  var_cas_positionErreur = GGS_location (inLexique) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (inLexique, var_cas_positionErreur COMMA_SOURCE_FILE_AT_LINE (1725)) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1711_31_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1711_31_parse (galgas_scanner & inLexique) {
  nt_syntax_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1752_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_bool /* var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool /* var_cas_inIsInvokedWithinParseLoopInstruction */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeDesAttributsFormels ;
  const GGS_M_terminalSymbolsMapForUse  temp_62534 = var_cas_tableTerminaux ;
  if (temp_62534.isBuilt ()) {
    temp_62534 (HERE)->method_searchKey (inLexique, var_cas_terminalSymbolName, var_cas_listeDesAttributsFormels COMMA_SOURCE_FILE_AT_LINE (1768)) ;
  }
  GGS_L_assignedVariables  var_cas_listeTypeEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  nt_input_parameters_list_ (inLexique, var_cas_inEntitiesMap, var_cas_listeTypeEffectifs, var_cas_allVariablesList, var_cas_listeDesAttributsFormels, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionVerifSyntaxique ::constructor_new (inLexique, var_cas_terminalSymbolName, var_cas_listeTypeEffectifs, var_cas_inLexiqueClassName COMMA_HERE)) ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (0U) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_terminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1785)), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1752_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_terminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_terminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)), var_cas_terminalSymbolName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1752_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1807_25_ (galgas_scanner & inLexique,
                                const GGS_string /* var_cas_inLexiqueClassName */,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_parser_parser_8 (inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  const GGS_M_nonTerminalSymbolForSyntax  temp_64848 = var_cas_ioNonTerminalSymbolMapForSyntax ;
  if (temp_64848.isBuilt ()) {
    temp_64848 (HERE)->method_searchKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (1833)) ;
  }
  GGS_L_EXsignature  var_cas_signatureMethode ;
  const GGS_M_nonterminalSymbolAlts  temp_64972 = var_cas_nonterminalSymbolAltMap ;
  if (temp_64972.isBuilt ()) {
    temp_64972 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signatureMethode COMMA_SOURCE_FILE_AT_LINE (1835)) ;
  }
  if (((var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel).operator_and ((var_cas_altName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1837))).operator_isNotEqual (GGS_string ("parse")))).isBuiltAndTrue ()) {
    if (((var_cas_nonterminalSymbolAltMap.reader_hasKey (inLexique, GGS_string ("parse") COMMA_SOURCE_FILE_AT_LINE (1838))).operator_not ()).isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
    }
  }
  if (((var_cas_inIsInvokedWithinParseLoopInstruction).operator_and ((var_cas_altName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1842))).operator_isNotEqual (GGS_string ("parse")))).isBuiltAndTrue ()) {
    if (((var_cas_nonterminalSymbolAltMap.reader_hasKey (inLexique, GGS_string ("parse") COMMA_SOURCE_FILE_AT_LINE (1843))).operator_not ()).isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("As this nonterminal is invoked within a 'parse loop ...' instruction, it must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (1845)) ;
    }
  }
  GGS_typeExpressionList  var_cas_parametersExpressionList ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureMethode, var_cas_parametersExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_nonterminalSymbolName, var_cas_parametersExpressionList, var_cas_altName COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_nonterminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1867)), var_cas_nonterminalSymbolName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1807_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_parser_8 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_nonterminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)), var_cas_nonterminalSymbolName, GGS_uint (0U) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1807_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_parser_8 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1898_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesChoix ;
  var_cas_listeBranchesChoix = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1916)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1917)) ;
  GGS_typeInstructionList  var_cas_firstBranchInstructionList ;
  var_cas_firstBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
  var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesChoix.addAssign_operation (var_cas_firstBranchInstructionList) ;
  var_cas_selectList.addAssign_operation (var_cas_firstBranchSyntaxSignature) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1917)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1939)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheChoix ;
        var_cas_listeInstructionsBrancheChoix = GGS_typeInstructionList ::constructor_emptyList () ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
        nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheChoix, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesChoix.addAssign_operation (var_cas_listeInstructionsBrancheChoix) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1939)) ;
      switch (select_repeat_parser_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1916)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_select_instruction ::constructor_new (inLexique, var_cas_listeBranchesChoix, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1898_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
  var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature2 ;
        var_cas_syntaxSignature2 = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
        nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_syntaxSignature2) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature2) ;
      switch (select_repeat_parser_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1898_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        nt_syntax_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_parser_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2003_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesRepeter ;
  var_cas_listeBranchesRepeter = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
  GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
  var_cas_whileList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (2021)) ;
  GGS_typeInstructionList  var_cas_listeInstructionsPremiereBranche ;
  var_cas_listeInstructionsPremiereBranche = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_repeatBranchInstructionsList ;
  var_cas_repeatBranchInstructionsList = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (2024)) ;
  nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsPremiereBranche, var_cas_tableTerminaux, var_cas_repeatBranchInstructionsList, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsPremiereBranche) ;
  var_cas_whileList.addAssign_operation (var_cas_repeatBranchInstructionsList) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2024)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (2044)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheRepeter ;
        var_cas_listeInstructionsBrancheRepeter = GGS_typeInstructionList ::constructor_emptyList () ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
        nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheRepeter, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsBrancheRepeter) ;
        var_cas_whileList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2044)) ;
      switch (select_repeat_parser_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (2021)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_repeat_instruction ::constructor_new (inLexique, var_cas_listeBranchesRepeter, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_positionDebut, var_cas_whileList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2003_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_repeatList ;
  var_cas_repeatList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
  var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
        nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
        var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_repeat_parser_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent ::constructor_new (inLexique, var_cas_positionDebut, var_cas_repeatList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2003_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        nt_syntax_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_parser_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2109_25_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_parser_parser_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      GGS_typeExpression  var_cas_variantExpression ;
      GGS_AC_galgasType  var_cas_variantResultType ;
      nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
      GGS_typeGalgas_uint  var_cas_ui ;
      var_cas_ui = GGS_typeGalgas_uint::castFrom (inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2138)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      GGS_typeExpression  var_cas_conditionalExpression ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b ;
      var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2151)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_instructionList ;
      var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
      var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (2156)) ;
      var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (2157)) ;
      nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList, var_cas_tableTerminaux, var_cas_syntaxSignature, GGS_bool (true), var_cas_inSemanticContext) ;
      var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2157)) ;
      var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (2156)) ;
      var_cas_instruction = GGS_C_parse_loop_instruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_variantExpression, var_cas_conditionalExpression, var_cas_instructionList COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
      var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list ::constructor_emptyList () ;
      GGS_location  var_cas_instructionStartLocation ;
      var_cas_instructionStartLocation = GGS_location (inLexique) ;
      GGS_typeListeBranchesInstructions  var_cas_branchList ;
      var_cas_branchList = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
      GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
      var_cas_whileList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
      GGS_typeInstructionList  var_cas_firstBranchInstructionsList ;
      var_cas_firstBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
      var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
      nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionsList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_branchList.addAssign_operation (var_cas_firstBranchInstructionsList) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_firstBranchSyntaxSignature, var_cas_instructionStartLocation) ;
      {
        GGS_L_ruleSyntaxSignature::cEnumerator enumerator_78256 (var_cas_firstBranchSyntaxSignature, true) ;
        const GGS_L_ruleSyntaxSignature::cElement * operand_78256 = NULL ;
        while (((operand_78256 = enumerator_78256.nextObject ()))) {
          macroValidPointer (operand_78256) ;
          var_cas_ioSyntaxSignature.addAssign_operation (operand_78256->mInstruction) ;
        }
      }
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
            nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList.addAssign_operation (var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
          switch (select_repeat_parser_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      var_cas_instruction = GGS_C_parse_rewind_instruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_branchList COMMA_HERE) ;
      if (var_cas_parse_rewind_signature_list.isBuilt ()) {
        ::routine_checkParseRewindSignatures (inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (2234)) ;
      }
      } break ;
    case 3 : {
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
      var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list ::constructor_emptyList () ;
      GGS_L_expression_instructionsList_list  var_cas_branchList ;
      var_cas_branchList = GGS_L_expression_instructionsList_list ::constructor_emptyList () ;
      var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (2239)) ;
      { bool syntaxRepeat_13 = true ;
        while (syntaxRepeat_13) {
            var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (2242)) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            GGS_typeExpression  var_cas_expression ;
            GGS_AC_galgasType  var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
            nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList.addAssign_operation (var_cas_expression, var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
            var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2242)) ;
          switch (select_repeat_parser_parser_13 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_13 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (2278)) ;
      GGS_location  var_cas_branchStartLocation ;
      var_cas_branchStartLocation = GGS_location (inLexique) ;
      GGS_typeInstructionList  var_cas_elseInstructionsList ;
      var_cas_elseInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
      nt_syntax_instructions_list_no_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
      {
        GGS_L_ruleSyntaxSignature::cEnumerator enumerator_81730 (var_cas_syntaxSignature, true) ;
        const GGS_L_ruleSyntaxSignature::cElement * operand_81730 = NULL ;
        while (((operand_81730 = enumerator_81730.nextObject ()))) {
          macroValidPointer (operand_81730) ;
          var_cas_ioSyntaxSignature.addAssign_operation (operand_81730->mInstruction) ;
        }
      }
      var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2278)) ;
      var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (2239)) ;
      var_cas_instruction = GGS_C_parse_when_else_instruction ::constructor_new (inLexique, var_cas_branchList, var_cas_elseInstructionsList COMMA_HERE) ;
      if (var_cas_parse_rewind_signature_list.isBuilt ()) {
        ::routine_checkParseRewindSignatures (inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (2304)) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2109_25_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (inLexique) ;
          switch (select_repeat_parser_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_13 = true ;
        while (syntaxRepeat_13) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (inLexique) ;
          switch (select_repeat_parser_parser_13 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_13 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2109_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (inLexique) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (inLexique) ;
          switch (select_repeat_parser_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_13 = true ;
        while (syntaxRepeat_13) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (inLexique) ;
          switch (select_repeat_parser_parser_13 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_13 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'syntax_instructions_list_no_verif'    *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2348_40_ (galgas_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_parser_parser_14 (inLexique)) {
        case 2 : {
          nt_syntax_instruction_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_ (inLexique, var_cas_tableEnAvant, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2348_40_importSyntax (galgas_scanner & inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_parser_parser_14 (inLexique)) {
        case 2 : {
          nt_syntax_instruction_importSyntax (inLexique, var_cas_ioInstructionList) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2348_40_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_parser_parser_14 (inLexique)) {
        case 2 : {
          nt_syntax_instruction_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

