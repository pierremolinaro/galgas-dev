//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'parser_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 19th, 2006, at 13h25'58"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "parser_parser.h"


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_ (galgas_scanner & lexique_var_,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap) {
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer::constructor_empty (HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees::constructor_empty (HERE) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  GGS_lstring  var_cas_componentName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_componentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_tableTerminaux ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (lexique_var_, var_cas_tableTerminaux, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_string var_cas_defLexique ;
  var_cas_defLexique = var_cas_lexiqueName.reader_value () ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_ (lexique_var_, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_ioSemanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant) ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList::constructor_empty (HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_empty (HERE) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_empty (HERE) ;
  GGS_M_nonTerminalSymbolForSyntax  var_cas_nonTerminalSymbolsMapForSyntax ;
  var_cas_nonTerminalSymbolsMapForSyntax = GGS_M_nonTerminalSymbolForSyntax::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_ (lexique_var_, var_cas_nonTerminalSymbolsMapForSyntax, var_cas_entitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_componentName) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_ (lexique_var_, var_cas_entitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_typeTableNomRoutinesDeclarees::element_type * operand_12819 = var_cas_tableNomRoutinesDeclarees.firstObject () ;
  while ((operand_12819 != NULL)) {
    macroValidPointer (operand_12819) ;
    if (((! var_cas_tableRoutinesAimplementer.reader_hasKey (operand_12819->mKey.reader_value ()))).isBuiltAndTrue ()) {
        operand_12819->mKey.reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "the routine '")) + (operand_12819->mKey.reader_value ()))) + (GGS_string (true, "' is not implemented within the component")))) ;
    }
    operand_12819 = operand_12819->nextObject () ;
  }
  var_cas_ioSyntaxComponentsMap.methode_insertKey (lexique_var_, var_cas_componentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName) ;
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (lexique_var_,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile) ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_importSyntax (galgas_scanner & lexique_var_,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  GGS_lstring  var_cas_syntaxComponentName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_syntaxComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (lexique_var_, var_cas_lexiqueName) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents::constructor_empty (HERE) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
  var_cas_grammarComponentsMap = GGS_M_grammarComponents::constructor_empty (HERE) ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  var_cas_optionsComponentsMap = GGS_M_optionComponents::constructor_empty (HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_ (lexique_var_, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_semanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_empty (HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_importSyntax (lexique_var_, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.methode_insertKey (lexique_var_, var_cas_syntaxComponentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_importSemantics (galgas_scanner & lexique_var_,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  nt_import_headers_semantics_and_grammars_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_parse (lexique_var_) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_importLexique (galgas_scanner & lexique_var_,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  nt_import_headers_semantics_and_grammars_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_parse (lexique_var_) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_importGrammarForSemantics (galgas_scanner & lexique_var_,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  nt_import_headers_semantics_and_grammars_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_parse (lexique_var_) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_galgas_component_parser_parser_262_24_importOptions (galgas_scanner & lexique_var_,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  nt_import_headers_semantics_and_grammars_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (lexique_var_)) {
        case 2 : {
          nt_syntax_declaration_parse (lexique_var_) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'get_lexique_infos'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_509_25_ (galgas_scanner & lexique_var_,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_lstring  &var_cas_outLexiqueName) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_lexique) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_outLexiqueName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueComponentsMap ;
  switch (select_parser_parser_1 (lexique_var_)) {
    case 1 : {
      var_cas_lexiqueComponentsMap = var_cas_ioLexiqueMapForUse ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
      GGS_lstring  var_cas_fileName ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      var_cas_lexiqueComponentsMap = GGS_M_lexiqueComponents::constructor_empty (HERE) ;
      nt_parse_lexique_for_importing_ (lexique_var_, var_cas_fileName, var_cas_lexiqueComponentsMap) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  var_cas_lexiqueComponentsMap.methode_searchKey (lexique_var_, var_cas_outLexiqueName, var_cas_tableTerminaux) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_509_25_getLexiqueName (galgas_scanner & lexique_var_,
                                GGS_lstring  &var_cas_outLexiqueName) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_lexique) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_outLexiqueName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  switch (select_parser_parser_1 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      nt_parse_lexique_for_importing_parse (lexique_var_) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_509_25_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_lexique) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  switch (select_parser_parser_1 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      nt_parse_lexique_for_importing_parse (lexique_var_) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_554_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  GGS_lstring  var_cas_nomTable ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nomTable.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  GGS_AC_galgasType  var_cas_typeEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableTable ;
  var_cas_ioVariablesMap.methode_searchForReadWriteAccess (lexique_var_, var_cas_nomTable, var_cas_typeEntite, var_cas_nomCppVariableTable) ;
  GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
  { cPtr_typeGalgasMapType * ptrExtraire_ = dynamic_cast <cPtr_typeGalgasMapType *> (var_cas_typeEntite.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      var_cas_tableMethodesBloc.drop_operation () ;
      if (var_cas_typeEntite.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeGalgasMapType::static_string_message_messageGalgasType () ;
        message2_ << var_cas_typeEntite (HERE)->message_messageGalgasType () ;
        var_cas_nomTable.signalExtractError (lexique_var_, message1_, message2_) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
      var_cas_tableMethodesBloc = ptrExtraire_->aTableMethodesSurcharger ;
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
  GGS_lstring  var_cas_nomMethodeBloc ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nomMethodeBloc.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  GGS_L_EXsignature  var_cas_signatureDebut ;
  GGS_L_EXsignature  var_cas_signatureFin ;
  var_cas_tableMethodesBloc.methode_searchKey (lexique_var_, var_cas_nomMethodeBloc, var_cas_signatureDebut, var_cas_signatureFin) ;
  GGS_typeExpressionList  var_cas_prologueExpressionList ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_ (lexique_var_, var_cas_signatureDebut, var_cas_prologueExpressionList, var_cas_ioVariablesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionsList) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMapBlockPrologueInstruction::constructor_new (var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_prologueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionsList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  GGS_typeExpressionList  var_cas_epilogueExpressionList ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_ (lexique_var_, var_cas_signatureFin, var_cas_epilogueExpressionList, var_cas_ioVariablesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionsList) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  GGS_AC_galgasType  var_cas_21237 ;
  GGS_typeCplusPlusName  var_cas_21240 ;
  var_cas_ioVariablesMap.methode_searchForReadWriteAccess (lexique_var_, var_cas_nomTable, var_cas_21237, var_cas_21240) ;
  var_cas_instruction = GGS_typeMapBlockEpilogueInstruction::constructor_new (var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_epilogueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_554_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_ioInstructionsList) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_554_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_block) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;
  nt_actual_parameters_list_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_658_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  var_cas_inSyntaxComponentName) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  GGS_lstring  var_cas_ruleName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_ruleName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_empty (HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammar ;
  nt_formal_arguments_list_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_lstring  var_cas_returnedEntity ;
  switch (select_parser_parser_2 (lexique_var_)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      var_cas_returnedEntity.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, var_cas_returnedEntity, var_cas_e) ;
      GGS_AC_galgasType  var_cas_type ;
      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_type.drop_operation () ;
          if (var_cas_e.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
            message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
            var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_type = ptrExtraire_->aDefType ;
        }
      }
      { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          if (var_cas_type.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
            message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
            var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
        }
      }
      } break ;
    default :
      break ;
  }
  nt_rule_declaration_or_implementation_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_tableArgumentsMethode, var_cas_listeDeTypesFormels, var_cas_ruleName, var_cas_returnedEntity, var_cas_listeTypeEtNomsArguments, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_ioNonTerminalSymbolsMap, var_cas_signatureForGrammar, var_cas_ioProductionRulesListForGrammar, var_cas_inSyntaxComponentName) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_658_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nonterminalSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;
  GGS_lstring  var_cas_returnedEntity ;
  switch (select_parser_parser_2 (lexique_var_)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      var_cas_returnedEntity.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      } break ;
    default :
      break ;
  }
  nt_rule_declaration_or_implementation_importSyntax (lexique_var_, var_cas_ioNonTerminalSymbolsMap, var_cas_ioProductionRulesListForGrammar, var_cas_nonterminalSymbolName, var_cas_signature, var_cas_returnedEntity) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_658_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  nt_formal_arguments_list_parse (lexique_var_) ;
  switch (select_parser_parser_2 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
      } break ;
    default :
      break ;
  }
  nt_rule_declaration_or_implementation_parse (lexique_var_) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'rule_declaration_or_implementation'   *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_746_42_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_L_EXsignature  var_cas_listeDeTypes,
                                const GGS_lstring  &var_cas_inRuleName,
                                const GGS_lstring  &var_cas_inReturnedEntity,
                                GGS_typeListeTypesEtNomsArgMethode  /* var_cas_listeTypeEtNomsArguments */,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMapForGrammar,
                                GGS_L_signature  var_cas_inSignatureForGrammar,
                                GGS_L_productionRules_ForGrammarComponent  &/* var_cas_ioProductionRulesListForGrammar */,
                                const GGS_lstring  &/* var_cas_inSyntaxComponentName */) {
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
  var_cas_parametersMap = GGS_M_nonterminalSymbolAlts::constructor_empty (HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
  var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty (HERE) ;
  GGS_lstring  var_cas_emptyId ;
  var_cas_emptyId = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
  var_cas_parametersMap.methode_insertKey (lexique_var_, var_cas_emptyId, var_cas_listeDeTypes, var_cas_inReturnedEntity) ;
  var_cas_parametersMapForGrammar.methode_insertKey (lexique_var_, var_cas_emptyId, var_cas_inSignatureForGrammar, var_cas_inReturnedEntity) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_3 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          switch (select_parser_parser_4 (lexique_var_)) {
            case 1 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
              GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
              var_cas_listeDeTypesFormels = GGS_L_EXsignature::constructor_empty (HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              var_cas_signatureForGrammarComponent = GGS_L_signature::constructor_empty (HERE) ;
              GGS_lstring  var_cas_altName ;
              var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, "parse"), GGS_location (lexique_var_) COMMA_HERE) ;
              var_cas_parametersMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_listeDeTypesFormels, GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE)) ;
              var_cas_parametersMapForGrammar.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signatureForGrammarComponent, GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_altName ;
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
              GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
              var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_empty (HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              GGS_lstring  var_cas_returnedEntity ;
              switch (select_parser_parser_5 (lexique_var_)) {
                case 1 : {
                  var_cas_returnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
                  var_cas_returnedEntity.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
                  GGS_AC_semanticsEntity  var_cas_e ;
                  var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, var_cas_returnedEntity, var_cas_e) ;
                  GGS_AC_galgasType  var_cas_type ;
                  { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
                    if (ptrExtraire_ == NULL) {
                      var_cas_type.drop_operation () ;
                      if (var_cas_e.getPtr () != NULL) {
                        TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
                        C_String message2_ ;
                        message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
                        message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
                        var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
                      }
                    }else{
                      macroValidPointer (ptrExtraire_) ;
                      var_cas_type = ptrExtraire_->aDefType ;
                    }
                  }
                  { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
                    if (ptrExtraire_ == NULL) {
                      if (var_cas_type.getPtr () != NULL) {
                        TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
                        C_String message2_ ;
                        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
                        message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
                        var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
                      }
                    }else{
                      macroValidPointer (ptrExtraire_) ;
                    }
                  }
                  } break ;
                default :
                  break ;
              }
              var_cas_parametersMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_listeDeTypesFormels, var_cas_returnedEntity) ;
              var_cas_parametersMapForGrammar.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signatureForGrammarComponent, var_cas_returnedEntity) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  var_cas_ioNonTerminalSymbolsMapForGrammar.methode_insertKey (lexique_var_, var_cas_inRuleName, var_cas_parametersMapForGrammar) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.methode_insertKey (lexique_var_, var_cas_inRuleName, var_cas_parametersMap) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (var_cas_inRuleName, var_cas_parametersMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_746_42_importSyntax (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &/* var_cas_ioProductionRulesListForGrammar */,
                                const GGS_lstring  &var_cas_inNonterminalSymbolName,
                                const GGS_L_signature  &var_cas_inDefaultSignature,
                                const GGS_lstring  &var_cas_inReturnedEntity) {
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
  var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty (HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
  var_cas_nonterminalSymbolParametersMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_inDefaultSignature, var_cas_inReturnedEntity) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_3 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          switch (select_parser_parser_4 (lexique_var_)) {
            case 1 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
              GGS_L_signature  var_cas_signature ;
              var_cas_signature = GGS_L_signature::constructor_empty (HERE) ;
              GGS_lstring  var_cas_altName ;
              var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, "parse"), GGS_location (lexique_var_) COMMA_HERE) ;
              GGS_lstring  var_cas_noReturnedEntity ;
              var_cas_noReturnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
              var_cas_nonterminalSymbolParametersMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signature, var_cas_noReturnedEntity) ;
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
              GGS_L_signature  var_cas_signature ;
              nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;
              GGS_lstring  var_cas_returnedEntity ;
              switch (select_parser_parser_5 (lexique_var_)) {
                case 1 : {
                  var_cas_returnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
                  var_cas_returnedEntity.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_nonterminalSymbolParametersMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signature, var_cas_returnedEntity) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioNonTerminalSymbolsMap.methode_insertKey (lexique_var_, var_cas_inNonterminalSymbolName, var_cas_nonterminalSymbolParametersMap) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_746_42_parse (galgas_scanner & lexique_var_) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_3 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          switch (select_parser_parser_4 (lexique_var_)) {
            case 1 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
              nt_formal_arguments_list_parse (lexique_var_) ;
              switch (select_parser_parser_5 (lexique_var_)) {
                case 1 : {
                  } break ;
                case 2 : {
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
                  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'rule_declaration_or_implementation'   *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_855_42_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_L_EXsignature  var_cas_listeDeTypesFormels,
                                const GGS_lstring  &var_cas_inRuleName,
                                const GGS_lstring  &var_cas_inEffectiveReturnedEntity,
                                GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMapForGrammar */,
                                GGS_L_signature  /* var_cas_inSignatureForGrammar */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                const GGS_lstring  &/* var_cas_inSyntaxComponentName */) {
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  var_cas_ioNonTerminalSymbolMapForSyntax.methode_searchKey (lexique_var_, var_cas_inRuleName, var_cas_nonterminalSymbolAltMap) ;
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_empty (HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
  GGS_bool var_cas_hasParseLabel ;
  var_cas_hasParseLabel = var_cas_nonterminalSymbolAltMap.reader_hasKey (GGS_string (true, "parse")) ;
  GGS_bool var_cas_checkNonTerminalsAreDeclaredWithParseLabel ;
  var_cas_checkNonTerminalsAreDeclaredWithParseLabel = var_cas_hasParseLabel ;
  GGS_string var_cas_productionTagName ;
  switch (select_parser_parser_6 (lexique_var_)) {
    case 1 : {
      var_cas_productionTagName = GGS_string (true, "") ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_tag) ;
      GGS_lstring  var_cas_tagName ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      var_cas_tagName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      var_cas_productionTagName = var_cas_tagName.reader_value () ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_errorLocation ;
  var_cas_errorLocation = GGS_location (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
  GGS_lstring  var_cas_formalReturnedEntity ;
  var_cas_nonterminalSymbolAltMap.methode_searchKey (lexique_var_, var_cas_altName, var_cas_signatureFournieParPrototype, var_cas_formalReturnedEntity) ;
  ::routine_verifierCompatibiliteSignatures (lexique_var_,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation) ;
  if (((((var_cas_formalReturnedEntity.reader_value ()) == (GGS_string (true, ""))) && ((var_cas_inEffectiveReturnedEntity.reader_value ()) != (GGS_string (true, ""))))).isBuiltAndTrue ()) {
      var_cas_inEffectiveReturnedEntity.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "the non terminal declaration does not name any returned entity")) ;
  }else if (((var_cas_inEffectiveReturnedEntity.reader_value ()) != (var_cas_formalReturnedEntity.reader_value ())).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_e ;
    var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, var_cas_inEffectiveReturnedEntity, var_cas_e) ;
    GGS_AC_galgasType  var_cas_type ;
    { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
      if (ptrExtraire_ == NULL) {
        var_cas_type.drop_operation () ;
        if (var_cas_e.getPtr () != NULL) {
          TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
          C_String message2_ ;
          message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
          message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
          var_cas_inEffectiveReturnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
        }
      }else{
        macroValidPointer (ptrExtraire_) ;
        var_cas_type = ptrExtraire_->aDefType ;
      }
    }
    GGS_stringset  var_cas_superEntityStringSet ;
    { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
      if (ptrExtraire_ == NULL) {
        var_cas_superEntityStringSet.drop_operation () ;
        if (var_cas_type.getPtr () != NULL) {
          TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
          C_String message2_ ;
          message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
          message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
          var_cas_inEffectiveReturnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
        }
      }else{
        macroValidPointer (ptrExtraire_) ;
        var_cas_superEntityStringSet = ptrExtraire_->mSuperEntitiesSet ;
      }
    }
    if (((! var_cas_superEntityStringSet.reader_hasKey (var_cas_formalReturnedEntity.reader_value ()))).isBuiltAndTrue ()) {
        var_cas_inEffectiveReturnedEntity.reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "the '@")) + (var_cas_formalReturnedEntity.reader_value ()))) + (GGS_string (true, "' entity or one of its inherited entities is expected here")))) ;
    }
  }
  GGS_typeInstructionsList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionsList::constructor_empty (HERE) ;
  if (((var_cas_inEffectiveReturnedEntity.reader_value ()) != (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_e ;
    var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, var_cas_inEffectiveReturnedEntity, var_cas_e) ;
    GGS_AC_galgasType  var_cas_type ;
    { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
      if (ptrExtraire_ == NULL) {
        var_cas_type.drop_operation () ;
        if (var_cas_e.getPtr () != NULL) {
          TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
          C_String message2_ ;
          message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
          message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
          var_cas_inEffectiveReturnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
        }
      }else{
        macroValidPointer (ptrExtraire_) ;
        var_cas_type = ptrExtraire_->aDefType ;
      }
    }
    GGS_entityPropertyMap  var_cas_allPropertiesMap ;
    { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
      if (ptrExtraire_ == NULL) {
        var_cas_allPropertiesMap.drop_operation () ;
        if (var_cas_type.getPtr () != NULL) {
          TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
          C_String message2_ ;
          message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
          message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
          var_cas_inEffectiveReturnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
        }
      }else{
        macroValidPointer (ptrExtraire_) ;
        var_cas_allPropertiesMap = ptrExtraire_->mAllPropertiesMap ;
      }
    }
    GGS_entityPropertyMap::element_type * operand_32983 = var_cas_allPropertiesMap.firstObject () ;
    while ((operand_32983 != NULL)) {
      macroValidPointer (operand_32983) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, operand_32983->mInfo.mTypeName, var_cas_entite) ;
      GGS_AC_galgasType  var_cas_definitionType ;
      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_entite.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_definitionType.drop_operation () ;
          if (var_cas_entite.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
            message2_ << var_cas_entite (HERE)->message_messageTypeEntite () ;
            var_cas_inEffectiveReturnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_definitionType = ptrExtraire_->aDefType ;
        }
      }
      if (var_cas_definitionType.isBuilt ()) {
        var_cas_definitionType (HERE)->methode_typeCanBeUsedInObjectDeclaration (lexique_var_) ;
      }
      GGS_lstring  var_cas_nomVariable ;
      var_cas_nomVariable = GGS_lstring::constructor_new (operand_32983->mKey.reader_value (), var_cas_inEffectiveReturnedEntity.reader_location () COMMA_HERE) ;
      GGS_typeCplusPlusName  var_cas_nomCppVariable ;
      var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (var_cas_nomVariable COMMA_HERE) ;
      if (((operand_32983->mInfo.mKind) == (GGS_metamodelPropertyKind::constructor_multipleReferenceProperty (HERE))).isBuiltAndTrue ()) {
        var_cas_definitionType = GGS_typeGalgas_multipleEntity::constructor_new (operand_32983->mInfo.mTypeName COMMA_HERE) ;
        var_cas_ioVariablesMap.methode_insertInArgument (lexique_var_, var_cas_nomVariable, var_cas_definitionType, var_cas_nomCppVariable) ;
      }else{
        var_cas_ioVariablesMap.methode_insertLocalVariable (lexique_var_, var_cas_nomVariable, var_cas_definitionType, var_cas_nomCppVariable) ;
      }
      GGS_typeInstruction  var_cas_instruction ;
      var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE) ;
      var_cas_listeInstructions.addAssign_operation (var_cas_instruction) ;
      operand_32983 = operand_32983->nextObject () ;
    }
  }
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
  nt_syntax_instructions_list_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_checkNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
  GGS_location  var_cas_endOfInstructionList ;
  var_cas_endOfInstructionList = GGS_location (lexique_var_) ;
  var_cas_altProductionsMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, var_cas_endOfInstructionList) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_7 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
          var_cas_ioVariablesMap = GGS_typeVariablesMap::constructor_empty (HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_ioVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          GGS_lstring  var_cas_returnedEntity ;
          switch (select_parser_parser_8 (lexique_var_)) {
            case 1 : {
              var_cas_returnedEntity = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              var_cas_returnedEntity.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
              GGS_AC_semanticsEntity  var_cas_e ;
              var_cas_ioEntitiesMap.methode_searchKey (lexique_var_, var_cas_returnedEntity, var_cas_e) ;
              GGS_AC_galgasType  var_cas_type ;
              { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
                if (ptrExtraire_ == NULL) {
                  var_cas_type.drop_operation () ;
                  if (var_cas_e.getPtr () != NULL) {
                    TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
                    C_String message2_ ;
                    message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
                    message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
                    var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
                  }
                }else{
                  macroValidPointer (ptrExtraire_) ;
                  var_cas_type = ptrExtraire_->aDefType ;
                }
              }
              { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
                if (ptrExtraire_ == NULL) {
                  if (var_cas_type.getPtr () != NULL) {
                    TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
                    C_String message2_ ;
                    message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
                    message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
                    var_cas_returnedEntity.signalExtractError (lexique_var_, message1_, message2_) ;
                  }
                }else{
                  macroValidPointer (ptrExtraire_) ;
                }
              }
              } break ;
            default :
              break ;
          }
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (lexique_var_) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
          GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
          GGS_lstring  var_cas_returnedEntityFromPrototype ;
          var_cas_nonterminalSymbolAltMap.methode_searchKey (lexique_var_, var_cas_altName, var_cas_signatureFournieParPrototype, var_cas_returnedEntityFromPrototype) ;
          ::routine_verifierCompatibiliteSignatures (lexique_var_,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation) ;
          GGS_typeInstructionsList  var_cas_listeInstructions ;
          var_cas_listeInstructions = GGS_typeInstructionsList::constructor_empty (HERE) ;
          GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
          var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
          nt_syntax_instructions_list_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, GGS_bool (true, false), var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
          GGS_location  var_cas_endOfInstructionList ;
          var_cas_endOfInstructionList = GGS_location (lexique_var_) ;
          var_cas_altProductionsMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, var_cas_endOfInstructionList) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  if (var_cas_altProductionsMap.isBuilt ()) {
    ::routine_checkLabelSignatures (lexique_var_,  var_cas_altProductionsMap) ;
  }
  GGS_M_nonterminalSymbolAlts::element_type * operand_36706 = var_cas_nonterminalSymbolAltMap.firstObject () ;
  while ((operand_36706 != NULL)) {
    macroValidPointer (operand_36706) ;
    if (((((operand_36706->mKey.reader_value ()) != (GGS_string (true, "parse"))) && ((! var_cas_altProductionsMap.reader_hasKey (operand_36706->mKey.reader_value ()))))).isBuiltAndTrue ()) {
        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "the '")) + (operand_36706->mKey.reader_value ()))) + (GGS_string (true, "' label is not implemented within the rule")))) ;
    }
    operand_36706 = operand_36706->nextObject () ;
  }
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (var_cas_inRuleName, var_cas_altProductionsMap, var_cas_productionTagName, var_cas_hasParseLabel COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_uint  var_cas_ruleIndex ;
  var_cas_ruleIndex = GGS_uint (true, 0UL) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_inRuleName, var_cas_ruleIndex, var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_855_42_importSyntax (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                const GGS_lstring  &var_cas_inNonterminalSymbolName,
                                const GGS_L_signature  &/* var_cas_inDefaultSignature */,
                                const GGS_lstring  &/* var_cas_inReturnedEntity */) {
  switch (select_parser_parser_6 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_tag) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_L_ruleSyntaxSignature  var_cas_instructionsList ;
  var_cas_instructionsList = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
  nt_syntax_instructions_list_importSyntax (lexique_var_, var_cas_instructionsList) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_7 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          nt_formal_arguments_list_parse (lexique_var_) ;
          switch (select_parser_parser_8 (lexique_var_)) {
            case 1 : {
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              } break ;
            default :
              break ;
          }
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
          nt_syntax_instructions_list_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_leftNonterminalSymbolIndex ;
  var_cas_leftNonterminalSymbolIndex = GGS_uint (true, 0UL) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_inNonterminalSymbolName, var_cas_leftNonterminalSymbolIndex, var_cas_instructionsList) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_rule_declaration_or_implementation_parser_parser_855_42_parse (galgas_scanner & lexique_var_) {
  switch (select_parser_parser_6 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_tag) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_syntax_instructions_list_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_7 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          nt_formal_arguments_list_parse (lexique_var_) ;
          switch (select_parser_parser_8 (lexique_var_)) {
            case 1 : {
              } break ;
            case 2 : {
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;
              } break ;
            default :
              break ;
          }
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
          nt_syntax_instructions_list_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rule) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1072_32_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (lexique_var_) ;
  nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionsList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature) ;
  GGS_location  var_cas_positionErreur ;
  var_cas_positionErreur = GGS_location (lexique_var_) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (lexique_var_, var_cas_positionErreur) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1072_32_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_ioInstructionsList) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1072_32_parse (galgas_scanner & lexique_var_) {
  nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1107_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_bool /* var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel */,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  GGS_lstring  var_cas_terminalSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_terminal) ;
  var_cas_terminalSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeDesAttributsFormels ;
  var_cas_tableTerminaux.methode_searchKey (lexique_var_, var_cas_terminalSymbolName, var_cas_listeDesAttributsFormels) ;
  GGS_L_assignedVariables  var_cas_listeTypeEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  nt_input_parameters_list_ (lexique_var_, var_cas_listeTypeEffectifs, var_cas_allVariablesList, var_cas_listeDesAttributsFormels, var_cas_ioVariablesMap) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionVerifSyntaxique::constructor_new (var_cas_terminalSymbolName, var_cas_listeTypeEffectifs COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (true, 0UL) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (var_cas_terminalSymbolName.reader_location (), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1107_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  GGS_lstring  var_cas_terminalSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_terminal) ;
  var_cas_terminalSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  nt_input_parameters_list_parse (lexique_var_) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (var_cas_terminalSymbolName.reader_location (), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_i) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1107_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_terminal) ;
  nt_input_parameters_list_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1154_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nonterminalSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_lstring  var_cas_altName ;
  switch (select_parser_parser_9 (lexique_var_)) {
    case 1 : {
      var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
      var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, "parse"), GGS_location (lexique_var_) COMMA_HERE) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  var_cas_ioNonTerminalSymbolMapForSyntax.methode_searchKey (lexique_var_, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolAltMap) ;
  GGS_L_EXsignature  var_cas_signatureMethode ;
  GGS_lstring  var_cas_returnedEntityFromSignature ;
  var_cas_nonterminalSymbolAltMap.methode_searchKey (lexique_var_, var_cas_altName, var_cas_signatureMethode, var_cas_returnedEntityFromSignature) ;
  if ((((var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel) && ((var_cas_altName.reader_value ()) != (GGS_string (true, "parse"))))).isBuiltAndTrue ()) {
    if (((! var_cas_nonterminalSymbolAltMap.reader_hasKey (GGS_string (true, "parse")))).isBuiltAndTrue ()) {
        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label")) ;
    }
  }
  GGS_typeExpressionList  var_cas_parametersExpressionList ;
  nt_actual_parameters_list_ (lexique_var_, var_cas_signatureMethode, var_cas_parametersExpressionList, var_cas_ioVariablesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionsList) ;
  GGS_lstring  var_cas_returnedEntityVariableName ;
  GGS_bool var_cas_writeAccess ;
  var_cas_writeAccess = GGS_bool (true, true) ;
  switch (select_parser_parser_10 (lexique_var_)) {
    case 1 : {
      var_cas_returnedEntityVariableName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_) COMMA_HERE) ;
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_returnedEntityVariableName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2B_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      var_cas_returnedEntityVariableName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
      var_cas_writeAccess = GGS_bool (true, false) ;
      } break ;
    default :
      break ;
  }
  if (((((var_cas_returnedEntityFromSignature.reader_value ()) == (GGS_string (true, ""))) && ((var_cas_returnedEntityVariableName.reader_value ()) != (GGS_string (true, ""))))).isBuiltAndTrue ()) {
      var_cas_returnedEntityVariableName.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "the non terminal symbol is declared with no returned entity")) ;
  }else if (((((var_cas_returnedEntityFromSignature.reader_value ()) != (GGS_string (true, ""))) && ((var_cas_returnedEntityVariableName.reader_value ()) == (GGS_string (true, ""))))).isBuiltAndTrue ()) {
      var_cas_returnedEntityVariableName.reader_location ().signalGGSSemanticError (lexique_var_, ((((GGS_string (true, "the non terminal symbol is declared to return an instance of '@")) + (var_cas_returnedEntityFromSignature.reader_value ()))) + (GGS_string (true, "' entity")))) ;
  }else if (((((var_cas_returnedEntityFromSignature.reader_value ()) != (GGS_string (true, ""))) && ((var_cas_returnedEntityVariableName.reader_value ()) != (GGS_string (true, ""))))).isBuiltAndTrue ()) {
    if ((var_cas_writeAccess).isBuiltAndTrue ()) {
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  var_cas_44751 ;
      var_cas_ioVariablesMap.methode_searchForWriteAccess (lexique_var_, var_cas_returnedEntityVariableName, var_cas_type, var_cas_44751) ;
      { cPtr_typeGalgas_singleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleEntity *> (var_cas_type.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          if (var_cas_type.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleEntity::static_string_message_messageGalgasType () ;
            message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
            var_cas_returnedEntityVariableName.signalExtractError (lexique_var_, message1_, message2_) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
        }
      }
    }else{
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  var_cas_44983 ;
      var_cas_ioVariablesMap.methode_searchForReadWriteAccess (lexique_var_, var_cas_returnedEntityVariableName, var_cas_type, var_cas_44983) ;
      { cPtr_typeGalgas_multipleEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_multipleEntity *> (var_cas_type.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          if (var_cas_type.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1 COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeGalgas_multipleEntity::static_string_message_messageGalgasType () ;
            message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
            var_cas_returnedEntityVariableName.signalExtractError (lexique_var_, message1_, message2_) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
        }
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (var_cas_nonterminalSymbolName, var_cas_parametersExpressionList, var_cas_altName COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_nonterminalSymbolIndex ;
  var_cas_nonterminalSymbolIndex = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (var_cas_nonterminalSymbolName.reader_location (), var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolIndex COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1154_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_nonterminalSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  switch (select_parser_parser_9 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (lexique_var_) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_nonterminalSymbolIndex ;
  var_cas_nonterminalSymbolIndex = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (var_cas_nonterminalSymbolName.reader_location (), var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolIndex COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_i) ;
  switch (select_parser_parser_10 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2B_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1154_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  switch (select_parser_parser_9 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (lexique_var_) ;
  switch (select_parser_parser_10 (lexique_var_)) {
    case 1 : {
      } break ;
    case 2 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    case 3 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2B_3E) ;
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1274_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (lexique_var_) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesChoix ;
  var_cas_listeBranchesChoix = GGS_typeListeBranchesInstructions::constructor_empty (HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_empty (HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_ioVariablesMap.prologue_testPart (lexique_var_) ;
        GGS_typeInstructionsList  var_cas_listeInstructionsBrancheChoix ;
        var_cas_listeInstructionsBrancheChoix = GGS_typeInstructionsList::constructor_empty (HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
        nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheChoix, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
        var_cas_listeBranchesChoix.addAssign_operation (var_cas_listeInstructionsBrancheChoix) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_testPart (lexique_var_, GGS_location (lexique_var_)) ;
      switch (select_repeat_parser_parser_11 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_or) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  var_cas_ioVariablesMap.epilogue_testBloc (lexique_var_) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_select_instruction::constructor_new (var_cas_listeBranchesChoix, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1274_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (lexique_var_) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_syntaxSignature) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_repeat_parser_parser_11 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_or) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1274_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
      switch (select_repeat_parser_parser_11 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_or) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_select) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1348_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (lexique_var_) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesRepeter ;
  var_cas_listeBranchesRepeter = GGS_typeListeBranchesInstructions::constructor_empty (HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
  var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_empty (HERE) ;
  var_cas_ioVariablesMap.prologue_repeatBlock (lexique_var_) ;
  GGS_typeInstructionsList  var_cas_listeInstructionsPremiereBranche ;
  var_cas_listeInstructionsPremiereBranche = GGS_typeInstructionsList::constructor_empty (HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_repeatBranchInstructionsList ;
  var_cas_repeatBranchInstructionsList = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
  var_cas_ioVariablesMap.prologue_repeatPart (lexique_var_) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
  nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsPremiereBranche, var_cas_tableTerminaux, var_cas_repeatBranchInstructionsList) ;
  var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsPremiereBranche) ;
  var_cas_whileList.addAssign_operation (var_cas_repeatBranchInstructionsList) ;
  GGS_location  var_cas_positionErreurPremiereBranche ;
  var_cas_positionErreurPremiereBranche = GGS_location (lexique_var_) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (lexique_var_, var_cas_positionErreurPremiereBranche) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_ioVariablesMap.prologue_repeatPart (lexique_var_) ;
        GGS_typeInstructionsList  var_cas_listeInstructionsBrancheRepeter ;
        var_cas_listeInstructionsBrancheRepeter = GGS_typeInstructionsList::constructor_empty (HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
        nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheRepeter, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
        var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsBrancheRepeter) ;
        var_cas_whileList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_repeatPart (lexique_var_, GGS_location (lexique_var_)) ;
      switch (select_repeat_parser_parser_12 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_repeat_instruction::constructor_new (var_cas_listeBranchesRepeter, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (var_cas_positionDebut, var_cas_whileList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1348_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (lexique_var_) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_repeatList ;
  var_cas_repeatList = GGS_L_branchList_ForGrammarComponent::constructor_empty (HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_syntaxSignature) ;
  var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_syntaxSignature) ;
        var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_repeat_parser_parser_12 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0UL) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (var_cas_positionDebut, var_cas_repeatList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1348_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
      switch (select_repeat_parser_parser_12 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_while) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_repeat) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1447_26_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  GGS_typeInstruction  var_cas_instruction ;
  GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
  var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list::constructor_empty (HERE) ;
  switch (select_parser_parser_13 (lexique_var_)) {
    case 1 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_do) ;
      GGS_location  var_cas_instructionStartLocation ;
      var_cas_instructionStartLocation = GGS_location (lexique_var_) ;
      GGS_typeListeBranchesInstructions  var_cas_branchList ;
      var_cas_branchList = GGS_typeListeBranchesInstructions::constructor_empty (HERE) ;
      GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
      var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_empty (HERE) ;
      GGS_typeInstructionsList  var_cas_firstBranchInstructionsList ;
      var_cas_firstBranchInstructionsList = GGS_typeInstructionsList::constructor_empty (HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
      var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
      nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionsList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature) ;
      var_cas_branchList.addAssign_operation (var_cas_firstBranchInstructionsList) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_firstBranchSyntaxSignature, var_cas_instructionStartLocation) ;
      GGS_L_ruleSyntaxSignature::element_type * operand_54378 = var_cas_firstBranchSyntaxSignature.firstObject () ;
      while ((operand_54378 != NULL)) {
        macroValidPointer (operand_54378) ;
        var_cas_ioSyntaxSignature.addAssign_operation (operand_54378->mInstruction) ;
        operand_54378 = operand_54378->nextObject () ;
      }
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rewind) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (lexique_var_) ;
            GGS_typeInstructionsList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionsList::constructor_empty (HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
            nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
            var_cas_branchList.addAssign_operation (var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
          switch (select_repeat_parser_parser_14 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      var_cas_instruction = GGS_C_parse_rewind_instruction::constructor_new (GGS_location (lexique_var_), var_cas_branchList COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_L_expression_instructionsList_list  var_cas_branchList ;
      var_cas_branchList = GGS_L_expression_instructionsList_list::constructor_empty (HERE) ;
      var_cas_ioVariablesMap.prologue_testBloc (lexique_var_) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            var_cas_ioVariablesMap.prologue_testPart (lexique_var_) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_when) ;
            GGS_typeExpression  var_cas_expression ;
            GGS_AC_galgasType  var_cas_resultType ;
            nt_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (lexique_var_) ;
            GGS_typeInstructionsList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionsList::constructor_empty (HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
            nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
            var_cas_branchList.addAssign_operation (var_cas_expression, var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
            var_cas_ioVariablesMap.epilogue_testPart (lexique_var_, GGS_location (lexique_var_)) ;
          switch (select_repeat_parser_parser_15 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_else) ;
      var_cas_ioVariablesMap.prologue_testPart (lexique_var_) ;
      GGS_location  var_cas_branchStartLocation ;
      var_cas_branchStartLocation = GGS_location (lexique_var_) ;
      GGS_typeInstructionsList  var_cas_elseInstructionsList ;
      var_cas_elseInstructionsList = GGS_typeInstructionsList::constructor_empty (HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_empty (HERE) ;
      nt_syntax_instructions_list_no_verif_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
      GGS_L_ruleSyntaxSignature::element_type * operand_57285 = var_cas_syntaxSignature.firstObject () ;
      while ((operand_57285 != NULL)) {
        macroValidPointer (operand_57285) ;
        var_cas_ioSyntaxSignature.addAssign_operation (operand_57285->mInstruction) ;
        operand_57285 = operand_57285->nextObject () ;
      }
      var_cas_ioVariablesMap.epilogue_testPart (lexique_var_, GGS_location (lexique_var_)) ;
      var_cas_ioVariablesMap.epilogue_testBloc (lexique_var_) ;
      var_cas_instruction = GGS_C_parse_when_else_instruction::constructor_new (var_cas_branchList, var_cas_elseInstructionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  var_cas_ioInstructionsList.addAssign_operation (var_cas_instruction) ;
  if (var_cas_parse_rewind_signature_list.isBuilt ()) {
    ::routine_checkParseRewindSignatures (lexique_var_,  var_cas_parse_rewind_signature_list) ;
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1447_26_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  switch (select_parser_parser_13 (lexique_var_)) {
    case 1 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_do) ;
      nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_ioInstructionsList) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rewind) ;
            nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
          switch (select_repeat_parser_parser_14 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      } break ;
    case 2 : {
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_when) ;
            nt_expression_parse (lexique_var_) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
            nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
          switch (select_repeat_parser_parser_15 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_else) ;
      nt_syntax_instructions_list_no_verif_importSyntax (lexique_var_, var_cas_ioInstructionsList) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1447_26_parse (galgas_scanner & lexique_var_) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  switch (select_parser_parser_13 (lexique_var_)) {
    case 1 : {
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_do) ;
      nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_rewind) ;
            nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
          switch (select_repeat_parser_parser_14 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      } break ;
    case 2 : {
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_when) ;
            nt_expression_parse (lexique_var_) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
            nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
          switch (select_repeat_parser_parser_15 (lexique_var_)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_else) ;
      nt_syntax_instructions_list_no_verif_parse (lexique_var_) ;
      } break ;
    default :
      break ;
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_parse) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'syntax_instructions_list_no_verif'    *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1605_41_ (galgas_scanner & lexique_var_,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionsList  &var_cas_ioInstructionsList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_16 (lexique_var_)) {
        case 2 : {
          nt_syntax_instruction_ (lexique_var_, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionsList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionsList) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1605_41_importSyntax (galgas_scanner & lexique_var_,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionsList) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_16 (lexique_var_)) {
        case 2 : {
          nt_syntax_instruction_importSyntax (lexique_var_, var_cas_ioInstructionsList) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1605_41_parse (galgas_scanner & lexique_var_) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_16 (lexique_var_)) {
        case 2 : {
          nt_syntax_instruction_parse (lexique_var_) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

