//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'parser_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 17th, 2010, at 17h49'20"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "parser_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parser_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  const GGS_bool cond_11149 = (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_pathExtension ()).operator_isNotEqual (GGS_string ("gSyntax")) ;
  if (cond_11149.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("In GALGAS 1.9.11 and later, use '.gSyntax' for extension of a syntax file name") COMMA_SOURCE_FILE_AT_LINE (276)) ;
  }
  const GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_11479 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (279))).operator_isNotEqual (var_cas_basename) ;
  if (cond_11479.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)))).operator_concat (GGS_string ("') should the same as the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (283)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_tableTerminaux ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_5F_lexique_5F_infos_ (inLexique, var_cas_tableTerminaux, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_string var_cas_defLexique = var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (314)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (316)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (317)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (318))) ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_semanticContext) ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
  GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_nonTerminalSymbolsMapForGrammar = GGS_nonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (339)) ;
  GGS_productionRuleListForGrammarAnalysis  var_cas_productionRulesListForGrammar = GGS_productionRuleListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_M_nonTerminalSymbolForSyntax  var_cas_nonTerminalSymbolsMapForSyntax = GGS_M_nonTerminalSymbolForSyntax ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (341)) ;
  GGS_uint  var_cas_productionIndex = GGS_uint (0U) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_ (inLexique, var_cas_defLexique, var_cas_nonTerminalSymbolsMapForSyntax, var_cas_entitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_componentName, var_cas_ioSemanticContext, var_cas_productionIndex) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_ (inLexique, var_cas_entitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_14063 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_14063 = NULL ;
    while (((operand_14063 = enumerator_14063.nextObject ()))) {
      macroValidPointer (operand_14063) ;
      const GGS_bool cond_14264 = (var_cas_tableRoutinesAimplementer.reader_hasKey (operand_14063->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (372)))).operator_not () ;
      if (cond_14264.isBuiltAndTrue ()) {
        operand_14063->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the routine '")).operator_concat (operand_14063->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (373)))).operator_concat (GGS_string ("' is not implemented within the component")) COMMA_SOURCE_FILE_AT_LINE (375)) ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (378)) ;
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (385)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_importGrammarForSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_importLexique (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_importOptions (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_importSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_galgas_5F_component_i0_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_syntaxComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  switch (select_parser_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_lexiqueName ;
  GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) ;
  GGS_M_terminalSymbolsMapForUse  automatic_var_15212_0 ;
  nt_get_5F_lexique_5F_infos_ (inLexique, automatic_var_15212_0, var_cas_lexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (420)) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (422)) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_5F_headers_5F_semantics_5F_and_5F_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_lexiqueMapForUse, var_cas_semanticsComponentsMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  GGS_productionRuleListForGrammarAnalysis  var_cas_productionRulesListForGrammar = GGS_productionRuleListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_nonTerminalSymbolsMapForGrammar = GGS_nonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (454)) ;
  GGS_uint  var_cas_productionIndex = GGS_uint (0U) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_parser_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_syntax_5F_declaration_importSyntax (inLexique, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_productionIndex) ;
          } break ;
        case 3 : {
          nt_semantics_5F_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (inLexique, var_cas_syntaxComponentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (467)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'get_lexique_infos'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_get_5F_lexique_5F_infos_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_lstring  &var_cas_outLexiqueName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueComponentsMap ;
  switch (select_parser_5F_parser_2 (inLexique)) {
    case 1 : {
      var_cas_lexiqueComponentsMap = var_cas_ioLexiqueMapForUse ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
      GGS_lstring  var_cas_fileName ;
      inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      var_cas_lexiqueComponentsMap = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
      nt_parse_5F_lexique_5F_for_5F_importing_ (inLexique, var_cas_fileName, var_cas_lexiqueComponentsMap) ;
      } break ;
    default :
      break ;
  }
  if (var_cas_lexiqueComponentsMap.isBuilt ()) {
    var_cas_lexiqueComponentsMap (HERE)->method_searchKey (inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (608)) ;
  }
  const GGS_bool cond_20294 = (var_cas_ioLexiqueMapForUse.reader_hasKey (var_cas_outLexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (610)))).operator_not () ;
  if (cond_20294.isBuiltAndTrue ()) {
    var_cas_ioLexiqueMapForUse.modifier_insertKey (inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (611)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_get_5F_lexique_5F_infos_i1_getLexiqueName (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lstring  &var_cas_outLexiqueName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_parser_5F_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      nt_parse_5F_lexique_5F_for_5F_importing_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_get_5F_lexique_5F_infos_i1_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_parser_5F_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      nt_parse_5F_lexique_5F_for_5F_importing_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  GGS_lstring  var_cas_nomTable ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomTable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableTable ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomTable, var_cas_typeEntite, var_cas_nomCppVariableTable COMMA_SOURCE_FILE_AT_LINE (653)) ;
  GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_typeEntite.getPtr (), true, var_cas_nomTable COMMA_SOURCE_FILE_AT_LINE (655)).reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (655)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomMethodeBloc ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethodeBloc) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureDebut ;
  GGS_L_EXsignature  var_cas_signatureFin ;
  if (var_cas_tableMethodesBloc.isBuilt ()) {
    var_cas_tableMethodesBloc (HERE)->method_searchKey (inLexique, var_cas_nomMethodeBloc, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (662)) ;
  }
  GGS_typeExpressionList  var_cas_prologueExpressionList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_ (inLexique, var_cas_signatureDebut, var_cas_prologueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMapBlockPrologueInstruction ::constructor_new (inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_prologueExpressionList COMMA_SOURCE_FILE_AT_LINE (678)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  GGS_typeExpressionList  var_cas_epilogueExpressionList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_ (inLexique, var_cas_signatureFin, var_cas_epilogueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_AC_galgasType  automatic_var_23562_0 ;
  GGS_typeCplusPlusName  automatic_var_23562_1 ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomTable, automatic_var_23562_0, automatic_var_23562_1 COMMA_SOURCE_FILE_AT_LINE (714)) ;
  var_cas_instruction = GGS_typeMapBlockEpilogueInstruction ::constructor_new (inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_epilogueExpressionList COMMA_SOURCE_FILE_AT_LINE (716)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i2_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i2_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_nonTerminalSymbolMapForGrammarAnalysis  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_productionRuleListForGrammarAnalysis  &/* var_cas_ioProductionRulesListForGrammar */,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_uint  &/* var_cas_ioProductionIndex */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  inLexique.assignFromAttribute_tokenString (var_cas_ruleName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels0 ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode0 = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammar ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_parametersMapForGrammar = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (765)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (766)) ;
  GGS_typeListeTypesEtNomsArgMethode  automatic_var_25653_0 ;
  nt_formal_5F_arguments_5F_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels0, var_cas_tableArgumentsMethode0, automatic_var_25653_0, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_lstring  var_cas_emptyId = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (775)) ;
  var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels0 COMMA_SOURCE_FILE_AT_LINE (776)) ;
  var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_emptyId, var_cas_signatureForGrammar COMMA_SOURCE_FILE_AT_LINE (777)) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_parser_5F_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_parser_5F_parser_4 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
              GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (787)) ;
              var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_altName, GGS_L_EXsignature ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (788)) ;
              var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_altName, var_cas_signatureForGrammarComponent COMMA_SOURCE_FILE_AT_LINE (789)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_altName ;
              inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
              nt_formal_5F_arguments_5F_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              var_cas_parametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeDeTypesFormels COMMA_SOURCE_FILE_AT_LINE (808)) ;
              var_cas_parametersMapForGrammar.modifier_insertKey (inLexique, var_cas_altName, var_cas_signatureForGrammarComponent COMMA_SOURCE_FILE_AT_LINE (809)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_ruleName, var_cas_ioNonTerminalSymbolsMap.reader_count (), var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (815)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (inLexique, var_cas_ruleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (816)) ;
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeNonterminalToGenerate ::constructor_new (inLexique, var_cas_ruleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_SOURCE_FILE_AT_LINE (817)) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i3_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_nonTerminalSymbolMapForGrammarAnalysis  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_productionRuleListForGrammarAnalysis  &/* var_cas_ioProductionRulesListForGrammar */,
                                GGS_uint  &/* var_cas_ioProductionIndex */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_nonterminalSymbolParametersMap = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (828)) ;
  GGS_signatureForGrammarAnalysis  var_cas_signature0 ;
  nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature0) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (831)) ;
  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature0 COMMA_SOURCE_FILE_AT_LINE (832)) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_parser_5F_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_parser_5F_parser_4 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (842)), GGS_signatureForGrammarAnalysis ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (841)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signature ;
              nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
              var_cas_nonterminalSymbolParametersMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (849)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (inLexique, var_cas_nonterminalSymbolName, var_cas_ioNonTerminalSymbolsMap.reader_count (), var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (855)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i3_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_nonterminal) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_parser_5F_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_parser_5F_parser_4 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_formal_5F_arguments_5F_list_parse (inLexique) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_nonTerminalSymbolMapForGrammarAnalysis  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_productionRuleListForGrammarAnalysis  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_uint  &var_cas_ioProductionIndex) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  inLexique.assignFromAttribute_tokenString (var_cas_ruleName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (881)) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammar ;
  nt_formal_5F_arguments_5F_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  if (var_cas_ioNonTerminalSymbolMapForSyntax.isBuilt ()) {
    var_cas_ioNonTerminalSymbolMapForSyntax (HERE)->method_searchKey (inLexique, var_cas_ruleName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (894)) ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap = GGS_typeAltProductionsMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (896)) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (897)) ;
  GGS_bool var_cas_hasParseLabel = var_cas_nonterminalSymbolAltMap.reader_hasKey (GGS_string ("parse")) ;
  GGS_bool var_cas_checkNonTerminalsAreDeclaredWithParseLabel = var_cas_hasParseLabel ;
  GGS_string var_cas_productionTagName ;
  switch (select_parser_5F_parser_5 (inLexique)) {
    case 1 : {
      var_cas_productionTagName = GGS_string ("") ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
      GGS_lstring  var_cas_tagName ;
      inLexique.assignFromAttribute_tokenString (var_cas_tagName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      var_cas_productionTagName = var_cas_tagName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (909)) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_firstBranchErrorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signaturePremiereBrancheFournieParPrototype ;
  if (var_cas_nonterminalSymbolAltMap.isBuilt ()) {
    var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signaturePremiereBrancheFournieParPrototype COMMA_SOURCE_FILE_AT_LINE (915)) ;
  }
  ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_signaturePremiereBrancheFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_firstBranchErrorLocation COMMA_SOURCE_FILE_AT_LINE (919)) ;
  GGS_typeInstructionList  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  nt_syntax_5F_instructions_5F_list_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_checkNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature, GGS_bool (false), var_cas_ioSemanticContext) ;
  var_cas_altProductionsMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (942)) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_parser_5F_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (953)) ;
          GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
          nt_formal_5F_arguments_5F_list_ (inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
          if (var_cas_nonterminalSymbolAltMap.isBuilt ()) {
            var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signatureFournieParPrototype COMMA_SOURCE_FILE_AT_LINE (966)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (967)) ;
          GGS_typeInstructionList  var_cas_branchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
          GGS_syntaxInstructionListForGrammarAnalysis  var_cas_branchSyntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
          nt_syntax_5F_instructions_5F_list_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, GGS_bool (false), var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_branchInstructionList, var_cas_tableTerminaux, var_cas_branchSyntaxSignature, GGS_bool (false), var_cas_ioSemanticContext) ;
          var_cas_altProductionsMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_branchInstructionList, var_cas_branchSyntaxSignature, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (988)) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  if (var_cas_altProductionsMap.isBuilt ()) {
    ::routine_checkLabelSignatures (inLexique,  var_cas_altProductionsMap COMMA_SOURCE_FILE_AT_LINE (1000)) ;
  }
  {
    GGS_M_nonterminalSymbolAlts::cEnumerator enumerator_33499 (var_cas_nonterminalSymbolAltMap, true) ;
    const GGS_M_nonterminalSymbolAlts::cElement * operand_33499 = NULL ;
    while (((operand_33499 = enumerator_33499.nextObject ()))) {
      macroValidPointer (operand_33499) ;
      const GGS_bool cond_33678 = ((operand_33499->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1003))).operator_isNotEqual (GGS_string ("parse"))).operator_and ((var_cas_altProductionsMap.reader_hasKey (operand_33499->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)))).operator_not ()) ;
      if (cond_33678.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_33499->mKey)).operator_concat (GGS_string ("' label is not implemented within the rule")) COMMA_SOURCE_FILE_AT_LINE (1005)) ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeProductionAengendrer ::constructor_new (inLexique, var_cas_ruleName, var_cas_altProductionsMap, var_cas_productionTagName, var_cas_inLexiqueClassName, var_cas_hasParseLabel, var_cas_ioProductionIndex COMMA_SOURCE_FILE_AT_LINE (1008)) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  GGS_uint  var_cas_ruleIndex = GGS_uint (0U) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_ruleName, var_cas_ruleIndex, var_cas_syntaxSignature, var_cas_ioProductionIndex) ;
  var_cas_ioProductionIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1025)) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i4_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_nonTerminalSymbolMapForGrammarAnalysis  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_productionRuleListForGrammarAnalysis  &var_cas_ioProductionRulesListForGrammar,
                                GGS_uint  &var_cas_ioProductionIndex) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
  switch (select_parser_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_instructionsList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  nt_syntax_5F_instructions_5F_list_importSyntax (inLexique, var_cas_instructionsList) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_parser_5F_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          nt_formal_5F_arguments_5F_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          nt_syntax_5F_instructions_5F_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_leftNonterminalSymbolIndex = GGS_uint (0U) ;
  var_cas_ioProductionRulesListForGrammar.addAssign_operation (var_cas_nonterminalSymbolName, var_cas_leftNonterminalSymbolIndex, var_cas_instructionsList, var_cas_ioProductionIndex) ;
  var_cas_ioProductionIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_declaration_i4_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  switch (select_parser_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_parser_5F_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          nt_formal_5F_arguments_5F_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          nt_syntax_5F_instructions_5F_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  GGS_location  var_cas_positionErreur = GGS_location (inLexique) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (inLexique, var_cas_positionErreur COMMA_SOURCE_FILE_AT_LINE (1083)) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_i5_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_i5_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_bool /* var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool /* var_cas_inIsInvokedWithinParseLoopInstruction */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeDesAttributsFormels ;
  if (var_cas_tableTerminaux.isBuilt ()) {
    var_cas_tableTerminaux (HERE)->method_searchKey (inLexique, var_cas_terminalSymbolName, var_cas_listeDesAttributsFormels COMMA_SOURCE_FILE_AT_LINE (1126)) ;
  }
  GGS_L_assignedVariables  var_cas_listeTypeEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  nt_input_5F_parameters_5F_list_ (inLexique, var_cas_inEntitiesMap, var_cas_listeTypeEffectifs, var_cas_allVariablesList, var_cas_listeDesAttributsFormels, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionVerifSyntaxique ::constructor_new (inLexique, var_cas_terminalSymbolName, var_cas_listeTypeEffectifs, var_cas_inLexiqueClassName COMMA_SOURCE_FILE_AT_LINE (1137))) ;
  GGS_uint  var_cas_terminalSymbolIndex = GGS_uint (0U) ;
  GGS_abstractSyntaxInstructionForGrammarAnalysis  var_cas_i = GGS_terminalInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_terminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1143)), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (1143)) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i6_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_terminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  nt_input_5F_parameters_5F_list_parse (inLexique) ;
  GGS_abstractSyntaxInstructionForGrammarAnalysis  var_cas_instruction = GGS_terminalInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_terminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)), var_cas_terminalSymbolName, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1152)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i6_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  nt_input_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inLexiqueClassName */,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_parser_5F_parser_7 (inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string ("parse"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      } break ;
    case 3 : {
      inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  if (var_cas_ioNonTerminalSymbolMapForSyntax.isBuilt ()) {
    var_cas_ioNonTerminalSymbolMapForSyntax (HERE)->method_searchKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (1191)) ;
  }
  GGS_L_EXsignature  var_cas_signatureMethode ;
  if (var_cas_nonterminalSymbolAltMap.isBuilt ()) {
    var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_signatureMethode COMMA_SOURCE_FILE_AT_LINE (1193)) ;
  }
  const GGS_bool cond_40640 = (var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel).operator_and ((var_cas_altName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1195))).operator_isNotEqual (GGS_string ("parse"))) ;
  if (cond_40640.isBuiltAndTrue ()) {
    const GGS_bool cond_40629 = (var_cas_nonterminalSymbolAltMap.reader_hasKey (GGS_string ("parse"))).operator_not () ;
    if (cond_40629.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (1198)) ;
    }
  }
  const GGS_bool cond_40934 = (var_cas_inIsInvokedWithinParseLoopInstruction).operator_and ((var_cas_altName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1200))).operator_isNotEqual (GGS_string ("parse"))) ;
  if (cond_40934.isBuiltAndTrue ()) {
    const GGS_bool cond_40923 = (var_cas_nonterminalSymbolAltMap.reader_hasKey (GGS_string ("parse"))).operator_not () ;
    if (cond_40923.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("As this nonterminal is invoked within a 'parse loop ...' instruction, it must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (1203)) ;
    }
  }
  GGS_typeExpressionList  var_cas_parametersExpressionList ;
  nt_actual_5F_parameters_5F_list_ (inLexique, var_cas_signatureMethode, var_cas_parametersExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal ::constructor_new (inLexique, var_cas_nonterminalSymbolName, var_cas_parametersExpressionList, var_cas_altName COMMA_SOURCE_FILE_AT_LINE (1218)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_abstractSyntaxInstructionForGrammarAnalysis  var_cas_i = GGS_nonTerminalInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_nonterminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)), var_cas_nonterminalSymbolName, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1224)) ;
  var_cas_ioSyntaxSignature.addAssign_operation (var_cas_i) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i7_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_5F_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  GGS_abstractSyntaxInstructionForGrammarAnalysis  var_cas_instruction = GGS_nonTerminalInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_nonterminalSymbolName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)), var_cas_nonterminalSymbolName, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i7_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  switch (select_parser_5F_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_5F_parameters_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesChoix = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
  GGS_branchListForGrammarAnalysis  var_cas_selectList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1274)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)) ;
  GGS_typeInstructionList  var_cas_firstBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_firstBranchSyntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesChoix.addAssign_operation (var_cas_firstBranchInstructionList) ;
  var_cas_selectList.addAssign_operation (var_cas_firstBranchSyntaxSignature) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1275)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1297)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheChoix = GGS_typeInstructionList ::constructor_emptyList () ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheChoix, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesChoix.addAssign_operation (var_cas_listeInstructionsBrancheChoix) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1297)) ;
      switch (select_parser_5F_parser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1274)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_select_instruction ::constructor_new (inLexique, var_cas_listeBranchesChoix, var_cas_positionDebut COMMA_SOURCE_FILE_AT_LINE (1325)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  var_cas_ioSyntaxSignature.addAssign_operation (GGS_selectInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_positionDebut, var_cas_selectList, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1327))) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i8_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_branchListForGrammarAnalysis  var_cas_selectList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
  var_cas_selectList.addAssign_operation (var_cas_syntaxSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature2 = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_syntaxSignature2) ;
        var_cas_selectList.addAssign_operation (var_cas_syntaxSignature2) ;
      switch (select_parser_5F_parser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_selectInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_positionDebut, var_cas_selectList, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1348))) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i8_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
      switch (select_parser_5F_parser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesRepeter = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
  GGS_branchListForGrammarAnalysis  var_cas_whileList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)) ;
  GGS_typeInstructionList  var_cas_listeInstructionsPremiereBranche = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_repeatBranchInstructionsList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsPremiereBranche, var_cas_tableTerminaux, var_cas_repeatBranchInstructionsList, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsPremiereBranche) ;
  var_cas_whileList.addAssign_operation (var_cas_repeatBranchInstructionsList) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1376)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1396)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheRepeter = GGS_typeInstructionList ::constructor_emptyList () ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheRepeter, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesRepeter.addAssign_operation (var_cas_listeInstructionsBrancheRepeter) ;
        var_cas_whileList.addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1396)) ;
      switch (select_parser_5F_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_repeat_instruction ::constructor_new (inLexique, var_cas_listeBranchesRepeter, var_cas_positionDebut COMMA_SOURCE_FILE_AT_LINE (1424)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  var_cas_ioSyntaxSignature.addAssign_operation (GGS_repeatInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_positionDebut, var_cas_whileList, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1426))) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i9_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut = GGS_location (inLexique) ;
  GGS_branchListForGrammarAnalysis  var_cas_repeatList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
  var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_syntaxSignature) ;
        var_cas_repeatList.addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_parser_5F_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_repeatInstructionForGrammarAnalysis ::constructor_new (inLexique, var_cas_positionDebut, var_cas_repeatList, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (1447))) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i9_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
        nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
      switch (select_parser_5F_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_parser_5F_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
      GGS_typeExpression  var_cas_variantExpression ;
      GGS_AC_galgasType  var_cas_variantResultType ;
      nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
      GGS_typeGalgas_uint  var_cas_ui = GGS_typeGalgas_uint::castFrom (inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1484)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
      GGS_typeExpression  var_cas_conditionalExpression ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1497)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
      var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)) ;
      var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList, var_cas_tableTerminaux, var_cas_syntaxSignature, GGS_bool (true), var_cas_inSemanticContext) ;
      var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1503)) ;
      var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)) ;
      var_cas_instruction = GGS_C_parse_loop_instruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_variantExpression, var_cas_conditionalExpression, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (1520)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list ::constructor_emptyList () ;
      GGS_location  var_cas_instructionStartLocation = GGS_location (inLexique) ;
      GGS_typeListeBranchesInstructions  var_cas_branchList = GGS_typeListeBranchesInstructions ::constructor_emptyList () ;
      GGS_branchListForGrammarAnalysis  var_cas_whileList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
      GGS_typeInstructionList  var_cas_firstBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_syntaxInstructionListForGrammarAnalysis  var_cas_firstBranchSyntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionsList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_branchList.addAssign_operation (var_cas_firstBranchInstructionsList) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_firstBranchSyntaxSignature, var_cas_instructionStartLocation) ;
      {
        GGS_syntaxInstructionListForGrammarAnalysis::cEnumerator enumerator_53598 (var_cas_firstBranchSyntaxSignature, true) ;
        const GGS_syntaxInstructionListForGrammarAnalysis::cElement * operand_53598 = NULL ;
        while (((operand_53598 = enumerator_53598.nextObject ()))) {
          macroValidPointer (operand_53598) ;
          var_cas_ioSyntaxSignature.addAssign_operation (operand_53598->mInstruction) ;
        }
      }
      { bool syntaxRepeat_11 = true ;
        while (syntaxRepeat_11) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation = GGS_location (inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
            GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList.addAssign_operation (var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
          switch (select_parser_5F_parser_11 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_11 = false ;
              break ;
          }
        }
      }
      var_cas_instruction = GGS_C_parse_rewind_instruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_branchList COMMA_SOURCE_FILE_AT_LINE (1578)) ;
      if (var_cas_parse_rewind_signature_list.isBuilt ()) {
        ::routine_checkParseRewindSignatures (inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (1580)) ;
      }
      } break ;
    case 3 : {
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list ::constructor_emptyList () ;
      GGS_L_expression_instructionsList_list  var_cas_branchList = GGS_L_expression_instructionsList_list ::constructor_emptyList () ;
      var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
            GGS_typeExpression  var_cas_expression ;
            GGS_AC_galgasType  var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation = GGS_location (inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
            GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList.addAssign_operation (var_cas_expression, var_cas_instructionsList, GGS_location (inLexique)) ;
            var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
            var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1588)) ;
          switch (select_parser_5F_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (1624)) ;
      GGS_location  var_cas_branchStartLocation = GGS_location (inLexique) ;
      GGS_typeInstructionList  var_cas_elseInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxSignature = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_parse_rewind_signature_list.addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
      {
        GGS_syntaxInstructionListForGrammarAnalysis::cEnumerator enumerator_57078 (var_cas_syntaxSignature, true) ;
        const GGS_syntaxInstructionListForGrammarAnalysis::cElement * operand_57078 = NULL ;
        while (((operand_57078 = enumerator_57078.nextObject ()))) {
          macroValidPointer (operand_57078) ;
          var_cas_ioSyntaxSignature.addAssign_operation (operand_57078->mInstruction) ;
        }
      }
      var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1624)) ;
      var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)) ;
      var_cas_instruction = GGS_C_parse_when_else_instruction ::constructor_new (inLexique, var_cas_branchList, var_cas_elseInstructionsList COMMA_SOURCE_FILE_AT_LINE (1648)) ;
      if (var_cas_parse_rewind_signature_list.isBuilt ()) {
        ::routine_checkParseRewindSignatures (inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (1650)) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i10_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  switch (select_parser_5F_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      { bool syntaxRepeat_11 = true ;
        while (syntaxRepeat_11) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
          switch (select_parser_5F_parser_11 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_11 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
            nt_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
          switch (select_parser_5F_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_importSyntax (inLexique, var_cas_ioInstructionList) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instruction_i10_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  switch (select_parser_5F_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
      { bool syntaxRepeat_11 = true ;
        while (syntaxRepeat_11) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
          switch (select_parser_5F_parser_11 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_11 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
            nt_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
          switch (select_parser_5F_parser_12 (inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_syntax_5F_instructions_5F_list_5F_no_5F_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'syntax_instructions_list_no_verif'    *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_5F_no_5F_verif_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioSyntaxSignature,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_typeTableEnAvant  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_parser_5F_parser_13 (inLexique)) {
        case 2 : {
          nt_syntax_5F_instruction_ (inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
          } break ;
        case 3 : {
          nt_semantic_5F_instruction_ (inLexique, var_cas_tableEnAvant, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_5F_no_5F_verif_i11_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_syntaxInstructionListForGrammarAnalysis  &var_cas_ioInstructionList) {
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_parser_5F_parser_13 (inLexique)) {
        case 2 : {
          nt_syntax_5F_instruction_importSyntax (inLexique, var_cas_ioInstructionList) ;
          } break ;
        case 3 : {
          nt_semantic_5F_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::rule_parser_5F_parser_syntax_5F_instructions_5F_list_5F_no_5F_verif_i11_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_parser_5F_parser_13 (inLexique)) {
        case 2 : {
          nt_syntax_5F_instruction_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_semantic_5F_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

