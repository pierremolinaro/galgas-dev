//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'parser_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       may 17th, 2007, at 18h5'51"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "parser_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parser_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//#define DEBUG_TRACE_ENABLED

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", NULL, "") ;
  #endif
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees::constructor_emptyMap (_inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_componentName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_tableTerminaux ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (_inLexique, var_cas_tableTerminaux, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_string var_cas_defLexique ;
  var_cas_defLexique = var_cas_lexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_entityToImplementMap  var_cas_allMetamodelClassMap ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_allMetamodelClassMap) ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolForSyntax  var_cas_nonTerminalSymbolsMapForSyntax ;
  var_cas_nonTerminalSymbolsMapForSyntax = GGS_M_nonTerminalSymbolForSyntax::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_ (_inLexique, var_cas_defLexique, var_cas_nonTerminalSymbolsMapForSyntax, var_cas_entitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_componentName, var_cas_allMetamodelClassMap, var_cas_ioTreewalkingComponentMap) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_ (_inLexique, var_cas_entitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioTreewalkingComponentMap) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_typeTableNomRoutinesDeclarees::element_type * operand_13570 = var_cas_tableNomRoutinesDeclarees.firstObject () ;
  while ((operand_13570 != NULL)) {
    macroValidPointer (operand_13570) ;
    if (((var_cas_tableRoutinesAimplementer.reader_hasKey (_inLexique, operand_13570->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_SOURCE_FILE_AT_LINE (354)))._operator_not ()).isBuiltAndTrue ()) {
      operand_13570->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the routine '"))._operator_concat (operand_13570->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (355))))._operator_concat (GGS_string (true, "' is not implemented within the component")) COMMA_SOURCE_FILE_AT_LINE (357)) ;
    }
    operand_13570 = operand_13570->nextObject () ;
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (_inLexique, var_cas_componentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (360)) ;
  if (var_cas_componentName._isBuilt () &&
      var_cas_inclusionsForHeaderFile._isBuilt () &&
      var_cas_defLexique._isBuilt () &&
      var_cas_listeEntitesAengendrer._isBuilt () &&
      var_cas_inclusionsForImplementationFile._isBuilt ()) {
    ::routine_generateSemanticsComponent (_inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (366)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_syntaxComponentName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse ;
  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  automatic_var_0 ;
  nt_get_lexique_infos_ (_inLexique, automatic_var_0, var_cas_lexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
  var_cas_grammarComponentsMap = GGS_M_grammarComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  var_cas_optionsComponentsMap = GGS_M_optionComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_entityToImplementMap  var_cas_allMetamodelClassMap ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_lexiqueMapForUse, var_cas_semanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_allMetamodelClassMap) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_importSyntax (_inLexique, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (_inLexique, var_cas_syntaxComponentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (444)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", "importSemantics", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", "importLexique", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", "importGrammarForSemantics", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_262_6_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<galgas_component>", "importOptions", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$syntax$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'get_lexique_infos'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_get_lexique_infos_parser_parser_534_6_ (galgas_scanner & _inLexique,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_lstring  &var_cas_outLexiqueName) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<get_lexique_infos>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$import$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$lexique$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueComponentsMap ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      var_cas_lexiqueComponentsMap = var_cas_ioLexiqueMapForUse ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$in$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_fileName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      var_cas_lexiqueComponentsMap = GGS_M_lexiqueComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
      nt_parse_lexique_for_importing_ (_inLexique, var_cas_fileName, var_cas_lexiqueComponentsMap) ;
      } break ;
    default :
      break ;
  }
  if (var_cas_lexiqueComponentsMap._isBuilt ()) {
    var_cas_lexiqueComponentsMap (HERE)->method_searchKey (_inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (558)) ;
  }
  if (((var_cas_ioLexiqueMapForUse.reader_hasKey (_inLexique, var_cas_outLexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (560)) COMMA_SOURCE_FILE_AT_LINE (560)))._operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioLexiqueMapForUse.modifier_insertKey (_inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (561)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_get_lexique_infos_parser_parser_534_6_getLexiqueName (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outLexiqueName) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<get_lexique_infos>", "getLexiqueName", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$import$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$lexique$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$in$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_534_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<get_lexique_infos>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$import$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$lexique$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$in$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_583_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_lstring  var_cas_nomTable ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomTable) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableTable ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_nomTable, var_cas_typeEntite, var_cas_nomCppVariableTable COMMA_SOURCE_FILE_AT_LINE (603)) ;
  GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
  { cPtr_typeGalgasMapType * ptrExtraire_ = dynamic_cast <cPtr_typeGalgasMapType *> (var_cas_typeEntite.getPtr ()) ;
    if (ptrExtraire_ == NULL) {
      var_cas_tableMethodesBloc._drop_operation () ;
      if (var_cas_typeEntite.getPtr () != NULL) {
        TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
        C_String message2_ ;
        message1_ (0 COMMA_HERE) << cPtr_typeGalgasMapType::static_string_message_messageGalgasType () ;
        message2_ << var_cas_typeEntite (HERE)->message_messageGalgasType () ;
        var_cas_nomTable.signalExtractError (_inLexique, message1_, message2_ COMMA_SOURCE_FILE_AT_LINE (605)) ;
      }
    }else{
      macroValidPointer (ptrExtraire_) ;
      var_cas_tableMethodesBloc = ptrExtraire_->aTableMethodesSurcharger ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$.$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  GGS_lstring  var_cas_nomMethodeBloc ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomMethodeBloc) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureDebut ;
  GGS_L_EXsignature  var_cas_signatureFin ;
  if (var_cas_tableMethodesBloc._isBuilt ()) {
    var_cas_tableMethodesBloc (HERE)->method_searchKey (_inLexique, var_cas_nomMethodeBloc, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (612)) ;
  }
  GGS_typeExpressionList  var_cas_prologueExpressionList ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureDebut, var_cas_prologueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMapBlockPrologueInstruction::constructor_new (_inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_prologueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_typeExpressionList  var_cas_epilogueExpressionList ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureFin, var_cas_epilogueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  GGS_AC_galgasType  automatic_var_1 ;
  GGS_typeCplusPlusName  automatic_var_2 ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_nomTable, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (662)) ;
  var_cas_instruction = GGS_typeMapBlockEpilogueInstruction::constructor_new (_inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_epilogueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_583_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$.$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_583_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$.$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$identifier$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$block$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$($", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$)$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_693_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &/* var_cas_ioProductionRulesListForGrammar */,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$nonterminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_ruleName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammar ;
  nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_lstring  var_cas_returnedEntity ;
  GGS_lstring  var_cas_mdaResultVariableName ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_entityPropertyMap  automatic_var_3 ;
      GGS_bool automatic_var_4 ;
      GGS_entityPropertyMap  automatic_var_5 ;
      GGS_lstring  automatic_var_6 ;
      GGS_typeSuperClassesMap  automatic_var_7 ;
      GGS_typeListeAttributsSemantiques  automatic_var_8 ;
      GGS_string automatic_var_9 ;
      GGS_uint  automatic_var_10 ;
      if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
        var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_3, automatic_var_4, automatic_var_5, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (730)) ;
      }
      switch (select_parser_parser_3 (_inLexique)) {
        case 1 : {
          var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique._assignFromAttribute_tokenString (var_cas_mdaResultVariableName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
  var_cas_parametersMap = GGS_M_nonterminalSymbolAlts::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
  var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_emptyId ;
  var_cas_emptyId = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (740)) ;
  var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_signatureForGrammar, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (741)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_4 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          switch (select_parser_parser_5 (_inLexique)) {
            case 1 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$parse$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
              var_cas_listeDeTypesFormels = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              var_cas_signatureForGrammarComponent = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
              GGS_lstring  var_cas_altName ;
              var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE) ;
              var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeDeTypesFormels, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (754)) ;
              var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signatureForGrammarComponent, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (755)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_altName ;
              _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ (" ?") ;
                  message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                  _inLexique.didParseTerminal ("$identifier$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
              var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              GGS_lstring  var_cas_returnedEntity ;
              switch (select_parser_parser_6 (_inLexique)) {
                case 1 : {
                  var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ ;
                      _inLexique.didParseTerminal ("$->$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                  _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ (" ?") ;
                      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                      _inLexique.didParseTerminal ("$type_name$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                  GGS_AC_semanticsEntity  var_cas_e ;
                  if (var_cas_ioEntitiesMap._isBuilt ()) {
                    var_cas_ioEntitiesMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, var_cas_e COMMA_SOURCE_FILE_AT_LINE (782)) ;
                  }
                  GGS_AC_galgasType  var_cas_type ;
                  { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_e.getPtr ()) ;
                    if (ptrExtraire_ == NULL) {
                      var_cas_type._drop_operation () ;
                      if (var_cas_e.getPtr () != NULL) {
                        TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
                        C_String message2_ ;
                        message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;
                        message2_ << var_cas_e (HERE)->message_messageTypeEntite () ;
                        var_cas_returnedEntity.signalExtractError (_inLexique, message1_, message2_ COMMA_SOURCE_FILE_AT_LINE (784)) ;
                      }
                    }else{
                      macroValidPointer (ptrExtraire_) ;
                      var_cas_type = ptrExtraire_->aDefType ;
                    }
                  }
                  { cPtr_typeGalgas_singleReferenceEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (var_cas_type.getPtr ()) ;
                    if (ptrExtraire_ == NULL) {
                      if (var_cas_type.getPtr () != NULL) {
                        TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
                        C_String message2_ ;
                        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleReferenceEntity::static_string_message_messageGalgasType () ;
                        message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
                        var_cas_returnedEntity.signalExtractError (_inLexique, message1_, message2_ COMMA_SOURCE_FILE_AT_LINE (785)) ;
                      }
                    }else{
                      macroValidPointer (ptrExtraire_) ;
                    }
                  }
                  } break ;
                default :
                  break ;
              }
              var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeDeTypesFormels, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (787)) ;
              var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signatureForGrammarComponent, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (788)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_ruleName, var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (796)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_ruleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (797)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_ruleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_693_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &/* var_cas_ioProductionRulesListForGrammar */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$nonterminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
  GGS_lstring  var_cas_returnedEntity ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_3 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
  var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (822)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_4 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          switch (select_parser_parser_5 (_inLexique)) {
            case 1 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$parse$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
              GGS_L_signature  var_cas_signature ;
              var_cas_signature = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
              GGS_lstring  var_cas_noReturnedEntity ;
              var_cas_noReturnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE), var_cas_signature, var_cas_noReturnedEntity COMMA_SOURCE_FILE_AT_LINE (834)) ;
              } break ;
            case 2 : {
              _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ (" ?") ;
                  message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                  _inLexique.didParseTerminal ("$identifier$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_signature  var_cas_signature ;
              nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
              GGS_lstring  var_cas_returnedEntity ;
              switch (select_parser_parser_6 (_inLexique)) {
                case 1 : {
                  var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ ;
                      _inLexique.didParseTerminal ("$->$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                  _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ (" ?") ;
                      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                      _inLexique.didParseTerminal ("$type_name$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (850)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (857)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_693_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$nonterminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  nt_formal_arguments_list_parse (_inLexique) ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_3 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_4 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          switch (select_parser_parser_5 (_inLexique)) {
            case 1 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$parse$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
              } break ;
            case 2 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ (" ?") ;
                  message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                  _inLexique.didParseTerminal ("$identifier$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_formal_arguments_list_parse (_inLexique) ;
              switch (select_parser_parser_6 (_inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ ;
                      _inLexique.didParseTerminal ("$->$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ (" ?") ;
                      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                      _inLexique.didParseTerminal ("$type_name$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_865_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_ruleName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammar ;
  nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_lstring  var_cas_returnedEntity ;
  GGS_lstring  var_cas_mdaResultVariableName ;
  switch (select_parser_parser_7 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_entityPropertyMap  automatic_var_11 ;
      GGS_bool automatic_var_12 ;
      GGS_entityPropertyMap  automatic_var_13 ;
      GGS_lstring  automatic_var_14 ;
      GGS_typeSuperClassesMap  automatic_var_15 ;
      GGS_typeListeAttributsSemantiques  automatic_var_16 ;
      GGS_string automatic_var_17 ;
      GGS_uint  automatic_var_18 ;
      if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
        var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_11, automatic_var_12, automatic_var_13, automatic_var_14, automatic_var_15, automatic_var_16, automatic_var_17, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (902)) ;
      }
      switch (select_parser_parser_8 (_inLexique)) {
        case 1 : {
          var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique._assignFromAttribute_tokenString (var_cas_mdaResultVariableName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  if (var_cas_ioNonTerminalSymbolMapForSyntax._isBuilt ()) {
    var_cas_ioNonTerminalSymbolMapForSyntax (HERE)->method_searchKey (_inLexique, var_cas_ruleName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (911)) ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_bool var_cas_hasParseLabel ;
  var_cas_hasParseLabel = var_cas_nonterminalSymbolAltMap.reader_hasKey (_inLexique, GGS_string (true, "parse") COMMA_SOURCE_FILE_AT_LINE (916)) ;
  GGS_bool var_cas_checkNonTerminalsAreDeclaredWithParseLabel ;
  var_cas_checkNonTerminalsAreDeclaredWithParseLabel = var_cas_hasParseLabel ;
  GGS_string var_cas_productionTagName ;
  switch (select_parser_parser_9 (_inLexique)) {
    case 1 : {
      var_cas_productionTagName = GGS_string (true, "") ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$tag$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      GGS_lstring  var_cas_tagName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_tagName) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      var_cas_productionTagName = var_cas_tagName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (926)) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_firstBranchErrorLocation ;
  var_cas_firstBranchErrorLocation = GGS_location (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signaturePremiereBrancheFournieParPrototype ;
  GGS_lstring  var_cas_formalReturnedEntity ;
  if (var_cas_nonterminalSymbolAltMap._isBuilt ()) {
    var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signaturePremiereBrancheFournieParPrototype, var_cas_formalReturnedEntity COMMA_SOURCE_FILE_AT_LINE (933)) ;
  }
  ::routine_verifierCompatibiliteSignatures (_inLexique,  var_cas_signaturePremiereBrancheFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_firstBranchErrorLocation COMMA_SOURCE_FILE_AT_LINE (938)) ;
  if ((((var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (943)))._operator_isEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (943)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntity.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the non terminal declaration does not name any returned entity") COMMA_SOURCE_FILE_AT_LINE (945)) ;
  }else if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (945)))._operator_isNotEqual (var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (945)))).isBuiltAndTrue ()) {
    GGS_typeSuperClassesMap  var_cas_superEntityMap ;
    GGS_entityPropertyMap  automatic_var_19 ;
    GGS_bool automatic_var_20 ;
    GGS_entityPropertyMap  automatic_var_21 ;
    GGS_lstring  automatic_var_22 ;
    GGS_typeListeAttributsSemantiques  automatic_var_23 ;
    GGS_string automatic_var_24 ;
    GGS_uint  automatic_var_25 ;
    if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
      var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_19, automatic_var_20, automatic_var_21, automatic_var_22, var_cas_superEntityMap, automatic_var_23, automatic_var_24, automatic_var_25 COMMA_SOURCE_FILE_AT_LINE (947)) ;
    }
    if (((var_cas_superEntityMap.reader_hasKey (_inLexique, var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (948)) COMMA_SOURCE_FILE_AT_LINE (948)))._operator_not ()).isBuiltAndTrue ()) {
      var_cas_returnedEntity.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '@"))._operator_concat (var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (950))))._operator_concat (GGS_string (true, "' entity or one of its inherited entities is expected here")) COMMA_SOURCE_FILE_AT_LINE (951)) ;
    }
  }
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allPropertiesMap ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if (((var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (956)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_typeListeAttributsSemantiques  var_cas_propertyList ;
    GGS_typeSuperClassesMap  var_cas_superEntityMap ;
    GGS_entityPropertyMap  automatic_var_26 ;
    GGS_bool automatic_var_27 ;
    GGS_entityPropertyMap  automatic_var_28 ;
    GGS_lstring  automatic_var_29 ;
    GGS_string automatic_var_30 ;
    GGS_uint  automatic_var_31 ;
    if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
      var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_26, automatic_var_27, automatic_var_28, automatic_var_29, var_cas_superEntityMap, var_cas_propertyList, automatic_var_30, automatic_var_31 COMMA_SOURCE_FILE_AT_LINE (959)) ;
    }
    GGS_AC_galgasType  var_cas_definitionType ;
    var_cas_definitionType = GGS_typeGalgas_singleReferenceEntity::constructor_new (_inLexique, var_cas_returnedEntity, var_cas_propertyList, var_cas_superEntityMap.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (969)) COMMA_HERE) ;
    GGS_typeCplusPlusName  var_cas_nomCppVariable ;
    var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_mdaResultVariableName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (971)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (971)) COMMA_HERE) ;
    var_cas_tableArgumentsMethode.modifier_insertSingleEntityLocalVariable (_inLexique, var_cas_mdaResultVariableName, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (972)) ;
    var_cas_listeInstructions._addAssign_operation (GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE)) ;
  }else if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (974)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_bool automatic_var_32 ;
    GGS_entityPropertyMap  automatic_var_33 ;
    GGS_lstring  automatic_var_34 ;
    GGS_typeSuperClassesMap  automatic_var_35 ;
    GGS_typeListeAttributsSemantiques  automatic_var_36 ;
    GGS_string automatic_var_37 ;
    GGS_uint  automatic_var_38 ;
    if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
      var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, var_cas_allPropertiesMap, automatic_var_32, automatic_var_33, automatic_var_34, automatic_var_35, automatic_var_36, automatic_var_37, automatic_var_38 COMMA_SOURCE_FILE_AT_LINE (975)) ;
    }
    GGS_entityPropertyMap::element_type * operand_34103 = var_cas_allPropertiesMap.firstObject () ;
    while ((operand_34103 != NULL)) {
      macroValidPointer (operand_34103) ;
      if (operand_34103->mInfo.mPropertyType._isBuilt ()) {
        cPtr_typeGalgas_singleReferenceEntity * operand_34191 = dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (operand_34103->mInfo.mPropertyType.getPtr ()) ;
        if (operand_34191 != NULL) {
          macroValidPointer (operand_34191) ; 
          GGS_lstring  var_cas_nomVariable ;
          var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_34103->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (979)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (979)) COMMA_HERE) ;
          GGS_typeCplusPlusName  var_cas_nomCppVariable ;
          var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (980)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (980)) COMMA_HERE) ;
          var_cas_tableArgumentsMethode.modifier_insertSingleEntityLocalVariable (_inLexique, var_cas_nomVariable, operand_34103->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (981)) ;
          GGS_typeInstruction  var_cas_instruction ;
          var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, operand_34103->mInfo.mPropertyType COMMA_HERE) ;
          var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
        }else{
          cPtr_typeGalgas_multipleReferenceEntity * operand_34756 = dynamic_cast <cPtr_typeGalgas_multipleReferenceEntity *> (operand_34103->mInfo.mPropertyType.getPtr ()) ;
          if (operand_34756 != NULL) {
            macroValidPointer (operand_34756) ; 
            GGS_lstring  var_cas_nomVariable ;
            var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_34103->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (985)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (985)) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_nomCppVariable ;
            var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (986)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (986)) COMMA_HERE) ;
            var_cas_tableArgumentsMethode.modifier_insertListOfEntitiesLocalVariable (_inLexique, var_cas_nomVariable, operand_34103->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (987)) ;
            GGS_typeExpression  var_cas_sourceExpression ;
            var_cas_sourceExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, (operand_34756->mEntityTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (989)))._operator_concat (GGS_string (true, "List")), GGS_string (true, "emptyList"), GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) COMMA_HERE) ;
            GGS_typeInstruction  var_cas_instruction ;
            var_cas_instruction = GGS_C_declarationInstructionWithAssignment::constructor_new (_inLexique, operand_34103->mInfo.mPropertyType, var_cas_nomCppVariable, var_cas_sourceExpression COMMA_HERE) ;
            var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
          }else{ // Else part
            GGS_lstring  var_cas_nomVariable ;
            var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_34103->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1000)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1000)) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_nomCppVariable ;
            var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) COMMA_HERE) ;
            var_cas_tableArgumentsMethode.modifier_insertEntityAttributeLocalVariable (_inLexique, var_cas_nomVariable, operand_34103->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (1002)) ;
            GGS_typeInstruction  var_cas_instruction ;
            var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, operand_34103->mInfo.mPropertyType COMMA_HERE) ;
            var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
          }
        }
      }
      operand_34103 = operand_34103->nextObject () ;
    }
  }
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_checkNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (1024)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_10 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          GGS_lstring  var_cas_returnedEntity ;
          switch (select_parser_parser_11 (_inLexique)) {
            case 1 : {
              var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$->$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ (" ?") ;
                  message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                  _inLexique.didParseTerminal ("$type_name$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_entityPropertyMap  automatic_var_39 ;
              GGS_bool automatic_var_40 ;
              GGS_entityPropertyMap  automatic_var_41 ;
              GGS_lstring  automatic_var_42 ;
              GGS_typeSuperClassesMap  automatic_var_43 ;
              GGS_typeListeAttributsSemantiques  automatic_var_44 ;
              GGS_string automatic_var_45 ;
              GGS_uint  automatic_var_46 ;
              if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
                var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_39, automatic_var_40, automatic_var_41, automatic_var_42, automatic_var_43, automatic_var_44, automatic_var_45, automatic_var_46 COMMA_SOURCE_FILE_AT_LINE (1054)) ;
              }
              } break ;
            default :
              break ;
          }
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$:$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
          GGS_lstring  var_cas_returnedEntityFromPrototype ;
          if (var_cas_nonterminalSymbolAltMap._isBuilt ()) {
            var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signatureFournieParPrototype, var_cas_returnedEntityFromPrototype COMMA_SOURCE_FILE_AT_LINE (1060)) ;
          }
          ::routine_verifierCompatibiliteSignatures (_inLexique,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (1061)) ;
          GGS_typeInstructionList  var_cas_branchInstructionList ;
          var_cas_branchInstructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
          GGS_L_ruleSyntaxSignature  var_cas_branchSyntaxSignature ;
          var_cas_branchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
          nt_syntax_instructions_list_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, GGS_bool (true, false), var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_branchInstructionList, var_cas_tableTerminaux, var_cas_branchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
          var_cas_altProductionsMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_branchInstructionList, var_cas_branchSyntaxSignature, GGS_location (_inLexique), var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1088)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1089)), GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1082)) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if (var_cas_altProductionsMap._isBuilt ()) {
    ::routine_checkLabelSignatures (_inLexique,  var_cas_altProductionsMap COMMA_SOURCE_FILE_AT_LINE (1096)) ;
  }
  GGS_M_nonterminalSymbolAlts::element_type * operand_38796 = var_cas_nonterminalSymbolAltMap.firstObject () ;
  while ((operand_38796 != NULL)) {
    macroValidPointer (operand_38796) ;
    if ((((operand_38796->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1100)))._operator_isNotEqual (GGS_string (true, "parse")))._operator_and ((var_cas_altProductionsMap.reader_hasKey (_inLexique, operand_38796->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1100)) COMMA_SOURCE_FILE_AT_LINE (1100)))._operator_not ())).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_38796->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1101))))._operator_concat (GGS_string (true, "' label is not implemented within the rule")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
    }
    operand_38796 = operand_38796->nextObject () ;
  }
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_ruleName, var_cas_altProductionsMap, var_cas_productionTagName, var_cas_inLexiqueClassName, var_cas_hasParseLabel COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_uint  var_cas_ruleIndex ;
  var_cas_ruleIndex = GGS_uint (true, 0U) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_ruleName, var_cas_ruleIndex, var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_865_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
  GGS_lstring  var_cas_returnedEntity ;
  switch (select_parser_parser_7 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_8 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  switch (select_parser_parser_9 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$tag$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_instructionsList ;
  var_cas_instructionsList = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_importSyntax (_inLexique, var_cas_instructionsList) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_10 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (_inLexique) ;
          switch (select_parser_parser_11 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$->$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$type_name$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$:$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_leftNonterminalSymbolIndex ;
  var_cas_leftNonterminalSymbolIndex = GGS_uint (true, 0U) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_nonterminalSymbolName, var_cas_leftNonterminalSymbolIndex, var_cas_instructionsList) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_865_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_declaration>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  nt_formal_arguments_list_parse (_inLexique) ;
  switch (select_parser_parser_7 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$type_name$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_8 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  switch (select_parser_parser_9 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$tag$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$literal_string$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$:$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_10 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$label$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (_inLexique) ;
          switch (select_parser_parser_11 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ ;
                  _inLexique.didParseTerminal ("$->$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              #ifdef DEBUG_TRACE_ENABLED
                { C_String message_ (" ?") ;
                  message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                  _inLexique.didParseTerminal ("$type_name$", message_) ;
                }
              #endif
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$:$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$rule$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_parser_parser_1176_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list>", NULL, "") ;
  #endif
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (_inLexique COMMA_SOURCE_FILE_AT_LINE (1190)) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
  GGS_location  var_cas_positionErreur ;
  var_cas_positionErreur = GGS_location (_inLexique) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (_inLexique, var_cas_positionErreur COMMA_SOURCE_FILE_AT_LINE (1190)) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_parser_parser_1176_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list>", "importSyntax", "") ;
  #endif
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_1176_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list>", NULL, "") ;
  #endif
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1217_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_bool /* var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  /* var_cas_inAllMetamodelClassMap */,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$terminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeDesAttributsFormels ;
  if (var_cas_tableTerminaux._isBuilt ()) {
    var_cas_tableTerminaux (HERE)->method_searchKey (_inLexique, var_cas_terminalSymbolName, var_cas_listeDesAttributsFormels COMMA_SOURCE_FILE_AT_LINE (1234)) ;
  }
  GGS_L_assignedVariables  var_cas_listeTypeEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  nt_input_parameters_list_ (_inLexique, var_cas_listeTypeEffectifs, var_cas_allVariablesList, var_cas_listeDesAttributsFormels, var_cas_ioVariablesMap) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionVerifSyntaxique::constructor_new (_inLexique, var_cas_terminalSymbolName, var_cas_listeTypeEffectifs, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (true, 0U) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_terminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1251)), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1217_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$terminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (_inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_terminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1262)), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1217_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$terminal$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1271_6_ (galgas_scanner & _inLexique,
                                const GGS_string /* var_cas_inLexiqueClassName */,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$parse$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  if (var_cas_ioNonTerminalSymbolMapForSyntax._isBuilt ()) {
    var_cas_ioNonTerminalSymbolMapForSyntax (HERE)->method_searchKey (_inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (1297)) ;
  }
  GGS_L_EXsignature  var_cas_signatureMethode ;
  GGS_lstring  var_cas_returnedEntityFromSignature ;
  if (var_cas_nonterminalSymbolAltMap._isBuilt ()) {
    var_cas_nonterminalSymbolAltMap (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signatureMethode, var_cas_returnedEntityFromSignature COMMA_SOURCE_FILE_AT_LINE (1300)) ;
  }
  if (((var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel)._operator_and ((var_cas_altName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1302)))._operator_isNotEqual (GGS_string (true, "parse")))).isBuiltAndTrue ()) {
    if (((var_cas_nonterminalSymbolAltMap.reader_hasKey (_inLexique, GGS_string (true, "parse") COMMA_SOURCE_FILE_AT_LINE (1303)))._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (1305)) ;
    }
  }
  GGS_typeExpressionList  var_cas_parametersExpressionList ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureMethode, var_cas_parametersExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  GGS_lstring  var_cas_returnedEntityVariableName ;
  GGS_bool var_cas_isMultipleEntity ;
  var_cas_isMultipleEntity = GGS_bool (true, false) ;
  switch (select_parser_parser_13 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntityVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityVariableName) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$+>$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityVariableName) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_isMultipleEntity = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_variableEntityName ;
  var_cas_variableEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1332)))._operator_isEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1332)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the non terminal symbol is declared with no returned entity") COMMA_SOURCE_FILE_AT_LINE (1334)) ;
  }else if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1334)))._operator_isNotEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1334)))._operator_isEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the non terminal symbol is declared to return an instance of '@"))._operator_concat (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335))))._operator_concat (GGS_string (true, "' entity")) COMMA_SOURCE_FILE_AT_LINE (1336)) ;
  }else if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1336)))._operator_isNotEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1336)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    if ((var_cas_isMultipleEntity).isBuiltAndTrue ()) {
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  automatic_var_47 ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_returnedEntityVariableName, var_cas_type, automatic_var_47 COMMA_SOURCE_FILE_AT_LINE (1340)) ;
      { cPtr_typeGalgas_multipleReferenceEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_multipleReferenceEntity *> (var_cas_type.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_variableEntityName._drop_operation () ;
          if (var_cas_type.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeGalgas_multipleReferenceEntity::static_string_message_messageGalgasType () ;
            message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
            var_cas_returnedEntityVariableName.signalExtractError (_inLexique, message1_, message2_ COMMA_SOURCE_FILE_AT_LINE (1341)) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_variableEntityName = ptrExtraire_->mEntityTypeName ;
        }
      }
    }else{
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  automatic_var_48 ;
      var_cas_ioVariablesMap.modifier_searchForWriteAccess (_inLexique, var_cas_returnedEntityVariableName, var_cas_type, automatic_var_48 COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      { cPtr_typeGalgas_singleReferenceEntity * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (var_cas_type.getPtr ()) ;
        if (ptrExtraire_ == NULL) {
          var_cas_variableEntityName._drop_operation () ;
          if (var_cas_type.getPtr () != NULL) {
            TC_UniqueArray <C_String> message1_ (1, "" COMMA_HERE) ;
            C_String message2_ ;
            message1_ (0 COMMA_HERE) << cPtr_typeGalgas_singleReferenceEntity::static_string_message_messageGalgasType () ;
            message2_ << var_cas_type (HERE)->message_messageGalgasType () ;
            var_cas_returnedEntityVariableName.signalExtractError (_inLexique, message1_, message2_ COMMA_SOURCE_FILE_AT_LINE (1345)) ;
          }
        }else{
          macroValidPointer (ptrExtraire_) ;
          var_cas_variableEntityName = ptrExtraire_->mEntityTypeName ;
        }
      }
    }
    GGS_bool var_cas_ok ;
    var_cas_ok = (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1348)))._operator_isEqual (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1348))) ;
    if (((var_cas_ok)._operator_not ()).isBuiltAndTrue ()) {
      GGS_lstring  var_cas_testedClass ;
      var_cas_testedClass = var_cas_returnedEntityFromSignature ;
      GGS_uint _variant_48628 = var_cas_inAllMetamodelClassMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      GGS_bool _condition_48628 (_variant_48628._isBuilt (), true) ;
      while (_condition_48628.isBuiltAndTrue ()) {
        _condition_48628 = ((var_cas_ok)._operator_not ())._operator_and ((var_cas_testedClass.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1352)))._operator_strictSup (GGS_uint (true, 0U))) ;
        if (_condition_48628.isBuiltAndTrue ()) {
          if (_variant_48628.uintValue () == 0) {
            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1357)) ;
            _condition_48628 = GGS_bool (true, false) ;
          }else{
            _variant_48628._decrement_operation (_inLexique COMMA_HERE) ;
            GGS_lstring  var_cas_superEntity ;
            GGS_entityPropertyMap  automatic_var_49 ;
            GGS_bool automatic_var_50 ;
            GGS_entityPropertyMap  automatic_var_51 ;
            GGS_typeSuperClassesMap  automatic_var_52 ;
            GGS_typeListeAttributsSemantiques  automatic_var_53 ;
            GGS_string automatic_var_54 ;
            GGS_uint  automatic_var_55 ;
            if (var_cas_inAllMetamodelClassMap._isBuilt ()) {
              var_cas_inAllMetamodelClassMap (HERE)->method_searchKey (_inLexique, var_cas_testedClass, automatic_var_49, automatic_var_50, automatic_var_51, var_cas_superEntity, automatic_var_52, automatic_var_53, automatic_var_54, automatic_var_55 COMMA_SOURCE_FILE_AT_LINE (1354)) ;
            }
            var_cas_testedClass = var_cas_superEntity ;
            var_cas_ok = (var_cas_testedClass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1356)))._operator_isEqual (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1356))) ;
          }
        }
      }
    }
    if (((var_cas_ok)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the type of this variable is '%"))._operator_concat (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1360))))._operator_concat (GGS_string (true, "' and is not a super class of '%")))._operator_concat (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361))))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (1362)) ;
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_nonterminalSymbolName, var_cas_parametersExpressionList, var_cas_altName, var_cas_returnedEntityVariableName, var_cas_variableEntityName, var_cas_isMultipleEntity COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_nonterminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1376)), var_cas_nonterminalSymbolName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1271_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$parse$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (_inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_nonterminalSymbolIndex ;
  var_cas_nonterminalSymbolIndex = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_nonterminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1396)), var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolIndex COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
  switch (select_parser_parser_13 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$+>$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1271_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$non_terminal_symbol$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$parse$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (_inLexique) ;
  switch (select_parser_parser_13 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$->$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$+>$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ (" ?") ;
          message_ << ' ' << _inLexique._attributeValue_tokenString () ;
          _inLexique.didParseTerminal ("$identifier$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1415_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesChoix ;
  var_cas_listeBranchesChoix = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1434)) ;
  GGS_typeInstructionList  var_cas_firstBranchInstructionList ;
  var_cas_firstBranchInstructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
  var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
  var_cas_listeBranchesChoix._addAssign_operation (var_cas_firstBranchInstructionList) ;
  var_cas_selectList._addAssign_operation (var_cas_firstBranchSyntaxSignature) ;
  var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1434)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$or$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1456)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheChoix ;
        var_cas_listeInstructionsBrancheChoix = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheChoix, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
        var_cas_listeBranchesChoix._addAssign_operation (var_cas_listeInstructionsBrancheChoix) ;
        var_cas_selectList._addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      switch (select_repeat_parser_parser_14 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$or$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_select_instruction::constructor_new (_inLexique, var_cas_listeBranchesChoix, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1415_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
  var_cas_selectList._addAssign_operation (var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$or$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature2 ;
        var_cas_syntaxSignature2 = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature2) ;
        var_cas_selectList._addAssign_operation (var_cas_syntaxSignature2) ;
      switch (select_repeat_parser_parser_14 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$or$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1415_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$or$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      switch (select_repeat_parser_parser_14 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$or$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$select$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1520_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesRepeter ;
  var_cas_listeBranchesRepeter = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
  var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (1538)) ;
  GGS_typeInstructionList  var_cas_listeInstructionsPremiereBranche ;
  var_cas_listeInstructionsPremiereBranche = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_repeatBranchInstructionsList ;
  var_cas_repeatBranchInstructionsList = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_repeatPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsPremiereBranche, var_cas_tableTerminaux, var_cas_repeatBranchInstructionsList, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
  var_cas_listeBranchesRepeter._addAssign_operation (var_cas_listeInstructionsPremiereBranche) ;
  var_cas_whileList._addAssign_operation (var_cas_repeatBranchInstructionsList) ;
  GGS_location  var_cas_positionErreurPremiereBranche ;
  var_cas_positionErreurPremiereBranche = GGS_location (_inLexique) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (_inLexique, var_cas_positionErreurPremiereBranche COMMA_SOURCE_FILE_AT_LINE (1541)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$while$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_ioVariablesMap.prologue_repeatPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheRepeter ;
        var_cas_listeInstructionsBrancheRepeter = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheRepeter, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
        var_cas_listeBranchesRepeter._addAssign_operation (var_cas_listeInstructionsBrancheRepeter) ;
        var_cas_whileList._addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_repeatPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1562)) ;
      switch (select_repeat_parser_parser_15 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$while$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (1538)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_repeat_instruction::constructor_new (_inLexique, var_cas_listeBranchesRepeter, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_whileList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1520_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_repeatList ;
  var_cas_repeatList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
  var_cas_repeatList._addAssign_operation (var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$while$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
        var_cas_repeatList._addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_repeat_parser_parser_15 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$while$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_repeatList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1520_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$while$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      switch (select_repeat_parser_parser_15 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$while$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$repeat$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1627_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
  var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list::constructor_emptyList (_inLexique COMMA_HERE) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$do$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      GGS_location  var_cas_instructionStartLocation ;
      var_cas_instructionStartLocation = GGS_location (_inLexique) ;
      GGS_typeListeBranchesInstructions  var_cas_branchList ;
      var_cas_branchList = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
      var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_firstBranchInstructionsList ;
      var_cas_firstBranchInstructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
      var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionsList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
      var_cas_branchList._addAssign_operation (var_cas_firstBranchInstructionsList) ;
      var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_firstBranchSyntaxSignature, var_cas_instructionStartLocation) ;
      GGS_L_ruleSyntaxSignature::element_type * operand_59934 = var_cas_firstBranchSyntaxSignature.firstObject () ;
      while ((operand_59934 != NULL)) {
        macroValidPointer (operand_59934) ;
        var_cas_ioSyntaxSignature._addAssign_operation (operand_59934->mInstruction) ;
        operand_59934 = operand_59934->nextObject () ;
      }
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$rewind$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (_inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
            var_cas_branchList._addAssign_operation (var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
          switch (select_repeat_parser_parser_17 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      var_cas_instruction = GGS_C_parse_rewind_instruction::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_branchList COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_L_expression_instructionsList_list  var_cas_branchList ;
      var_cas_branchList = GGS_L_expression_instructionsList_list::constructor_emptyList (_inLexique COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (1699)) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1702)) ;
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$when$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            GGS_typeExpression  var_cas_expression ;
            GGS_AC_galgasType  var_cas_resultType ;
            nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$:$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (_inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
            var_cas_branchList._addAssign_operation (var_cas_expression, var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
            var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1702)) ;
          switch (select_repeat_parser_parser_18 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$else$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1737)) ;
      GGS_location  var_cas_branchStartLocation ;
      var_cas_branchStartLocation = GGS_location (_inLexique) ;
      GGS_typeInstructionList  var_cas_elseInstructionsList ;
      var_cas_elseInstructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
      var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
      GGS_L_ruleSyntaxSignature::element_type * operand_63159 = var_cas_syntaxSignature.firstObject () ;
      while ((operand_63159 != NULL)) {
        macroValidPointer (operand_63159) ;
        var_cas_ioSyntaxSignature._addAssign_operation (operand_63159->mInstruction) ;
        operand_63159 = operand_63159->nextObject () ;
      }
      var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (1737)) ;
      var_cas_ioVariablesMap.epilogue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (1699)) ;
      var_cas_instruction = GGS_C_parse_when_else_instruction::constructor_new (_inLexique, var_cas_branchList, var_cas_elseInstructionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  if (var_cas_parse_rewind_signature_list._isBuilt ()) {
    ::routine_checkParseRewindSignatures (_inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (1768)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_1627_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", "importSyntax", "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$do$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$rewind$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_17 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      } break ;
    case 2 : {
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$when$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (_inLexique) ;
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$:$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_18 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$else$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_1627_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instruction>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$do$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$rewind$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_17 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      } break ;
    case 2 : {
      { bool syntaxRepeat = true ;
        while (syntaxRepeat) {
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$when$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (_inLexique) ;
            #ifdef DEBUG_TRACE_ENABLED
              { C_String message_ ;
                _inLexique.didParseTerminal ("$:$", message_) ;
              }
            #endif
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_18 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat = false ;
              break ;
          }
        }
      }
      #ifdef DEBUG_TRACE_ENABLED
        { C_String message_ ;
          _inLexique.didParseTerminal ("$else$", message_) ;
        }
      #endif
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$end$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$parse$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$;$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'syntax_instructions_list_no_verif'    *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1800_6_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list_no_verif>", NULL, "") ;
  #endif
  GGS_entityPropertyMap  var_cas_propertyMap ;
  var_cas_propertyMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_treewalkingRoutineHeaderMap  var_cas_treewalkingRoutineHeaderMap ;
  var_cas_treewalkingRoutineHeaderMap = GGS_treewalkingRoutineHeaderMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_19 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_ (_inLexique, var_cas_treewalkingRoutineHeaderMap, var_cas_tableEnAvant, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_propertyMap, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1800_6_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list_no_verif>", "importSyntax", "") ;
  #endif
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_19 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_importSyntax (_inLexique, var_cas_ioInstructionList) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_1800_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<syntax_instructions_list_no_verif>", NULL, "") ;
  #endif
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_parser_parser_19 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

