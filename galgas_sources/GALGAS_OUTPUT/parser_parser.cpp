//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'parser_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 1st, 2008, at 15h2'56"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "parser_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parser_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees::constructor_emptyMap (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_componentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_tableTerminaux ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (_inLexique, var_cas_tableTerminaux, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_string var_cas_defLexique ;
  var_cas_defLexique = var_cas_lexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (308)) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_entityToImplementMap  var_cas_allMetamodelClassMap ;
  GGS_semanticContext var_cas_semanticContext ;
  var_cas_semanticContext = GGS_semanticContext::constructor_new (_inLexique, GGS_M_filewrappers::constructor_emptyMap (_inLexique COMMA_HERE), GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_allMetamodelClassMap, var_cas_semanticContext) ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolForSyntax  var_cas_nonTerminalSymbolsMapForSyntax ;
  var_cas_nonTerminalSymbolsMapForSyntax = GGS_M_nonTerminalSymbolForSyntax::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_ (_inLexique, var_cas_defLexique, var_cas_nonTerminalSymbolsMapForSyntax, var_cas_entitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_tableEnAvant, var_cas_listeEntitesAengendrer, var_cas_tableTerminaux, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_componentName, var_cas_allMetamodelClassMap, var_cas_ioTreewalkingComponentMap, var_cas_ioSemanticContext) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_ (_inLexique, var_cas_entitiesMap, var_cas_listeEntitesAengendrer, var_cas_ioOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioTreewalkingComponentMap, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_14615 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_14615 = NULL ;
    while (((operand_14615 = (GGS_typeTableNomRoutinesDeclarees::cElement *) enumerator_14615.nextObject ()))) {
      macroValidPointer (operand_14615) ;
      if (((var_cas_tableRoutinesAimplementer.reader_hasKey (_inLexique, operand_14615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (382)) COMMA_SOURCE_FILE_AT_LINE (382)))._operator_not ()).isBuiltAndTrue ()) {
        operand_14615->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the routine '"))._operator_concat (operand_14615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (383))))._operator_concat (GGS_string (true, "' is not implemented within the component")) COMMA_SOURCE_FILE_AT_LINE (384)) ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (_inLexique, var_cas_componentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (388)) ;
  if (var_cas_componentName._isBuilt () &&
      var_cas_inclusionsForHeaderFile._isBuilt () &&
      var_cas_defLexique._isBuilt () &&
      var_cas_listeEntitesAengendrer._isBuilt () &&
      var_cas_inclusionsForImplementationFile._isBuilt ()) {
    ::routine_generateSemanticsComponent (_inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (393)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  GGS_lstring  var_cas_syntaxComponentName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse ;
  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  automatic_var_0 ;
  nt_get_lexique_infos_ (_inLexique, automatic_var_0, var_cas_lexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_M_semanticsComponents  var_cas_semanticsComponentsMap ;
  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
  var_cas_grammarComponentsMap = GGS_M_grammarComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  var_cas_optionsComponentsMap = GGS_M_optionComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  GGS_M_semanticsEntitiesForUse  var_cas_entitiesMap ;
  GGS_M_optionComponents  var_cas_ioOptionsComponentsMapForUse ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  GGS_entityToImplementMap  var_cas_allMetamodelClassMap ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_includedMetamodelComponents, var_cas_includedGrammarComponents, var_cas_lexiqueMapForUse, var_cas_semanticsComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_grammarComponentsMap, var_cas_optionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_ioOptionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_entitiesMap, var_cas_tableEnAvant, var_cas_allMetamodelClassMap, var_cas_ioSemanticContext) ;
  GGS_L_productionRules_ForGrammarComponent  var_cas_productionRulesListForGrammar ;
  var_cas_productionRulesListForGrammar = GGS_L_productionRules_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonTerminalSymbolsMapForGrammar ;
  var_cas_nonTerminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_importSyntax (_inLexique, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_ioSyntaxComponentsMap.modifier_insertKey (_inLexique, var_cas_syntaxComponentName, var_cas_nonTerminalSymbolsMapForGrammar, var_cas_productionRulesListForGrammar, var_cas_lexiqueName COMMA_SOURCE_FILE_AT_LINE (474)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_galgas_component_parser_parser_282_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parser_parser_0 (_inLexique)) {
        case 2 : {
          nt_syntax_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantics_declaration_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'get_lexique_infos'            *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_get_lexique_infos_parser_parser_567_4_ (galgas_scanner & _inLexique,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_lstring  &var_cas_outLexiqueName) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_M_lexiqueComponents  var_cas_lexiqueComponentsMap ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      var_cas_lexiqueComponentsMap = var_cas_ioLexiqueMapForUse ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_fileName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      var_cas_lexiqueComponentsMap = GGS_M_lexiqueComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
      nt_parse_lexique_for_importing_ (_inLexique, var_cas_fileName, var_cas_lexiqueComponentsMap) ;
      } break ;
    default :
      break ;
  }
  const GGS_M_lexiqueComponents  _temp_20563 = var_cas_lexiqueComponentsMap ;
  if (_temp_20563._isBuilt ()) {
    _temp_20563 (HERE)->method_searchKey (_inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (591)) ;
  }
  if (((var_cas_ioLexiqueMapForUse.reader_hasKey (_inLexique, var_cas_outLexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (593)) COMMA_SOURCE_FILE_AT_LINE (593)))._operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioLexiqueMapForUse.modifier_insertKey (_inLexique, var_cas_outLexiqueName, var_cas_tableTerminaux COMMA_SOURCE_FILE_AT_LINE (594)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_get_lexique_infos_parser_parser_567_4_getLexiqueName (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outLexiqueName) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_outLexiqueName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_get_lexique_infos_parser_parser_567_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_parser_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_616_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_lstring  var_cas_nomTable ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomTable) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeEntite ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableTable ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_nomTable, var_cas_typeEntite, var_cas_nomCppVariableTable COMMA_SOURCE_FILE_AT_LINE (638)) ;
  GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
  var_cas_tableMethodesBloc = GGS_typeGalgasMapType::_castFrom (_inLexique, var_cas_typeEntite.getPtr (), true, var_cas_nomTable COMMA_SOURCE_FILE_AT_LINE (640)).reader_aTableMethodesSurcharger (_inLexique COMMA_SOURCE_FILE_AT_LINE (640)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  GGS_lstring  var_cas_nomMethodeBloc ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomMethodeBloc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureDebut ;
  GGS_L_EXsignature  var_cas_signatureFin ;
  const GGS_typeTableBlocsDeTable  _temp_22512 = var_cas_tableMethodesBloc ;
  if (_temp_22512._isBuilt ()) {
    _temp_22512 (HERE)->method_searchKey (_inLexique, var_cas_nomMethodeBloc, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (647)) ;
  }
  GGS_typeExpressionList  var_cas_prologueExpressionList ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureDebut, var_cas_prologueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMapBlockPrologueInstruction::constructor_new (_inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_prologueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  GGS_typeExpressionList  var_cas_epilogueExpressionList ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureFin, var_cas_epilogueExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  GGS_AC_galgasType  automatic_var_1 ;
  GGS_typeCplusPlusName  automatic_var_2 ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_nomTable, automatic_var_1, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (701)) ;
  var_cas_instruction = GGS_typeMapBlockEpilogueInstruction::constructor_new (_inLexique, var_cas_nomCppVariableTable, var_cas_nomMethodeBloc, var_cas_epilogueExpressionList COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_616_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_616_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  nt_actual_parameters_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "implicitDeclaration"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_implicitDeclaration (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inNonterminalBaseName,
                                const GGS_uint   var_cas_inLevel,
                                const GGS_lstring   var_cas_inReturnedEntityName,
                                const GGS_string  var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  & var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_nonTerminalSymbolsForGrammar  & var_cas_ioNonTerminalSymbolsMap,
                                GGS_typeEntitiesToGenerateList  & var_cas_listeEntitesAengendrer,
                                GGS_L_productionRules_ForGrammarComponent  & var_cas_ioProductionRulesListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_implicitDeclaration at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_AC_galgasType  var_cas_entityType ;
  var_cas_entityType = GGS_typeGalgas_singleReferenceEntity::constructor_new (_inLexique, var_cas_inReturnedEntityName, GGS_typeListeAttributsSemantiques::constructor_emptyList (_inLexique COMMA_HERE), GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) COMMA_HERE) ;
  GGS_bool var_cas_hasSemantics ;
  var_cas_hasSemantics = (var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (749)))._operator_isNotEqual (GGS_string (true, "")) ;
  GGS_lstring  var_cas_var_e ;
  GGS_lstring  var_cas_var_exp ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_var_e = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "e"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_var_exp = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "exp"), GGS_location (_inLexique) COMMA_HERE) ;
  }else{
    var_cas_var_e = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_var_exp = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMapNoArgument ;
  var_cas_parametersMapNoArgument = GGS_M_nonterminalSymbolAlts::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammarNoArgument ;
  var_cas_parametersMapForGrammarNoArgument = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_parametersMapNoArgument.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE), var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (762)) ;
  var_cas_parametersMapForGrammarNoArgument.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE), var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (763)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_parametersMapOneArgument ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammarOneArgument ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_parametersMapOneArgument = GGS_M_nonterminalSymbolAlts::constructor_emptyMap (_inLexique COMMA_HERE) ;
    var_cas_parametersMapForGrammarOneArgument = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
    GGS_L_signature  var_cas_signatureForGrammar ;
    var_cas_signatureForGrammar = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
    var_cas_signatureForGrammar._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_inReturnedEntityName) ;
    GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
    var_cas_listeDeTypesFormels = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
    var_cas_listeDeTypesFormels._addAssign_operation (var_cas_entityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE)) ;
    var_cas_parametersMapOneArgument.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_listeDeTypesFormels, var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (778)) ;
    var_cas_parametersMapForGrammarOneArgument.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_signatureForGrammar, var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (779)) ;
  }else{
    var_cas_parametersMapOneArgument = var_cas_parametersMapNoArgument ;
    var_cas_parametersMapForGrammarOneArgument = var_cas_parametersMapForGrammarNoArgument ;
  }
  GGS_lstring  var_cas_actualRuleName ;
  var_cas_actualRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (790)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (790))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (790)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_parametersMapForGrammarNoArgument COMMA_SOURCE_FILE_AT_LINE (791)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_parametersMapNoArgument COMMA_SOURCE_FILE_AT_LINE (792)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_actualRuleName, var_cas_parametersMapNoArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualPrefixName ;
  var_cas_actualPrefixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (796)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (796))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (796)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualPrefixName, var_cas_parametersMapForGrammarNoArgument COMMA_SOURCE_FILE_AT_LINE (797)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_actualPrefixName, var_cas_parametersMapNoArgument COMMA_SOURCE_FILE_AT_LINE (798)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_actualPrefixName, var_cas_parametersMapNoArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualInfixName ;
  var_cas_actualInfixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (802)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (802))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (802)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualInfixName, var_cas_parametersMapForGrammarOneArgument COMMA_SOURCE_FILE_AT_LINE (803)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_actualInfixName, var_cas_parametersMapOneArgument COMMA_SOURCE_FILE_AT_LINE (804)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_actualInfixName, var_cas_parametersMapOneArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_lstring  var_cas_actualPostfixName ;
  var_cas_actualPostfixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (808)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (808))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (808)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualPostfixName, var_cas_parametersMapForGrammarOneArgument COMMA_SOURCE_FILE_AT_LINE (809)) ;
  var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_actualPostfixName, var_cas_parametersMapOneArgument COMMA_SOURCE_FILE_AT_LINE (810)) ;
  var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_actualPostfixName, var_cas_parametersMapOneArgument, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allPropertiesMap ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    GGS_typeInstruction  var_cas_instruction ;
    var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE), var_cas_entityType COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_actualPrefixName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_inReturnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "exp") COMMA_HERE), var_cas_entityType COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  }
  GGS_typeExpressionList  var_cas_effectiveArguments ;
  var_cas_effectiveArguments = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_effectiveArguments._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_actualInfixName, var_cas_effectiveArguments, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_exp, var_cas_inReturnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  var_cas_effectiveArguments = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_effectiveArguments._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "exp") COMMA_HERE) COMMA_HERE)) ;
  }
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_actualPostfixName, var_cas_effectiveArguments, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_inReturnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_typeListeTypesEtNomsArgMethode::constructor_emptyList (_inLexique COMMA_HERE), var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (878)), var_cas_var_e.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (879)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (872)) ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_actualRuleName, var_cas_altProductionsMap, GGS_string (true, ""), var_cas_inLexiqueClassName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualRuleName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_nextRuleName ;
  var_cas_nextRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (902)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_inLevel._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (902)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (902))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (902)) COMMA_HERE) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE), var_cas_entityType COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  }
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_nextRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_inReturnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_typeListeTypesEtNomsArgMethode::constructor_emptyList (_inLexique COMMA_HERE), var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (926)), var_cas_var_e.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (927)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (920)) ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_actualPrefixName, var_cas_altProductionsMap, GGS_string (true, ""), var_cas_inLexiqueClassName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualPrefixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE), var_cas_entityType COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    GGS_typeAutomaticName  var_cas_var_inE ;
    var_cas_var_inE = GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "inE") COMMA_HERE) ;
    var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE), GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_var_inE COMMA_HERE) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_entityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_var_inE, GGS_bool (true, true)) ;
  }
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (976)), var_cas_var_e.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (977)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (970)) ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_actualInfixName, var_cas_altProductionsMap, GGS_string (true, ""), var_cas_inLexiqueClassName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualInfixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1005)), var_cas_var_e.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1006)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (999)) ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_actualPostfixName, var_cas_altProductionsMap, GGS_string (true, ""), var_cas_inLexiqueClassName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualPostfixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_implicitDeclaration\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "implicitDeclarationImportSyntax"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_implicitDeclarationImportSyntax (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inNonterminalBaseName,
                                const GGS_uint   var_cas_inLevel,
                                const GGS_lstring   var_cas_inReturnedEntityName,
                                GGS_M_nonTerminalSymbolsForGrammar  & var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  & var_cas_ioProductionRulesListForGrammar COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_implicitDeclarationImportSyntax at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMapNoParameter ;
  var_cas_nonterminalSymbolParametersMapNoParameter = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_nonterminalSymbolParametersMapNoParameter.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE), var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (1036)) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMapOneParameter ;
  if (((var_cas_inReturnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1042)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_nonterminalSymbolParametersMapOneParameter = var_cas_nonterminalSymbolParametersMapNoParameter ;
  }else{
    var_cas_nonterminalSymbolParametersMapOneParameter = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
    GGS_L_signature  var_cas_signature ;
    var_cas_signature = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
    var_cas_signature._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_inReturnedEntityName) ;
    var_cas_nonterminalSymbolParametersMapOneParameter.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_signature, var_cas_inReturnedEntityName COMMA_SOURCE_FILE_AT_LINE (1048)) ;
  }
  GGS_lstring  var_cas_actualRuleName ;
  var_cas_actualRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (1056)) ;
  GGS_lstring  var_cas_actualPrefixName ;
  var_cas_actualPrefixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1058)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1058))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1058)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualPrefixName, var_cas_nonterminalSymbolParametersMapNoParameter COMMA_SOURCE_FILE_AT_LINE (1059)) ;
  GGS_lstring  var_cas_actualInfixName ;
  var_cas_actualInfixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualInfixName, var_cas_nonterminalSymbolParametersMapOneParameter COMMA_SOURCE_FILE_AT_LINE (1062)) ;
  GGS_lstring  var_cas_actualPostfixName ;
  var_cas_actualPostfixName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1064)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_inLevel.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1064))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) COMMA_HERE) ;
  var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualPostfixName, var_cas_nonterminalSymbolParametersMapOneParameter COMMA_SOURCE_FILE_AT_LINE (1065)) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_actualPrefixName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1069)), var_cas_actualPrefixName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_actualInfixName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1076)), var_cas_actualInfixName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_actualPostfixName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1083)), var_cas_actualPostfixName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualRuleName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_nextRuleName ;
  var_cas_nextRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_inNonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1096)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_inLevel._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1096)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1096))), var_cas_inNonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1096)) COMMA_HERE) ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_nextRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1098)), var_cas_nextRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualPrefixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualInfixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_actualPostfixName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_implicitDeclarationImportSyntax\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1128_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  GGS_lstring  var_cas_operatorAttributes ;
  _inLexique._assignFromAttribute_tokenString (var_cas_operatorAttributes) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalBaseName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalBaseName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_luint  var_cas_operatorPriority ;
  _inLexique._assignFromAttribute_uint32value (var_cas_operatorPriority) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedEntityName ;
  GGS_lstring  var_cas_baseEntityName ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_baseEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_entityPropertyMap  automatic_var_3 ;
      GGS_bool automatic_var_4 ;
      GGS_entityPropertyMap  automatic_var_5 ;
      GGS_typeSuperClassesMap  automatic_var_6 ;
      GGS_typeListeAttributsSemantiques  automatic_var_7 ;
      GGS_string automatic_var_8 ;
      GGS_uint  automatic_var_9 ;
      const GGS_entityToImplementMap  _temp_41724 = var_cas_inAllMetamodelClassMap ;
      if (_temp_41724._isBuilt ()) {
        _temp_41724 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntityName, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_baseEntityName, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_typeAutomaticName  var_cas_automaticVar_right ;
  var_cas_automaticVar_right = GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "right") COMMA_HERE) ;
  GGS_typeAutomaticName  var_cas_automaticVar_e ;
  var_cas_automaticVar_e = GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "e") COMMA_HERE) ;
  GGS_typeAutomaticName  var_cas_automaticVar_inE ;
  var_cas_automaticVar_inE = GGS_typeAutomaticName::constructor_new (_inLexique, GGS_location (_inLexique), GGS_string (true, "inE") COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_baseEntityType ;
  var_cas_baseEntityType = GGS_typeGalgas_singleReferenceEntity::constructor_new (_inLexique, var_cas_baseEntityName, GGS_typeListeAttributsSemantiques::constructor_emptyList (_inLexique COMMA_HERE), GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) COMMA_HERE) ;
  GGS_bool var_cas_hasSemantics ;
  var_cas_hasSemantics = (var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1173)))._operator_isNotEqual (GGS_string (true, "")) ;
  GGS_lstring  var_cas_var_e ;
  GGS_lstring  var_cas_var_right ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_var_e = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "e"), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_var_right = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "right"), GGS_location (_inLexique) COMMA_HERE) ;
  }else{
    var_cas_var_e = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_var_right = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  }
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionVerifSyntaxique::constructor_new (_inLexique, var_cas_terminalSymbolName, GGS_L_assignedVariables::constructor_emptyList (_inLexique COMMA_HERE), var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
    var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_automaticVar_e, var_cas_baseEntityType COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  }
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_leftNonTerminalName ;
  if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1201)))._operator_isEqual (GGS_string (true, "multiple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1203)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1203)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1203))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1204)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1207)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1207)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1207))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1208)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_calledRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1223)), GGS_string (true, "new"), GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_e COMMA_HERE) COMMA_HERE) COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1230)))._operator_isEqual (GGS_string (true, "simple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1233)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1236)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1236))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1236)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1236))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1237)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_calledRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1252)), GGS_string (true, "new"), GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_e COMMA_HERE) COMMA_HERE) COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1259)))._operator_isEqual (GGS_string (true, "infix"))).isBuiltAndTrue ()) {
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_baseEntityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_automaticVar_inE, GGS_bool (true, true)) ;
    }
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_automaticVar_right, var_cas_baseEntityType COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1280)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1280))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1280)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1280))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_calledRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_right, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      GGS_typeExpressionList  var_cas_expressionList ;
      var_cas_expressionList = GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_inE COMMA_HERE) COMMA_HERE) ;
      var_cas_expressionList._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_right COMMA_HERE)) ;
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1298)), GGS_string (true, "new"), var_cas_expressionList COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1305)))._operator_isEqual (GGS_string (true, "right infix"))).isBuiltAndTrue ()) {
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_baseEntityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_automaticVar_inE, GGS_bool (true, true)) ;
    }
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1315)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1315)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1315))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1316)) COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_automaticVar_right, var_cas_baseEntityType COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1327)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_calledRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_right, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      GGS_typeExpressionList  var_cas_expressionList ;
      var_cas_expressionList = GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_inE COMMA_HERE) COMMA_HERE) ;
      var_cas_expressionList._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_right COMMA_HERE)) ;
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1344)), GGS_string (true, "new"), var_cas_expressionList COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1351)))._operator_isEqual (GGS_string (true, "left infix"))).isBuiltAndTrue ()) {
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_baseEntityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_automaticVar_inE, GGS_bool (true, true)) ;
    }
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_automaticVar_right, var_cas_baseEntityType COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1372)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1373)) COMMA_HERE) ;
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_calledRuleName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_right, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      GGS_typeExpressionList  var_cas_expressionList ;
      var_cas_expressionList = GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_inE COMMA_HERE) COMMA_HERE) ;
      var_cas_expressionList._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_right COMMA_HERE)) ;
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1390)), GGS_string (true, "new"), var_cas_expressionList COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
    GGS_typeExpressionList  var_cas_effectiveArguments ;
    var_cas_effectiveArguments = GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_effectiveArguments._addAssign_operation (GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_e COMMA_HERE)) ;
    }
    var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_leftNonTerminalName, var_cas_effectiveArguments, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
    var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410)))._operator_isEqual (GGS_string (true, "simple postfix"))).isBuiltAndTrue ()) {
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_baseEntityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_automaticVar_inE, GGS_bool (true, true)) ;
    }
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1420)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1420))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1421)) COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1427)), GGS_string (true, "new"), GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_inE COMMA_HERE) COMMA_HERE) COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1434)))._operator_isEqual (GGS_string (true, "multiple postfix"))).isBuiltAndTrue ()) {
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_listeTypeEtNomsArguments._addAssign_operation (var_cas_baseEntityType, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_automaticVar_inE, GGS_bool (true, true)) ;
    }
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1444)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1444)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1444))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1445)) COMMA_HERE) ;
    if ((var_cas_hasSemantics).isBuiltAndTrue ()) {
      var_cas_instruction = GGS_C_assignmentInstruction::constructor_new (_inLexique, var_cas_automaticVar_e, GGS_typeConstructorExpression::constructor_new (_inLexique, var_cas_returnedEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1451)), GGS_string (true, "new"), GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_inE COMMA_HERE) COMMA_HERE) COMMA_HERE) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
      var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_leftNonTerminalName, GGS_typeExpressionList::constructor_listWithValue (_inLexique, GGS_typeVarInExpression::constructor_new (_inLexique, var_cas_automaticVar_e COMMA_HERE) COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }else{
      var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_leftNonTerminalName, GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE), GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_var_e, var_cas_returnedEntityName, GGS_bool (true, false) COMMA_HERE) ;
      var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
    }
  }else{
    var_cas_operatorAttributes.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\".") COMMA_SOURCE_FILE_AT_LINE (1487)) ;
    var_cas_leftNonTerminalName._drop_operation () ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allPropertiesMap ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_baseEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1499)), var_cas_var_e.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1500)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (1493)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_leftNonTerminalName, var_cas_altProductionsMap, GGS_string (true, ""), var_cas_inLexiqueClassName, GGS_bool (true, false) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_leftNonTerminalName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1128_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  GGS_lstring  var_cas_operatorAttributes ;
  _inLexique._assignFromAttribute_tokenString (var_cas_operatorAttributes) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalBaseName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalBaseName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_luint  var_cas_operatorPriority ;
  _inLexique._assignFromAttribute_uint32value (var_cas_operatorPriority) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedEntityName ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_terminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1543)), var_cas_terminalSymbolName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  GGS_lstring  var_cas_leftNonTerminalName ;
  if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550)))._operator_isEqual (GGS_string (true, "multiple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1556)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1556)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1556))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_calledRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1560)), var_cas_calledRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1565)))._operator_isEqual (GGS_string (true, "simple prefix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1567)))._operator_concat (GGS_string (true, "__prefix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1567)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1567))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1571)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1571))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1571)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1571))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1572)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_calledRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)), var_cas_calledRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1580)))._operator_isEqual (GGS_string (true, "infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1582)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1582)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1582))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1583)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1586)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1587)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_calledRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1590)), var_cas_calledRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1595)))._operator_isEqual (GGS_string (true, "right infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1602)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_calledRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1605)), var_cas_calledRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1610)))._operator_isEqual (GGS_string (true, "left infix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1612)))._operator_concat (GGS_string (true, "__infix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1612)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1612))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1613)) COMMA_HERE) ;
    GGS_lstring  var_cas_calledRuleName ;
    var_cas_calledRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1616)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1616))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1616)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1616))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1617)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_calledRuleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1620)), var_cas_calledRuleName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_leftNonTerminalName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1626)), var_cas_leftNonTerminalName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1631)))._operator_isEqual (GGS_string (true, "simple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1633)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1633)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1633))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1634)) COMMA_HERE) ;
  }else if (((var_cas_operatorAttributes.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1636)))._operator_isEqual (GGS_string (true, "multiple postfix"))).isBuiltAndTrue ()) {
    var_cas_leftNonTerminalName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalBaseName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1638)))._operator_concat (GGS_string (true, "__postfix__")))._operator_concat (var_cas_operatorPriority.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1638)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1638))), var_cas_nonterminalBaseName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1639)) COMMA_HERE) ;
    var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_leftNonTerminalName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1642)), var_cas_leftNonTerminalName, GGS_uint (true, 0U) COMMA_HERE) ;
    var_cas_syntaxSignature._addAssign_operation (var_cas_instruction) ;
  }else{
    var_cas_operatorAttributes.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\".") COMMA_SOURCE_FILE_AT_LINE (1657)) ;
    var_cas_leftNonTerminalName._drop_operation () ;
  }
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_leftNonTerminalName, GGS_uint (true, 0U), var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1128_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  switch (select_parser_parser_2 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1670_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_ruleName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (_inLexique)) {
    case 1 : {
      GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
      var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
      var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_luint  var_cas_levelCount ;
      _inLexique._assignFromAttribute_uint32value (var_cas_levelCount) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
      if (((var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1693)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_levelCount.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the level count should be > 0") COMMA_SOURCE_FILE_AT_LINE (1694)) ;
      }
      GGS_lstring  var_cas_returnedEntity ;
      switch (select_parser_parser_4 (_inLexique)) {
        case 1 : {
          var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          GGS_entityPropertyMap  automatic_var_10 ;
          GGS_bool automatic_var_11 ;
          GGS_entityPropertyMap  automatic_var_12 ;
          GGS_lstring  automatic_var_13 ;
          GGS_typeSuperClassesMap  automatic_var_14 ;
          GGS_typeListeAttributsSemantiques  automatic_var_15 ;
          GGS_string automatic_var_16 ;
          GGS_uint  automatic_var_17 ;
          const GGS_entityToImplementMap  _temp_60923 = var_cas_inAllMetamodelClassMap ;
          if (_temp_60923._isBuilt ()) {
            _temp_60923 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_10, automatic_var_11, automatic_var_12, automatic_var_13, automatic_var_14, automatic_var_15, automatic_var_16, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (1702)) ;
          }
          } break ;
        default :
          break ;
      }
      GGS_uint  var_cas_i ;
      var_cas_i = GGS_uint (true, 1U) ;
      GGS_uint _variant_61336 = var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1705)) ;
      GGS_bool _condition_61336 (_variant_61336._isBuilt (), true) ;
      while (_condition_61336.isBuiltAndTrue ()) {
        ::routine_implicitDeclaration (_inLexique,  var_cas_ruleName,  var_cas_i,  var_cas_returnedEntity,  var_cas_inLexiqueClassName,  var_cas_ioNonTerminalSymbolMapForSyntax,  var_cas_ioNonTerminalSymbolsMap,  var_cas_listeEntitesAengendrer,  var_cas_ioProductionRulesListForGrammar COMMA_SOURCE_FILE_AT_LINE (1705)) ;
        var_cas_i._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) ;
        _condition_61336 = (var_cas_i)._operator_infOrEqual (var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1717))) ;
        if (_condition_61336.isBuiltAndTrue ()) {
          if (_variant_61336.uintValue () == 0) {
            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1717)) ;
            _condition_61336 = GGS_bool (true, false) ;
          }else{
            _variant_61336._decrement_operation (_inLexique COMMA_HERE) ;
          }
        }
      }
      GGS_L_signature  var_cas_signatureForGrammar ;
      var_cas_signatureForGrammar = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
      var_cas_listeDeTypesFormels = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
      var_cas_parametersMap = GGS_M_nonterminalSymbolAlts::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
      var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_emptyId ;
      var_cas_emptyId = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1725)) ;
      var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_signatureForGrammar, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1726)) ;
      GGS_lstring  var_cas_actualRuleName ;
      var_cas_actualRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_ruleName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1732)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1732))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1732)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1732))), var_cas_ruleName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)) COMMA_HERE) ;
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (1735)) ;
      var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (1736)) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_actualRuleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_HERE) ;
      var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
      } break ;
    case 2 : {
      GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
      GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
      var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
      GGS_L_signature  var_cas_signatureForGrammar ;
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_parametersMapForGrammar ;
      var_cas_parametersMapForGrammar = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_M_nonterminalSymbolAlts  var_cas_parametersMap ;
      var_cas_parametersMap = GGS_M_nonterminalSymbolAlts::constructor_emptyMap (_inLexique COMMA_HERE) ;
      nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
      GGS_lstring  var_cas_returnedEntity ;
      GGS_lstring  var_cas_mdaResultVariableName ;
      switch (select_parser_parser_5 (_inLexique)) {
        case 1 : {
          var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          GGS_entityPropertyMap  automatic_var_18 ;
          GGS_bool automatic_var_19 ;
          GGS_entityPropertyMap  automatic_var_20 ;
          GGS_lstring  automatic_var_21 ;
          GGS_typeSuperClassesMap  automatic_var_22 ;
          GGS_typeListeAttributsSemantiques  automatic_var_23 ;
          GGS_string automatic_var_24 ;
          GGS_uint  automatic_var_25 ;
          const GGS_entityToImplementMap  _temp_63167 = var_cas_inAllMetamodelClassMap ;
          if (_temp_63167._isBuilt ()) {
            _temp_63167 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_18, automatic_var_19, automatic_var_20, automatic_var_21, automatic_var_22, automatic_var_23, automatic_var_24, automatic_var_25 COMMA_SOURCE_FILE_AT_LINE (1762)) ;
          }
          switch (select_parser_parser_6 (_inLexique)) {
            case 1 : {
              var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique._assignFromAttribute_tokenString (var_cas_mdaResultVariableName) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_emptyId ;
      var_cas_emptyId = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_listeDeTypesFormels, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1770)) ;
      var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_emptyId, var_cas_signatureForGrammar, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1771)) ;
      { bool syntaxRepeat_7 = true ;
        while (syntaxRepeat_7) {
          switch (select_repeat_parser_parser_7 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_8 (_inLexique)) {
                case 1 : {
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
                  var_cas_listeDeTypesFormels = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
                  GGS_L_signature  var_cas_signatureForGrammarComponent ;
                  var_cas_signatureForGrammarComponent = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
                  GGS_lstring  var_cas_altName ;
                  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE) ;
                  var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeDeTypesFormels, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1784)) ;
                  var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signatureForGrammarComponent, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1785)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_altName ;
                  _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
                  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
                  var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
                  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
                  GGS_L_signature  var_cas_signatureForGrammarComponent ;
                  nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
                  GGS_lstring  var_cas_returnedEntity ;
                  switch (select_parser_parser_9 (_inLexique)) {
                    case 1 : {
                      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
                      } break ;
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                      GGS_AC_semanticsEntity  var_cas_e ;
                      const GGS_M_semanticsEntitiesForUse  _temp_64866 = var_cas_ioEntitiesMap ;
                      if (_temp_64866._isBuilt ()) {
                        _temp_64866 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1812)) ;
                      }
                      GGS_AC_galgasType  var_cas_type ;
                      var_cas_type = GGS_typeEntiteType::_castFrom (_inLexique, var_cas_e.getPtr (), true, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1814)).reader_aDefType (_inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) ;
                      GGS_typeGalgas_singleReferenceEntity  var_cas_sre ;
                      var_cas_sre = GGS_typeGalgas_singleReferenceEntity::_castFrom (_inLexique, var_cas_type.getPtr (), true, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1816)) ;
                      } break ;
                    default :
                      break ;
                  }
                  var_cas_parametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeDeTypesFormels, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1818)) ;
                  var_cas_parametersMapForGrammar.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signatureForGrammarComponent, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1819)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_7 = false ;
              break ;
          }
        }
      }
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_ruleName, var_cas_parametersMapForGrammar COMMA_SOURCE_FILE_AT_LINE (1826)) ;
      var_cas_ioNonTerminalSymbolMapForSyntax.modifier_insertKey (_inLexique, var_cas_ruleName, var_cas_parametersMap COMMA_SOURCE_FILE_AT_LINE (1827)) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeNonterminalToGenerate::constructor_new (_inLexique, var_cas_ruleName, var_cas_parametersMap, var_cas_inLexiqueClassName COMMA_HERE) ;
      var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1670_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &var_cas_ioNonTerminalSymbolsMap,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (_inLexique)) {
    case 1 : {
      GGS_luint  var_cas_levelCount ;
      _inLexique._assignFromAttribute_uint32value (var_cas_levelCount) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
      GGS_lstring  var_cas_returnedEntity ;
      switch (select_parser_parser_4 (_inLexique)) {
        case 1 : {
          var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_uint  var_cas_i ;
      var_cas_i = GGS_uint (true, 1U) ;
      GGS_uint _variant_66555 = var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1850)) ;
      GGS_bool _condition_66555 (_variant_66555._isBuilt (), true) ;
      while (_condition_66555.isBuiltAndTrue ()) {
        ::routine_implicitDeclarationImportSyntax (_inLexique,  var_cas_nonterminalSymbolName,  var_cas_i,  var_cas_returnedEntity,  var_cas_ioNonTerminalSymbolsMap,  var_cas_ioProductionRulesListForGrammar COMMA_SOURCE_FILE_AT_LINE (1850)) ;
        var_cas_i._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1858)) ;
        _condition_66555 = (var_cas_i)._operator_infOrEqual (var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1859))) ;
        if (_condition_66555.isBuiltAndTrue ()) {
          if (_variant_66555.uintValue () == 0) {
            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1859)) ;
            _condition_66555 = GGS_bool (true, false) ;
          }else{
            _variant_66555._decrement_operation (_inLexique COMMA_HERE) ;
          }
        }
      }
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
      var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
      var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE), var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      GGS_lstring  var_cas_actualRuleName ;
      var_cas_actualRuleName = GGS_lstring::constructor_new (_inLexique, ((var_cas_nonterminalSymbolName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1869)))._operator_concat (GGS_string (true, "__")))._operator_concat (var_cas_levelCount.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (1869))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1869)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1869))), var_cas_nonterminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1870)) COMMA_HERE) ;
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_actualRuleName, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (1872)) ;
      } break ;
    case 2 : {
      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
      var_cas_nonterminalSymbolParametersMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_L_signature  var_cas_signature ;
      nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
      GGS_lstring  var_cas_returnedEntity ;
      switch (select_parser_parser_5 (_inLexique)) {
        case 1 : {
          var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          switch (select_parser_parser_6 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_altName ;
      var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1889)) ;
      { bool syntaxRepeat_7 = true ;
        while (syntaxRepeat_7) {
          switch (select_repeat_parser_parser_7 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_8 (_inLexique)) {
                case 1 : {
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  GGS_L_signature  var_cas_signature ;
                  var_cas_signature = GGS_L_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
                  GGS_lstring  var_cas_noReturnedEntity ;
                  var_cas_noReturnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
                  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE), var_cas_signature, var_cas_noReturnedEntity COMMA_SOURCE_FILE_AT_LINE (1901)) ;
                  } break ;
                case 2 : {
                  _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_L_signature  var_cas_signature ;
                  nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
                  GGS_lstring  var_cas_returnedEntity ;
                  switch (select_parser_parser_9 (_inLexique)) {
                    case 1 : {
                      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
                      } break ;
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  var_cas_nonterminalSymbolParametersMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (1917)) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_7 = false ;
              break ;
          }
        }
      }
      var_cas_ioNonTerminalSymbolsMap.modifier_insertKey (_inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (1924)) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1670_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_nonterminal) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
      switch (select_parser_parser_4 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      nt_formal_arguments_list_parse (_inLexique) ;
      switch (select_parser_parser_5 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          switch (select_parser_parser_6 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      { bool syntaxRepeat_7 = true ;
        while (syntaxRepeat_7) {
          switch (select_repeat_parser_parser_7 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
              switch (select_parser_parser_8 (_inLexique)) {
                case 1 : {
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  nt_formal_arguments_list_parse (_inLexique) ;
                  switch (select_parser_parser_9 (_inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              syntaxRepeat_7 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1933_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar,
                                GGS_lstring  /* var_cas_inSyntaxComponentName */,
                                GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_ruleName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_ruleName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypesFormels ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammar ;
  nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammar) ;
  GGS_lstring  var_cas_returnedEntity ;
  GGS_lstring  var_cas_mdaResultVariableName ;
  switch (select_parser_parser_10 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_entityPropertyMap  automatic_var_26 ;
      GGS_bool automatic_var_27 ;
      GGS_entityPropertyMap  automatic_var_28 ;
      GGS_lstring  automatic_var_29 ;
      GGS_typeSuperClassesMap  automatic_var_30 ;
      GGS_typeListeAttributsSemantiques  automatic_var_31 ;
      GGS_string automatic_var_32 ;
      GGS_uint  automatic_var_33 ;
      const GGS_entityToImplementMap  _temp_70282 = var_cas_inAllMetamodelClassMap ;
      if (_temp_70282._isBuilt ()) {
        _temp_70282 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_26, automatic_var_27, automatic_var_28, automatic_var_29, automatic_var_30, automatic_var_31, automatic_var_32, automatic_var_33 COMMA_SOURCE_FILE_AT_LINE (1971)) ;
      }
      switch (select_parser_parser_11 (_inLexique)) {
        case 1 : {
          var_cas_mdaResultVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique._assignFromAttribute_tokenString (var_cas_mdaResultVariableName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  const GGS_M_nonTerminalSymbolForSyntax  _temp_70613 = var_cas_ioNonTerminalSymbolMapForSyntax ;
  if (_temp_70613._isBuilt ()) {
    _temp_70613 (HERE)->method_searchKey (_inLexique, var_cas_ruleName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (1980)) ;
  }
  GGS_typeAltProductionsMap  var_cas_altProductionsMap ;
  var_cas_altProductionsMap = GGS_typeAltProductionsMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_bool var_cas_hasParseLabel ;
  var_cas_hasParseLabel = var_cas_nonterminalSymbolAltMap.reader_hasKey (_inLexique, GGS_string (true, "parse") COMMA_SOURCE_FILE_AT_LINE (1985)) ;
  GGS_bool var_cas_checkNonTerminalsAreDeclaredWithParseLabel ;
  var_cas_checkNonTerminalsAreDeclaredWithParseLabel = var_cas_hasParseLabel ;
  GGS_string var_cas_productionTagName ;
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      var_cas_productionTagName = GGS_string (true, "") ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      GGS_lstring  var_cas_tagName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_tagName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      var_cas_productionTagName = var_cas_tagName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1995)) ;
      } break ;
    default :
      break ;
  }
  GGS_location  var_cas_firstBranchErrorLocation ;
  var_cas_firstBranchErrorLocation = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signaturePremiereBrancheFournieParPrototype ;
  GGS_lstring  var_cas_formalReturnedEntity ;
  const GGS_M_nonterminalSymbolAlts  _temp_71541 = var_cas_nonterminalSymbolAltMap ;
  if (_temp_71541._isBuilt ()) {
    _temp_71541 (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signaturePremiereBrancheFournieParPrototype, var_cas_formalReturnedEntity COMMA_SOURCE_FILE_AT_LINE (2002)) ;
  }
  ::routine_verifierCompatibiliteSignatures (_inLexique,  var_cas_signaturePremiereBrancheFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_firstBranchErrorLocation COMMA_SOURCE_FILE_AT_LINE (2006)) ;
  if ((((var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2012)))._operator_isEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2012)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntity.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the non terminal declaration does not name any returned entity") COMMA_SOURCE_FILE_AT_LINE (2013)) ;
  }else if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2014)))._operator_isNotEqual (var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2014)))).isBuiltAndTrue ()) {
    GGS_typeSuperClassesMap  var_cas_superEntityMap ;
    GGS_entityPropertyMap  automatic_var_34 ;
    GGS_bool automatic_var_35 ;
    GGS_entityPropertyMap  automatic_var_36 ;
    GGS_lstring  automatic_var_37 ;
    GGS_typeListeAttributsSemantiques  automatic_var_38 ;
    GGS_string automatic_var_39 ;
    GGS_uint  automatic_var_40 ;
    const GGS_entityToImplementMap  _temp_72102 = var_cas_inAllMetamodelClassMap ;
    if (_temp_72102._isBuilt ()) {
      _temp_72102 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_34, automatic_var_35, automatic_var_36, automatic_var_37, var_cas_superEntityMap, automatic_var_38, automatic_var_39, automatic_var_40 COMMA_SOURCE_FILE_AT_LINE (2016)) ;
    }
    if (((var_cas_superEntityMap.reader_hasKey (_inLexique, var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2017)) COMMA_SOURCE_FILE_AT_LINE (2017)))._operator_not ()).isBuiltAndTrue ()) {
      var_cas_returnedEntity.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '@"))._operator_concat (var_cas_formalReturnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2019))))._operator_concat (GGS_string (true, "' entity or one of its inherited entities is expected here")) COMMA_SOURCE_FILE_AT_LINE (2019)) ;
    }
  }
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_entityPropertyMap  var_cas_allPropertiesMap ;
  var_cas_allPropertiesMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  if (((var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2025)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_typeListeAttributsSemantiques  var_cas_propertyList ;
    GGS_typeSuperClassesMap  var_cas_superEntityMap ;
    GGS_entityPropertyMap  automatic_var_41 ;
    GGS_bool automatic_var_42 ;
    GGS_entityPropertyMap  automatic_var_43 ;
    GGS_lstring  automatic_var_44 ;
    GGS_string automatic_var_45 ;
    GGS_uint  automatic_var_46 ;
    const GGS_entityToImplementMap  _temp_72798 = var_cas_inAllMetamodelClassMap ;
    if (_temp_72798._isBuilt ()) {
      _temp_72798 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_41, automatic_var_42, automatic_var_43, automatic_var_44, var_cas_superEntityMap, var_cas_propertyList, automatic_var_45, automatic_var_46 COMMA_SOURCE_FILE_AT_LINE (2028)) ;
    }
    GGS_AC_galgasType  var_cas_definitionType ;
    var_cas_definitionType = GGS_typeGalgas_singleReferenceEntity::constructor_new (_inLexique, var_cas_returnedEntity, var_cas_propertyList, var_cas_superEntityMap.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (2038)) COMMA_HERE) ;
    GGS_typeCplusPlusName  var_cas_nomCppVariable ;
    var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_mdaResultVariableName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2040)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2040)) COMMA_HERE) ;
    var_cas_tableArgumentsMethode.modifier_insertSingleEntityLocalVariable (_inLexique, var_cas_mdaResultVariableName, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2041)) ;
    var_cas_listeInstructions._addAssign_operation (GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE)) ;
  }else if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2043)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_bool automatic_var_47 ;
    GGS_entityPropertyMap  automatic_var_48 ;
    GGS_lstring  automatic_var_49 ;
    GGS_typeSuperClassesMap  automatic_var_50 ;
    GGS_typeListeAttributsSemantiques  automatic_var_51 ;
    GGS_string automatic_var_52 ;
    GGS_uint  automatic_var_53 ;
    const GGS_entityToImplementMap  _temp_73485 = var_cas_inAllMetamodelClassMap ;
    if (_temp_73485._isBuilt ()) {
      _temp_73485 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, var_cas_allPropertiesMap, automatic_var_47, automatic_var_48, automatic_var_49, automatic_var_50, automatic_var_51, automatic_var_52, automatic_var_53 COMMA_SOURCE_FILE_AT_LINE (2044)) ;
    }
    {
      GGS_entityPropertyMap::cEnumerator enumerator_73548 (var_cas_allPropertiesMap, true) ;
      const GGS_entityPropertyMap::cElement * operand_73548 = NULL ;
      while (((operand_73548 = (GGS_entityPropertyMap::cElement *) enumerator_73548.nextObject ()))) {
        macroValidPointer (operand_73548) ;
        { const GGS_AC_galgasType _var_75473 = operand_73548->mInfo.mPropertyType ; // CAST instruction
          if (_var_75473.getPtr () != NULL) {
            macroValidPointer (_var_75473.getPtr ()) ;
            if (dynamic_cast <cPtr_typeGalgas_singleReferenceEntity *> (_var_75473.getPtr ()) != NULL) {
              GGS_lstring  var_cas_nomVariable ;
              var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_73548->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2048)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2048)) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_nomCppVariable ;
              var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2049)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2049)) COMMA_HERE) ;
              var_cas_tableArgumentsMethode.modifier_insertSingleEntityLocalVariable (_inLexique, var_cas_nomVariable, operand_73548->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2050)) ;
              GGS_typeInstruction  var_cas_instruction ;
              var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, operand_73548->mInfo.mPropertyType COMMA_HERE) ;
              var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
            }else if (dynamic_cast <cPtr_typeGalgas_multipleReferenceEntity *> (_var_75473.getPtr ()) != NULL) {
              const GGS_typeGalgas_multipleReferenceEntity var_cas_e (_var_75473.getPtr ()) ;
              GGS_lstring  var_cas_nomVariable ;
              var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_73548->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2054)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2054)) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_nomCppVariable ;
              var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2055)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2055)) COMMA_HERE) ;
              var_cas_tableArgumentsMethode.modifier_insertListOfEntitiesLocalVariable (_inLexique, var_cas_nomVariable, operand_73548->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2056)) ;
              GGS_typeExpression  var_cas_sourceExpression ;
              var_cas_sourceExpression = GGS_typeConstructorExpression::constructor_new (_inLexique, (GGS_string (true, "_list_"))._operator_concat (var_cas_e.reader_mEntityTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (2058)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2058))), GGS_string (true, "emptyList"), GGS_typeExpressionList::constructor_emptyList (_inLexique COMMA_HERE) COMMA_HERE) ;
              GGS_typeInstruction  var_cas_instruction ;
              var_cas_instruction = GGS_C_declarationInstructionWithAssignment::constructor_new (_inLexique, operand_73548->mInfo.mPropertyType, var_cas_nomCppVariable, var_cas_sourceExpression COMMA_HERE) ;
              var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
            }else{
              GGS_lstring  var_cas_nomVariable ;
              var_cas_nomVariable = GGS_lstring::constructor_new (_inLexique, operand_73548->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2069)), var_cas_returnedEntity.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2069)) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_nomCppVariable ;
              var_cas_nomCppVariable = GGS_typeAutomaticName::constructor_new (_inLexique, var_cas_nomVariable.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2070)), var_cas_nomVariable.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2070)) COMMA_HERE) ;
              var_cas_tableArgumentsMethode.modifier_insertEntityAttributeLocalVariable (_inLexique, var_cas_nomVariable, operand_73548->mInfo.mPropertyType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2071)) ;
              GGS_typeInstruction  var_cas_instruction ;
              var_cas_instruction = GGS_typeInstructionDeclarationVarLocale::constructor_new (_inLexique, var_cas_nomCppVariable, operand_73548->mInfo.mPropertyType COMMA_HERE) ;
              var_cas_listeInstructions._addAssign_operation (var_cas_instruction) ;
            }
          }
        }
      }
    }
  }
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_checkNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_listeInstructions, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, GGS_bool (true, false), var_cas_ioSemanticContext) ;
  var_cas_altProductionsMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions, var_cas_syntaxSignature, GGS_location (_inLexique), var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2101)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2102)), var_cas_allPropertiesMap COMMA_SOURCE_FILE_AT_LINE (2095)) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_parser_parser_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (_inLexique, var_cas_ioEntitiesMap, var_cas_listeDeTypesFormels, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          GGS_lstring  var_cas_returnedEntity ;
          switch (select_parser_parser_14 (_inLexique)) {
            case 1 : {
              var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              GGS_entityPropertyMap  automatic_var_54 ;
              GGS_bool automatic_var_55 ;
              GGS_entityPropertyMap  automatic_var_56 ;
              GGS_lstring  automatic_var_57 ;
              GGS_typeSuperClassesMap  automatic_var_58 ;
              GGS_typeListeAttributsSemantiques  automatic_var_59 ;
              GGS_string automatic_var_60 ;
              GGS_uint  automatic_var_61 ;
              const GGS_entityToImplementMap  _temp_76837 = var_cas_inAllMetamodelClassMap ;
              if (_temp_76837._isBuilt ()) {
                _temp_76837 (HERE)->method_searchKey (_inLexique, var_cas_returnedEntity, automatic_var_54, automatic_var_55, automatic_var_56, automatic_var_57, automatic_var_58, automatic_var_59, automatic_var_60, automatic_var_61 COMMA_SOURCE_FILE_AT_LINE (2125)) ;
              }
              } break ;
            default :
              break ;
          }
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signatureFournieParPrototype ;
          GGS_lstring  var_cas_returnedEntityFromPrototype ;
          const GGS_M_nonterminalSymbolAlts  _temp_77057 = var_cas_nonterminalSymbolAltMap ;
          if (_temp_77057._isBuilt ()) {
            _temp_77057 (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signatureFournieParPrototype, var_cas_returnedEntityFromPrototype COMMA_SOURCE_FILE_AT_LINE (2131)) ;
          }
          ::routine_verifierCompatibiliteSignatures (_inLexique,  var_cas_signatureFournieParPrototype,  var_cas_listeDeTypesFormels,  var_cas_errorLocation COMMA_SOURCE_FILE_AT_LINE (2131)) ;
          GGS_typeInstructionList  var_cas_branchInstructionList ;
          var_cas_branchInstructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
          GGS_L_ruleSyntaxSignature  var_cas_branchSyntaxSignature ;
          var_cas_branchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
          nt_syntax_instructions_list_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, GGS_bool (true, false), var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableArgumentsMethode, var_cas_branchInstructionList, var_cas_tableTerminaux, var_cas_branchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, GGS_bool (true, false), var_cas_ioSemanticContext) ;
          var_cas_altProductionsMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_listeTypeEtNomsArguments, var_cas_branchInstructionList, var_cas_branchSyntaxSignature, GGS_location (_inLexique), var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2161)), var_cas_mdaResultVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2162)), GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2155)) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  if (var_cas_altProductionsMap._isBuilt ()) {
    ::routine_checkLabelSignatures (_inLexique,  var_cas_altProductionsMap COMMA_SOURCE_FILE_AT_LINE (2168)) ;
  }
  {
    GGS_M_nonterminalSymbolAlts::cEnumerator enumerator_78321 (var_cas_nonterminalSymbolAltMap, true) ;
    const GGS_M_nonterminalSymbolAlts::cElement * operand_78321 = NULL ;
    while (((operand_78321 = (GGS_M_nonterminalSymbolAlts::cElement *) enumerator_78321.nextObject ()))) {
      macroValidPointer (operand_78321) ;
      if ((((operand_78321->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2173)))._operator_isNotEqual (GGS_string (true, "parse")))._operator_and ((var_cas_altProductionsMap.reader_hasKey (_inLexique, operand_78321->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2173)) COMMA_SOURCE_FILE_AT_LINE (2173)))._operator_not ())).isBuiltAndTrue ()) {
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the '"))._operator_concat (operand_78321->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2174))))._operator_concat (GGS_string (true, "' label is not implemented within the rule")) COMMA_SOURCE_FILE_AT_LINE (2174)) ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeProductionAengendrer::constructor_new (_inLexique, var_cas_ruleName, var_cas_altProductionsMap, var_cas_productionTagName, var_cas_inLexiqueClassName, var_cas_hasParseLabel COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_ea) ;
  GGS_uint  var_cas_ruleIndex ;
  var_cas_ruleIndex = GGS_uint (true, 0U) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_ruleName, var_cas_ruleIndex, var_cas_syntaxSignature) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_declaration_parser_parser_1933_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_nonTerminalSymbolsForGrammar  &/* var_cas_ioNonTerminalSymbolsMap */,
                                GGS_L_productionRules_ForGrammarComponent  &var_cas_ioProductionRulesListForGrammar) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
  GGS_lstring  var_cas_returnedEntity ;
  switch (select_parser_parser_10 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntity = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntity) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_11 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_instructionsList ;
  var_cas_instructionsList = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_importSyntax (_inLexique, var_cas_instructionsList) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_parser_parser_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (_inLexique) ;
          switch (select_parser_parser_14 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  GGS_uint  var_cas_leftNonterminalSymbolIndex ;
  var_cas_leftNonterminalSymbolIndex = GGS_uint (true, 0U) ;
  var_cas_ioProductionRulesListForGrammar._addAssign_operation (var_cas_nonterminalSymbolName, var_cas_leftNonterminalSymbolIndex, var_cas_instructionsList) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_declaration_parser_parser_1933_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  nt_formal_arguments_list_parse (_inLexique) ;
  switch (select_parser_parser_10 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      switch (select_parser_parser_11 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  switch (select_parser_parser_12 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_syntax_instructions_list_parse (_inLexique) ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_repeat_parser_parser_13 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (_inLexique) ;
          switch (select_parser_parser_14 (_inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          nt_syntax_instructions_list_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'syntax_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_parser_parser_2249_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (_inLexique COMMA_SOURCE_FILE_AT_LINE (2265)) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  GGS_location  var_cas_positionErreur ;
  var_cas_positionErreur = GGS_location (_inLexique) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (_inLexique, var_cas_positionErreur COMMA_SOURCE_FILE_AT_LINE (2265)) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_parser_parser_2249_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_parser_parser_2249_4_parse (galgas_scanner & _inLexique) {
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2294_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &/* var_cas_ioNonTerminalSymbolMapForSyntax */,
                                GGS_bool /* var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioEntitiesMap */,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  /* var_cas_inAllMetamodelClassMap */,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */,
                                const GGS_bool /* var_cas_inIsInvokedWithinParseLoopInstruction */,
                                const GGS_semanticContext /* var_cas_inSemanticContext */) {
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeDesAttributsFormels ;
  const GGS_M_terminalSymbolsMapForUse  _temp_83097 = var_cas_tableTerminaux ;
  if (_temp_83097._isBuilt ()) {
    _temp_83097 (HERE)->method_searchKey (_inLexique, var_cas_terminalSymbolName, var_cas_listeDesAttributsFormels COMMA_SOURCE_FILE_AT_LINE (2313)) ;
  }
  GGS_L_assignedVariables  var_cas_listeTypeEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  nt_input_parameters_list_ (_inLexique, var_cas_listeTypeEffectifs, var_cas_allVariablesList, var_cas_listeDesAttributsFormels, var_cas_ioVariablesMap) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionVerifSyntaxique::constructor_new (_inLexique, var_cas_terminalSymbolName, var_cas_listeTypeEffectifs, var_cas_inLexiqueClassName COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_uint  var_cas_terminalSymbolIndex ;
  var_cas_terminalSymbolIndex = GGS_uint (true, 0U) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_terminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2330)), var_cas_terminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2294_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_terminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (_inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_terminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_terminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2340)), var_cas_terminalSymbolName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2294_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  nt_input_parameters_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2352_4_ (galgas_scanner & _inLexique,
                                const GGS_string /* var_cas_inLexiqueClassName */,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &/* var_cas_listeEntitesAengendrer */,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &/* var_cas_tableTerminaux */,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_parser_parser_15 (_inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "parse"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_M_nonterminalSymbolAlts  var_cas_nonterminalSymbolAltMap ;
  const GGS_M_nonTerminalSymbolForSyntax  _temp_85541 = var_cas_ioNonTerminalSymbolMapForSyntax ;
  if (_temp_85541._isBuilt ()) {
    _temp_85541 (HERE)->method_searchKey (_inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (2380)) ;
  }
  GGS_L_EXsignature  var_cas_signatureMethode ;
  GGS_lstring  var_cas_returnedEntityFromSignature ;
  const GGS_M_nonterminalSymbolAlts  _temp_85706 = var_cas_nonterminalSymbolAltMap ;
  if (_temp_85706._isBuilt ()) {
    _temp_85706 (HERE)->method_searchKey (_inLexique, var_cas_altName, var_cas_signatureMethode, var_cas_returnedEntityFromSignature COMMA_SOURCE_FILE_AT_LINE (2383)) ;
  }
  if (((var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel)._operator_and ((var_cas_altName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2385)))._operator_isNotEqual (GGS_string (true, "parse")))).isBuiltAndTrue ()) {
    if (((var_cas_nonterminalSymbolAltMap.reader_hasKey (_inLexique, GGS_string (true, "parse") COMMA_SOURCE_FILE_AT_LINE (2386)))._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (2387)) ;
    }
  }
  if (((var_cas_inIsInvokedWithinParseLoopInstruction)._operator_and ((var_cas_altName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2390)))._operator_isNotEqual (GGS_string (true, "parse")))).isBuiltAndTrue ()) {
    if (((var_cas_nonterminalSymbolAltMap.reader_hasKey (_inLexique, GGS_string (true, "parse") COMMA_SOURCE_FILE_AT_LINE (2391)))._operator_not ()).isBuiltAndTrue ()) {
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "As this nonterminal is invoked within a 'parse loop ...' instruction, it must be declared with 'parse' label") COMMA_SOURCE_FILE_AT_LINE (2392)) ;
    }
  }
  GGS_typeExpressionList  var_cas_parametersExpressionList ;
  nt_actual_parameters_list_ (_inLexique, var_cas_signatureMethode, var_cas_parametersExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioEntitiesMap, var_cas_ioInstructionList) ;
  GGS_lstring  var_cas_returnedEntityVariableName ;
  GGS_bool var_cas_isMultipleEntity ;
  var_cas_isMultipleEntity = GGS_bool (true, false) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      var_cas_returnedEntityVariableName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityVariableName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_returnedEntityVariableName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_isMultipleEntity = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_variableEntityName ;
  var_cas_variableEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2421)))._operator_isEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2421)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the non terminal symbol is declared with no returned entity") COMMA_SOURCE_FILE_AT_LINE (2422)) ;
  }else if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2423)))._operator_isNotEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2423)))._operator_isEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the non terminal symbol is declared to return an instance of '@"))._operator_concat (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2424))))._operator_concat (GGS_string (true, "' entity")) COMMA_SOURCE_FILE_AT_LINE (2424)) ;
  }else if ((((var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2425)))._operator_isNotEqual (GGS_string (true, "")))._operator_and ((var_cas_returnedEntityVariableName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2425)))._operator_isNotEqual (GGS_string (true, "")))).isBuiltAndTrue ()) {
    if ((var_cas_isMultipleEntity).isBuiltAndTrue ()) {
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  automatic_var_62 ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (_inLexique, var_cas_returnedEntityVariableName, var_cas_type, automatic_var_62 COMMA_SOURCE_FILE_AT_LINE (2429)) ;
      var_cas_variableEntityName = GGS_typeGalgas_multipleReferenceEntity::_castFrom (_inLexique, var_cas_type.getPtr (), true, var_cas_returnedEntityVariableName COMMA_SOURCE_FILE_AT_LINE (2430)).reader_mEntityTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (2430)) ;
    }else{
      GGS_AC_galgasType  var_cas_type ;
      GGS_typeCplusPlusName  automatic_var_63 ;
      var_cas_ioVariablesMap.modifier_searchForWriteAccess (_inLexique, var_cas_returnedEntityVariableName, var_cas_type, automatic_var_63 COMMA_SOURCE_FILE_AT_LINE (2434)) ;
      var_cas_variableEntityName = GGS_typeGalgas_singleReferenceEntity::_castFrom (_inLexique, var_cas_type.getPtr (), true, var_cas_returnedEntityVariableName COMMA_SOURCE_FILE_AT_LINE (2436)).reader_mEntityTypeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (2436)) ;
    }
    GGS_bool var_cas_ok ;
    var_cas_ok = (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2439)))._operator_isEqual (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2439))) ;
    if (((var_cas_ok)._operator_not ()).isBuiltAndTrue ()) {
      GGS_lstring  var_cas_testedClass ;
      var_cas_testedClass = var_cas_returnedEntityFromSignature ;
      GGS_uint _variant_88993 = var_cas_inAllMetamodelClassMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (2442)) ;
      GGS_bool _condition_88993 (_variant_88993._isBuilt (), true) ;
      while (_condition_88993.isBuiltAndTrue ()) {
        _condition_88993 = ((var_cas_ok)._operator_not ())._operator_and ((var_cas_testedClass.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (2443)))._operator_strictSup (GGS_uint (true, 0U))) ;
        if (_condition_88993.isBuiltAndTrue ()) {
          if (_variant_88993.uintValue () == 0) {
            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (2447)) ;
            _condition_88993 = GGS_bool (true, false) ;
          }else{
            _variant_88993._decrement_operation (_inLexique COMMA_HERE) ;
            GGS_lstring  var_cas_superEntity ;
            GGS_entityPropertyMap  automatic_var_64 ;
            GGS_bool automatic_var_65 ;
            GGS_entityPropertyMap  automatic_var_66 ;
            GGS_typeSuperClassesMap  automatic_var_67 ;
            GGS_typeListeAttributsSemantiques  automatic_var_68 ;
            GGS_string automatic_var_69 ;
            GGS_uint  automatic_var_70 ;
            const GGS_entityToImplementMap  _temp_88841 = var_cas_inAllMetamodelClassMap ;
            if (_temp_88841._isBuilt ()) {
              _temp_88841 (HERE)->method_searchKey (_inLexique, var_cas_testedClass, automatic_var_64, automatic_var_65, automatic_var_66, var_cas_superEntity, automatic_var_67, automatic_var_68, automatic_var_69, automatic_var_70 COMMA_SOURCE_FILE_AT_LINE (2445)) ;
            }
            var_cas_testedClass = var_cas_superEntity ;
            var_cas_ok = (var_cas_testedClass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2447)))._operator_isEqual (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2447))) ;
          }
        }
      }
    }
    if (((var_cas_ok)._operator_not ()).isBuiltAndTrue ()) {
      var_cas_returnedEntityVariableName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "the type of this variable is '%"))._operator_concat (var_cas_variableEntityName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2451))))._operator_concat (GGS_string (true, "' and is not a super class of '%")))._operator_concat (var_cas_returnedEntityFromSignature.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (2452))))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (2452)) ;
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeInstructionAppelNonTerminal::constructor_new (_inLexique, var_cas_nonterminalSymbolName, var_cas_parametersExpressionList, var_cas_altName, var_cas_returnedEntityVariableName, var_cas_variableEntityName, var_cas_isMultipleEntity COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  var_cas_i = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_nonterminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2467)), var_cas_nonterminalSymbolName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2352_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_nonterminalSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_15 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (_inLexique) ;
  GGS_AC_instruction_ForGrammar  var_cas_instruction ;
  var_cas_instruction = GGS_T_nonterminalInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_nonterminalSymbolName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (2486)), var_cas_nonterminalSymbolName, GGS_uint (true, 0U) COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2352_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  switch (select_parser_parser_15 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  nt_actual_parameters_list_parse (_inLexique) ;
  switch (select_parser_parser_16 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2506_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesChoix ;
  var_cas_listeBranchesChoix = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (2526)) ;
  var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2527)) ;
  GGS_typeInstructionList  var_cas_firstBranchInstructionList ;
  var_cas_firstBranchInstructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
  var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesChoix._addAssign_operation (var_cas_firstBranchInstructionList) ;
  var_cas_selectList._addAssign_operation (var_cas_firstBranchSyntaxSignature) ;
  var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2527)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2551)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheChoix ;
        var_cas_listeInstructionsBrancheChoix = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheChoix, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesChoix._addAssign_operation (var_cas_listeInstructionsBrancheChoix) ;
        var_cas_selectList._addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2551)) ;
      switch (select_repeat_parser_parser_17 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (2526)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_select_instruction::constructor_new (_inLexique, var_cas_listeBranchesChoix, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2506_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_selectList ;
  var_cas_selectList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
  var_cas_selectList._addAssign_operation (var_cas_syntaxSignature) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature2 ;
        var_cas_syntaxSignature2 = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature2) ;
        var_cas_selectList._addAssign_operation (var_cas_syntaxSignature2) ;
      switch (select_repeat_parser_parser_17 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_selectInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_selectList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2506_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      switch (select_repeat_parser_parser_17 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_or) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2617_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_typeListeBranchesInstructions  var_cas_listeBranchesRepeter ;
  var_cas_listeBranchesRepeter = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
  var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (2637)) ;
  GGS_typeInstructionList  var_cas_listeInstructionsPremiereBranche ;
  var_cas_listeInstructionsPremiereBranche = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_repeatBranchInstructionsList ;
  var_cas_repeatBranchInstructionsList = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_repeatPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2640)) ;
  nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsPremiereBranche, var_cas_tableTerminaux, var_cas_repeatBranchInstructionsList, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
  var_cas_listeBranchesRepeter._addAssign_operation (var_cas_listeInstructionsPremiereBranche) ;
  var_cas_whileList._addAssign_operation (var_cas_repeatBranchInstructionsList) ;
  GGS_location  var_cas_positionErreurPremiereBranche ;
  var_cas_positionErreurPremiereBranche = GGS_location (_inLexique) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (_inLexique, var_cas_positionErreurPremiereBranche COMMA_SOURCE_FILE_AT_LINE (2640)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
        var_cas_ioVariablesMap.prologue_repeatPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2663)) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheRepeter ;
        var_cas_listeInstructionsBrancheRepeter = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheRepeter, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
        var_cas_listeBranchesRepeter._addAssign_operation (var_cas_listeInstructionsBrancheRepeter) ;
        var_cas_whileList._addAssign_operation (var_cas_syntaxSignature) ;
        var_cas_ioVariablesMap.epilogue_repeatPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2663)) ;
      switch (select_repeat_parser_parser_18 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (2637)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_repeat_instruction::constructor_new (_inLexique, var_cas_listeBranchesRepeter, var_cas_positionDebut COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_whileList, var_cas_v COMMA_HERE) ;
  var_cas_ioSyntaxSignature._addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2617_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  GGS_location  var_cas_positionDebut ;
  var_cas_positionDebut = GGS_location (_inLexique) ;
  GGS_L_branchList_ForGrammarComponent  var_cas_repeatList ;
  var_cas_repeatList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
  var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
  var_cas_repeatList._addAssign_operation (var_cas_syntaxSignature) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
        var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
        nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_syntaxSignature) ;
        var_cas_repeatList._addAssign_operation (var_cas_syntaxSignature) ;
      switch (select_repeat_parser_parser_18 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_AC_instruction_ForGrammar  var_cas_i ;
  GGS_uint  var_cas_v ;
  var_cas_v = GGS_uint (true, 0U) ;
  var_cas_i = GGS_T_repeatInstruction_forGrammarComponent::constructor_new (_inLexique, var_cas_positionDebut, var_cas_repeatList, var_cas_v COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2617_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
        nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      switch (select_repeat_parser_parser_18 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'syntax_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2730_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_parser_parser_19 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      GGS_typeExpression  var_cas_variantExpression ;
      GGS_AC_galgasType  var_cas_variantResultType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
      GGS_typeGalgas_uint  var_cas_ui ;
      var_cas_ui = GGS_typeGalgas_uint::_castFrom (_inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2761)) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      GGS_typeExpression  var_cas_conditionalExpression ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b ;
      var_cas_b = GGS_typeGalgas_bool::_castFrom (_inLexique, var_cas_resultType.getPtr (), true, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2774)) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_instructionList ;
      var_cas_instructionList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (2779)) ;
      var_cas_ioVariablesMap.prologue_repeatPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2780)) ;
      nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, GGS_bool (true, true), var_cas_inSemanticContext) ;
      var_cas_ioVariablesMap.epilogue_repeatPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2780)) ;
      var_cas_ioVariablesMap.epilogue_repeatBlock (_inLexique COMMA_SOURCE_FILE_AT_LINE (2779)) ;
      var_cas_instruction = GGS_C_parse_loop_instruction::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_variantExpression, var_cas_conditionalExpression, var_cas_instructionList COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
      var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_location  var_cas_instructionStartLocation ;
      var_cas_instructionStartLocation = GGS_location (_inLexique) ;
      GGS_typeListeBranchesInstructions  var_cas_branchList ;
      var_cas_branchList = GGS_typeListeBranchesInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_branchList_ForGrammarComponent  var_cas_whileList ;
      var_cas_whileList = GGS_L_branchList_ForGrammarComponent::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_firstBranchInstructionsList ;
      var_cas_firstBranchInstructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_firstBranchSyntaxSignature ;
      var_cas_firstBranchSyntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_firstBranchInstructionsList, var_cas_tableTerminaux, var_cas_firstBranchSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_branchList._addAssign_operation (var_cas_firstBranchInstructionsList) ;
      var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_firstBranchSyntaxSignature, var_cas_instructionStartLocation) ;
      {
        GGS_L_ruleSyntaxSignature::cEnumerator enumerator_102546 (var_cas_firstBranchSyntaxSignature, true) ;
        const GGS_L_ruleSyntaxSignature::cElement * operand_102546 = NULL ;
        while (((operand_102546 = (GGS_L_ruleSyntaxSignature::cElement *) enumerator_102546.nextObject ()))) {
          macroValidPointer (operand_102546) ;
          var_cas_ioSyntaxSignature._addAssign_operation (operand_102546->mInstruction) ;
        }
      }
      { bool syntaxRepeat_20 = true ;
        while (syntaxRepeat_20) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (_inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList._addAssign_operation (var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
          switch (select_repeat_parser_parser_20 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_20 = false ;
              break ;
          }
        }
      }
      var_cas_instruction = GGS_C_parse_rewind_instruction::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_branchList COMMA_HERE) ;
      if (var_cas_parse_rewind_signature_list._isBuilt ()) {
        ::routine_checkParseRewindSignatures (_inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (2861)) ;
      }
      } break ;
    case 3 : {
      GGS_L_parse_rewind_signature_list  var_cas_parse_rewind_signature_list ;
      var_cas_parse_rewind_signature_list = GGS_L_parse_rewind_signature_list::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_expression_instructionsList_list  var_cas_branchList ;
      var_cas_branchList = GGS_L_expression_instructionsList_list::constructor_emptyList (_inLexique COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (2868)) ;
      { bool syntaxRepeat_21 = true ;
        while (syntaxRepeat_21) {
            var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2871)) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            GGS_typeExpression  var_cas_expression ;
            GGS_AC_galgasType  var_cas_resultType ;
            nt_expression_ (_inLexique, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            GGS_location  var_cas_branchStartLocation ;
            var_cas_branchStartLocation = GGS_location (_inLexique) ;
            GGS_typeInstructionList  var_cas_instructionsList ;
            var_cas_instructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
            GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
            var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
            var_cas_branchList._addAssign_operation (var_cas_expression, var_cas_instructionsList) ;
            var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
            var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2871)) ;
          switch (select_repeat_parser_parser_21 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_21 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      var_cas_ioVariablesMap.prologue_testPart (_inLexique COMMA_SOURCE_FILE_AT_LINE (2909)) ;
      GGS_location  var_cas_branchStartLocation ;
      var_cas_branchStartLocation = GGS_location (_inLexique) ;
      GGS_typeInstructionList  var_cas_elseInstructionsList ;
      var_cas_elseInstructionsList = GGS_typeInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
      GGS_L_ruleSyntaxSignature  var_cas_syntaxSignature ;
      var_cas_syntaxSignature = GGS_L_ruleSyntaxSignature::constructor_emptyList (_inLexique COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionsList, var_cas_tableTerminaux, var_cas_syntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
      var_cas_parse_rewind_signature_list._addAssign_operation (var_cas_syntaxSignature, var_cas_branchStartLocation) ;
      {
        GGS_L_ruleSyntaxSignature::cEnumerator enumerator_106244 (var_cas_syntaxSignature, true) ;
        const GGS_L_ruleSyntaxSignature::cElement * operand_106244 = NULL ;
        while (((operand_106244 = (GGS_L_ruleSyntaxSignature::cElement *) enumerator_106244.nextObject ()))) {
          macroValidPointer (operand_106244) ;
          var_cas_ioSyntaxSignature._addAssign_operation (operand_106244->mInstruction) ;
        }
      }
      var_cas_ioVariablesMap.epilogue_testPart (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (2909)) ;
      var_cas_ioVariablesMap.epilogue_testBloc (_inLexique COMMA_SOURCE_FILE_AT_LINE (2868)) ;
      var_cas_instruction = GGS_C_parse_when_else_instruction::constructor_new (_inLexique, var_cas_branchList, var_cas_elseInstructionsList COMMA_HERE) ;
      if (var_cas_parse_rewind_signature_list._isBuilt ()) {
        ::routine_checkParseRewindSignatures (_inLexique,  var_cas_parse_rewind_signature_list COMMA_SOURCE_FILE_AT_LINE (2935)) ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioInstructionList._addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instruction_parser_parser_2730_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_19 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
      { bool syntaxRepeat_20 = true ;
        while (syntaxRepeat_20) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_20 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_20 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_21 = true ;
        while (syntaxRepeat_21) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (_inLexique) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_21 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_21 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_importSyntax (_inLexique, var_cas_ioInstructionList) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instruction_parser_parser_2730_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  switch (select_parser_parser_19 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (_inLexique) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      { bool syntaxRepeat_20 = true ;
        while (syntaxRepeat_20) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_20 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_20 = false ;
              break ;
          }
        }
      }
      } break ;
    case 3 : {
      { bool syntaxRepeat_21 = true ;
        while (syntaxRepeat_21) {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
            nt_expression_parse (_inLexique) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
          switch (select_repeat_parser_parser_21 (_inLexique)) {
            case 2 : {
              } break ;
            default :
              syntaxRepeat_21 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_syntax_instructions_list_no_verif_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_parse) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'syntax_instructions_list_no_verif'    *
//                                                                           *
//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2981_4_ (galgas_scanner & _inLexique,
                                const GGS_string var_cas_inLexiqueClassName,
                                GGS_M_nonTerminalSymbolForSyntax  &var_cas_ioNonTerminalSymbolMapForSyntax,
                                GGS_bool var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_tableTerminaux,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioSyntaxSignature,
                                const GGS_entityToImplementMap  var_cas_inAllMetamodelClassMap,
                                const GGS_M_treewalkingComponents  var_cas_inTreewalkingComponentMap,
                                const GGS_bool var_cas_inIsInvokedWithinParseLoopInstruction,
                                const GGS_semanticContext var_cas_inSemanticContext) {
  GGS_entityPropertyMap  var_cas_propertyMap ;
  var_cas_propertyMap = GGS_entityPropertyMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_treewalkingRoutineHeaderMap  var_cas_treewalkingRoutineHeaderMap ;
  var_cas_treewalkingRoutineHeaderMap = GGS_treewalkingRoutineHeaderMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_parser_parser_22 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_ (_inLexique, var_cas_inLexiqueClassName, var_cas_ioNonTerminalSymbolMapForSyntax, var_cas_inCheckNonTerminalsAreDeclaredWithParseLabel, var_cas_ioEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_tableTerminaux, var_cas_ioSyntaxSignature, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inIsInvokedWithinParseLoopInstruction, var_cas_inSemanticContext) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_ (_inLexique, var_cas_treewalkingRoutineHeaderMap, var_cas_tableEnAvant, var_cas_ioEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_propertyMap, var_cas_inAllMetamodelClassMap, var_cas_inTreewalkingComponentMap, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2981_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_L_ruleSyntaxSignature  &var_cas_ioInstructionList) {
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_parser_parser_22 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_importSyntax (_inLexique, var_cas_ioInstructionList) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void parser_parser::
pr_syntax_instructions_list_no_verif_parser_parser_2981_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_parser_parser_22 (_inLexique)) {
        case 2 : {
          nt_syntax_instruction_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_semantic_instruction_parse (_inLexique) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

