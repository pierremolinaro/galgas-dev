//---------------------------------------------------------------------------*
//                                                                           *
//               File 'semanticAnalysisOfSyntaxComponent.cpp'                *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 27th, 2010, at 19h15'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticAnalysisOfSyntaxComponent.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticAnalysisOfSyntaxComponent.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'e_nonterminalLabelMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

e_nonterminalLabelMap::e_nonterminalLabelMap (void) :
mSignatureForGeneration (),
mSignature (),
mEndOfArgumentLocation () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class map '@nonterminalLabelMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalLabelMap ("nonterminalLabelMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_nonterminalLabelMap::
elementOf_GGS_nonterminalLabelMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_nonterminalLabelMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonterminalLabelMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSignatureForGeneration.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSignature.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mEndOfArgumentLocation.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonterminalLabelMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_nonterminalLabelMap * ptr = dynamic_cast <const elementOf_GGS_nonterminalLabelMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mSignatureForGeneration.operator_isEqual (ptr->mInfo.mSignatureForGeneration)).boolValue ()
           && (mInfo.mSignature.operator_isEqual (ptr->mInfo.mSignature)).boolValue ()
           && (mInfo.mEndOfArgumentLocation.operator_isEqual (ptr->mInfo.mEndOfArgumentLocation)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_nonterminalLabelMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_nonterminalLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_nonterminalLabelMap * info = (e_nonterminalLabelMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_nonterminalLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_nonterminalLabelMap * info = (e_nonterminalLabelMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalLabelMap GGS_nonterminalLabelMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonterminalLabelMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_nonterminalLabelMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalLabelMap::
operator_isEqual (const GGS_nonterminalLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalLabelMap::
operator_isNotEqual (const GGS_nonterminalLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterListForGeneration & inParameter0,
               const GGS_formalParameterSignature & inParameter1,
               const GGS_location & inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_nonterminalLabelMap info  ;
    info.mSignatureForGeneration = inParameter0 ;
    info.mSignature = inParameter1 ;
    info.mEndOfArgumentLocation = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterListForGeneration   & outParameter0,
               GGS_formalParameterSignature   & outParameter1,
               GGS_location   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mSignatureForGeneration ;
    outParameter1 = node->mInfo.mSignature ;
    outParameter2 = node->mInfo.mEndOfArgumentLocation ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonterminalLabelMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterListForGeneration   & outParameter0,
                                GGS_formalParameterSignature   & outParameter1,
                                GGS_location   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonterminalLabelMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonterminalLabelMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterListForGeneration & inParameter0,
                                const GGS_formalParameterSignature & inParameter1,
                                const GGS_location & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalLabelMap GGS_nonterminalLabelMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_nonterminalLabelMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonterminalLabelMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalLabelMap GGS_nonterminalLabelMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonterminalLabelMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonterminalLabelMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @nonterminalLabelMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterListForGeneration  & GGS_nonterminalLabelMap::cEnumerator::_mSignatureForGeneration (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSignatureForGeneration ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_nonterminalLabelMap::cEnumerator::_mSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_nonterminalLabelMap::cEnumerator::_mEndOfArgumentLocation (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mEndOfArgumentLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_nonterminalLabelMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_nonterminalLabelMap * p = NULL ;
    macroMyNew (p, GGS_nonterminalLabelMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalLabelMap GGS_nonterminalLabelMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_nonterminalLabelMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_nonterminalLabelMap * p = dynamic_cast <const GGS_nonterminalLabelMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_nonterminalLabelMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_nonterminalLabelMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_nonterminalLabelMap ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalLabelMap GGS_nonterminalLabelMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterListForGeneration & inValue0,
                                             const GGS_formalParameterSignature & inValue1,
                                             const GGS_location & inValue2
                                             COMMA_LOCATION_ARGS) {
  GGS_nonterminalLabelMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_nonterminalMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_nonterminalMap::e_nonterminalMap (void) :
mLabelMap (),
mHasParseLabel () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@nonterminalMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalMap ("nonterminalMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_nonterminalMap::
elementOf_GGS_nonterminalMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_nonterminalMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonterminalMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabelMap.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mHasParseLabel.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonterminalMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_nonterminalMap * ptr = dynamic_cast <const elementOf_GGS_nonterminalMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabelMap.operator_isEqual (ptr->mInfo.mLabelMap)).boolValue ()
           && (mInfo.mHasParseLabel.operator_isEqual (ptr->mInfo.mHasParseLabel)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_nonterminalMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_nonterminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_nonterminalMap * info = (e_nonterminalMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_nonterminalMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_nonterminalMap * info = (e_nonterminalMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap GGS_nonterminalMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonterminalMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_nonterminalMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalMap::
operator_isEqual (const GGS_nonterminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalMap::
operator_isNotEqual (const GGS_nonterminalMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_nonterminalLabelMap & inParameter0,
               const GGS_bool& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_nonterminalMap info  ;
    info.mLabelMap = inParameter0 ;
    info.mHasParseLabel = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_nonterminalLabelMap   & outParameter0,
               GGS_bool  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mLabelMap ;
    outParameter1 = node->mInfo.mHasParseLabel ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonterminalMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_nonterminalLabelMap   & outParameter0,
                                GGS_bool  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_nonterminalMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_nonterminalMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_nonterminalLabelMap & inParameter0,
                                const GGS_bool& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap GGS_nonterminalMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_nonterminalMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_nonterminalMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap GGS_nonterminalMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonterminalMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonterminalMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @nonterminalMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonterminalLabelMap  & GGS_nonterminalMap::cEnumerator::_mLabelMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabelMap ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonterminalMap::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mHasParseLabel ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_nonterminalMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_nonterminalMap * p = NULL ;
    macroMyNew (p, GGS_nonterminalMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap GGS_nonterminalMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_nonterminalMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_nonterminalMap * p = dynamic_cast <const GGS_nonterminalMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_nonterminalMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_nonterminalMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_nonterminalMap ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap GGS_nonterminalMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_nonterminalLabelMap & inValue0,
                                             const GGS_bool& inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_nonterminalMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@ruleLabelImplementationList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_ruleLabelImplementationList::
elementOf_GGS_ruleLabelImplementationList (const GGS_lstring & argument_0,
                                const GGS_formalParameterListForGeneration & argument_1,
                                const GGS_formalParameterSignature & argument_2,
                                const GGS_location & argument_3,
                                const GGS_semanticInstructionListForGeneration & argument_4
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mLabelName (argument_0),
mSignatureForGeneration (argument_1),
mSignature (argument_2),
mEndOfArgumentLocation (argument_3),
mInstructionListForGeneration (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ruleLabelImplementationList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_ruleLabelImplementationList * ptr = dynamic_cast <const elementOf_GGS_ruleLabelImplementationList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mLabelName.operator_isEqual (ptr->mLabelName).boolValue ()
         && mSignatureForGeneration.operator_isEqual (ptr->mSignatureForGeneration).boolValue ()
         && mSignature.operator_isEqual (ptr->mSignature).boolValue ()
         && mEndOfArgumentLocation.operator_isEqual (ptr->mEndOfArgumentLocation).boolValue ()
         && mInstructionListForGeneration.operator_isEqual (ptr->mInstructionListForGeneration).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ruleLabelImplementationList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSignatureForGeneration.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSignature.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfArgumentLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionListForGeneration.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@ruleLabelImplementationList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ruleLabelImplementationList ("ruleLabelImplementationList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListForGeneration & argument_1,
                    const GGS_formalParameterSignature & argument_2,
                    const GGS_location & argument_3,
                    const GGS_semanticInstructionListForGeneration & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListForGeneration & argument_1,
                    const GGS_formalParameterSignature & argument_2,
                    const GGS_location & argument_3,
                    const GGS_semanticInstructionListForGeneration & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListForGeneration & argument_1,
                                const GGS_formalParameterSignature & argument_2,
                                const GGS_location & argument_3,
                                const GGS_semanticInstructionListForGeneration & argument_4) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()&& argument_4.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList GGS_ruleLabelImplementationList::
operator_concat (const GGS_ruleLabelImplementationList & inOperand) const {
  GGS_ruleLabelImplementationList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
dotAssign_operation (const GGS_ruleLabelImplementationList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_ruleLabelImplementationList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_formalParameterListForGeneration  p_1 = p->mSignatureForGeneration ;
          GGS_formalParameterSignature  p_2 = p->mSignature ;
          GGS_location  p_3 = p->mEndOfArgumentLocation ;
          GGS_semanticInstructionListForGeneration  p_4 = p->mInstructionListForGeneration ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameterListForGeneration & argument_1,
                     const GGS_formalParameterSignature & argument_2,
                     const GGS_location & argument_3,
                     const GGS_semanticInstructionListForGeneration & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mLabelName,
                                ptr->mSignatureForGeneration,
                                ptr->mSignature,
                                ptr->mEndOfArgumentLocation,
                                ptr->mInstructionListForGeneration
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList  GGS_ruleLabelImplementationList::
constructor_emptyList (void) {
  GGS_ruleLabelImplementationList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList  GGS_ruleLabelImplementationList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListForGeneration & argument_1,
                                const GGS_formalParameterSignature & argument_2,
                                const GGS_location & argument_3,
                                const GGS_semanticInstructionListForGeneration & argument_4) {
  GGS_ruleLabelImplementationList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
internalSubListWithRange (GGS_ruleLabelImplementationList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mLabelName, ptr->mSignatureForGeneration, ptr->mSignature, ptr->mEndOfArgumentLocation, ptr->mInstructionListForGeneration) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList GGS_ruleLabelImplementationList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_ruleLabelImplementationList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList GGS_ruleLabelImplementationList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_ruleLabelImplementationList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ruleLabelImplementationList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@ruleLabelImplementationList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_formalParameterListForGeneration & _out_1,
              GGS_formalParameterSignature & _out_2,
              GGS_location & _out_3,
              GGS_semanticInstructionListForGeneration & _out_4
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mSignatureForGeneration ;
    _out_2 = ptr->mSignature ;
    _out_3 = ptr->mEndOfArgumentLocation ;
    _out_4 = ptr->mInstructionListForGeneration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_formalParameterListForGeneration & _out_1,
             GGS_formalParameterSignature & _out_2,
             GGS_location & _out_3,
             GGS_semanticInstructionListForGeneration & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mSignatureForGeneration ;
    _out_2 = ptr->mSignature ;
    _out_3 = ptr->mEndOfArgumentLocation ;
    _out_4 = ptr->mInstructionListForGeneration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_formalParameterListForGeneration & _out_1,
                 GGS_formalParameterSignature & _out_2,
                 GGS_location & _out_3,
                 GGS_semanticInstructionListForGeneration & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mSignatureForGeneration ;
    _out_2 = ptr->mSignature ;
    _out_3 = ptr->mEndOfArgumentLocation ;
    _out_4 = ptr->mInstructionListForGeneration ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_formalParameterListForGeneration & _out_1,
                GGS_formalParameterSignature & _out_2,
                GGS_location & _out_3,
                GGS_semanticInstructionListForGeneration & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mSignatureForGeneration ;
    _out_2 = ptr->mSignature ;
    _out_3 = ptr->mEndOfArgumentLocation ;
    _out_4 = ptr->mInstructionListForGeneration ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_ruleLabelImplementationList::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterListForGeneration  GGS_ruleLabelImplementationList::
reader_mSignatureForGenerationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterListForGeneration  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSignatureForGeneration ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterSignature  GGS_ruleLabelImplementationList::
reader_mSignatureAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterSignature  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSignature ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_ruleLabelImplementationList::
reader_mEndOfArgumentLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfArgumentLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructionListForGeneration  GGS_ruleLabelImplementationList::
reader_mInstructionListForGenerationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_semanticInstructionListForGeneration  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstructionListForGeneration ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_setMSignatureForGenerationAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterListForGeneration  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSignatureForGeneration = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_setMSignatureAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterSignature  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSignature = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_setMEndOfArgumentLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfArgumentLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleLabelImplementationList::
modifier_setMInstructionListForGenerationAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionListForGeneration  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstructionListForGeneration = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_ruleLabelImplementationList::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabelName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterListForGeneration  & GGS_ruleLabelImplementationList::cEnumerator::_mSignatureForGeneration (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSignatureForGeneration ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_ruleLabelImplementationList::cEnumerator::_mSignature (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_ruleLabelImplementationList::cEnumerator::_mEndOfArgumentLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOfArgumentLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_semanticInstructionListForGeneration  & GGS_ruleLabelImplementationList::cEnumerator::_mInstructionListForGeneration (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mInstructionListForGeneration ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_ruleLabelImplementationList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ruleLabelImplementationList * p = NULL ;
    macroMyNew (p, GGS_ruleLabelImplementationList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList GGS_ruleLabelImplementationList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ruleLabelImplementationList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ruleLabelImplementationList * p = dynamic_cast <const GGS_ruleLabelImplementationList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ruleLabelImplementationList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ruleLabelImplementationList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ruleLabelImplementationList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@ruleDeclarationList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_ruleDeclarationList::
elementOf_GGS_ruleDeclarationList (const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_ruleLabelImplementationList & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mNonterminalName (argument_0),
mRuleIndex (argument_1),
mLabelImplementationList (argument_2),
mHasParseLabel (argument_3) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_ruleDeclarationList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_ruleDeclarationList * ptr = dynamic_cast <const elementOf_GGS_ruleDeclarationList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName.operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mRuleIndex.operator_isEqual (ptr->mRuleIndex).boolValue ()
         && mLabelImplementationList.operator_isEqual (ptr->mLabelImplementationList).boolValue ()
         && mHasParseLabel.operator_isEqual (ptr->mHasParseLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_ruleDeclarationList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNonterminalName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mRuleIndex.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelImplementationList.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mHasParseLabel.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@ruleDeclarationList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_ruleDeclarationList ("ruleDeclarationList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
internalAppendValues (const GGS_string& argument_0,
                    const GGS_uint & argument_1,
                    const GGS_ruleLabelImplementationList & argument_2,
                    const GGS_bool& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
internalPrependValues (const GGS_string& argument_0,
                    const GGS_uint & argument_1,
                    const GGS_ruleLabelImplementationList & argument_2,
                    const GGS_bool& argument_3
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
addAssign_operation (const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_ruleLabelImplementationList & argument_2,
                                const GGS_bool& argument_3) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList GGS_ruleDeclarationList::
operator_concat (const GGS_ruleDeclarationList & inOperand) const {
  GGS_ruleDeclarationList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
dotAssign_operation (const GGS_ruleDeclarationList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_ruleDeclarationList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mNonterminalName ;
          GGS_uint  p_1 = p->mRuleIndex ;
          GGS_ruleLabelImplementationList  p_2 = p->mLabelImplementationList ;
          GGS_bool p_3 = p->mHasParseLabel ;
          internalAppendValues (p_0, p_1, p_2, p_3 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_string& argument_0,
                     const GGS_uint & argument_1,
                     const GGS_ruleLabelImplementationList & argument_2,
                     const GGS_bool& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mNonterminalName,
                                ptr->mRuleIndex,
                                ptr->mLabelImplementationList,
                                ptr->mHasParseLabel
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList  GGS_ruleDeclarationList::
constructor_emptyList (void) {
  GGS_ruleDeclarationList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList  GGS_ruleDeclarationList::
constructor_listWithValue (const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_ruleLabelImplementationList & argument_2,
                                const GGS_bool& argument_3) {
  GGS_ruleDeclarationList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
internalSubListWithRange (GGS_ruleDeclarationList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mNonterminalName, ptr->mRuleIndex, ptr->mLabelImplementationList, ptr->mHasParseLabel) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList GGS_ruleDeclarationList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_ruleDeclarationList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList GGS_ruleDeclarationList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_ruleDeclarationList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_ruleDeclarationList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@ruleDeclarationList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
method_first (C_Compiler & inLexique,
              GGS_string& _out_0,
              GGS_uint & _out_1,
              GGS_ruleLabelImplementationList & _out_2,
              GGS_bool& _out_3
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mRuleIndex ;
    _out_2 = ptr->mLabelImplementationList ;
    _out_3 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
method_last (C_Compiler & inLexique,
             GGS_string& _out_0,
             GGS_uint & _out_1,
             GGS_ruleLabelImplementationList & _out_2,
             GGS_bool& _out_3
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mRuleIndex ;
    _out_2 = ptr->mLabelImplementationList ;
    _out_3 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_uint & _out_1,
                 GGS_ruleLabelImplementationList & _out_2,
                 GGS_bool& _out_3
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mRuleIndex ;
    _out_2 = ptr->mLabelImplementationList ;
    _out_3 = ptr->mHasParseLabel ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_popLast (C_Compiler & inLexique,
                GGS_string& _out_0,
                GGS_uint & _out_1,
                GGS_ruleLabelImplementationList & _out_2,
                GGS_bool& _out_3
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mRuleIndex ;
    _out_2 = ptr->mLabelImplementationList ;
    _out_3 = ptr->mHasParseLabel ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_string GGS_ruleDeclarationList::
reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNonterminalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_uint  GGS_ruleDeclarationList::
reader_mRuleIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_uint  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mRuleIndex ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleLabelImplementationList  GGS_ruleDeclarationList::
reader_mLabelImplementationListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_ruleLabelImplementationList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelImplementationList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_ruleDeclarationList::
reader_mHasParseLabelAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mHasParseLabel ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNonterminalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_setMRuleIndexAtIndex (C_Compiler & inLexique,
                              const GGS_uint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mRuleIndex = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_setMLabelImplementationListAtIndex (C_Compiler & inLexique,
                              const GGS_ruleLabelImplementationList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelImplementationList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_ruleDeclarationList::
modifier_setMHasParseLabelAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mHasParseLabel = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_ruleDeclarationList::cEnumerator::_mNonterminalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNonterminalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_ruleDeclarationList::cEnumerator::_mRuleIndex (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mRuleIndex ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_ruleLabelImplementationList  & GGS_ruleDeclarationList::cEnumerator::_mLabelImplementationList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabelImplementationList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_ruleDeclarationList::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mHasParseLabel ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_ruleDeclarationList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_ruleDeclarationList * p = NULL ;
    macroMyNew (p, GGS_ruleDeclarationList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList GGS_ruleDeclarationList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_ruleDeclarationList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_ruleDeclarationList * p = dynamic_cast <const GGS_ruleDeclarationList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_ruleDeclarationList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_ruleDeclarationList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_ruleDeclarationList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'cPtr_syntaxDeclarationForGeneration'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_syntaxDeclarationForGeneration::
cPtr_syntaxDeclarationForGeneration (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_nonterminalMap & argument_2,
                                const GGS_ruleDeclarationList & argument_3,
                                const GGS_uint & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_semanticDeclarationForGeneration (THERE),
mComponentName (argument_0),
mLexiqueName (argument_1),
mNonterminalDeclarationMap (argument_2),
mRuleDeclarationList (argument_3),
mSelectMethodCount (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_syntaxDeclarationForGeneration * GGS_syntaxDeclarationForGeneration::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_syntaxDeclarationForGeneration) ;
    return (cPtr_syntaxDeclarationForGeneration *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_syntaxDeclarationForGeneration::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_syntaxDeclarationForGeneration * ptr = dynamic_cast <const cPtr_syntaxDeclarationForGeneration *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mComponentName.operator_isEqual (ptr->mComponentName).boolValue ()
         && mLexiqueName.operator_isEqual (ptr->mLexiqueName).boolValue ()
         && mNonterminalDeclarationMap.operator_isEqual (ptr->mNonterminalDeclarationMap).boolValue ()
         && mRuleDeclarationList.operator_isEqual (ptr->mRuleDeclarationList).boolValue ()
         && mSelectMethodCount.operator_isEqual (ptr->mSelectMethodCount).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_syntaxDeclarationForGeneration::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@syntaxDeclarationForGeneration:"
           << mComponentName.reader_description (inIndentation + 1)
           << mLexiqueName.reader_description (inIndentation + 1)
           << mNonterminalDeclarationMap.reader_description (inIndentation + 1)
           << mRuleDeclarationList.reader_description (inIndentation + 1)
           << mSelectMethodCount.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_syntaxDeclarationForGeneration::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_syntaxDeclarationForGeneration::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_syntaxDeclarationForGeneration (& typeid (cPtr_syntaxDeclarationForGeneration), & typeid (cPtr_semanticDeclarationForGeneration), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_syntaxDeclarationForGeneration::galgasRTTI (void) const {
  return & gClassInfoFor__syntaxDeclarationForGeneration ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_syntaxDeclarationForGeneration::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_syntaxDeclarationForGeneration (mComponentName, mLexiqueName, mNonterminalDeclarationMap, mRuleDeclarationList, mSelectMethodCount COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_syntaxDeclarationForGeneration'              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxDeclarationForGeneration ("syntaxDeclarationForGeneration", true, & kTypeDescriptor_GGS_semanticDeclarationForGeneration) ;

//---------------------------------------------------------------------------*

GGS_syntaxDeclarationForGeneration::
GGS_syntaxDeclarationForGeneration (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_syntaxDeclarationForGeneration::
GGS_syntaxDeclarationForGeneration (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_syntaxDeclarationForGeneration GGS_syntaxDeclarationForGeneration::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_syntaxDeclarationForGeneration result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (inPointer) != NULL)
      : (typeid (cPtr_syntaxDeclarationForGeneration) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_syntaxDeclarationForGeneration (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_syntaxDeclarationForGeneration),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxDeclarationForGeneration GGS_syntaxDeclarationForGeneration::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_string& argument_0,
                 const GGS_string& argument_1,
                 const GGS_nonterminalMap & argument_2,
                 const GGS_ruleDeclarationList & argument_3,
                 const GGS_uint & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_syntaxDeclarationForGeneration result ;
  macroMyNew (result.mPointer, cPtr_syntaxDeclarationForGeneration (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxDeclarationForGeneration::
reader_mComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxDeclarationForGeneration *) mPointer)->mComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxDeclarationForGeneration::
reader_mLexiqueName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxDeclarationForGeneration *) mPointer)->mLexiqueName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalMap  GGS_syntaxDeclarationForGeneration::
reader_mNonterminalDeclarationMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonterminalMap   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxDeclarationForGeneration *) mPointer)->mNonterminalDeclarationMap ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ruleDeclarationList  GGS_syntaxDeclarationForGeneration::
reader_mRuleDeclarationList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ruleDeclarationList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxDeclarationForGeneration *) mPointer)->mRuleDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_uint  GGS_syntaxDeclarationForGeneration::
reader_mSelectMethodCount (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_uint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxDeclarationForGeneration *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxDeclarationForGeneration *) mPointer)->mSelectMethodCount ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_syntaxDeclarationForGeneration::actualTypeName (void) const {
  return "syntaxDeclarationForGeneration" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__syntaxDeclarationForGeneration ("syntaxDeclarationForGeneration", gClassInfoFor__semanticDeclarationForGeneration, & kTypeDescriptor_GGS_syntaxDeclarationForGeneration) ;

//---------------------------------------------------------------------------*

GGS_object GGS_syntaxDeclarationForGeneration::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_syntaxDeclarationForGeneration * p = NULL ;
    macroMyNew (p, GGS_syntaxDeclarationForGeneration (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxDeclarationForGeneration GGS_syntaxDeclarationForGeneration::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_syntaxDeclarationForGeneration result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_syntaxDeclarationForGeneration * p = dynamic_cast <const GGS_syntaxDeclarationForGeneration *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_syntaxDeclarationForGeneration, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_syntaxDeclarationForGeneration::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_syntaxDeclarationForGeneration ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'syntaxFileGenerationTemplate'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_syntaxFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_syntaxFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_syntaxFileGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_syntaxFileGenerationTemplate_0,
  0,
  gWrapperAllDirectories_syntaxFileGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'syntaxFileHeader' template of 'syntaxFileGenerationTemplate' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_syntaxFileGenerationTemplate_syntaxFileHeader (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_string& var_cas_LEXIQUE_NAME,
                                const GGS_stringlist & var_cas_IMPORTED_COMPONENT_LIST,
                                const GGS_lstringlist & var_cas_TYPE_PREDECLARATION_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_LEXIQUE_NAME.isBuilt ()
    && var_cas_IMPORTED_COMPONENT_LIST.isBuilt ()
    && var_cas_TYPE_PREDECLARATION_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "#define " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/predefined-types.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_LEXIQUE_NAME ;
    result << ".h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringlist::cEnumerator enumerator_431 (var_cas_IMPORTED_COMPONENT_LIST, true) ;
    const GGS_stringlist::cElement * operand_431 = NULL ;
    while (((operand_431 = enumerator_431.nextObject ()))) {
      macroValidPointer (operand_431) ;
      result << "#include \"" ;
      result << operand_431->mValue ;
      result << ".h\"\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_595 (var_cas_TYPE_PREDECLARATION_LIST, true) ;
    const GGS_lstringlist::cElement * operand_595 = NULL ;
    while (((operand_595 = enumerator_595.nextObject ()))) {
      macroValidPointer (operand_595) ;
      result << "class GALGAS_" ;
      result << operand_595->mValue.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'syntaxFileImplementation' template of 'syntaxFileGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_syntaxFileGenerationTemplate_syntaxFileImplementation (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_stringlist & var_cas_IMPORTED_COMPONENT_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_IMPORTED_COMPONENT_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".h\"\n"
      "#include \"galgas/C_galgas_CLI_Options.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringlist::cEnumerator enumerator_571 (var_cas_IMPORTED_COMPONENT_LIST, true) ;
    const GGS_stringlist::cElement * operand_571 = NULL ;
    while (((operand_571 = enumerator_571.nextObject ()))) {
      macroValidPointer (operand_571) ;
      result << "#include \"" ;
      result << operand_571->mValue ;
      result << ".h\"\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define SOURCE_FILE_AT_LINE(line) \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".gSyntax\", line\n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)\n"
      "#else\n"
      "  #define SOURCE_FILE_AT_LINE(line) \n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) \n"
      "#endif\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'syntaxAnalyserClassDeclaration' template of 'syntaxFileGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_syntaxFileGenerationTemplate_syntaxAnalyserClassDeclaration (C_Compiler & inLexique,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_string& var_cas_LEXIQUE_NAME,
                                const GGS_nonterminalMap & var_cas_NONTERMINAL_MAP,
                                const GGS_ruleDeclarationList & var_cas_RULE_DECLARATION_LIST,
                                const GGS_uintlist & var_cas_SELECT_METHOD_LIST) {
  C_String result ;
  PMUInt32 columnMarker = 0 ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_LEXIQUE_NAME.isBuilt ()
    && var_cas_NONTERMINAL_MAP.isBuilt ()
    && var_cas_RULE_DECLARATION_LIST.isBuilt ()
    && var_cas_SELECT_METHOD_LIST.isBuilt () ;
  if (isBuilt) {
    result << "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//" ;
    result << ((GGS_string ("Parser class '")).operator_concat (var_cas_COMPONENT_NAME)).operator_concat (GGS_string ("' declaration")).reader_stringByLeftAndRightPadding (GGS_uint (75U), GGS_char (TO_UNICODE (' '))) ;
    result << "*\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cParser_" ;
    result << var_cas_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " {\n"
      "//--- Virtual destructor\n"
      "  public : virtual ~ cParser_" ;
    result << var_cas_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << " (void) {}\n"
      "\n"
      "//--- Non terminal declarations\n" ;
    GGS_nonterminalMap::cEnumerator enumerator_643 (var_cas_NONTERMINAL_MAP, true) ;
    const GGS_nonterminalMap::cElement * operand_643 = NULL ;
    while (((operand_643 = enumerator_643.nextObject ()))) {
      macroValidPointer (operand_643) ;
      GGS_nonterminalLabelMap::cEnumerator enumerator_684 (operand_643->mInfo.mLabelMap, true) ;
      const GGS_nonterminalLabelMap::cElement * operand_684 = NULL ;
      while (((operand_684 = enumerator_684.nextObject ()))) {
        macroValidPointer (operand_684) ;
        result << "  protected : virtual void nt_" ;
        result << operand_643->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << "_" ;
        result << operand_684->mKey.ggs_string ().reader_identifierRepresentation () ;
        result << " (" ;
        columnMarker = result.currentColumn () ;
        GGS_formalParameterSignature::cEnumerator enumerator_830 (operand_684->mInfo.mSignature, true) ;
        const GGS_formalParameterSignature::cElement * operand_830 = NULL ;
        { GGS_uint var_cas_IDX (true, 0) ;
      while (((operand_830 = enumerator_830.nextObject ()))) {
        macroValidPointer (operand_830) ;
        if ((operand_830->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (16))).boolValue ()) {
          result << "GALGAS_" ;
          result << operand_830->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (17)) ;
          result << " * const constinArgument" ;
          result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)) ;
        }else if ((operand_830->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (18))).boolValue ()) {
          result << "GALGAS_" ;
          result << operand_830->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
          result << " * & ioArgument" ;
          result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
        }else if ((operand_830->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (20))).boolValue ()) {
          result << "GALGAS_" ;
          result << operand_830->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
          result << " * & outArgument" ;
          result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
        }else {
          result << "GALGAS_" ;
          result << operand_830->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
          result << " * inArgument" ;
          result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ;
        }
        result << ",\n" ;
        result.appendSpacesUntilColumn (columnMarker) ;
        var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
      }
    }
    result << "C_Lexique_" ;
    result << var_cas_LEXIQUE_NAME ;
    result << " * const inLexique) = 0 ;\n"
      "\n" ;
  }
  if (operand_643->mInfo.mHasParseLabel.boolValue ()) {
    result << "  protected : virtual void nt_" ;
    result << operand_643->mKey.ggs_string ().reader_identifierRepresentation () ;
    result << "_parse (" ;
    columnMarker = result.currentColumn () ;
    result << "C_Lexique_" ;
    result << var_cas_LEXIQUE_NAME ;
    result << " * const inLexique) = 0 ;\n"
      "\n" ;
  }else {
  }
}
result << "\n"
  "//--- Rule declarations\n" ;
GGS_ruleDeclarationList::cEnumerator enumerator_1905 (var_cas_RULE_DECLARATION_LIST, true) ;
const GGS_ruleDeclarationList::cElement * operand_1905 = NULL ;
while (((operand_1905 = enumerator_1905.nextObject ()))) {
  macroValidPointer (operand_1905) ;
  GGS_ruleLabelImplementationList::cEnumerator enumerator_1943 (operand_1905->mLabelImplementationList, true) ;
  const GGS_ruleLabelImplementationList::cElement * operand_1943 = NULL ;
  while (((operand_1943 = enumerator_1943.nextObject ()))) {
    macroValidPointer (operand_1943) ;
    result << "  protected : void rule_" ;
    result << var_cas_COMPONENT_NAME.reader_identifierRepresentation () ;
    result << "_" ;
    result << operand_1905->mNonterminalName.reader_identifierRepresentation () ;
    result << "_i" ;
    result << operand_1905->mRuleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    result << "_" ;
    result << operand_1943->mLabelName.ggs_string ().reader_identifierRepresentation () ;
    result << " (" ;
    columnMarker = result.currentColumn () ;
    GGS_formalParameterSignature::cEnumerator enumerator_2160 (operand_1943->mSignature, true) ;
    const GGS_formalParameterSignature::cElement * operand_2160 = NULL ;
    { GGS_uint var_cas_IDX (true, 0) ;
  while (((operand_2160 = enumerator_2160.nextObject ()))) {
    macroValidPointer (operand_2160) ;
    if ((operand_2160->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (39))).boolValue ()) {
      result << "GALGAS_" ;
      result << operand_2160->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (40)) ;
      result << " * const constinArgument" ;
      result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (40)) ;
    }else if ((operand_2160->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (41))).boolValue ()) {
      result << "GALGAS_" ;
      result << operand_2160->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
      result << " * & ioArgument" ;
      result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
    }else if ((operand_2160->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (43))).boolValue ()) {
      result << "GALGAS_" ;
      result << operand_2160->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
      result << " * & outArgument" ;
      result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) ;
    }else {
      result << "GALGAS_" ;
      result << operand_2160->mFormalArgumentType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ;
      result << " * inArgument" ;
      result << var_cas_IDX.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) ;
    }
    result << ",\n" ;
    result.appendSpacesUntilColumn (columnMarker) ;
    var_cas_IDX.increment_operation (inLexique COMMA_HERE) ;
  }
}
result << "C_Lexique_" ;
result << var_cas_LEXIQUE_NAME ;
result << " * inLexique) ;\n"
  "\n" ;
}
if (operand_1905->mHasParseLabel.boolValue ()) {
result << "  protected : void rule_" ;
result << var_cas_COMPONENT_NAME.reader_identifierRepresentation () ;
result << "_" ;
result << operand_1905->mNonterminalName.reader_identifierRepresentation () ;
result << "_i" ;
result << operand_1905->mRuleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
result << "_parse (" ;
columnMarker = result.currentColumn () ;
result << "C_Lexique_" ;
result << var_cas_LEXIQUE_NAME ;
result << " * const inLexique) ;\n"
  "\n" ;
}else {
}
}
result << "\n"
  "\n"
  "//--- Select methods\n" ;
GGS_uintlist::cEnumerator enumerator_3289 (var_cas_SELECT_METHOD_LIST, true) ;
const GGS_uintlist::cElement * operand_3289 = NULL ;
while (((operand_3289 = enumerator_3289.nextObject ()))) {
macroValidPointer (operand_3289) ;
result << "  protected : virtual PMSInt32 select_" ;
result << var_cas_COMPONENT_NAME.reader_identifierRepresentation () ;
result << "_" ;
result << operand_3289->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
result << " (C_Lexique_" ;
result << var_cas_LEXIQUE_NAME ;
result << " *) = 0 ;\n"
  "\n" ;
}
result << "\n"
  "} ;\n"
  "\n" ;
}
return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category reader '@syntaxDeclarationForGeneration.appendDeclaration'     *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string
category_reader__syntaxDeclarationForGeneration__appendDeclaration (C_Compiler & inLexique,
                                const cPtr_syntaxDeclarationForGeneration * operand_4893
                                COMMA_UNUSED_LOCATION_ARGS) {
  GGS_string var_cas_outHeader ;
  if (operand_4893 != NULL) {
GGS_uintlist  var_cas_selectMethodList = GGS_uintlist ::constructor_emptyList () ;
GGS_uint  var_cas_idx = GGS_uint (0U) ;
GGS_uint _variant_5096 = operand_4893->mSelectMethodCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (113)) ;
GGS_bool _condition_5096 (_variant_5096.isBuilt (), true) ;
while (_condition_5096.isBuiltAndTrue ()) {
  _condition_5096 = (var_cas_idx).operator_strictInf (operand_4893->mSelectMethodCount) ;
  if (_condition_5096.isBuiltAndTrue ()) {
    if (_variant_5096.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (117)) ;
      _condition_5096 = GGS_bool (false) ;
    }else{
      _variant_5096.decrement_operation (inLexique COMMA_HERE) ;
  var_cas_selectMethodList.addAssign_operation (var_cas_idx) ;
  var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
    }
  }
}
var_cas_outHeader = template_filewrapper_syntaxFileGenerationTemplate_syntaxAnalyserClassDeclaration (inLexique, operand_4893->mComponentName, operand_4893->mLexiqueName, operand_4893->mNonterminalDeclarationMap, operand_4893->mRuleDeclarationList, var_cas_selectMethodList) ;
  }
  return var_cas_outHeader ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "enterNonterminalNonTerminalInMapAndCheck"    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterNonterminalNonTerminalInMapAndCheck (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inNonTerminalName,
                                const GGS_nonterminalLabelMap   var_cas_inNonterminalLabelMap,
                                const GGS_bool  var_cas_inHasParseLabel,
                                GGS_nonterminalMap  & var_cas_ioNonterminalDeclarationMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterNonterminalNonTerminalInMapAndCheck at %s:%d\n", __FILE__, __LINE__) ;
  #endif
elementOf_GGS_nonterminalMap * operand_5960 = (elementOf_GGS_nonterminalMap *) var_cas_ioNonterminalDeclarationMap.searchForReadWithInstruction (var_cas_inNonTerminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (139))) ;
if (NULL != operand_5960) {
const GGS_bool cond_6348 = (operand_5960->mInfo.mHasParseLabel).operator_isNotEqual (var_cas_inHasParseLabel) ;
if (cond_6348.isBuiltAndTrue ()) {
var_cas_inNonTerminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (var_cas_inNonTerminalName)).operator_concat (GGS_string ("' is redeclared "))).operator_concat (((operand_5960->mInfo.mHasParseLabel).isBuiltAndTrue () ? (GGS_string ("with")) : (GGS_string ("without"))))).operator_concat (GGS_string (" 'parse' label, but first declaration declares it "))).operator_concat (((var_cas_inHasParseLabel).isBuiltAndTrue () ? (GGS_string ("with")) : (GGS_string ("without"))))).operator_concat (GGS_string (" 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (148)) ;
}
const GGS_stringset  var_cas_firstDeclarationLabelSet = operand_5960->mInfo.mLabelMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (149)) ;
const GGS_stringset  var_cas_reDeclarationLabelSet = var_cas_inNonterminalLabelMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (150)) ;
const GGS_stringset  var_cas_missingLabelSet = var_cas_firstDeclarationLabelSet.substract_operation (inLexique, var_cas_reDeclarationLabelSet COMMA_SOURCE_FILE_AT_LINE (151)) ;
const GGS_bool cond_6891 = (var_cas_missingLabelSet.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
if (cond_6891.isBuiltAndTrue ()) {
GGS_string var_cas_s = GGS_string ("") ;
{
GGS_stringset::cEnumerator enumerator_6689 (var_cas_missingLabelSet, true) ;
while (enumerator_6689.hasCurrentObject ()) {
  var_cas_s.appendCString ("\n"
    "-  ") ;
  var_cas_s.dotAssign_operation (enumerator_6689._key (HERE)) ;
  enumerator_6689.next () ;
}
}
var_cas_inNonTerminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("the '")).operator_concat (var_cas_inNonTerminalName)).operator_concat (GGS_string ("' nonterminal is redeclared without the following label(s):"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (160)) ;
}
const GGS_stringset  var_cas_newLabelSet = var_cas_reDeclarationLabelSet.substract_operation (inLexique, var_cas_firstDeclarationLabelSet COMMA_SOURCE_FILE_AT_LINE (161)) ;
const GGS_bool cond_7262 = (var_cas_newLabelSet.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
if (cond_7262.isBuiltAndTrue ()) {
GGS_string var_cas_s = GGS_string ("") ;
{
GGS_stringset::cEnumerator enumerator_7069 (var_cas_newLabelSet, true) ;
while (enumerator_7069.hasCurrentObject ()) {
  var_cas_s.appendCString ("\n"
    "-  ") ;
  var_cas_s.dotAssign_operation (enumerator_7069._key (HERE)) ;
  enumerator_7069.next () ;
}
}
var_cas_inNonTerminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("the '")).operator_concat (var_cas_inNonTerminalName)).operator_concat (GGS_string ("' nonterminal is redeclared with the new label(s):"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (170)) ;
}
const GGS_bool cond_7798 = ((var_cas_missingLabelSet.reader_count ()).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_newLabelSet.reader_count ()).operator_isEqual (GGS_uint (0U))) ;
if (cond_7798.isBuiltAndTrue ()) {
{
GGS_nonterminalLabelMap::cEnumerator enumerator_7363 (operand_5960->mInfo.mLabelMap, true) ;
const GGS_nonterminalLabelMap::cElement * operand_7363 = NULL ;
GGS_nonterminalLabelMap::cEnumerator enumerator_7386 (var_cas_inNonterminalLabelMap, true) ;
const GGS_nonterminalLabelMap::cElement * operand_7386 = NULL ;
while (((operand_7363 = enumerator_7363.nextObject ()))
    && ((operand_7386 = enumerator_7386.nextObject ()))) {
  macroValidPointer (operand_7363) ;
  macroValidPointer (operand_7386) ;
  GGS_formalParameterSignature  var_cas_newSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
  {
    GGS_formalParameterSignature::cEnumerator enumerator_7497 (operand_7386->mInfo.mSignature, true) ;
    const GGS_formalParameterSignature::cElement * operand_7497 = NULL ;
    while (((operand_7497 = enumerator_7497.nextObject ()))) {
      macroValidPointer (operand_7497) ;
      var_cas_newSignature.addAssign_operation (operand_7497->mFormalArgumentType, operand_7497->mFormalArgumentPassingMode) ;
    }
  }
  ::routine_checkMethodSignatures (inLexique,  operand_7363->mInfo.mSignatureForGeneration,  operand_7363->mInfo.mEndOfArgumentLocation,  var_cas_newSignature,  operand_7386->mInfo.mEndOfArgumentLocation COMMA_SOURCE_FILE_AT_LINE (177)) ;
}
}
}
}else{
var_cas_ioNonterminalDeclarationMap.modifier_insertKey (inLexique, var_cas_inNonTerminalName, var_cas_inNonterminalLabelMap, var_cas_inHasParseLabel COMMA_SOURCE_FILE_AT_LINE (186)) ;
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterNonterminalNonTerminalInMapAndCheck\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "buildNonterminalDeclarationsMap"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildNonterminalDeclarationsMap (C_Compiler & inLexique,
                                const GGS_nonterminalDeclarationListAST   var_cas_inNonterminalDeclarationList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                GGS_nonterminalMap  & var_cas_outNonterminalDeclarationMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildNonterminalDeclarationsMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
var_cas_outNonterminalDeclarationMap = GGS_nonterminalMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
{
GGS_nonterminalDeclarationListAST::cEnumerator enumerator_8353 (var_cas_inNonterminalDeclarationList, true) ;
const GGS_nonterminalDeclarationListAST::cElement * operand_8353 = NULL ;
while (((operand_8353 = enumerator_8353.nextObject ()))) {
  macroValidPointer (operand_8353) ;
GGS_nonterminalLabelMap  var_cas_nonterminalLabelMap = GGS_nonterminalLabelMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
{
GGS_nonTerminalLabelListAST::cEnumerator enumerator_8434 (operand_8353->mLabels, true) ;
const GGS_nonTerminalLabelListAST::cElement * operand_8434 = NULL ;
while (((operand_8434 = enumerator_8434.nextObject ()))) {
  macroValidPointer (operand_8434) ;
  GGS_formalParameterListForGeneration  var_cas_signatureForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  GGS_formalParameterSignature  var_cas_signature = GGS_formalParameterSignature ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_8604 (operand_8434->mFormalArgumentList, true) ;
    const GGS_formalParameterListAST::cElement * operand_8604 = NULL ;
    while (((operand_8604 = enumerator_8604.nextObject ()))) {
      macroValidPointer (operand_8604) ;
      const GGS_unifiedTypeMapProxy  var_cas_t = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_8604->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (205)) ;
      var_cas_signatureForGeneration.addAssign_operation (operand_8604->mFormalArgumentPassingMode, var_cas_t, operand_8604->mFormalArgumentName, operand_8604->mFormalArgumentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (206))) ;
      var_cas_signature.addAssign_operation (var_cas_t, operand_8604->mFormalArgumentPassingMode) ;
    }
  }
  var_cas_nonterminalLabelMap.modifier_insertKey (inLexique, operand_8434->mLabelName, var_cas_signatureForGeneration, var_cas_signature, operand_8434->mEndOfArgumentLocation COMMA_SOURCE_FILE_AT_LINE (209)) ;
}
}
::routine_enterNonterminalNonTerminalInMapAndCheck (inLexique,  operand_8353->mNonterminalName,  var_cas_nonterminalLabelMap,  operand_8353->mHasParseLabel,  var_cas_outNonterminalDeclarationMap COMMA_SOURCE_FILE_AT_LINE (211)) ;
}
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildNonterminalDeclarationsMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@syntaxInstructionAST.analyzeSyntaxInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction> gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction
findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction.count ()) {
    result = gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (superClassPtr) ;
      gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticInstructionAST.analyzeSyntaxInstruction'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticInstructionAST__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_semanticInstructionAST * operand_10177,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   /* var_cas_inTerminalMap */,
                                const GGS_string  /* var_cas_inLexiqueName */,
                                const GGS_nonterminalMap   /* var_cas_inNonterminalMap */,
                                const GGS_string  /* var_cas_inComponentName */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & /* var_cas_ioSelectMethodCount */,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10177 != NULL) {
GGS_semanticInstructionAST  var_cas_t = operand_10177 ;
{ typeCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction method = findCategoryMethod__semanticInstructionAST__analyzeSemanticInstruction (var_cas_t.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, var_cas_t (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioInstructionListForGeneration, var_cas_ioVariableMap, var_cas_ioLocalVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (249)) ;
  }
}
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@nonterminalCallInstruction.analyzeSyntaxInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalCallInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_nonterminalCallInstruction * operand_10983,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   /* var_cas_inTerminalMap */,
                                const GGS_string  /* var_cas_inLexiqueName */,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  /* var_cas_inComponentName */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & /* var_cas_ioSelectMethodCount */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10983 != NULL) {
GGS_nonterminalLabelMap  var_cas_labelMap ;
GGS_bool var_cas_hasParseLabel ;
if (var_cas_inNonterminalMap.isBuilt ()) {
  var_cas_inNonterminalMap (HERE)->method_searchKey (inLexique, operand_10983->mNonterminalName, var_cas_labelMap, var_cas_hasParseLabel COMMA_SOURCE_FILE_AT_LINE (274)) ;
}
GGS_formalParameterSignature  var_cas_signature ;
const GGS_bool cond_11869 = (operand_10983->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276))).operator_isEqual (GGS_string ("parse")) ;
if (cond_11869.isBuiltAndTrue ()) {
const GGS_bool cond_11790 = (var_cas_hasParseLabel).operator_not () ;
if (cond_11790.isBuiltAndTrue ()) {
operand_10983->mLabelName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '<")).operator_concat (operand_10983->mNonterminalName)).operator_concat (GGS_string (">' nonterminal does not declare the 'parse' label")) COMMA_SOURCE_FILE_AT_LINE (282)) ;
var_cas_signature.drop () ;
}else if (cond_11790.isBuiltAndFalse ()) {
var_cas_signature = GGS_formalParameterSignature ::constructor_emptyList () ;
}
}else if (cond_11869.isBuiltAndFalse ()) {
GGS_formalParameterListForGeneration  automatic_var_11923_0 ;
GGS_location  automatic_var_11923_1 ;
if (var_cas_labelMap.isBuilt ()) {
  var_cas_labelMap (HERE)->method_searchKey (inLexique, operand_10983->mLabelName, automatic_var_11923_0, var_cas_signature, automatic_var_11923_1 COMMA_SOURCE_FILE_AT_LINE (286)) ;
}
}
GGS_actualParameterListForGeneration  var_cas_actualParameterListForGeneration ;
::routine_analyzeRoutineArguments (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  operand_10983->mNonterminalName,  ((GGS_string ("'<")).operator_concat (operand_10983->mNonterminalName)).operator_concat (GGS_string (">' nonterminal declaration")),  var_cas_signature,  operand_10983->mActualParameterList,  var_cas_ioVariableMap,  var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (290)) ;
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_nonterminalInstructionForGeneration ::constructor_new (inLexique, operand_10983->mInstructionLocation, operand_10983->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), operand_10983->mLabelName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (304)), var_cas_actualParameterListForGeneration COMMA_SOURCE_FILE_AT_LINE (301))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonterminalInstructionForGeneration.generateInstruction' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonterminalInstructionForGeneration__generateInstruction (C_Compiler & inLexique,
                                const cPtr_nonterminalInstructionForGeneration * operand_12660,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12660 != NULL) {
var_cas_ioGeneratedCode.appendCString ("//-------- @nonterminalInstructionForGeneration\n") ;
GGS_stringlist  var_cas_parameterCppNameList = GGS_stringlist ::constructor_emptyList () ;
GGS_stringlist  var_cas_jokerParametersToReleaseList = GGS_stringlist ::constructor_emptyList () ;
{
GGS_actualParameterListForGeneration::cEnumerator enumerator_12995 (operand_12660->mActualParameterList, true) ;
const GGS_actualParameterListForGeneration::cElement * operand_12995 = NULL ;
while (((operand_12995 = enumerator_12995.nextObject ()))) {
  macroValidPointer (operand_12995) ;
GGS_string var_cas_parameterCppName ;
{ typeCategoryMethod__actualParameterForGeneration__generateActualParameter method = findCategoryMethod__actualParameterForGeneration__generateActualParameter (operand_12995->mActualParameter.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_12995->mActualParameter (HERE), var_cas_ioTemporaryVariableIndex, var_cas_ioGeneratedCode, var_cas_jokerParametersToReleaseList, var_cas_ioUnusedVariableCppNameSet, var_cas_parameterCppName COMMA_SOURCE_FILE_AT_LINE (322)) ;
  }
}
var_cas_parameterCppNameList.addAssign_operation (var_cas_parameterCppName) ;
}
}
var_cas_ioGeneratedCode.appendCString ("nt_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_12660->mNonterminalName.reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString ("_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_12660->mLabelName.reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString (" (") ;
{
GGS_stringlist::cEnumerator enumerator_13450 (var_cas_parameterCppNameList, true) ;
const GGS_stringlist::cElement * operand_13450 = NULL ;
while (((operand_13450 = enumerator_13450.nextObject ()))) {
  macroValidPointer (operand_13450) ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_13450->mValue) ;
var_cas_ioGeneratedCode.appendCString (", ") ;
}
}
var_cas_ioUnusedVariableCppNameSet.modifier_removeKey (inLexique, function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (330)) COMMA_SOURCE_FILE_AT_LINE (330)) ;
var_cas_ioGeneratedCode.dotAssign_operation (function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (331))) ;
var_cas_ioGeneratedCode.appendCString (" COMMA_SOURCE_FILE_AT_LINE (") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_12660->mInstructionLocation.reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (331)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (331))) ;
var_cas_ioGeneratedCode.appendCString (")) ;\n") ;
{
GGS_stringlist::cEnumerator enumerator_13771 (var_cas_jokerParametersToReleaseList, true) ;
const GGS_stringlist::cElement * operand_13771 = NULL ;
while (((operand_13771 = enumerator_13771.nextObject ()))) {
  macroValidPointer (operand_13771) ;
var_cas_ioGeneratedCode.appendCString ("macroReleaseObject (") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_13771->mValue) ;
var_cas_ioGeneratedCode.appendCString (") ; // Release temporary input variables (joker in source)\n") ;
}
}
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@terminalCheckInstruction.analyzeSyntaxInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstruction * operand_14072,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   /* var_cas_inNonterminalMap */,
                                const GGS_string  /* var_cas_inComponentName */,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & /* var_cas_ioSelectMethodCount */,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14072 != NULL) {
GGS_lexicalSentValueList  var_cas_sentAttributeList ;
if (var_cas_inTerminalMap.isBuilt ()) {
  var_cas_inTerminalMap (HERE)->method_searchKey (inLexique, operand_14072->mTerminalName, var_cas_sentAttributeList COMMA_SOURCE_FILE_AT_LINE (353)) ;
}
const GGS_bool cond_15037 = (operand_14072->mActualInputParameterList.reader_length ()).operator_isNotEqual (var_cas_sentAttributeList.reader_length ()) ;
if (cond_15037.isBuiltAndTrue ()) {
operand_14072->mTerminalName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((((GGS_string ("naming the '$")).operator_concat (operand_14072->mTerminalName)).operator_concat (GGS_string ("$' requires "))).operator_concat (var_cas_sentAttributeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (357)))).operator_concat (GGS_string ("parameter"))).operator_concat ((((var_cas_sentAttributeList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (", but this instruction names "))).operator_concat (operand_14072->mActualInputParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (360)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((operand_14072->mActualInputParameterList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (363)) ;
}
GGS_terminalCheckAssignementList  var_cas_terminalCheckAssignementList = GGS_terminalCheckAssignementList ::constructor_emptyList () ;
{
GGS_actualInputParameterListAST::cEnumerator enumerator_15158 (operand_14072->mActualInputParameterList, true) ;
const GGS_actualInputParameterListAST::cElement * operand_15158 = NULL ;
GGS_lexicalSentValueList::cEnumerator enumerator_15177 (var_cas_sentAttributeList, true) ;
const GGS_lexicalSentValueList::cElement * operand_15177 = NULL ;
while (((operand_15158 = enumerator_15158.nextObject ()))
    && ((operand_15177 = enumerator_15177.nextObject ()))) {
  macroValidPointer (operand_15158) ;
  macroValidPointer (operand_15177) ;
const GGS_bool cond_16887 = (operand_15158->mActualParameterName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
if (cond_16887.isBuiltAndTrue ()) {
  GGS_unifiedTypeMapProxy  var_cas_type ;
  GGS_string var_cas_cppName ;
  const GGS_bool cond_15696 = (operand_15158->mActualParameterTypeName.ggs_string ().reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_15696.isBuiltAndTrue ()) {
    var_cas_cppName = (GGS_string ("var_")).operator_concat (operand_15158->mActualParameterName.ggs_string ().reader_identifierRepresentation ()) ;
    var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_15158->mActualParameterTypeName COMMA_SOURCE_FILE_AT_LINE (372)) ;
    var_cas_ioVariableMap.modifier_insertDefinedLocalVariable (inLexique, operand_15158->mActualParameterName, var_cas_type, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (373)) ;
    var_cas_ioLocalVariableCppNameList.addAssign_operation (var_cas_cppName) ;
  }else if (cond_15696.isBuiltAndFalse ()) {
    var_cas_ioVariableMap.modifier_searchForWriteAccess (inLexique, operand_15158->mActualParameterName, var_cas_type, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (376)) ;
  }
  GGS_unifiedTypeMapProxy  var_cas_expectedType ;
  switch (operand_15177->mLexicalType.enumValue ()) {
  case GGS_lexicalTypeEnum::enum_lexicalType_string:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLStringType ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_char:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLCharType ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_uint:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLUIntType ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_uint64:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLUInt64Type ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_sint:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLSIntType ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_sint64:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLSInt64Type ;
    }
    break ;
  case GGS_lexicalTypeEnum::enum_lexicalType_double:
    {
    var_cas_expectedType = var_cas_inPredefinedTypes.mLDoubleType ;
    }
    break ;
  case GGS_lexicalTypeEnum::kNotBuilt:
    break ;
  }
  const GGS_bool cond_16737 = (var_cas_expectedType).operator_isNotEqual (var_cas_type) ;
  if (cond_16737.isBuiltAndTrue ()) {
    operand_15158->mActualParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_15158->mActualParameterName)).operator_concat (GGS_string ("' parameter has the '@"))).operator_concat (var_cas_type.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (390)))).operator_concat (GGS_string (", bit an '@"))).operator_concat (var_cas_expectedType.reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (391)))).operator_concat (GGS_string ("' parameter is required here")) COMMA_SOURCE_FILE_AT_LINE (393)) ;
  }
  var_cas_terminalCheckAssignementList.addAssign_operation (operand_15158->mActualParameterTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (395)), var_cas_cppName, operand_15177->mLexicalAttributeName) ;
}
}
}
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_terminalCheckInstructionForGeneration ::constructor_new (inLexique, operand_14072->mTerminalName, var_cas_inLexiqueName, operand_14072->mInstructionLocation, var_cas_terminalCheckAssignementList COMMA_SOURCE_FILE_AT_LINE (402))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalCheckInstructionForGeneration.generateInstruction'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalCheckInstructionForGeneration__generateInstruction (C_Compiler & inLexique,
                                const cPtr_terminalCheckInstructionForGeneration * operand_17266,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17266 != NULL) {
var_cas_ioGeneratedCode.appendCString ("//-------- @terminalCheckInstructionForGeneration\n") ;
var_cas_ioUnusedVariableCppNameSet.modifier_removeKey (inLexique, function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) COMMA_SOURCE_FILE_AT_LINE (418)) ;
var_cas_ioGeneratedCode.dotAssign_operation (function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (419))) ;
var_cas_ioGeneratedCode.appendCString ("->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_17266->mLexiqueIdentifier) ;
var_cas_ioGeneratedCode.appendCString ("::kToken_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_17266->mTerminalName.ggs_string ().reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString (") COMMA_SOURCE_FILE_AT_LINE (") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_17266->mInstructionLocation.reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (421)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421))) ;
var_cas_ioGeneratedCode.appendCString (")) ;\n") ;
{
GGS_terminalCheckAssignementList::cEnumerator enumerator_17852 (operand_17266->mTerminalCheckAssignementList, true) ;
const GGS_terminalCheckAssignementList::cElement * operand_17852 = NULL ;
while (((operand_17852 = enumerator_17852.nextObject ()))) {
  macroValidPointer (operand_17852) ;
const GGS_bool cond_17976 = (operand_17852->mTypeName).operator_isNotEqual (GGS_string ("")) ;
if (cond_17976.isBuiltAndTrue ()) {
  var_cas_ioGeneratedCode.appendCString ("GALGAS_") ;
  var_cas_ioGeneratedCode.dotAssign_operation (operand_17852->mTypeName.reader_identifierRepresentation ()) ;
  var_cas_ioGeneratedCode.appendCString (" * ") ;
}else if (cond_17976.isBuiltAndFalse ()) {
  var_cas_ioGeneratedCode.appendCString ("macroReleaseObject (") ;
  var_cas_ioGeneratedCode.dotAssign_operation (operand_17852->mTargetVarCppName) ;
  var_cas_ioGeneratedCode.appendCString (") ;\n") ;
}
var_cas_ioGeneratedCode.dotAssign_operation (operand_17852->mTargetVarCppName) ;
var_cas_ioGeneratedCode.appendCString (" = ") ;
var_cas_ioGeneratedCode.dotAssign_operation (function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (428))) ;
var_cas_ioGeneratedCode.appendCString ("->synthetizedAttribute_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_17852->mSourceLexicalAttributeName.reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString (" () ;\n") ;
}
}
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "analyzeSyntaxInstructionList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeSyntaxInstructionList (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                const GGS_syntaxInstructionList   var_cas_inSemanticInstructionListAST,
                                const GGS_location   var_cas_inEndOfBranchLocation,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeSyntaxInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
var_cas_ioVariableMap.modifier_beginBranch (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) ;
GGS_stringlist  var_cas_localVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
{
GGS_syntaxInstructionList::cEnumerator enumerator_19108 (var_cas_inSemanticInstructionListAST, true) ;
const GGS_syntaxInstructionList::cElement * operand_19108 = NULL ;
while (((operand_19108 = enumerator_19108.nextObject ()))) {
  macroValidPointer (operand_19108) ;
{ typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction method = findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (operand_19108->mInstruction.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_19108->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_inTerminalMap, var_cas_inLexiqueName, var_cas_inNonterminalMap, var_cas_inComponentName, var_cas_outInstructionListForGeneration, var_cas_ioVariableMap, var_cas_ioSelectMethodCount, var_cas_localVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (455)) ;
  }
}
}
}
const GGS_bool cond_19659 = (var_cas_localVariableCppNameList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
if (cond_19659.isBuiltAndTrue ()) {
var_cas_outInstructionListForGeneration.addAssign_operation (GGS_dropInstructionForGeneration ::constructor_new (inLexique, var_cas_localVariableCppNameList, GGS_string ("end of scope") COMMA_SOURCE_FILE_AT_LINE (470))) ;
}
var_cas_ioVariableMap.modifier_endBranch (inLexique, var_cas_inEndOfBranchLocation COMMA_SOURCE_FILE_AT_LINE (476)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeSyntaxInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@repeatInstruction.analyzeSyntaxInstruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_repeatInstruction * operand_19889,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19889 != NULL) {
const GGS_uint  var_cas_choiceIndex = var_cas_ioSelectMethodCount ;
var_cas_ioSelectMethodCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) ;
var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (496)) ;
GGS_semanticInstructionListForGeneration  var_cas_repeated_instructionList ;
::routine_analyzeSyntaxInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_inNonterminalMap,  var_cas_inComponentName,  operand_19889->mRepeatedInstructionList,  operand_19889->mEndOf_repeated_instructions_branch,  var_cas_ioVariableMap,  var_cas_ioSelectMethodCount,  var_cas_repeated_instructionList COMMA_SOURCE_FILE_AT_LINE (499)) ;
GGS_listOfSemanticInstructionListForGeneration  var_cas_listOfSemanticInstructionListForGeneration = GGS_listOfSemanticInstructionListForGeneration ::constructor_emptyList () ;
{
GGS_listOfSyntaxInstructionList::cEnumerator enumerator_20974 (operand_19889->mRepeatBranchList, true) ;
const GGS_listOfSyntaxInstructionList::cElement * operand_20974 = NULL ;
while (((operand_20974 = enumerator_20974.nextObject ()))) {
  macroValidPointer (operand_20974) ;
GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
::routine_analyzeSyntaxInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_inNonterminalMap,  var_cas_inComponentName,  operand_20974->mSyntaxInstructionList,  operand_20974->mEndOf_instructions,  var_cas_ioVariableMap,  var_cas_ioSelectMethodCount,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (516)) ;
var_cas_listOfSemanticInstructionListForGeneration.addAssign_operation (var_cas_instructionList) ;
}
}
var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_19889->mEndOf_repeat_instruction COMMA_SOURCE_FILE_AT_LINE (532)) ;
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_repeatInstructionForGeneration ::constructor_new (inLexique, var_cas_inComponentName, var_cas_choiceIndex, var_cas_repeated_instructionList, var_cas_listOfSemanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (534))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@repeatInstructionForGeneration.generateInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstructionForGeneration__generateInstruction (C_Compiler & inLexique,
                                const cPtr_repeatInstructionForGeneration * operand_21868,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21868 != NULL) {
var_cas_ioGeneratedCode.appendCString ("//-------- @repeatInstructionForGeneration\n") ;
const GGS_string var_cas_repeatFlagCppName = (GGS_string ("repeatFlag_")).operator_concat (var_cas_ioTemporaryVariableIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (550))) ;
var_cas_ioTemporaryVariableIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (550)) ;
var_cas_ioGeneratedCode.appendCString ("bool ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_repeatFlagCppName) ;
var_cas_ioGeneratedCode.appendCString (" = true ;\n") ;
var_cas_ioGeneratedCode.appendCString ("while (") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_repeatFlagCppName) ;
var_cas_ioGeneratedCode.appendCString (") {\n") ;
::routine_generateInstructionList (inLexique,  operand_21868->m_repeated_instructionList,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioGeneratedCode COMMA_SOURCE_FILE_AT_LINE (553)) ;
var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (559)) ;
var_cas_ioGeneratedCode.appendCString ("switch (select_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_21868->mSyntaxComponentName.reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString ("_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_21868->mChoiceIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (560))) ;
var_cas_ioGeneratedCode.appendCString (" (") ;
var_cas_ioGeneratedCode.dotAssign_operation (function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (560))) ;
var_cas_ioGeneratedCode.appendCString (")) {\n") ;
{
  GGS_uint var_cas_IDX (true, 0) ;
GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_22698 (operand_21868->mListOfSemanticInstructionListForGeneration, true) ;
const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_22698 = NULL ;
while (((operand_22698 = enumerator_22698.nextObject ()))) {
  macroValidPointer (operand_22698) ;
var_cas_ioGeneratedCode.appendCString ("case ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_IDX.add_operation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (562)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (562))) ;
var_cas_ioGeneratedCode.appendCString (": {\n") ;
::routine_generateInstructionList (inLexique,  operand_22698->mInstructionList,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioGeneratedCode COMMA_SOURCE_FILE_AT_LINE (563)) ;
var_cas_ioGeneratedCode.appendCString ("} break ;\n") ;
  var_cas_IDX.mValue ++ ;
}
}
var_cas_ioGeneratedCode.appendCString ("default:\n") ;
var_cas_ioGeneratedCode.appendCString ("  ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_repeatFlagCppName) ;
var_cas_ioGeneratedCode.appendCString (" = false ;\n") ;
var_cas_ioGeneratedCode.appendCString ("  break ;\n") ;
var_cas_ioGeneratedCode.appendCString ("}\n") ;
var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (575)) ;
var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@selectInstruction.analyzeSyntaxInstruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_selectInstruction * operand_23369,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23369 != NULL) {
const GGS_uint  var_cas_choiceIndex = var_cas_ioSelectMethodCount ;
var_cas_ioSelectMethodCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (596)) ;
GGS_listOfSemanticInstructionListForGeneration  var_cas_listOfSemanticInstructionListForGeneration = GGS_listOfSemanticInstructionListForGeneration ::constructor_emptyList () ;
{
GGS_listOfSyntaxInstructionList::cEnumerator enumerator_24049 (operand_23369->mSelectBranchList, true) ;
const GGS_listOfSyntaxInstructionList::cElement * operand_24049 = NULL ;
while (((operand_24049 = enumerator_24049.nextObject ()))) {
  macroValidPointer (operand_24049) ;
GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
::routine_analyzeSyntaxInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_inNonterminalMap,  var_cas_inComponentName,  operand_24049->mSyntaxInstructionList,  operand_24049->mEndOf_instructions,  var_cas_ioVariableMap,  var_cas_ioSelectMethodCount,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (601)) ;
var_cas_listOfSemanticInstructionListForGeneration.addAssign_operation (var_cas_instructionList) ;
}
}
var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_23369->mEndOf_select_instruction COMMA_SOURCE_FILE_AT_LINE (617)) ;
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_selectInstructionForGeneration ::constructor_new (inLexique, var_cas_inComponentName, var_cas_choiceIndex, var_cas_listOfSemanticInstructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (618))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@selectInstructionForGeneration.generateInstruction'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstructionForGeneration__generateInstruction (C_Compiler & inLexique,
                                const cPtr_selectInstructionForGeneration * operand_24907,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24907 != NULL) {
var_cas_ioGeneratedCode.appendCString ("//-------- \n") ;
var_cas_ioGeneratedCode.appendCString ("switch (select_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_24907->mSyntaxComponentName.reader_identifierRepresentation ()) ;
var_cas_ioGeneratedCode.appendCString ("_") ;
var_cas_ioGeneratedCode.dotAssign_operation (operand_24907->mChoiceIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (633))) ;
var_cas_ioGeneratedCode.appendCString (" (") ;
var_cas_ioGeneratedCode.dotAssign_operation (function_compilerCppName (inLexique COMMA_SOURCE_FILE_AT_LINE (633))) ;
var_cas_ioGeneratedCode.appendCString (")) {\n") ;
{
  GGS_uint var_cas_IDX (true, 0) ;
GGS_listOfSemanticInstructionListForGeneration::cEnumerator enumerator_25266 (operand_24907->mListOfSemanticInstructionListForGeneration, true) ;
const GGS_listOfSemanticInstructionListForGeneration::cElement * operand_25266 = NULL ;
while (((operand_25266 = enumerator_25266.nextObject ()))) {
  macroValidPointer (operand_25266) ;
var_cas_ioGeneratedCode.appendCString ("case ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_IDX.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (635)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (635))) ;
var_cas_ioGeneratedCode.appendCString (": {\n") ;
::routine_generateInstructionList (inLexique,  operand_25266->mInstructionList,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioGeneratedCode COMMA_SOURCE_FILE_AT_LINE (636)) ;
var_cas_ioGeneratedCode.appendCString ("} break ;\n") ;
  var_cas_IDX.mValue ++ ;
}
}
var_cas_ioGeneratedCode.appendCString ("default:\n") ;
var_cas_ioGeneratedCode.appendCString ("  break ;\n") ;
var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@parseDoInstruction.analyzeSyntaxInstruction'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_parseDoInstruction * operand_25802,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25802 != NULL) {
var_cas_ioVariableMap.modifier_beginOverrideForSelectBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (664)) ;
{
GGS_listOfSyntaxInstructionList::cEnumerator enumerator_26302 (operand_25802->mParseDoBranchList, true) ;
const GGS_listOfSyntaxInstructionList::cElement * operand_26302 = NULL ;
while (((operand_26302 = enumerator_26302.nextObject ()))) {
  macroValidPointer (operand_26302) ;
GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
::routine_analyzeSyntaxInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_inNonterminalMap,  var_cas_inComponentName,  operand_26302->mSyntaxInstructionList,  operand_26302->mEndOf_instructions,  var_cas_ioVariableMap,  var_cas_ioSelectMethodCount,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (668)) ;
}
}
var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_25802->mEndOfParseDoInstruction COMMA_SOURCE_FILE_AT_LINE (683)) ;
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_parseDoInstructionForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (685))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@parseDoInstructionForGeneration.generateInstruction'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseDoInstructionForGeneration__generateInstruction (C_Compiler &,
                                const cPtr_parseDoInstructionForGeneration * operand_27033,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & /* var_cas_ioUnusedVariableCppNameSet */,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27033 != NULL) {
var_cas_ioGeneratedCode.appendCString ("@parseDoInstructionForGeneration generateInstruction\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@parseLoopInstruction.analyzeSyntaxInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseLoopInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_parseLoopInstruction * operand_27390,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27390 != NULL) {
GGS_semanticExpressionForGeneration  var_cas_variant_expression ;
{ typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_27390->mVariantExpression.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_27390->mVariantExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_variant_expression COMMA_SOURCE_FILE_AT_LINE (715)) ;
  }
}
const GGS_bool cond_28270 = (var_cas_variant_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (721))).operator_isNotEqual (var_cas_inPredefinedTypes.mUIntType) ;
if (cond_28270.isBuiltAndTrue ()) {
operand_27390->mEndOfVariantExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type is '@")).operator_concat (var_cas_variant_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (723)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (723)))).operator_concat (GGS_string ("', but it should be '@"))).operator_concat (var_cas_inPredefinedTypes.mUIntType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (724)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
}
GGS_semanticExpressionForGeneration  var_cas_while_expression ;
{ typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_27390->mWhileExpression.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_27390->mWhileExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_while_expression COMMA_SOURCE_FILE_AT_LINE (729)) ;
  }
}
const GGS_bool cond_28757 = (var_cas_while_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (735))).operator_isNotEqual (var_cas_inPredefinedTypes.mBoolType) ;
if (cond_28757.isBuiltAndTrue ()) {
operand_27390->mEndOfWhileExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the variant expression type is '@")).operator_concat (var_cas_variant_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (737)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (737)))).operator_concat (GGS_string ("', but it should be '@"))).operator_concat (var_cas_inPredefinedTypes.mBoolType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (738)))).operator_concat (GGS_string ("' type")) COMMA_SOURCE_FILE_AT_LINE (740)) ;
}
var_cas_ioVariableMap.modifier_beginOverrideForRepeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (743)) ;
GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
::routine_analyzeSyntaxInstructionList (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_inNonterminalMap,  var_cas_inComponentName,  operand_27390->mDoInstructionList,  operand_27390->mEndOfInstructionList,  var_cas_ioVariableMap,  var_cas_ioSelectMethodCount,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (746)) ;
var_cas_ioVariableMap.modifier_endOverride (inLexique, operand_27390->mEndOfInstructionList COMMA_SOURCE_FILE_AT_LINE (760)) ;
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_parseLoopInstructionForGeneration ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (762))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@parseLoopInstructionForGeneration.generateInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseLoopInstructionForGeneration__generateInstruction (C_Compiler &,
                                const cPtr_parseLoopInstructionForGeneration * operand_29552,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & /* var_cas_ioUnusedVariableCppNameSet */,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29552 != NULL) {
var_cas_ioGeneratedCode.appendCString ("@parseLoopInstructionForGeneration generateInstruction\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@parseWhenInstruction.analyzeSyntaxInstruction'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseWhenInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_parseWhenInstruction * operand_29911,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_semanticInstructionListForGeneration  & var_cas_ioInstructionListForGeneration,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_stringlist  & var_cas_ioLocalVariableCppNameList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29911 != NULL) {
GGS_semanticExpressionForGeneration  var_cas_when_expression ;
{ typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29911->mWhenExpression.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_29911->mWhenExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_when_expression COMMA_SOURCE_FILE_AT_LINE (792)) ;
  }
}
GGS_uint  var_cas_localSelectMethodCount = var_cas_ioSelectMethodCount ;
GGS_semanticInstructionListForGeneration  var_cas_when_instructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
{
GGS_syntaxInstructionList::cEnumerator enumerator_30696 (operand_29911->mWhenInstructionList, true) ;
const GGS_syntaxInstructionList::cElement * operand_30696 = NULL ;
while (((operand_30696 = enumerator_30696.nextObject ()))) {
  macroValidPointer (operand_30696) ;
{ typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction method = findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (operand_30696->mInstruction.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_30696->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_inTerminalMap, var_cas_inLexiqueName, var_cas_inNonterminalMap, var_cas_inComponentName, var_cas_when_instructionListForGeneration, var_cas_ioVariableMap, var_cas_localSelectMethodCount, var_cas_ioLocalVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (802)) ;
  }
}
}
}
GGS_semanticInstructionListForGeneration  var_cas_else_instructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
{
GGS_syntaxInstructionList::cEnumerator enumerator_31173 (operand_29911->mElseInstructionList, true) ;
const GGS_syntaxInstructionList::cElement * operand_31173 = NULL ;
while (((operand_31173 = enumerator_31173.nextObject ()))) {
  macroValidPointer (operand_31173) ;
{ typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction method = findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (operand_31173->mInstruction.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_31173->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_inTerminalMap, var_cas_inLexiqueName, var_cas_inNonterminalMap, var_cas_inComponentName, var_cas_else_instructionListForGeneration, var_cas_ioVariableMap, var_cas_ioSelectMethodCount, var_cas_ioLocalVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (818)) ;
  }
}
}
}
var_cas_ioInstructionListForGeneration.addAssign_operation (GGS_parseWhenInstructionForGeneration ::constructor_new (inLexique, var_cas_when_expression, var_cas_when_instructionListForGeneration, var_cas_else_instructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (832))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@parseWhenInstructionForGeneration.generateInstruction'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__parseWhenInstructionForGeneration__generateInstruction (C_Compiler & inLexique,
                                const cPtr_parseWhenInstructionForGeneration * operand_31881,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_string & var_cas_ioGeneratedCode
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31881 != NULL) {
var_cas_ioGeneratedCode.appendCString ("//--------- @parseWhenInstructionForGeneration\n") ;
GGS_string var_cas_sourceVar ;
{ typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_31881->mWhenExpression.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_31881->mWhenExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_sourceVar COMMA_SOURCE_FILE_AT_LINE (848)) ;
  }
}
const GGS_string var_cas_boolVarCppName = (GGS_string ("parseWhen_")).operator_concat (var_cas_ioTemporaryVariableIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (849))) ;
var_cas_ioTemporaryVariableIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (849)) ;
var_cas_ioGeneratedCode.appendCString ("const bool ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_boolVarCppName) ;
var_cas_ioGeneratedCode.appendCString (" = (NULL != ") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_sourceVar) ;
var_cas_ioGeneratedCode.appendCString (") && (") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_sourceVar) ;
var_cas_ioGeneratedCode.appendCString ("->boolValue ()) ;\n") ;
var_cas_ioGeneratedCode.appendCString ("macroReleaseObject (") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_sourceVar) ;
var_cas_ioGeneratedCode.appendCString (") ; // Release 'when' expression\n") ;
var_cas_ioGeneratedCode.appendCString ("if (") ;
var_cas_ioGeneratedCode.dotAssign_operation (var_cas_boolVarCppName) ;
var_cas_ioGeneratedCode.appendCString (") {\n") ;
::routine_generateInstructionList (inLexique,  operand_31881->mInstructionList,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioGeneratedCode COMMA_SOURCE_FILE_AT_LINE (853)) ;
var_cas_ioGeneratedCode.appendCString ("}else{\n") ;
::routine_generateInstructionList (inLexique,  operand_31881->mElseInstructionList,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioGeneratedCode COMMA_SOURCE_FILE_AT_LINE (860)) ;
var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@blockInstruction.analyzeSyntaxInstruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__blockInstruction__analyzeSyntaxInstruction (C_Compiler & inLexique,
                                const cPtr_blockInstruction * operand_33104,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                const GGS_terminalMap   /* var_cas_inTerminalMap */,
                                const GGS_string  /* var_cas_inLexiqueName */,
                                const GGS_nonterminalMap   /* var_cas_inNonterminalMap */,
                                const GGS_string  /* var_cas_inComponentName */,
                                GGS_semanticInstructionListForGeneration  & /* var_cas_ioInstructionListForGeneration */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_uint  & /* var_cas_ioSelectMethodCount */,
                                GGS_stringlist  & /* var_cas_ioLocalVariableCppNameList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33104 != NULL) {
operand_33104->mBlockMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'block' instruction is not handled in GALGAS 2\n") COMMA_SOURCE_FILE_AT_LINE (885)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "semanticAnalysisOfRuleLabel"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticAnalysisOfRuleLabel (C_Compiler & inLexique,
                                const GGS_formalParameterListAST   var_cas_inFormalArguments,
                                const GGS_syntaxInstructionList   var_cas_inSyntaxInstructionList,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_nonterminalMap   var_cas_inNonterminalMap,
                                const GGS_string  var_cas_inComponentName,
                                GGS_uint  & var_cas_ioSelectMethodCount,
                                GGS_formalParameterListForGeneration  & var_cas_outSignatureForGeneration,
                                GGS_formalParameterSignature  & var_cas_outSignature,
                                GGS_semanticInstructionListForGeneration  & var_cas_outInstructionListForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticAnalysisOfRuleLabel at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_variableMap  var_cas_variableMap = GGS_variableMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (907)) ;
::routine_buildLocalVariableMapAndSignature (inLexique,  var_cas_inSemanticContext,  var_cas_inFormalArguments,  var_cas_variableMap,  var_cas_outSignatureForGeneration COMMA_SOURCE_FILE_AT_LINE (908)) ;
var_cas_outSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
{
GGS_formalParameterListForGeneration::cEnumerator enumerator_34857 (var_cas_outSignatureForGeneration, true) ;
const GGS_formalParameterListForGeneration::cElement * operand_34857 = NULL ;
while (((operand_34857 = enumerator_34857.nextObject ()))) {
  macroValidPointer (operand_34857) ;
var_cas_outSignature.addAssign_operation (operand_34857->mFormalArgumentType, operand_34857->mFormalArgumentPassingMode) ;
}
}
var_cas_outInstructionListForGeneration = GGS_semanticInstructionListForGeneration ::constructor_emptyList () ;
GGS_stringlist  var_cas_localVariableCppNameList = GGS_stringlist ::constructor_emptyList () ;
{
GGS_syntaxInstructionList::cEnumerator enumerator_35167 (var_cas_inSyntaxInstructionList, true) ;
const GGS_syntaxInstructionList::cElement * operand_35167 = NULL ;
while (((operand_35167 = enumerator_35167.nextObject ()))) {
  macroValidPointer (operand_35167) ;
{ typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction method = findCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction (operand_35167->mInstruction.galgasObjectRunTimeInfo ()) ;
  if (method != NULL) {
    method (inLexique, operand_35167->mInstruction (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_inTerminalMap, var_cas_inLexiqueName, var_cas_inNonterminalMap, var_cas_inComponentName, var_cas_outInstructionListForGeneration, var_cas_variableMap, var_cas_ioSelectMethodCount, var_cas_localVariableCppNameList COMMA_SOURCE_FILE_AT_LINE (924)) ;
  }
}
}
}
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticAnalysisOfRuleLabel\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "semanticAnalysisOfSyntaxComponent"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_semanticAnalysisOfSyntaxComponent (C_Compiler & inLexique,
                                const GGS_nonterminalDeclarationListAST   var_cas_inNonterminalDeclarationList,
                                const GGS_syntaxRuleListAST   var_cas_inRuleList,
                                const GGS_string  var_cas_inComponentName,
                                const GGS_string  var_cas_inLexiqueName,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                const GGS_terminalMap   var_cas_inTerminalMap,
                                GGS_syntaxDeclarationForGeneration  & var_cas_outSyntaxDeclarationForGeneration
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_semanticAnalysisOfSyntaxComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
GGS_nonterminalMap  var_cas_nonterminalMap = GGS_nonterminalMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (956)) ;
::routine_buildNonterminalDeclarationsMap (inLexique,  var_cas_inNonterminalDeclarationList,  var_cas_inSemanticContext,  var_cas_nonterminalMap COMMA_SOURCE_FILE_AT_LINE (957)) ;
{
GGS_syntaxRuleListAST::cEnumerator enumerator_36549 (var_cas_inRuleList, true) ;
const GGS_syntaxRuleListAST::cElement * operand_36549 = NULL ;
while (((operand_36549 = enumerator_36549.nextObject ()))) {
  macroValidPointer (operand_36549) ;
GGS_nonterminalLabelMap  var_cas_nonterminalLabelMap = GGS_nonterminalLabelMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (964)) ;
{
GGS_syntaxRuleLabelListAST::cEnumerator enumerator_36633 (operand_36549->mLabelList, true) ;
const GGS_syntaxRuleLabelListAST::cElement * operand_36633 = NULL ;
while (((operand_36633 = enumerator_36633.nextObject ()))) {
  macroValidPointer (operand_36633) ;
  GGS_formalParameterListForGeneration  var_cas_signatureForGeneration = GGS_formalParameterListForGeneration ::constructor_emptyList () ;
  GGS_formalParameterSignature  var_cas_signature = GGS_formalParameterSignature ::constructor_emptyList () ;
  {
    GGS_formalParameterListAST::cEnumerator enumerator_36800 (operand_36633->mFormalArguments, true) ;
    const GGS_formalParameterListAST::cElement * operand_36800 = NULL ;
    while (((operand_36800 = enumerator_36800.nextObject ()))) {
      macroValidPointer (operand_36800) ;
      const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inSemanticContext.mTypeMap, operand_36800->mFormalArgumentTypeName COMMA_SOURCE_FILE_AT_LINE (969)) ;
      var_cas_signatureForGeneration.addAssign_operation (operand_36800->mFormalArgumentPassingMode, var_cas_type, operand_36800->mFormalArgumentName, (GGS_string ("argument_")).operator_concat (operand_36800->mFormalArgumentName)) ;
      var_cas_signature.addAssign_operation (var_cas_type, operand_36800->mFormalArgumentPassingMode) ;
    }
  }
  var_cas_nonterminalLabelMap.modifier_insertKey (inLexique, operand_36633->mLabelName, var_cas_signatureForGeneration, var_cas_signature, operand_36633->mEndOfArgumentLocation COMMA_SOURCE_FILE_AT_LINE (973)) ;
}
}
elementOf_GGS_nonterminalMap * operand_37269 = (elementOf_GGS_nonterminalMap *) var_cas_nonterminalMap.searchForReadWithInstruction (operand_36549->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (975))) ;
if (NULL != operand_37269) {
::routine_enterNonterminalNonTerminalInMapAndCheck (inLexique,  operand_36549->mNonterminalName,  var_cas_nonterminalLabelMap,  operand_37269->mInfo.mHasParseLabel,  var_cas_nonterminalMap COMMA_SOURCE_FILE_AT_LINE (976)) ;
}else{
::routine_enterNonterminalNonTerminalInMapAndCheck (inLexique,  operand_36549->mNonterminalName,  var_cas_nonterminalLabelMap,  GGS_bool (false),  var_cas_nonterminalMap COMMA_SOURCE_FILE_AT_LINE (978)) ;
}
}
}
GGS_uint  var_cas_selectMethodCount = GGS_uint (0U) ;
GGS_ruleDeclarationList  var_cas_ruleDeclarationList = GGS_ruleDeclarationList ::constructor_emptyList () ;
GGS_uint  var_cas_newRuleIndex = GGS_uint (0U) ;
{
GGS_syntaxRuleListAST::cEnumerator enumerator_37733 (var_cas_inRuleList, true) ;
const GGS_syntaxRuleListAST::cElement * operand_37733 = NULL ;
while (((operand_37733 = enumerator_37733.nextObject ()))) {
  macroValidPointer (operand_37733) ;
GGS_ruleLabelImplementationList  var_cas_ruleLabelImplementationList = GGS_ruleLabelImplementationList ::constructor_emptyList () ;
GGS_uint  var_cas_localSelectMethodCount = var_cas_selectMethodCount ;
{
GGS_syntaxRuleLabelListAST::cEnumerator enumerator_37890 (operand_37733->mLabelList, true) ;
const GGS_syntaxRuleLabelListAST::cElement * operand_37890 = NULL ;
while (((operand_37890 = enumerator_37890.nextObject ()))) {
  macroValidPointer (operand_37890) ;
  var_cas_localSelectMethodCount = var_cas_selectMethodCount ;
  GGS_formalParameterListForGeneration  var_cas_signatureForGeneration ;
  GGS_formalParameterSignature  var_cas_signature ;
  GGS_semanticInstructionListForGeneration  var_cas_instructionListForGeneration ;
  ::routine_semanticAnalysisOfRuleLabel (inLexique,  operand_37890->mFormalArguments,  operand_37890->mSyntaxInstructionList,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_inTerminalMap,  var_cas_inLexiqueName,  var_cas_nonterminalMap,  var_cas_inComponentName,  var_cas_localSelectMethodCount,  var_cas_signatureForGeneration,  var_cas_signature,  var_cas_instructionListForGeneration COMMA_SOURCE_FILE_AT_LINE (993)) ;
  var_cas_ruleLabelImplementationList.addAssign_operation (operand_37890->mLabelName, var_cas_signatureForGeneration, var_cas_signature, operand_37890->mEndOfArgumentLocation, var_cas_instructionListForGeneration) ;
}
}
var_cas_selectMethodCount = var_cas_localSelectMethodCount ;
GGS_bool var_cas_hasParseLabel ;
GGS_nonterminalLabelMap  automatic_var_38847_0 ;
if (var_cas_nonterminalMap.isBuilt ()) {
  var_cas_nonterminalMap (HERE)->method_searchKey (inLexique, operand_37733->mNonterminalName, automatic_var_38847_0, var_cas_hasParseLabel COMMA_SOURCE_FILE_AT_LINE (1017)) ;
}
var_cas_ruleDeclarationList.addAssign_operation (operand_37733->mNonterminalName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)), var_cas_newRuleIndex, var_cas_ruleLabelImplementationList, var_cas_hasParseLabel) ;
var_cas_newRuleIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) ;
}
}
var_cas_outSyntaxDeclarationForGeneration = GGS_syntaxDeclarationForGeneration ::constructor_new (inLexique, var_cas_inComponentName, var_cas_inLexiqueName, var_cas_nonterminalMap, var_cas_ruleDeclarationList, var_cas_selectMethodCount COMMA_SOURCE_FILE_AT_LINE (1027)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_semanticAnalysisOfSyntaxComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticAnalysisOfSyntaxComponent (void) {
  enterCategoryReader__semanticDeclarationForGeneration__appendDeclaration ((typeCategoryReader__semanticDeclarationForGeneration__appendDeclaration) category_reader__syntaxDeclarationForGeneration__appendDeclaration, gClassInfoFor__syntaxDeclarationForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__semanticInstructionAST__analyzeSyntaxInstruction, gClassInfoFor__semanticInstructionAST.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__nonterminalCallInstruction__analyzeSyntaxInstruction, gClassInfoFor__nonterminalCallInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__nonterminalInstructionForGeneration__generateInstruction, gClassInfoFor__nonterminalInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__terminalCheckInstruction__analyzeSyntaxInstruction, gClassInfoFor__terminalCheckInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__terminalCheckInstructionForGeneration__generateInstruction, gClassInfoFor__terminalCheckInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__repeatInstruction__analyzeSyntaxInstruction, gClassInfoFor__repeatInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__repeatInstructionForGeneration__generateInstruction, gClassInfoFor__repeatInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__selectInstruction__analyzeSyntaxInstruction, gClassInfoFor__selectInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__selectInstructionForGeneration__generateInstruction, gClassInfoFor__selectInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__parseDoInstruction__analyzeSyntaxInstruction, gClassInfoFor__parseDoInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__parseDoInstructionForGeneration__generateInstruction, gClassInfoFor__parseDoInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__parseLoopInstruction__analyzeSyntaxInstruction, gClassInfoFor__parseLoopInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__parseLoopInstructionForGeneration__generateInstruction, gClassInfoFor__parseLoopInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__parseWhenInstruction__analyzeSyntaxInstruction, gClassInfoFor__parseWhenInstruction.slotID ()) ;
  enterCategoryMethod__semanticInstructionForGeneration__generateInstruction ((typeCategoryMethod__semanticInstructionForGeneration__generateInstruction) category_method__parseWhenInstructionForGeneration__generateInstruction, gClassInfoFor__parseWhenInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction ((typeCategoryMethod__syntaxInstructionAST__analyzeSyntaxInstruction) category_method__blockInstruction__analyzeSyntaxInstruction, gClassInfoFor__blockInstruction.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticAnalysisOfSyntaxComponent (void) {
  gDispatchTableForMethod__syntaxInstructionAST__analyzeSyntaxInstruction.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticAnalysisOfSyntaxComponent (prologueRoutineFor_semanticAnalysisOfSyntaxComponent, epilogueRoutineFor_semanticAnalysisOfSyntaxComponent) ;

//---------------------------------------------------------------------------*

