//---------------------------------------------------------------------------*
//                                                                           *
//               File 'include_templateInstructionForeach.h'                 *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 10th, 2009, at 13h17'13"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_templateInstructionForeach'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_templateInstructionForeach : public cPtr_templateInstruction {
  private : typedef cPtr_templateInstruction inherited ;
//--- START OF USER ZONE 2

  public : virtual void generateTemplateInstruction (AC_OutputStream & inCppFile) const ;
  public : virtual bool isUsingLexiqueArgument (void) const ;
  public : virtual bool isConstantUsed (const GGS_typeCplusPlusName & inCppName) const ;

//--- END OF USER ZONE 2

//--- Constructor
  public : cPtr_templateInstructionForeach (const GGS_bool& ,
                                const GGS_string& ,
                                const GGS_bool& ,
                                const GGS_typeExpression & ,
                                const GGS_location & ,
                                const GGS_templateInstructionList & ,
                                const GGS_templateInstructionList & ,
                                const GGS_lstring & ,
                                const GGS_templateInstructionList & ,
                                const GGS_templateInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_templateInstructionForeach (void) {}
  #endif

//--- Attributes
  public : GGS_bool mIsAscending ;
  public : GGS_string mCppExpressionTypeName ;
  public : GGS_bool mNewEnumerationStyle ;
  public : GGS_typeExpression  mExpression ;
  public : GGS_location  mInstructionLocation ;
  public : GGS_templateInstructionList  mBeforeInstructionList ;
  public : GGS_templateInstructionList  mDoInstructionList ;
  public : GGS_lstring  mIndexIdentifier ;
  public : GGS_templateInstructionList  mBetweenInstructionList ;
  public : GGS_templateInstructionList  mAfterInstructionList ;
//--- Class message
  public : virtual const char * instanceMessage (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*

