//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'guiMetamodel.cpp'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      june 28th, 2007, at 15h26'52"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "guiMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "guiMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("guiMetamodel", 3) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_guiMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@guiAttribute'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_guiAttribute::
cPtr_guiAttribute (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mKey (argument_0),
mValue (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_guiAttribute::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_guiAttribute * _p = dynamic_cast <const cPtr_guiAttribute *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mKey._operator_isEqual (_p->mKey).boolValue ()
         && mValue._operator_isEqual (_p->mValue).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_guiAttribute::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @guiAttribute" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mValue.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiAttribute::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiAttribute::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiAttribute::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiAttribute::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "guiAttribute" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_guiAttribute * cPtr_guiAttribute::
_cloneObject (void) const {
  cPtr_guiAttribute * _p = NULL ;
  macroMyNew (_p, cPtr_guiAttribute (mKey, mValue COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@_list_guiAttribute'                         *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_guiAttribute::
_addAssign_operation (const GGS_guiAttribute & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_guiAttribute GGS__list_guiAttribute::
_operator_concat (const GGS__list_guiAttribute & inOperand) const {
  GGS__list_guiAttribute result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_guiAttribute::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_guiAttribute & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mKey,
                                _p->mValue) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_guiAttribute  GGS__list_guiAttribute::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiAttribute result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_guiAttribute  GGS__list_guiAttribute::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_guiAttribute & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiAttribute result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_guiAttribute::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_guiAttribute", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
_addModel (const GGS_guiAttribute & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
method_first (C_Compiler & _inLexique,
              GGS_guiAttribute & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiAttribute::constructor_new (_inLexique,
       _p->mKey,
       _p->mValue) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
method_last (C_Compiler & _inLexique,
             GGS_guiAttribute & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiAttribute::constructor_new (_inLexique,
       _p->mKey,
       _p->mValue) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_guiAttribute & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiAttribute::constructor_new (_inLexique,
       _p->mKey,
       _p->mValue) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiAttribute::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_guiAttribute & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiAttribute::constructor_new (_inLexique,
       _p->mKey,
       _p->mValue) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS entity '@guiAttribute'                        *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_guiAttribute GGS_guiAttribute::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_guiAttribute result ;
  macroMyNew (result.mPointer, cPtr_guiAttribute (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiAttribute::
reader_mKey (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiAttribute *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiAttribute *) mPointer)->mKey ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiAttribute::
reader_mValue (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiAttribute *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiAttribute *) mPointer)->mValue ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_guiAttribute::actualTypeName (void) const {
 return "guiAttribute" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_guiAttribute * GGS_guiAttribute::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_guiAttribute *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@guiLabel'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_guiLabel::
cPtr_guiLabel (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mAttribute1 (argument_0),
mAttribute2 (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_guiLabel::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_guiLabel * _p = dynamic_cast <const cPtr_guiLabel *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mAttribute1._operator_isEqual (_p->mAttribute1).boolValue ()
         && mAttribute2._operator_isEqual (_p->mAttribute2).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_guiLabel::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @guiLabel" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mAttribute1.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mAttribute2.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiLabel::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiLabel::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiLabel::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiLabel::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "guiLabel" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_guiLabel * cPtr_guiLabel::
_cloneObject (void) const {
  cPtr_guiLabel * _p = NULL ;
  macroMyNew (_p, cPtr_guiLabel (mAttribute1, mAttribute2 COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                          List '@_list_guiLabel'                           *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_guiLabel::
_addAssign_operation (const GGS_guiLabel & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_guiLabel GGS__list_guiLabel::
_operator_concat (const GGS__list_guiLabel & inOperand) const {
  GGS__list_guiLabel result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_guiLabel::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_guiLabel & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mAttribute1,
                                _p->mAttribute2) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_guiLabel  GGS__list_guiLabel::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiLabel result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_guiLabel  GGS__list_guiLabel::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_guiLabel & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiLabel result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_guiLabel::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_guiLabel", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
_addModel (const GGS_guiLabel & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
method_first (C_Compiler & _inLexique,
              GGS_guiLabel & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiLabel::constructor_new (_inLexique,
       _p->mAttribute1,
       _p->mAttribute2) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
method_last (C_Compiler & _inLexique,
             GGS_guiLabel & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiLabel::constructor_new (_inLexique,
       _p->mAttribute1,
       _p->mAttribute2) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_guiLabel & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiLabel::constructor_new (_inLexique,
       _p->mAttribute1,
       _p->mAttribute2) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiLabel::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_guiLabel & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiLabel::constructor_new (_inLexique,
       _p->mAttribute1,
       _p->mAttribute2) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS entity '@guiLabel'                          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_guiLabel GGS_guiLabel::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_guiLabel result ;
  macroMyNew (result.mPointer, cPtr_guiLabel (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiLabel::
reader_mAttribute1 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiLabel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiLabel *) mPointer)->mAttribute1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiLabel::
reader_mAttribute2 (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiLabel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiLabel *) mPointer)->mAttribute2 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_guiLabel::actualTypeName (void) const {
 return "guiLabel" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_guiLabel * GGS_guiLabel::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_guiLabel *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@guiComponentRoot'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_guiComponentRoot::
cPtr_guiComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS__list_guiAttribute & argument_2,
                                const GGS__list_guiLabel & argument_3
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mGUIName (argument_0),
mGUIClass (argument_1),
mAttributes (argument_2),
mLabels (argument_3) {
}

//---------------------------------------------------------------------------*

bool cPtr_guiComponentRoot::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_guiComponentRoot * _p = dynamic_cast <const cPtr_guiComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mGUIName._operator_isEqual (_p->mGUIName).boolValue ()
         && mGUIClass._operator_isEqual (_p->mGUIClass).boolValue ()
         && mAttributes._operator_isEqual (_p->mAttributes).boolValue ()
         && mLabels._operator_isEqual (_p->mLabels).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_guiComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @guiComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mGUIName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mGUIClass.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mAttributes.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabels.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiComponentRoot::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiComponentRoot::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_guiComponentRoot::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 2 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_guiComponentRoot::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "guiComponentRoot" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_guiComponentRoot * cPtr_guiComponentRoot::
_cloneObject (void) const {
  cPtr_guiComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_guiComponentRoot (mGUIName, mGUIClass, mAttributes, mLabels COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@_list_guiComponentRoot'                       *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS__list_guiAttribute & argument_2,
                    const GGS__list_guiLabel & argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS__list_guiAttribute & argument_2,
                    const GGS__list_guiLabel & argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_guiComponentRoot::
_addAssign_operation (const GGS_guiComponentRoot & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_guiComponentRoot GGS__list_guiComponentRoot::
_operator_concat (const GGS__list_guiComponentRoot & inOperand) const {
  GGS__list_guiComponentRoot result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_guiComponentRoot::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_guiComponentRoot & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mGUIName,
                                _p->mGUIClass,
                                _p->mAttributes,
                                _p->mLabels) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_guiComponentRoot  GGS__list_guiComponentRoot::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiComponentRoot result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_guiComponentRoot  GGS__list_guiComponentRoot::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_guiComponentRoot & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_guiComponentRoot result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_guiComponentRoot::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_guiComponentRoot", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
_addModel (const GGS_guiComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
method_first (C_Compiler & _inLexique,
              GGS_guiComponentRoot & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiComponentRoot::constructor_new (_inLexique,
       _p->mGUIName,
       _p->mGUIClass,
       _p->mAttributes,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
method_last (C_Compiler & _inLexique,
             GGS_guiComponentRoot & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiComponentRoot::constructor_new (_inLexique,
       _p->mGUIName,
       _p->mGUIClass,
       _p->mAttributes,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_guiComponentRoot & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiComponentRoot::constructor_new (_inLexique,
       _p->mGUIName,
       _p->mGUIClass,
       _p->mAttributes,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_guiComponentRoot::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_guiComponentRoot & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_guiComponentRoot::constructor_new (_inLexique,
       _p->mGUIName,
       _p->mGUIClass,
       _p->mAttributes,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@guiComponentRoot'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_guiComponentRoot GGS_guiComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS__list_guiAttribute & argument_2,
                 const GGS__list_guiLabel & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_guiComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_guiComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiComponentRoot::
reader_mGUIName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiComponentRoot *) mPointer)->mGUIName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_guiComponentRoot::
reader_mGUIClass (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiComponentRoot *) mPointer)->mGUIClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_guiAttribute  GGS_guiComponentRoot::
reader_mAttributes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_guiAttribute   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiComponentRoot *) mPointer)->mAttributes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_guiLabel  GGS_guiComponentRoot::
reader_mLabels (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_guiLabel   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_guiComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_guiComponentRoot *) mPointer)->mLabels ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_guiComponentRoot::actualTypeName (void) const {
 return "guiComponentRoot" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_guiComponentRoot * GGS_guiComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_guiComponentRoot *) mPointer ;
  }
#endif

