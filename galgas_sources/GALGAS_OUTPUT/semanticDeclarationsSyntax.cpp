//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticDeclarationsSyntax.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 21th, 2010, at 15h20'33"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticDeclarationsSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticDeclarationsSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'attribute_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_attribute_5F_declaration_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_attributeInCollectionListAST  &var_cas_ioAttributeInCollectionList) {
  GGS_lstring  var_cas_mAttributeTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mAttributeTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mAttributeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mAttributeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_featureList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_semanticDeclarationsSyntax_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      { bool syntaxRepeat_1 = true ;
        while (syntaxRepeat_1) {
            GGS_lstring  var_cas_featureName ;
            inLexique.assignFromAttribute_tokenString (var_cas_featureName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_featureList.addAssign_operation (var_cas_featureName) ;
          switch (select_semanticDeclarationsSyntax_1 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_1 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioAttributeInCollectionList.addAssign_operation (var_cas_mAttributeTypeName, var_cas_mAttributeName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_mListmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mListmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_mAssociatedListTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mAssociatedListTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_listmapDeclarationAST ::constructor_new (inLexique, var_cas_mListmapTypeName, var_cas_mAssociatedListTypeName COMMA_SOURCE_FILE_AT_LINE (90))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'obsolete_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_obsolete_5F_declaration_i2_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'insert_method_declaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_insert_5F_method_5F_declaration_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_insertMethodListAST  &var_cas_ioMapMethodList) {
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_stateName ;
  switch (select_semanticDeclarationsSyntax_2 (inLexique)) {
    case 1 : {
      var_cas_stateName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (118)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_state) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_stateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_mErrorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_mErrorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_mShadowErrorMessage ;
  switch (select_semanticDeclarationsSyntax_3 (inLexique)) {
    case 1 : {
      var_cas_mShadowErrorMessage = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (128)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_mShadowErrorMessage) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioMapMethodList.addAssign_operation (var_cas_mMethodName, var_cas_mErrorMessage, var_cas_mShadowErrorMessage, var_cas_stateName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mMapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_attributeInCollectionListAST  var_cas_mAttributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  GGS_insertMethodListAST  var_cas_mInsertMethodList = GGS_insertMethodListAST ::constructor_emptyList () ;
  GGS_mapSearchMethodListAST  var_cas_mSearchMethodList = GGS_mapSearchMethodListAST ::constructor_emptyList () ;
  GGS_mapRemoveMethodListAST  var_cas_mRemoveMethodList = GGS_mapRemoveMethodListAST ::constructor_emptyList () ;
  GGS_insertOrReplaceDeclarationListAST  var_cas_insertOrReplaceDeclarationListAST = GGS_insertOrReplaceDeclarationListAST ::constructor_emptyList () ;
  GGS_mapStateList  var_cas_mapStateList = GGS_mapStateList ::constructor_emptyList () ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_semanticDeclarationsSyntax_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_state) COMMA_HERE) ;
          GGS_lstring  var_cas_stateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_stateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_mapAutomatonMessageKind var_cas_stateMessageKind ;
          GGS_lstring  var_cas_stateMessage ;
          switch (select_semanticDeclarationsSyntax_5 (inLexique)) {
            case 1 : {
              var_cas_stateMessageKind = GGS_mapAutomatonMessageKind::constructor_noMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) ;
              var_cas_stateMessage = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_stateMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_stateMessageKind = GGS_mapAutomatonMessageKind::constructor_warningMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (170)) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_stateMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_stateMessageKind = GGS_mapAutomatonMessageKind::constructor_errorMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (174)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
          GGS_mapStateTransitionList  var_cas_transitionList = GGS_mapStateTransitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_6 = true ;
            while (syntaxRepeat_6) {
              switch (select_semanticDeclarationsSyntax_6 (inLexique)) {
                case 2 : {
                  GGS_lstring  var_cas_actionName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
                  GGS_lstring  var_cas_targetStateName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_targetStateName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  GGS_mapAutomatonMessageKind var_cas_transitionMessageKind ;
                  GGS_lstring  var_cas_transitionMessage ;
                  switch (select_semanticDeclarationsSyntax_7 (inLexique)) {
                    case 1 : {
                      var_cas_transitionMessageKind = GGS_mapAutomatonMessageKind::constructor_noMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
                      var_cas_transitionMessage = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
                      inLexique.assignFromAttribute_tokenString (var_cas_transitionMessage) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                      var_cas_transitionMessageKind = GGS_mapAutomatonMessageKind::constructor_warningMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
                      } break ;
                    case 3 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
                      inLexique.assignFromAttribute_tokenString (var_cas_transitionMessage) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                      var_cas_transitionMessageKind = GGS_mapAutomatonMessageKind::constructor_errorMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
                      } break ;
                    default :
                      break ;
                  }
                  var_cas_transitionList.addAssign_operation (var_cas_actionName, var_cas_targetStateName, var_cas_transitionMessageKind, var_cas_transitionMessage) ;
                  } break ;
                default :
                  syntaxRepeat_6 = false ;
                  break ;
              }
            }
          }
          var_cas_mapStateList.addAssign_operation (var_cas_stateName, var_cas_stateMessageKind, var_cas_stateMessage, var_cas_transitionList) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_attribute_5F_declaration_ (inLexique, var_cas_mAttributeList) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_insert) COMMA_HERE) ;
          nt_insert_5F_method_5F_declaration_ (inLexique, var_cas_mInsertMethodList) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
          GGS_lstring  var_cas_mMethodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          switch (select_semanticDeclarationsSyntax_8 (inLexique)) {
            case 1 : {
              var_cas_actionName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (221)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
          GGS_lstring  var_cas_mErrorMessage ;
          inLexique.assignFromAttribute_tokenString (var_cas_mErrorMessage) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_mSearchMethodList.addAssign_operation (var_cas_mMethodName, var_cas_mErrorMessage, var_cas_actionName) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_remove) COMMA_HERE) ;
          GGS_lstring  var_cas_mMethodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
          GGS_lstring  var_cas_mErrorMessage ;
          inLexique.assignFromAttribute_tokenString (var_cas_mErrorMessage) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_mRemoveMethodList.addAssign_operation (var_cas_mMethodName, var_cas_mErrorMessage) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_insert) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_or) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_replace) COMMA_HERE) ;
          var_cas_insertOrReplaceDeclarationListAST.addAssign_operation (GGS_location (inLexique)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_mapDeclarationAST ::constructor_new (inLexique, var_cas_mMapTypeName, var_cas_mAttributeList, var_cas_mInsertMethodList, var_cas_mSearchMethodList, var_cas_mRemoveMethodList, var_cas_insertOrReplaceDeclarationListAST, var_cas_mapStateList COMMA_SOURCE_FILE_AT_LINE (254))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'obsolete_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_obsolete_5F_declaration_i5_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_mapproxy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_mapproxy) COMMA_HERE) ;
  GGS_lstring  var_cas_mMapIndexName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMapIndexName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_mMapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_mapProxyDeclarationAST ::constructor_new (inLexique, var_cas_mMapIndexName, var_cas_mMapTypeName COMMA_SOURCE_FILE_AT_LINE (290))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'obsolete_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_obsolete_5F_declaration_i7_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_semanticDeclarationsSyntax_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_insert) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_block) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
          { bool syntaxRepeat_10 = true ;
            while (syntaxRepeat_10) {
              switch (select_semanticDeclarationsSyntax_10 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_10 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
          { bool syntaxRepeat_11 = true ;
            while (syntaxRepeat_11) {
              switch (select_semanticDeclarationsSyntax_11 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_11 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'class_abstract_method_declaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_class_5F_abstract_5F_method_5F_declaration_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_abstractMethodDefinitionListAST  &var_cas_ioAbstractMethodDefinitionList) {
  GGS_bool var_cas_isOverriding ;
  switch (select_semanticDeclarationsSyntax_12 (inLexique)) {
    case 1 : {
      var_cas_isOverriding = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_override) COMMA_HERE) ;
      var_cas_isOverriding = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mSignature ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioAbstractMethodDefinitionList.addAssign_operation (var_cas_isOverriding, var_cas_mMethodName, var_cas_mSignature) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'class_method_declaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_class_5F_method_5F_declaration_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_methodDefinitionListAST  &var_cas_ioMethodDefinitionList) {
  GGS_bool var_cas_isOverriding ;
  switch (select_semanticDeclarationsSyntax_13 (inLexique)) {
    case 1 : {
      var_cas_isOverriding = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_override) COMMA_HERE) ;
      var_cas_isOverriding = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mSignature ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mSignature) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mInstructionList) ;
  var_cas_ioMethodDefinitionList.addAssign_operation (var_cas_isOverriding, var_cas_mMethodName, var_cas_mSignature, var_cas_mInstructionList, GGS_location (inLexique)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lazy_attribute_declaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_lazy_5F_attribute_5F_declaration_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lazyAttributeListAST  &var_cas_ioLazyAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_once) COMMA_HERE) ;
  GGS_attributeInCollectionListAST  var_cas_attributeTypeAndNameList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
        GGS_lstring  var_cas_attributeTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
        GGS_lstring  var_cas_attributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        var_cas_attributeTypeAndNameList.addAssign_operation (var_cas_attributeTypeName, var_cas_attributeName) ;
      switch (select_semanticDeclarationsSyntax_14 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_once) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioLazyAttributeList.addAssign_operation (GGS_location (inLexique), var_cas_attributeTypeAndNameList, var_cas_mInstructionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  GGS_bool var_cas_mIsAbstract ;
  switch (select_semanticDeclarationsSyntax_15 (inLexique)) {
    case 1 : {
      var_cas_mIsAbstract = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_abstract) COMMA_HERE) ;
      var_cas_mIsAbstract = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_class) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  switch (select_semanticDeclarationsSyntax_16 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_mSuperClassName ;
      switch (select_semanticDeclarationsSyntax_17 (inLexique)) {
        case 1 : {
          var_cas_mSuperClassName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (474)) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_extends) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_mSuperClassName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_lstringlist  var_cas_classFeatureList = GGS_lstringlist ::constructor_emptyList () ;
      switch (select_semanticDeclarationsSyntax_18 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
          { bool syntaxRepeat_19 = true ;
            while (syntaxRepeat_19) {
                GGS_lstring  var_cas_classFeatureName ;
                inLexique.assignFromAttribute_tokenString (var_cas_classFeatureName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                var_cas_classFeatureList.addAssign_operation (var_cas_classFeatureName) ;
              switch (select_semanticDeclarationsSyntax_19 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_19 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
      GGS_string var_cas_mClassMessage = GGS_string ("") ;
      GGS_attributeInCollectionListAST  var_cas_mAttributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
      GGS_abstractMethodDefinitionListAST  var_cas_mAbstractMethodList = GGS_abstractMethodDefinitionListAST ::constructor_emptyList () ;
      GGS_methodDefinitionListAST  var_cas_mMethodList = GGS_methodDefinitionListAST ::constructor_emptyList () ;
      GGS_lazyAttributeListAST  var_cas_mLazyAttributeList = GGS_lazyAttributeListAST ::constructor_emptyList () ;
      { bool syntaxRepeat_20 = true ;
        while (syntaxRepeat_20) {
          switch (select_semanticDeclarationsSyntax_20 (inLexique)) {
            case 2 : {
              nt_attribute_5F_declaration_ (inLexique, var_cas_mAttributeList) ;
              } break ;
            case 3 : {
              nt_class_5F_abstract_5F_method_5F_declaration_ (inLexique, var_cas_mAbstractMethodList) ;
              } break ;
            case 4 : {
              nt_class_5F_method_5F_declaration_ (inLexique, var_cas_mMethodList) ;
              } break ;
            case 5 : {
              nt_lazy_5F_attribute_5F_declaration_ (inLexique, var_cas_mLazyAttributeList) ;
              } break ;
            default :
              syntaxRepeat_20 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
      var_cas_ioSemanticDeclarations.addAssign_operation (GGS_classDeclarationAST ::constructor_new (inLexique, var_cas_mIsAbstract, var_cas_mClassTypeName, var_cas_mSuperClassName, var_cas_classFeatureList, var_cas_mAttributeList, var_cas_mAbstractMethodList, var_cas_mMethodList, var_cas_mLazyAttributeList COMMA_SOURCE_FILE_AT_LINE (523))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_mListTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mListTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_attributeInCollectionListAST  var_cas_mAttributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_semanticDeclarationsSyntax_21 (inLexique)) {
        case 2 : {
          nt_attribute_5F_declaration_ (inLexique, var_cas_mAttributeList) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_structDeclarationAST ::constructor_new (inLexique, var_cas_mListTypeName, var_cas_mAttributeList COMMA_SOURCE_FILE_AT_LINE (557))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  GGS_lstring  var_cas_mListTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mListTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_attributeInCollectionListAST  var_cas_mAttributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_semanticDeclarationsSyntax_22 (inLexique)) {
        case 2 : {
          nt_attribute_5F_declaration_ (inLexique, var_cas_mAttributeList) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_listDeclarationAST ::constructor_new (inLexique, var_cas_mListTypeName, var_cas_mAttributeList COMMA_SOURCE_FILE_AT_LINE (581))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'obsolete_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_obsolete_5F_declaration_i14_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'obsolete_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_obsolete_5F_declaration_i15_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_sortedlist) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'sortedlist_sort_descriptor'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_sortedlist_5F_sort_5F_descriptor_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_sortedListSortDescriptorListAST  &var_cas_ioSortedListSortDescriptorList) {
  GGS_lstring  var_cas_mSortedAttributeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSortedAttributeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_bool var_cas_mAscending ;
  switch (select_semanticDeclarationsSyntax_23 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C_) COMMA_HERE) ;
      var_cas_mAscending = GGS_bool (true) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E_) COMMA_HERE) ;
      var_cas_mAscending = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioSortedListSortDescriptorList.addAssign_operation (var_cas_mSortedAttributeName, var_cas_mAscending) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_mSortedListTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSortedListTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_attributeInCollectionListAST  var_cas_mAttributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
      switch (select_semanticDeclarationsSyntax_24 (inLexique)) {
        case 2 : {
          nt_attribute_5F_declaration_ (inLexique, var_cas_mAttributeList) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_sortedListSortDescriptorListAST  var_cas_mSortDescriptorList = GGS_sortedListSortDescriptorListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        nt_sortedlist_5F_sort_5F_descriptor_ (inLexique, var_cas_mSortDescriptorList) ;
      switch (select_semanticDeclarationsSyntax_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_sortedListDeclarationAST ::constructor_new (inLexique, var_cas_mSortedListTypeName, var_cas_mAttributeList, var_cas_mSortDescriptorList COMMA_SOURCE_FILE_AT_LINE (648))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'enum_message_declaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_enum_5F_message_5F_declaration_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_enumMessageListAST  &var_cas_ioEnumMessageList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_mEnumMessageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mEnumMessageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_enumMessageAssociationListAST  var_cas_mMessageAssociationList = GGS_enumMessageAssociationListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_26 = true ;
    while (syntaxRepeat_26) {
        GGS_lstring  var_cas_mConstantName ;
        inLexique.assignFromAttribute_tokenString (var_cas_mConstantName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
        GGS_lstring  var_cas_mMessage ;
        inLexique.assignFromAttribute_tokenString (var_cas_mMessage) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
        var_cas_mMessageAssociationList.addAssign_operation (var_cas_mConstantName, var_cas_mMessage) ;
      switch (select_semanticDeclarationsSyntax_26 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_26 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioEnumMessageList.addAssign_operation (var_cas_mEnumMessageName, var_cas_mMessageAssociationList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_mEnumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mEnumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mConstantList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_semanticDeclarationsSyntax_27 (inLexique)) {
    case 1 : {
      { bool syntaxRepeat_28 = true ;
        while (syntaxRepeat_28) {
            GGS_lstring  var_cas_constantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_mConstantList.addAssign_operation (var_cas_constantName) ;
          switch (select_semanticDeclarationsSyntax_28 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_28 = false ;
              break ;
          }
        }
      }
      } break ;
    case 2 : {
      { bool syntaxRepeat_29 = true ;
        while (syntaxRepeat_29) {
          switch (select_semanticDeclarationsSyntax_29 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_constructor) COMMA_HERE) ;
              { bool syntaxRepeat_30 = true ;
                while (syntaxRepeat_30) {
                    GGS_lstring  var_cas_constantName ;
                    inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                    var_cas_mConstantList.addAssign_operation (var_cas_constantName) ;
                  switch (select_semanticDeclarationsSyntax_30 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_30 = false ;
                      break ;
                  }
                }
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_29 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_enumMessageListAST  var_cas_mEnumMessageList = GGS_enumMessageListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_31 = true ;
    while (syntaxRepeat_31) {
      switch (select_semanticDeclarationsSyntax_31 (inLexique)) {
        case 2 : {
          nt_enum_5F_message_5F_declaration_ (inLexique, var_cas_mEnumMessageList) ;
          } break ;
        default :
          syntaxRepeat_31 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_enumDeclarationAST ::constructor_new (inLexique, var_cas_mEnumTypeName, var_cas_mConstantList, var_cas_mEnumMessageList COMMA_SOURCE_FILE_AT_LINE (730))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_mFilewrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mFilewrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
  GGS_lstring  var_cas_mFilewrapperPath ;
  inLexique.assignFromAttribute_tokenString (var_cas_mFilewrapperPath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mFilewrapperExtensionList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_semanticDeclarationsSyntax_32 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_33 = true ;
        while (syntaxRepeat_33) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
            var_cas_mFilewrapperExtensionList.addAssign_operation (var_cas_extension) ;
          switch (select_semanticDeclarationsSyntax_33 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_33 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7B_) COMMA_HERE) ;
  GGS_filewrapperTemplateListAST  var_cas_mFilewrapperTemplateList = GGS_filewrapperTemplateListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
      switch (select_semanticDeclarationsSyntax_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
          GGS_lstring  var_cas_mFilewrapperTemplateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFilewrapperTemplateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_mFilewrapperTemplatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFilewrapperTemplatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          GGS_formalInputParameterListAST  var_cas_mFilewrapperTemplateFormalInputParameters ;
          nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_mFilewrapperTemplateFormalInputParameters) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_mFilewrapperTemplateList.addAssign_operation (var_cas_mFilewrapperTemplateName, var_cas_mFilewrapperTemplatePath, var_cas_mFilewrapperTemplateFormalInputParameters) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7D_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_filewrapperDeclarationAST ::constructor_new (inLexique, var_cas_mFilewrapperName, var_cas_mFilewrapperPath, var_cas_mFilewrapperExtensionList, var_cas_mFilewrapperTemplateList COMMA_SOURCE_FILE_AT_LINE (780))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mFormalParameterList ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_abstractCategoryMethodAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mMethodName, var_cas_mFormalParameterList COMMA_SOURCE_FILE_AT_LINE (804))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mFormalParameterList ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_categoryMethodAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mMethodName, var_cas_mFormalParameterList, var_cas_mRoutineInstructionList COMMA_SOURCE_FILE_AT_LINE (831))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i23_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mFormalParameterList ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_overridingCategoryMethodAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mMethodName, var_cas_mFormalParameterList, var_cas_mRoutineInstructionList COMMA_SOURCE_FILE_AT_LINE (860))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mReaderName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReaderName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalInputParameterListAST  var_cas_mFormalInputParameterList ;
  nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_mFormalInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mReturnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReturnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_abstractCategoryReaderAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mReaderName, var_cas_mFormalInputParameterList, var_cas_mReturnedTypeName COMMA_SOURCE_FILE_AT_LINE (887))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalInputParameterListAST  var_cas_mFormalInputParameterList ;
  nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_mFormalInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mReturnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReturnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mReturnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReturnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_categoryReaderAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mMethodName, var_cas_mFormalInputParameterList, var_cas_mReturnedTypeName, var_cas_mReturnedVariableName, var_cas_mRoutineInstructionList COMMA_SOURCE_FILE_AT_LINE (918))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticDeclarationsSyntax::rule_semanticDeclarationsSyntax_semantic_5F_declaration_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_mClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalInputParameterListAST  var_cas_mFormalInputParameterList ;
  nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_mFormalInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mReturnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReturnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mReturnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReturnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_overridingCategoryReaderAST ::constructor_new (inLexique, var_cas_mClassName, var_cas_mMethodName, var_cas_mFormalInputParameterList, var_cas_mReturnedTypeName, var_cas_mReturnedVariableName, var_cas_mRoutineInstructionList COMMA_SOURCE_FILE_AT_LINE (952))) ;
}

//---------------------------------------------------------------------------*

