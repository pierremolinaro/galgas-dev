//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'parameterArgumentMetamodel.h'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 17th, 2008, at 19h41'24"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef parameterArgumentMetamodel_DEFINED
#define parameterArgumentMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "expressionMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode ;
class GGS_formalArgumentPassingMode ;
class GGS_formalParameterList ;
class GGS_formalInputParameterList ;
class GGS_actualParameter ;
class cPtr_actualParameter ;
class GGS_outputActualParameter ;
class cPtr_outputActualParameter ;
class GGS_outputInputActualParameter ;
class cPtr_outputInputActualParameter ;
class GGS_inputActualParameter ;
class cPtr_inputActualParameter ;
class GGS_inputJokerActualParameter ;
class cPtr_inputJokerActualParameter ;
class GGS_actualParameterList ;
class GGS_actualInputParameterList ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'actualParameterPassingMode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_parameterOut, enum_parameterOutIn, enum_parameterIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_actualParameterPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_actualParameterPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOut) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOutIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOutIn) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterIn) ;
  }

//--- Readers
  public : GGS_string reader_actualArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_actualParameterPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'formalArgumentPassingMode' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_formalArgumentPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_argumentIn, enum_argumentOut, enum_argumentInOut, enum_argumentConstantIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_formalArgumentPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_formalArgumentPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentIn) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentInOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentInOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentConstantIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentConstantIn) ;
  }

//--- Readers
  public : GGS_string reader_formalArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_formalArgumentPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@formalParameterList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_formalParameterList ;

class GGS_formalParameterList : public AC_galgas_list {
  public : typedef elementOf_GGS_formalParameterList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_formalParameterList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_formalParameterList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_formalParameterList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_formalParameterList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_formalParameterList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_formalParameterList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_formalArgumentPassingMode& _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstring & _out_2,
                              GGS_bool& _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_formalArgumentPassingMode& _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstring & _out_2,
                             GGS_bool& _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_formalArgumentPassingMode& _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstring & _out_2,
                                GGS_bool& _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_formalArgumentPassingMode& _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_bool& _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_formalParameterList _operator_concat (const GGS_formalParameterList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_formalArgumentPassingMode
  reader_mFormalParameterPassingModeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalParameterTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalParameterNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mIsUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMFormalParameterPassingModeAtIndex (C_Compiler & inLexique,
                              const GGS_formalArgumentPassingMode & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParameterTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParameterNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMIsUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_formalParameterList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@formalInputParameterList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_formalInputParameterList ;

class GGS_formalInputParameterList : public AC_galgas_list {
  public : typedef elementOf_GGS_formalInputParameterList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_formalInputParameterList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_formalInputParameterList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_formalInputParameterList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_formalInputParameterList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_formalInputParameterList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_formalInputParameterList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_bool& _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_bool& _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_bool& _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_bool& _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_formalInputParameterList _operator_concat (const GGS_formalInputParameterList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mFormalParameterTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalParameterNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mIsUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMFormalParameterTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalParameterNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMIsUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_formalInputParameterList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_actualParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameter : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_actualParameter (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_actualParameter (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_actualParameter (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_actualParameter
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_actualParameter * getPtr (void) const {
    return (cPtr_actualParameter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_actualParameter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_actualParameter * operator () (LOCATION_ARGS) const {
      return (cPtr_actualParameter *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__actualParameter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_outputActualParameter'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outputActualParameter : public GGS_actualParameter {
//--- Default constructor
  public : inline GGS_outputActualParameter (void) : GGS_actualParameter () {}

//--- Pointer assignment constructor
  public : GGS_outputActualParameter (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_outputActualParameter (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_outputActualParameter
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_outputActualParameter constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_outputActualParameter * getPtr (void) const {
    return (cPtr_outputActualParameter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mOutputActualParameterExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_outputActualParameter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_outputActualParameter * operator () (LOCATION_ARGS) const {
      return (cPtr_outputActualParameter *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__outputActualParameter ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_outputInputActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_outputInputActualParameter : public GGS_actualParameter {
//--- Default constructor
  public : inline GGS_outputInputActualParameter (void) : GGS_actualParameter () {}

//--- Pointer assignment constructor
  public : GGS_outputInputActualParameter (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_outputInputActualParameter (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_outputInputActualParameter
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_outputInputActualParameter constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_outputInputActualParameter * getPtr (void) const {
    return (cPtr_outputInputActualParameter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mOutputInputActualParameterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_outputInputActualParameter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_outputInputActualParameter * operator () (LOCATION_ARGS) const {
      return (cPtr_outputInputActualParameter *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__outputInputActualParameter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_inputActualParameter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_inputActualParameter : public GGS_actualParameter {
//--- Default constructor
  public : inline GGS_inputActualParameter (void) : GGS_actualParameter () {}

//--- Pointer assignment constructor
  public : GGS_inputActualParameter (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_inputActualParameter (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_inputActualParameter
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_inputActualParameter constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_inputActualParameter * getPtr (void) const {
    return (cPtr_inputActualParameter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mInputActualParameterName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_inputActualParameter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_inputActualParameter * operator () (LOCATION_ARGS) const {
      return (cPtr_inputActualParameter *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__inputActualParameter ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_inputJokerActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_inputJokerActualParameter : public GGS_actualParameter {
//--- Default constructor
  public : inline GGS_inputJokerActualParameter (void) : GGS_actualParameter () {}

//--- Pointer assignment constructor
  public : GGS_inputJokerActualParameter (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_inputJokerActualParameter (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_inputJokerActualParameter
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_inputJokerActualParameter constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_inputJokerActualParameter * getPtr (void) const {
    return (cPtr_inputJokerActualParameter *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_inputJokerActualParameter * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_inputJokerActualParameter * operator () (LOCATION_ARGS) const {
      return (cPtr_inputJokerActualParameter *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__inputJokerActualParameter ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@actualParameterList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualParameterList ;

class GGS_actualParameterList : public AC_galgas_list {
  public : typedef elementOf_GGS_actualParameterList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_actualParameterList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_actualParameterList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_actualParameterList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_actualParameterList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_actualParameterList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_actualParameterList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_actualParameter & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_actualParameter & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_actualParameter & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_actualParameter & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_actualParameter & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_actualParameterList _operator_concat (const GGS_actualParameterList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_actualParameter 
  reader_mActualParameterAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMActualParameterAtIndex (C_Compiler & inLexique,
                              const GGS_actualParameter  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_actualParameterList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@actualInputParameterList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualInputParameterList ;

class GGS_actualInputParameterList : public AC_galgas_list {
  public : typedef elementOf_GGS_actualInputParameterList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_actualInputParameterList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_actualInputParameterList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_actualInputParameterList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_actualInputParameterList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_actualInputParameterList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_actualInputParameterList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_actualInputParameterList _operator_concat (const GGS_actualInputParameterList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mActualParameterTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mActualParameterNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMActualParameterTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMActualParameterNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_actualInputParameterList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@formalParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_formalParameterList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_formalArgumentPassingMode mFormalParameterPassingMode ;
  public : GGS_lstring  mFormalParameterTypeName ;
  public : GGS_lstring  mFormalParameterName ;
  public : GGS_bool mIsUnused ;
//--- Constructor
  public : elementOf_GGS_formalParameterList (const GGS_formalArgumentPassingMode& ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_formalParameterList * nextObject (void) const { return (elementOf_GGS_formalParameterList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_formalParameterList * previousObject (void) const { return (elementOf_GGS_formalParameterList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_formalParameterList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@formalInputParameterList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_formalInputParameterList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mFormalParameterTypeName ;
  public : GGS_lstring  mFormalParameterName ;
  public : GGS_bool mIsUnused ;
//--- Constructor
  public : elementOf_GGS_formalInputParameterList (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_formalInputParameterList * nextObject (void) const { return (elementOf_GGS_formalInputParameterList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_formalInputParameterList * previousObject (void) const { return (elementOf_GGS_formalInputParameterList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_formalInputParameterList ;
} ;

//---------------------------------------------------------------------------*

#include "include_actualParameter.h"

//---------------------------------------------------------------------------*

#include "include_outputActualParameter.h"

//---------------------------------------------------------------------------*

#include "include_outputInputActualParameter.h"

//---------------------------------------------------------------------------*

#include "include_inputActualParameter.h"

//---------------------------------------------------------------------------*

#include "include_inputJokerActualParameter.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@actualParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualParameterList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_actualParameter  mActualParameter ;
//--- Constructor
  public : elementOf_GGS_actualParameterList (const GGS_actualParameter & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_actualParameterList * nextObject (void) const { return (elementOf_GGS_actualParameterList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_actualParameterList * previousObject (void) const { return (elementOf_GGS_actualParameterList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_actualParameterList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@actualInputParameterList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_actualInputParameterList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mActualParameterTypeName ;
  public : GGS_lstring  mActualParameterName ;
//--- Constructor
  public : elementOf_GGS_actualInputParameterList (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_actualInputParameterList * nextObject (void) const { return (elementOf_GGS_actualInputParameterList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_actualInputParameterList * previousObject (void) const { return (elementOf_GGS_actualInputParameterList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_actualInputParameterList ;
} ;

//---------------------------------------------------------------------------*

#endif
