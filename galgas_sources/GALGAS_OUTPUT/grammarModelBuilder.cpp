//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'grammarModelBuilder.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 10th, 2008, at 20h31'5"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammarModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarModelBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'grammar_component_start_symbol'     *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_grammar_component_start_symbol_grammarModelBuilder_47_4_ (galgas_scanner & _inLexique,
                                GGS_grammarComponentRoot  &var_cas_outGrammarComponentRoot) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_mGrammarName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mGrammarName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_mGrammarClass ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mGrammarClass) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammarModelBuilder_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_grammarModelBuilder_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_metamodel) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
              } break ;
            case 6 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  GGS_lstring  var_cas_mStartSymbol ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mStartSymbol) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_lstring  var_cas_labelName ;
  var_cas_labelName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_grammarLabelList  var_cas_mLabelList ;
  var_cas_mLabelList = GGS_grammarLabelList ::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        nt_grammar_start_symbol_label_ (_inLexique, var_cas_labelName, var_cas_mLabelList) ;
      switch (select_repeat_grammarModelBuilder_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_labelName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_outGrammarComponentRoot = GGS_grammarComponentRoot ::constructor_new (_inLexique, var_cas_mGrammarName, var_cas_mGrammarClass, var_cas_mStartSymbol, var_cas_mLabelList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'grammar_start_symbol_label'       *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_grammar_start_symbol_label_grammarModelBuilder_103_4_ (galgas_scanner & _inLexique,
                                const GGS_lstring  var_cas_inLabelName,
                                GGS_grammarLabelList  &var_cas_ioLabelList) {
  GGS_stringset  var_cas_argumentNameSet ;
  var_cas_argumentNameSet = GGS_stringset ::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_startSymbolLabelFormalParameterList  var_cas_mFormalParameterList ;
  var_cas_mFormalParameterList = GGS_startSymbolLabelFormalParameterList ::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_grammarModelBuilder_3 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_argumentName ;
          nt_label_formal_parameter_ (_inLexique, var_cas_argumentName, var_cas_mFormalParameterList) ;
          if ((var_cas_argumentNameSet.reader_hasKey (_inLexique, var_cas_argumentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (113)) COMMA_SOURCE_FILE_AT_LINE (113))).isBuiltAndTrue ()) {
            var_cas_argumentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "there is already an argument named '"))._operator_concat (var_cas_argumentName))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
          }
          var_cas_argumentNameSet._addAssign_operation (var_cas_argumentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (116))) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  var_cas_ioLabelList._addAssign_operation (var_cas_inLabelName, var_cas_mFormalParameterList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'label_formal_parameter'         *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_label_formal_parameter_grammarModelBuilder_123_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outArgumentName,
                                GGS_startSymbolLabelFormalParameterList  &var_cas_ioStartSymbolLabelFormalParameterList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F) COMMA_HERE) ;
  GGS_lstring  var_cas_mTypeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  switch (select_grammarModelBuilder_4 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique._assignFromAttribute_tokenString (var_cas_outArgumentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioStartSymbolLabelFormalParameterList._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentIn (_inLexique COMMA_HERE), var_cas_mTypeName, var_cas_outArgumentName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'label_formal_parameter'         *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_label_formal_parameter_grammarModelBuilder_143_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outArgumentName,
                                GGS_startSymbolLabelFormalParameterList  &var_cas_ioStartSymbolLabelFormalParameterList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_3F) COMMA_HERE) ;
  GGS_lstring  var_cas_mTypeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  switch (select_grammarModelBuilder_5 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique._assignFromAttribute_tokenString (var_cas_outArgumentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioStartSymbolLabelFormalParameterList._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE), var_cas_mTypeName, var_cas_outArgumentName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'label_formal_parameter'         *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_label_formal_parameter_grammarModelBuilder_163_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outArgumentName,
                                GGS_startSymbolLabelFormalParameterList  &var_cas_ioStartSymbolLabelFormalParameterList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_21) COMMA_HERE) ;
  GGS_lstring  var_cas_mTypeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  switch (select_grammarModelBuilder_6 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique._assignFromAttribute_tokenString (var_cas_outArgumentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioStartSymbolLabelFormalParameterList._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentInOut (_inLexique COMMA_HERE), var_cas_mTypeName, var_cas_outArgumentName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'label_formal_parameter'         *
//                                                                           *
//---------------------------------------------------------------------------*

void grammarModelBuilder::
grammarModelBuilder::
pr_label_formal_parameter_grammarModelBuilder_183_4_ (galgas_scanner & _inLexique,
                                GGS_lstring  &var_cas_outArgumentName,
                                GGS_startSymbolLabelFormalParameterList  &var_cas_ioStartSymbolLabelFormalParameterList) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
  GGS_lstring  var_cas_mTypeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_mTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  _inLexique._assignFromAttribute_tokenString (var_cas_outArgumentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_ioStartSymbolLabelFormalParameterList._addAssign_operation (GGS_formalArgumentPassingMode::constructor_argumentOut (_inLexique COMMA_HERE), var_cas_mTypeName, var_cas_outArgumentName) ;
}

//---------------------------------------------------------------------------*

