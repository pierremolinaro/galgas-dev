//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'predefinedTypes.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 15th, 2010, at 19h46'12"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "predefinedTypes.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "predefinedTypes.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "appendPredefinedListTypeAST"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendPredefinedListTypeAST (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs,
                                const GGS_string  var_cas_inElementTypeName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendPredefinedListTypeAST at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_attributeInCollectionListAST  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (33)), GGS_lstring ::constructor_new (inLexique, GGS_string ("mValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (34))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_listDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_inElementTypeName).operator_concat (GGS_string ("list")), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (37)), var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (36))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendPredefinedListTypeAST\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "appendClassASTForTypeWithLocation"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendClassASTForTypeWithLocation (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs,
                                const GGS_string  var_cas_inElementTypeName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendClassASTForTypeWithLocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_attributeInCollectionListAST  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (49)), GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (49))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (50)), GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (50))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_classDeclarationAST ::constructor_new (inLexique, GGS_bool (false), GGS_lstring ::constructor_new (inLexique, (GGS_string ("l")).operator_concat (var_cas_inElementTypeName), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (53)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (54)), GGS_lstringlist ::constructor_emptyList (), var_cas_attributeList, GGS_abstractMethodDefinitionListAST ::constructor_emptyList (), GGS_methodDefinitionListAST ::constructor_emptyList (), GGS_lazyAttributeListAST ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (51))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendClassASTForTypeWithLocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "appendPredefinedTypesASTs"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendPredefinedTypesASTs (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendPredefinedTypesASTs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_objectPredefinedTypeAST ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("enumerable"), GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (69))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("class"), GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (70))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("struct"), GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (71))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("enum"), GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (72))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("mapproxy"), GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (73))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("list"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (74))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("sortedlist"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (75))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("map"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (76))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("listmap"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (77))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_boolPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("bool") COMMA_SOURCE_FILE_AT_LINE (79))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_uintPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (80))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_uint64PredefinedTypeAST ::constructor_new (inLexique, GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (81))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_sintPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("sint") COMMA_SOURCE_FILE_AT_LINE (82))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_sint64PredefinedTypeAST ::constructor_new (inLexique, GGS_string ("sint64") COMMA_SOURCE_FILE_AT_LINE (83))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_charPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("char") COMMA_SOURCE_FILE_AT_LINE (84))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_doublePredefinedTypeAST ::constructor_new (inLexique, GGS_string ("double") COMMA_SOURCE_FILE_AT_LINE (85))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_stringPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (86))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_locationPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (87))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_stringsetPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("stringset") COMMA_SOURCE_FILE_AT_LINE (88))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_functionPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("function") COMMA_SOURCE_FILE_AT_LINE (89))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_typePredefinedTypeAST ::constructor_new (inLexique, GGS_string ("type") COMMA_SOURCE_FILE_AT_LINE (90))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_binarysetPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("binaryset") COMMA_SOURCE_FILE_AT_LINE (91))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_dataPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (92))) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("luint") COMMA_SOURCE_FILE_AT_LINE (94)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (95)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (96)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("function") COMMA_SOURCE_FILE_AT_LINE (97)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (98)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("lstring") COMMA_SOURCE_FILE_AT_LINE (99)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("type") COMMA_SOURCE_FILE_AT_LINE (100)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (101)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("bool") COMMA_SOURCE_FILE_AT_LINE (103)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (104)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (105)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("sint") COMMA_SOURCE_FILE_AT_LINE (106)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("sint64") COMMA_SOURCE_FILE_AT_LINE (107)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("char") COMMA_SOURCE_FILE_AT_LINE (108)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("double") COMMA_SOURCE_FILE_AT_LINE (109)) ;
  ::routine_appendClassASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendPredefinedTypesASTs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of wrapper 'predefinedTypeGenerationTemplate'        *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_predefinedTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_predefinedTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_predefinedTypeGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_predefinedTypeGenerationTemplate_0,
  0,
  gWrapperAllDirectories_predefinedTypeGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedAPTypesHeaderPrologue' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedAPTypesHeaderPrologue (C_Compiler & /* inLexique */,
                                const GGS_stringset & var_cas_TYPE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_TYPE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef GALGAS2_PREDEFINED_AP_TYPES\n"
      "#define GALGAS2_PREDEFINED_AP_TYPES\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/GALGASap_object.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "typedef enum {\n"
      "  kIsEqual,\n"
      "  kIsNotEqual,\n"
      "  kIsSupOrEqual,\n"
      "  kIsInfOrEqual,\n"
      "  kIsStrictSup,\n"
      "  kIsStrictInf\n"
      "} enumComparisonKind ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringset::cEnumerator enumerator_504 (var_cas_TYPE_LIST, true) ;
    while (enumerator_504.hasCurrentObject ()) {
      result << "class GALGAS_" ;
      result << enumerator_504._key (HERE).reader_identifierRepresentation () ;
      result << " ;\n"
        "class GALGASap_" ;
      result << enumerator_504._key (HERE).reader_identifierRepresentation () ;
      result << " ;\n" ;
      enumerator_504.next () ;
    }
    result << "class C_Compiler ;\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesHeaderPrologue' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeaderPrologue (C_Compiler & /* inLexique */,
                                const GGS_stringset & var_cas_TYPE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_TYPE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef GALGAS2_PREDEFINED_TYPES\n"
      "#define GALGAS2_PREDEFINED_TYPES\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/GALGAS_list.h\"\n"
      "#include \"galgas2/GALGAS_sortedlist.h\"\n"
      "#include \"galgas2/GALGAS_struct.h\"\n"
      "#include \"galgas2/GALGAS_enum.h\"\n"
      "#include \"galgas2/GALGAS_class.h\"\n"
      "#include \"galgas2/GALGAS_map.h\"\n"
      "#include \"galgas2/GALGAS_listmap.h\"\n"
      "#include \"strings/C_String.h\"\n"
      "#include \"collections/TC_Array.h\"\n"
      "#include \"galgas-utilities/C_LocationInSource.h\"\n"
      "#include \"galgas-utilities/C_galgas_function_descriptor.h\"\n"
      "#include \"bdd/C_BDD.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cCollectionElement_stringset : public cCollectionElement {\n"
      "//--- Attribute\n"
      "  public : GALGASap_string mAttribute_key ;\n"
      "\n"
      "//--- Constructor\n"
      "  public : cCollectionElement_stringset (GALGASap_string & inKey\n"
      "                                         COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Virtual method that checks that all attributes are valid\n"
      "  public : virtual bool isValid (void) const ;\n"
      "\n"
      "//--- Virtual method for comparing elements\n"
      "  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) ;\n"
      "\n"
      "//--- Virtual method that returns a copy of current object\n"
      "  public : virtual cCollectionElement * copy (void) ;\n"
      "\n"
      "//--- Description\n"
      " public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class cCollectionElement_data : public cCollectionElement {\n"
      "//--- Attribute\n"
      "  public : GALGASap_uint mAttribute_data ;\n"
      "\n"
      "//--- Constructor\n"
      "  public : cCollectionElement_data (GALGASap_uint & inData\n"
      "                                    COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Virtual method that checks that all attributes are valid\n"
      "  public : virtual bool isValid (void) const ;\n"
      "\n"
      "//--- Virtual method for comparing elements\n"
      "  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) ;\n"
      "\n"
      "//--- Virtual method that returns a copy of current object\n"
      "  public : virtual cCollectionElement * copy (void) ;\n"
      "\n"
      "//--- Description\n"
      " public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_galgas_function_descriptor ;\n"
      "class C_galgas_type_descriptor ;\n"
      "class C_SourceTextInString ;\n"
      "class cStringsetNode ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "typedef TC_Array <PMUInt8> uint8Array ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "bool isValidAndTrue (GALGASap_bool & inValue) ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_Compiler ;\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesHeaderEpilogue' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeaderEpilogue (C_Compiler & /* inLexique */) {
  C_String result ;
  result << "//---------------------------------------------------------------------------*\n"
    "\n"
    "GALGASap_string readerCall_description (GALGASap_object & inObject\n"
    "                                        COMMA_LOCATION_ARGS) ;\n"
    "\n" ;
  return GGS_string (true, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesImplementation' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesImplementation (C_Compiler & /* inLexique */) {
  C_String result ;
  result << "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas2/predefined-types.h\"\n"
    "#include \"galgas-utilities/C_Compiler.h\"\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "cCollectionElement_stringset::cCollectionElement_stringset (GALGASap_string & inKey\n"
    "                                                            COMMA_LOCATION_ARGS) :\n"
    "cCollectionElement (THERE),\n"
    "mAttribute_key (inKey) {\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "bool cCollectionElement_stringset::isValid (void) const {\n"
    "  return mAttribute_key.isValid () ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "enumComparisonResult cCollectionElement_stringset::compare (const cCollectionElement * inOperand) {\n"
    "  const cCollectionElement_stringset * operand = (const cCollectionElement_stringset *) inOperand ;\n"
    "  macroValidObject (operand, const cCollectionElement_stringset) ;\n"
    "  return GALGAS_string::objectCompare (mAttribute_key, operand->mAttribute_key) ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "cCollectionElement * cCollectionElement_stringset::copy (void) {\n"
    "  cCollectionElement_stringset * p = NULL ;\n"
    "  macroMyNew (p, cCollectionElement_stringset (mAttribute_key COMMA_HERE)) ;\n"
    "  return p ;\n"
    "}\n"
    "\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "void cCollectionElement_stringset::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) {\n"
    "//  mAttribute_key.description (ioString, inIndentation) ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "cCollectionElement_data::cCollectionElement_data (GALGASap_uint & inData\n"
    "                                                  COMMA_LOCATION_ARGS) :\n"
    "cCollectionElement (THERE),\n"
    "mAttribute_data (inData) {\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "bool cCollectionElement_data::isValid (void) const {\n"
    "  return mAttribute_data.isValid () ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "enumComparisonResult cCollectionElement_data::compare (const cCollectionElement * inOperand) {\n"
    "  const cCollectionElement_data * operand = (const cCollectionElement_data *) inOperand ;\n"
    "  macroValidObject (operand, const cCollectionElement_data) ;\n"
    "  return GALGAS_uint::objectCompare (mAttribute_data, operand->mAttribute_data) ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "cCollectionElement * cCollectionElement_data::copy (void) {\n"
    "  cCollectionElement_data * p = NULL ;\n"
    "  macroMyNew (p, cCollectionElement_data (mAttribute_data COMMA_HERE)) ;\n"
    "  return p ;\n"
    "}\n"
    "\n"
    "//---------------------------------------------------------------------------*\n"
    "\n"
    "void cCollectionElement_data::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) {\n"
    "//  mAttribute_key.description (ioString, inIndentation) ;\n"
    "}\n"
    "\n" ;
  return GGS_string (true, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generatePredefinedTypeFiles"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generatePredefinedTypeFiles (C_Compiler & inLexique,
                                const GGS_string  var_cas_inDirectory
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generatePredefinedTypeFiles at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_15829 = (var_cas_inDirectory).operator_isNotEqual (GGS_string ("")) ;
  if (cond_15829.isBuiltAndTrue ()) {
    const GGS_bool cond_12965 = (var_cas_inDirectory.reader_directoryExists ()).operator_not () ;
    if (cond_12965.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_inDirectory)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (274)) ;
    }else if (cond_12965.isBuiltAndFalse ()) {
      GGS_semanticDeclarationListAST  var_cas_predefinedTypeASTlist = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
      ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_predefinedTypeASTlist COMMA_SOURCE_FILE_AT_LINE (277)) ;
      GGS_semanticContext var_cas_semanticContext ;
      ::routine_buildSemanticContext (inLexique,  var_cas_predefinedTypeASTlist,  GGS_location (inLexique),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (280)) ;
      GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
      ::routine_performSemanticAnalysis (inLexique,  var_cas_predefinedTypeASTlist,  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (287)) ;
      GGS_string var_cas_generatedCode = template_filewrapper_predefinedTypeGenerationTemplate_predefinedAPTypesHeaderPrologue (inLexique, var_cas_semanticContext.mTypeMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (294))) ;
      {
        GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_13872 (var_cas_decoratedDeclarationListForGeneration, true) ;
        const GGS_semanticDeclarationListForGeneration::cElement * operand_13872 = NULL ;
        while (((operand_13872 = enumerator_13872.nextObject ()))) {
          macroValidPointer (operand_13872) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendAutoPointerClassDeclaration (operand_13872->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_13872->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (297)))) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificDeclaration (operand_13872->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_13872->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (298)))) ;
        }
      }
      var_cas_generatedCode.dotAssign_operation (template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeaderEpilogue (inLexique)) ;
      const GGS_bool cond_14435 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (302))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_14435.isBuiltAndTrue ()) {
        GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-ap-types.h"), GGS_string ("//"), GGS_string ("\n"
          "\n"), var_cas_generatedCode, GGS_string ("\n"
          "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (303)) ;
      }
      var_cas_generatedCode = template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeaderPrologue (inLexique, var_cas_semanticContext.mTypeMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (315))) ;
      {
        GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_14701 (var_cas_decoratedDeclarationListForGeneration, true) ;
        const GGS_semanticDeclarationListForGeneration::cElement * operand_14701 = NULL ;
        while (((operand_14701 = enumerator_14701.nextObject ()))) {
          macroValidPointer (operand_14701) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_14701->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_14701->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (318)))) ;
        }
      }
      const GGS_bool cond_15068 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (320))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_15068.isBuiltAndTrue ()) {
        GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.h"), GGS_string ("//"), GGS_string ("\n"
          "\n"), var_cas_generatedCode, GGS_string ("\n"
          "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (321)) ;
      }
      var_cas_generatedCode = template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesImplementation (inLexique) ;
      {
        GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_15280 (var_cas_decoratedDeclarationListForGeneration, true) ;
        const GGS_semanticDeclarationListForGeneration::cElement * operand_15280 = NULL ;
        while (((operand_15280 = enumerator_15280.nextObject ()))) {
          macroValidPointer (operand_15280) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendAutoPointerClassImplementation (operand_15280->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_15280->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (334)))) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_15280->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_15280->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (335)))) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_15280->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_15280->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (336)))) ;
        }
      }
      const GGS_bool cond_15805 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (338))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_15805.isBuiltAndTrue ()) {
        GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.cpp"), GGS_string ("//"), GGS_string ("\n"
          "\n"), var_cas_generatedCode, GGS_string ("\n"
          "\n"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (339)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generatePredefinedTypeFiles\n") ;
  #endif
}

//---------------------------------------------------------------------------*

