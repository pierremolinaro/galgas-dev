//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'predefinedTypes.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 7th, 2010, at 10h28'22"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "predefinedTypes.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "predefinedTypes.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "appendPredefinedListTypeAST"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendPredefinedListTypeAST (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs,
                                const GGS_string  var_cas_inElementTypeName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendPredefinedListTypeAST at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_attributeInCollectionListAST  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (33)), GGS_lstring ::constructor_new (inLexique, GGS_string ("mValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (34))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_listDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_inElementTypeName).operator_concat (GGS_string ("list")), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (37)), var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (36))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendPredefinedListTypeAST\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "appendStructASTForTypeWithLocation"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendStructASTForTypeWithLocation (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs,
                                const GGS_string  var_cas_inElementTypeName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendStructASTForTypeWithLocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_attributeInCollectionListAST  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (49)), GGS_lstring ::constructor_new (inLexique, var_cas_inElementTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (49))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (50)), GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (50))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_structDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, (GGS_string ("l")).operator_concat (var_cas_inElementTypeName), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (52)), var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (51))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendStructASTForTypeWithLocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "appendPredefinedTypesASTs"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_appendPredefinedTypesASTs (C_Compiler & inLexique,
                                GGS_semanticDeclarationListAST  & var_cas_ioDeclarationListASTs
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_appendPredefinedTypesASTs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("root"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (62))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("enumerable"), GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (63))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("class"), GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (64))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("struct"), GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (65))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("enum"), GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (66))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("mapproxy"), GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (67))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("list"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (68))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("sortedlist"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (69))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("map"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (70))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_genericTypeTypeAST ::constructor_new (inLexique, GGS_string ("listmap"), GGS_string ("enumerable") COMMA_SOURCE_FILE_AT_LINE (71))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_boolPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("bool") COMMA_SOURCE_FILE_AT_LINE (73))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_uintPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (74))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_uint64PredefinedTypeAST ::constructor_new (inLexique, GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (75))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_sintPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("sint") COMMA_SOURCE_FILE_AT_LINE (76))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_sint64PredefinedTypeAST ::constructor_new (inLexique, GGS_string ("sint64") COMMA_SOURCE_FILE_AT_LINE (77))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_charPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("char") COMMA_SOURCE_FILE_AT_LINE (78))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_doublePredefinedTypeAST ::constructor_new (inLexique, GGS_string ("double") COMMA_SOURCE_FILE_AT_LINE (79))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_stringPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (80))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_locationPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("location") COMMA_SOURCE_FILE_AT_LINE (81))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_stringsetPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("stringset") COMMA_SOURCE_FILE_AT_LINE (82))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_objectPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (83))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_functionPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("function") COMMA_SOURCE_FILE_AT_LINE (84))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_typePredefinedTypeAST ::constructor_new (inLexique, GGS_string ("type") COMMA_SOURCE_FILE_AT_LINE (85))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_binarysetPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("binaryset") COMMA_SOURCE_FILE_AT_LINE (86))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_dataPredefinedTypeAST ::constructor_new (inLexique, GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (87))) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("luint") COMMA_SOURCE_FILE_AT_LINE (89)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (90)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (91)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("object") COMMA_SOURCE_FILE_AT_LINE (92)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("function") COMMA_SOURCE_FILE_AT_LINE (93)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (94)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("lstring") COMMA_SOURCE_FILE_AT_LINE (95)) ;
  ::routine_appendPredefinedListTypeAST (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("type") COMMA_SOURCE_FILE_AT_LINE (96)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("bool") COMMA_SOURCE_FILE_AT_LINE (98)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint") COMMA_SOURCE_FILE_AT_LINE (99)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("uint64") COMMA_SOURCE_FILE_AT_LINE (100)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("sint") COMMA_SOURCE_FILE_AT_LINE (101)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("sint64") COMMA_SOURCE_FILE_AT_LINE (102)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("char") COMMA_SOURCE_FILE_AT_LINE (103)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("double") COMMA_SOURCE_FILE_AT_LINE (104)) ;
  ::routine_appendStructASTForTypeWithLocation (inLexique,  var_cas_ioDeclarationListASTs,  GGS_string ("string") COMMA_SOURCE_FILE_AT_LINE (105)) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_mapProxyDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("zeMap-Proxy"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (109)), GGS_lstring ::constructor_new (inLexique, GGS_string ("ze-Map"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (108))) ;
  GGS_attributeInCollectionListAST  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (115)), GGS_lstring ::constructor_new (inLexique, GGS_string ("toto"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (115))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (116)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tutu"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (116))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (117)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tata"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (117))) ;
  GGS_insertMethodListAST  var_cas_insertMethodList = GGS_insertMethodListAST ::constructor_emptyList () ;
  var_cas_insertMethodList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("insertKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (120)), GGS_lstring ::constructor_new (inLexique, GGS_string ("redefinition of %K (first definition was in %L) et %% !"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (121)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (122)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (123))) ;
  GGS_mapSearchMethodListAST  var_cas_searchMethodList = GGS_mapSearchMethodListAST ::constructor_emptyList () ;
  var_cas_searchMethodList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("searchKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (127)), GGS_lstring ::constructor_new (inLexique, GGS_string ("%K unknown et %% !"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (128)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (129))) ;
  GGS_mapRemoveMethodListAST  var_cas_removeMethodList = GGS_mapRemoveMethodListAST ::constructor_emptyList () ;
  var_cas_removeMethodList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("removeKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (133)), GGS_lstring ::constructor_new (inLexique, GGS_string ("%K unknown et %% !"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (134))) ;
  GGS_insertOrReplaceDeclarationListAST  var_cas_insertOrReplaceDeclarationListAST = GGS_insertOrReplaceDeclarationListAST ::constructor_listWithValue (GGS_location (inLexique)) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_mapDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("ze-Map"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (138)), var_cas_attributeList, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_removeMethodList, var_cas_insertOrReplaceDeclarationListAST, GGS_mapStateList ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (137))) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_listmapDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("ze-List-Map"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (149)), GGS_lstring ::constructor_new (inLexique, GGS_string ("uintlist"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (150)) COMMA_SOURCE_FILE_AT_LINE (148))) ;
  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (155)), GGS_lstring ::constructor_new (inLexique, GGS_string ("toto"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (155))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (156)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tutu"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (156))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (157)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tata"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (157))) ;
  GGS_sortedListSortDescriptorListAST  var_cas_sortAttributeList = GGS_sortedListSortDescriptorListAST ::constructor_emptyList () ;
  var_cas_sortAttributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("toto"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (159)), GGS_bool (true)) ;
  var_cas_sortAttributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("tata"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (160)), GGS_bool (false)) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_sortedListDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("Ze-Sorted-List"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (162)), var_cas_attributeList, var_cas_sortAttributeList COMMA_SOURCE_FILE_AT_LINE (161))) ;
  GGS_lstringlist  var_cas_constantList = GGS_lstringlist ::constructor_emptyList () ;
  var_cas_constantList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_First"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (169))) ;
  var_cas_constantList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_Second"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (170))) ;
  var_cas_constantList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_Third"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (171))) ;
  GGS_enumMessageListAST  var_cas_enumMessageListAST = GGS_enumMessageListAST ::constructor_emptyList () ;
  GGS_enumMessageAssociationListAST  var_cas_enumMessageAssociationListAST = GGS_enumMessageAssociationListAST ::constructor_emptyList () ;
  var_cas_enumMessageAssociationListAST.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_Third"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (174)), GGS_lstring ::constructor_new (inLexique, GGS_string ("third"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (174))) ;
  var_cas_enumMessageAssociationListAST.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_First"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175)), GGS_lstring ::constructor_new (inLexique, GGS_string ("first"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175))) ;
  var_cas_enumMessageAssociationListAST.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_Second"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176)), GGS_lstring ::constructor_new (inLexique, GGS_string ("second"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176))) ;
  var_cas_enumMessageListAST.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("ze_message"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (177)), var_cas_enumMessageAssociationListAST) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_enumDeclarationAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("Ze-enumeration"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (179)), var_cas_constantList, var_cas_enumMessageListAST COMMA_SOURCE_FILE_AT_LINE (178))) ;
  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (186)), GGS_lstring ::constructor_new (inLexique, GGS_string ("toto"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (186))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tutu"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (188)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tata"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (188))) ;
  GGS_abstractMethodDefinitionListAST  var_cas_abstractMethodDefinitionListAST = GGS_abstractMethodDefinitionListAST ::constructor_emptyList () ;
  GGS_formalParameterListAST  var_cas_firstMethodFormalParameters = GGS_formalParameterListAST ::constructor_emptyList () ;
  var_cas_firstMethodFormalParameters.addAssign_operation (GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (192)), GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (193)), GGS_lstring ::constructor_new (inLexique, GGS_string ("parameter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (194)), GGS_bool (true)) ;
  var_cas_abstractMethodDefinitionListAST.addAssign_operation (GGS_bool (false), GGS_lstring ::constructor_new (inLexique, GGS_string ("first_method"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (199)), var_cas_firstMethodFormalParameters) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_classDeclarationAST ::constructor_new (inLexique, GGS_bool (true), GGS_lstring ::constructor_new (inLexique, GGS_string ("Ze-abstract-class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (204)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (205)), GGS_lstringlist ::constructor_emptyList (), var_cas_attributeList, var_cas_abstractMethodDefinitionListAST, GGS_methodDefinitionListAST ::constructor_emptyList (), GGS_lazyAttributeListAST ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (202))) ;
  var_cas_attributeList = GGS_attributeInCollectionListAST ::constructor_emptyList () ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (214)), GGS_lstring ::constructor_new (inLexique, GGS_string ("toto2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (214))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (215)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tutu2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (215))) ;
  var_cas_attributeList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (216)), GGS_lstring ::constructor_new (inLexique, GGS_string ("tata2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (216))) ;
  GGS_methodDefinitionListAST  var_cas_concreteMethodDefinitionListAST = GGS_methodDefinitionListAST ::constructor_emptyList () ;
  var_cas_concreteMethodDefinitionListAST.addAssign_operation (GGS_bool (true), GGS_lstring ::constructor_new (inLexique, GGS_string ("first_method"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (220)), var_cas_firstMethodFormalParameters, GGS_semanticInstructionListAST ::constructor_emptyList (), GGS_location (inLexique)) ;
  var_cas_ioDeclarationListASTs.addAssign_operation (GGS_classDeclarationAST ::constructor_new (inLexique, GGS_bool (false), GGS_lstring ::constructor_new (inLexique, GGS_string ("Ze-class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (227)), GGS_lstring ::constructor_new (inLexique, GGS_string ("Ze-abstract-class"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (228)), GGS_lstringlist ::constructor_emptyList (), var_cas_attributeList, GGS_abstractMethodDefinitionListAST ::constructor_emptyList (), var_cas_concreteMethodDefinitionListAST, GGS_lazyAttributeListAST ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (225))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_appendPredefinedTypesASTs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of wrapper 'predefinedTypeGenerationTemplate'        *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_predefinedTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_predefinedTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_predefinedTypeGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_predefinedTypeGenerationTemplate_0,
  0,
  gWrapperAllDirectories_predefinedTypeGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesHeader' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeader (C_Compiler & /* inLexique */,
                                const GGS_stringset & var_cas_TYPE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_TYPE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "\n"
      "#ifndef GALGAS2_PREDEFINED_TYPES\n"
      "#define GALGAS2_PREDEFINED_TYPES\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/GALGAS_list.h\"\n"
      "#include \"galgas2/GALGAS_sortedlist.h\"\n"
      "#include \"galgas2/GALGAS_struct.h\"\n"
      "#include \"galgas2/GALGAS_enum.h\"\n"
      "#include \"galgas2/GALGAS_class.h\"\n"
      "#include \"galgas2/GALGAS_map.h\"\n"
      "#include \"galgas2/GALGAS_listmap.h\"\n"
      "#include \"strings/C_String.h\"\n"
      "#include \"collections/TC_Array.h\"\n"
      "#include \"galgas-utilities/C_LocationInSource.h\"\n"
      "#include \"bdd/C_BDD.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class C_galgas_function_descriptor ;\n"
      "class C_galgas_type_descriptor ;\n"
      "class C_SourceTextInString ;\n"
      "class cStringsetNode ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "typedef TC_Array <PMUInt8> uint8Array ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_stringset::cEnumerator enumerator_952 (var_cas_TYPE_LIST, true) ;
    while (enumerator_952.hasCurrentObject ()) {
      result << "class GALGAS_" ;
      result << enumerator_952._key (HERE).reader_identifierRepresentation () ;
      result << " ;\n" ;
      enumerator_952.next () ;
    }
    result << "class C_Compiler ;\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'predefinedTypesImplementation' template of 'predefinedTypeGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesImplementation (C_Compiler & /* inLexique */) {
  C_String result ;
  result << "//---------------------------------------------------------------------------*\n"
    "\n"
    "#include \"galgas2/predefined-types.h\"\n"
    "#include \"galgas-utilities/C_Compiler.h\"\n"
    "\n" ;
  return GGS_string (true, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generatePredefinedTypeFiles"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generatePredefinedTypeFiles (C_Compiler & inLexique,
                                const GGS_string  var_cas_inDirectory
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generatePredefinedTypeFiles at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_14344 = (var_cas_inDirectory).operator_isNotEqual (GGS_string ("")) ;
  if (cond_14344.isBuiltAndTrue ()) {
    const GGS_bool cond_12457 = (var_cas_inDirectory.reader_directoryExists ()).operator_not () ;
    if (cond_12457.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_inDirectory)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (264)) ;
    }else if (cond_12457.isBuiltAndFalse ()) {
      GGS_semanticDeclarationListAST  var_cas_predefinedTypeASTlist = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
      ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_predefinedTypeASTlist COMMA_SOURCE_FILE_AT_LINE (267)) ;
      GGS_semanticContext var_cas_semanticContext ;
      ::routine_buildSemanticContext (inLexique,  var_cas_predefinedTypeASTlist,  GGS_location (inLexique),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (270)) ;
      GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
      ::routine_performSemanticAnalysis (inLexique,  var_cas_predefinedTypeASTlist,  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (277)) ;
      GGS_string var_cas_generatedCode = template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesHeader (inLexique, var_cas_semanticContext.mTypeMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (284))) ;
      {
        GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_13312 (var_cas_decoratedDeclarationListForGeneration, true) ;
        const GGS_semanticDeclarationListForGeneration::cElement * operand_13312 = NULL ;
        while (((operand_13312 = enumerator_13312.nextObject ()))) {
          macroValidPointer (operand_13312) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_13312->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_13312->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (287)))) ;
        }
      }
      const GGS_bool cond_13679 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_13679.isBuiltAndTrue ()) {
        GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.h"), GGS_string ("//"), GGS_string ("\n"
          "\n"), var_cas_generatedCode, GGS_string ("\n"
          "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
      var_cas_generatedCode = template_filewrapper_predefinedTypeGenerationTemplate_predefinedTypesImplementation (inLexique) ;
      {
        GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_13874 (var_cas_decoratedDeclarationListForGeneration, true) ;
        const GGS_semanticDeclarationListForGeneration::cElement * operand_13874 = NULL ;
        while (((operand_13874 = enumerator_13874.nextObject ()))) {
          macroValidPointer (operand_13874) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_13874->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_13874->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (303)))) ;
          var_cas_generatedCode.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_13874->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_13874->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (304)))) ;
        }
      }
      const GGS_bool cond_14320 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (306))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_14320.isBuiltAndTrue ()) {
        GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, GGS_string ("predefined-types.cpp"), GGS_string ("//"), GGS_string ("\n"
          "\n"), var_cas_generatedCode, GGS_string ("\n"
          "\n"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (307)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generatePredefinedTypeFiles\n") ;
  #endif
}

//---------------------------------------------------------------------------*

