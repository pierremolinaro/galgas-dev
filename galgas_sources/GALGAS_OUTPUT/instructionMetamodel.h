//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'instructionMetamodel.h'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 14th, 2009, at 16h6'36"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef instructionMetamodel_DEFINED
#define instructionMetamodel_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_data.h"
#include "galgas/GGS_type.h"
#include "galgas/GGS_function.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "expressionMetamodel.h"
#include "parameterArgumentMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_syntaxInstruction ;
class cPtr_syntaxInstruction ;
class GGS_semanticInstruction ;
class cPtr_semanticInstruction ;
class GGS_semanticInstructionList ;
class GGS_semanticDeclaration ;
class cPtr_semanticDeclaration ;
class GGS_semanticDeclarationList ;
class GGS_externRoutineDeclaration ;
class cPtr_externRoutineDeclaration ;
class GGS_routinePrototypeDeclaration ;
class cPtr_routinePrototypeDeclaration ;
class GGS_routineDeclaration ;
class cPtr_routineDeclaration ;
class GGS_externFunctionDeclaration ;
class cPtr_externFunctionDeclaration ;
class GGS_functionDeclaration ;
class cPtr_functionDeclaration ;
class GGS_localVariableDeclaration ;
class cPtr_localVariableDeclaration ;
class GGS_localVariableDeclarationWithInitialization ;
class cPtr_localVariableDeclarationWithInitialization ;
class GGS_localVariableDeclarationWithAssignment ;
class cPtr_localVariableDeclarationWithAssignment ;
class GGS_localConstantDeclarationWithSourceExpression ;
class cPtr_localConstantDeclarationWithSourceExpression ;
class GGS_localConstantDeclarationWithConstructorCall ;
class cPtr_localConstantDeclarationWithConstructorCall ;
class GGS_assignmentInstruction ;
class cPtr_assignmentInstruction ;
class GGS_appendInstruction ;
class cPtr_appendInstruction ;
class GGS_sendInstruction ;
class cPtr_sendInstruction ;
class GGS_foreachInstructionEnumeratedObjectElement ;
class cPtr_foreachInstructionEnumeratedObjectElement ;
class GGS_foreachInstructionJoker ;
class cPtr_foreachInstructionJoker ;
class GGS_foreachInstructionEnumeratedConstant ;
class cPtr_foreachInstructionEnumeratedConstant ;
class GGS_foreachInstructionEnumeratedObjectElementList ;
class GGS_foreachInstructionEnumeratedObjectList ;
class GGS_foreachInstruction ;
class cPtr_foreachInstruction ;
class GGS_ifBranchList ;
class GGS_ifInstruction ;
class cPtr_ifInstruction ;
class GGS_methodCallInstruction ;
class cPtr_methodCallInstruction ;
class GGS_modifierCallInstruction ;
class cPtr_modifierCallInstruction ;
class GGS_errorInstruction ;
class cPtr_errorInstruction ;
class GGS_warningInstruction ;
class cPtr_warningInstruction ;
class GGS_routineCallInstruction ;
class cPtr_routineCallInstruction ;
class GGS_matchEntry ;
class cPtr_matchEntry ;
class GGS_matchEntryList ;
class GGS_constantMatchEntry ;
class cPtr_constantMatchEntry ;
class GGS_classMatchEntry ;
class cPtr_classMatchEntry ;
class GGS_matchInstructionBranchList ;
class GGS_matchInstruction ;
class cPtr_matchInstruction ;
class GGS_castInstructionBranchList ;
class GGS_elseOrDefaultForCastInstruction ;
class cPtr_elseOrDefaultForCastInstruction ;
class GGS_elseForCastInstruction ;
class cPtr_elseForCastInstruction ;
class GGS_defaultForCastInstruction ;
class cPtr_defaultForCastInstruction ;
class GGS_castInstruction ;
class cPtr_castInstruction ;
class GGS_addInstruction ;
class cPtr_addInstruction ;
class GGS_removeInstruction ;
class cPtr_removeInstruction ;
class GGS_incrementInstruction ;
class cPtr_incrementInstruction ;
class GGS_decrementInstruction ;
class cPtr_decrementInstruction ;
class GGS_loopInstruction ;
class cPtr_loopInstruction ;
class GGS_messageInstruction ;
class cPtr_messageInstruction ;
class GGS_logInstruction ;
class cPtr_logInstruction ;
class GGS_grammarInstruction ;
class cPtr_grammarInstruction ;
class GGS_withInstruction ;
class cPtr_withInstruction ;
class GGS_switchBranches ;
class GGS_switchInstruction ;
class cPtr_switchInstruction ;
class GGS_typeMethodInstruction ;
class cPtr_typeMethodInstruction ;
class GGS_abstractCategoryMethodList ;
class GGS_abstractCategoryMethodListMap ;
class GGS_categoryMethodList ;
class GGS_categoryMethodListMap ;
class GGS_overridingCategoryMethodList ;
class GGS_overridingCategoryMethodListMap ;
class GGS_abstractCategoryReaderList ;
class GGS_abstractCategoryReaderListMap ;
class GGS_categoryReaderList ;
class GGS_categoryReaderListMap ;
class GGS_overridingCategoryReaderList ;
class GGS_overridingCategoryReaderListMap ;
class GGS_semanticDeclarationStruct ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_syntaxInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_syntaxInstruction ;

//---------------------------------------------------------------------------*

class GGS_syntaxInstruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_syntaxInstruction (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_syntaxInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_syntaxInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_syntaxInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_syntaxInstruction * getPtr (void) const {
    return (cPtr_syntaxInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_syntaxInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_syntaxInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_syntaxInstruction *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__syntaxInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_semanticInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_semanticInstruction ;

//---------------------------------------------------------------------------*

class GGS_semanticInstruction : public GGS_syntaxInstruction {
//--- Default constructor
  public : inline GGS_semanticInstruction (void) :
  GGS_syntaxInstruction () {}

//--- Pointer assignment constructor
  public : GGS_semanticInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_semanticInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_semanticInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_semanticInstruction * getPtr (void) const {
    return (cPtr_semanticInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_semanticInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_semanticInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_semanticInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__semanticInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@semanticInstructionList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticInstructionList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_semanticInstructionList ;

//---------------------------------------------------------------------------*

class GGS_semanticInstructionList : public AC_galgas_list {
  public : typedef elementOf_GGS_semanticInstructionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_semanticInstructionList constructor_emptyList (void) ;
  public : static GGS_semanticInstructionList constructor_listWithValue (const GGS_semanticInstruction & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_semanticInstructionList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_semanticInstructionList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_semanticInstructionList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_semanticInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_semanticInstruction & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_semanticInstruction & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_semanticInstruction & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_semanticInstruction & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_semanticInstructionList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_semanticInstruction & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_semanticInstructionList operator_concat (const GGS_semanticInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_semanticInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_semanticInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_semanticInstruction & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_semanticInstruction 
  reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_semanticInstructionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_semanticInstruction   & _mInstruction (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_semanticDeclaration'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_semanticDeclaration ;

//---------------------------------------------------------------------------*

class GGS_semanticDeclaration : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_semanticDeclaration (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_semanticDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_semanticDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_semanticDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_semanticDeclaration * getPtr (void) const {
    return (cPtr_semanticDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_semanticDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_semanticDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_semanticDeclaration *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__semanticDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@semanticDeclarationList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticDeclarationList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_semanticDeclarationList ;

//---------------------------------------------------------------------------*

class GGS_semanticDeclarationList : public AC_galgas_list {
  public : typedef elementOf_GGS_semanticDeclarationList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_semanticDeclarationList constructor_emptyList (void) ;
  public : static GGS_semanticDeclarationList constructor_listWithValue (const GGS_semanticDeclaration & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_semanticDeclarationList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_semanticDeclarationList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_semanticDeclarationList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_semanticDeclarationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_semanticDeclaration & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_semanticDeclaration & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_semanticDeclaration & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_semanticDeclaration & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_semanticDeclarationList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_semanticDeclaration & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_semanticDeclarationList operator_concat (const GGS_semanticDeclarationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_semanticDeclaration & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_semanticDeclaration & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_semanticDeclaration & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_semanticDeclaration 
  reader_mSemanticDeclarationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSemanticDeclarationAtIndex (C_Compiler & inLexique,
                              const GGS_semanticDeclaration  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_semanticDeclarationList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_semanticDeclaration   & _mSemanticDeclaration (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_externRoutineDeclaration'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_externRoutineDeclaration ;

//---------------------------------------------------------------------------*

class GGS_externRoutineDeclaration : public GGS_semanticDeclaration {
//--- Default constructor
  public : inline GGS_externRoutineDeclaration (void) :
  GGS_semanticDeclaration () {}

//--- Pointer assignment constructor
  public : GGS_externRoutineDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_externRoutineDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_externRoutineDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_externRoutineDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_externRoutineDeclaration * getPtr (void) const {
    return (cPtr_externRoutineDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRoutineName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList  reader_mFormalParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_externRoutineDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_externRoutineDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_externRoutineDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__externRoutineDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_routinePrototypeDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_routinePrototypeDeclaration ;

//---------------------------------------------------------------------------*

class GGS_routinePrototypeDeclaration : public GGS_externRoutineDeclaration {
//--- Default constructor
  public : inline GGS_routinePrototypeDeclaration (void) :
  GGS_externRoutineDeclaration () {}

//--- Pointer assignment constructor
  public : GGS_routinePrototypeDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_routinePrototypeDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_routinePrototypeDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_routinePrototypeDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_routinePrototypeDeclaration * getPtr (void) const {
    return (cPtr_routinePrototypeDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_routinePrototypeDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_routinePrototypeDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_routinePrototypeDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__routinePrototypeDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_routineDeclaration'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_routineDeclaration ;

//---------------------------------------------------------------------------*

class GGS_routineDeclaration : public GGS_routinePrototypeDeclaration {
//--- Default constructor
  public : inline GGS_routineDeclaration (void) :
  GGS_routinePrototypeDeclaration () {}

//--- Pointer assignment constructor
  public : GGS_routineDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_routineDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_routineDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_routineDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_routineDeclaration * getPtr (void) const {
    return (cPtr_routineDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticInstructionList  reader_mRoutineInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_routineDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_routineDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_routineDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__routineDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_externFunctionDeclaration'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_externFunctionDeclaration ;

//---------------------------------------------------------------------------*

class GGS_externFunctionDeclaration : public GGS_semanticDeclaration {
//--- Default constructor
  public : inline GGS_externFunctionDeclaration (void) :
  GGS_semanticDeclaration () {}

//--- Pointer assignment constructor
  public : GGS_externFunctionDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_externFunctionDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_externFunctionDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_externFunctionDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_externFunctionDeclaration * getPtr (void) const {
    return (cPtr_externFunctionDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFunctionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList  reader_mFormalParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mResultTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mResultVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_externFunctionDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_externFunctionDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_externFunctionDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__externFunctionDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_functionDeclaration'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_functionDeclaration ;

//---------------------------------------------------------------------------*

class GGS_functionDeclaration : public GGS_externFunctionDeclaration {
//--- Default constructor
  public : inline GGS_functionDeclaration (void) :
  GGS_externFunctionDeclaration () {}

//--- Pointer assignment constructor
  public : GGS_functionDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_functionDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_functionDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_functionDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_functionDeclaration * getPtr (void) const {
    return (cPtr_functionDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticInstructionList  reader_mFunctionInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_functionDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_functionDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_functionDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__functionDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_localVariableDeclaration'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_localVariableDeclaration ;

//---------------------------------------------------------------------------*

class GGS_localVariableDeclaration : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_localVariableDeclaration (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_localVariableDeclaration (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_localVariableDeclaration (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_localVariableDeclaration
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_localVariableDeclaration constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_localVariableDeclaration * getPtr (void) const {
    return (cPtr_localVariableDeclaration *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_localVariableDeclaration * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_localVariableDeclaration * operator () (LOCATION_ARGS) const {
      return (cPtr_localVariableDeclaration *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__localVariableDeclaration ;

//---------------------------------------------------------------------------*
//                                                                           *
//      GALGAS class 'GGS_localVariableDeclarationWithInitialization'        *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_localVariableDeclarationWithInitialization ;

//---------------------------------------------------------------------------*

class GGS_localVariableDeclarationWithInitialization : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_localVariableDeclarationWithInitialization (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_localVariableDeclarationWithInitialization (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_localVariableDeclarationWithInitialization (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_localVariableDeclarationWithInitialization
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_localVariableDeclarationWithInitialization constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_outExpressionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_localVariableDeclarationWithInitialization * getPtr (void) const {
    return (cPtr_localVariableDeclarationWithInitialization *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstructorName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mConstructorArguments (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_localVariableDeclarationWithInitialization * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_localVariableDeclarationWithInitialization * operator () (LOCATION_ARGS) const {
      return (cPtr_localVariableDeclarationWithInitialization *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__localVariableDeclarationWithInitialization ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_localVariableDeclarationWithAssignment'          *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_localVariableDeclarationWithAssignment ;

//---------------------------------------------------------------------------*

class GGS_localVariableDeclarationWithAssignment : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_localVariableDeclarationWithAssignment (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_localVariableDeclarationWithAssignment (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_localVariableDeclarationWithAssignment (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_localVariableDeclarationWithAssignment
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_localVariableDeclarationWithAssignment constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_localVariableDeclarationWithAssignment * getPtr (void) const {
    return (cPtr_localVariableDeclarationWithAssignment *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_localVariableDeclarationWithAssignment * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_localVariableDeclarationWithAssignment * operator () (LOCATION_ARGS) const {
      return (cPtr_localVariableDeclarationWithAssignment *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__localVariableDeclarationWithAssignment ;

//---------------------------------------------------------------------------*
//                                                                           *
//     GALGAS class 'GGS_localConstantDeclarationWithSourceExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_localConstantDeclarationWithSourceExpression ;

//---------------------------------------------------------------------------*

class GGS_localConstantDeclarationWithSourceExpression : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_localConstantDeclarationWithSourceExpression (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_localConstantDeclarationWithSourceExpression (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_localConstantDeclarationWithSourceExpression (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_localConstantDeclarationWithSourceExpression
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_localConstantDeclarationWithSourceExpression constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_localConstantDeclarationWithSourceExpression * getPtr (void) const {
    return (cPtr_localConstantDeclarationWithSourceExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_localConstantDeclarationWithSourceExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_localConstantDeclarationWithSourceExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_localConstantDeclarationWithSourceExpression *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__localConstantDeclarationWithSourceExpression ;

//---------------------------------------------------------------------------*
//                                                                           *
//      GALGAS class 'GGS_localConstantDeclarationWithConstructorCall'       *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_localConstantDeclarationWithConstructorCall ;

//---------------------------------------------------------------------------*

class GGS_localConstantDeclarationWithConstructorCall : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_localConstantDeclarationWithConstructorCall (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_localConstantDeclarationWithConstructorCall (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_localConstantDeclarationWithConstructorCall (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_localConstantDeclarationWithConstructorCall
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_localConstantDeclarationWithConstructorCall constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_outExpressionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_localConstantDeclarationWithConstructorCall * getPtr (void) const {
    return (cPtr_localConstantDeclarationWithConstructorCall *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstructorName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mConstructorArguments (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_localConstantDeclarationWithConstructorCall * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_localConstantDeclarationWithConstructorCall * operator () (LOCATION_ARGS) const {
      return (cPtr_localConstantDeclarationWithConstructorCall *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__localConstantDeclarationWithConstructorCall ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_assignmentInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_assignmentInstruction ;

//---------------------------------------------------------------------------*

class GGS_assignmentInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_assignmentInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_assignmentInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_assignmentInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_assignmentInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_assignmentInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_assignmentInstruction * getPtr (void) const {
    return (cPtr_assignmentInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mStructAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_assignmentInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_assignmentInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_assignmentInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__assignmentInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_appendInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_appendInstruction ;

//---------------------------------------------------------------------------*

class GGS_appendInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_appendInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_appendInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_appendInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_appendInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_appendInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_appendInstruction * getPtr (void) const {
    return (cPtr_appendInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTargetVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mStructAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_appendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_appendInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_appendInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__appendInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_sendInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_sendInstruction ;

//---------------------------------------------------------------------------*

class GGS_sendInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_sendInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_sendInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sendInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_sendInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sendInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sendInstruction * getPtr (void) const {
    return (cPtr_sendInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sendInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_sendInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sendInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//       GALGAS class 'GGS_foreachInstructionEnumeratedObjectElement'        *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstructionEnumeratedObjectElement ;

//---------------------------------------------------------------------------*

class GGS_foreachInstructionEnumeratedObjectElement : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_foreachInstructionEnumeratedObjectElement (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_foreachInstructionEnumeratedObjectElement (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_foreachInstructionEnumeratedObjectElement (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_foreachInstructionEnumeratedObjectElement
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_foreachInstructionEnumeratedObjectElement * getPtr (void) const {
    return (cPtr_foreachInstructionEnumeratedObjectElement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_foreachInstructionEnumeratedObjectElement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_foreachInstructionEnumeratedObjectElement * operator () (LOCATION_ARGS) const {
      return (cPtr_foreachInstructionEnumeratedObjectElement *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__foreachInstructionEnumeratedObjectElement ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_foreachInstructionJoker'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstructionJoker ;

//---------------------------------------------------------------------------*

class GGS_foreachInstructionJoker : public GGS_foreachInstructionEnumeratedObjectElement {
//--- Default constructor
  public : inline GGS_foreachInstructionJoker (void) :
  GGS_foreachInstructionEnumeratedObjectElement () {}

//--- Pointer assignment constructor
  public : GGS_foreachInstructionJoker (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_foreachInstructionJoker (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_foreachInstructionJoker
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_foreachInstructionJoker constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_foreachInstructionJoker * getPtr (void) const {
    return (cPtr_foreachInstructionJoker *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_foreachInstructionJoker * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_foreachInstructionJoker * operator () (LOCATION_ARGS) const {
      return (cPtr_foreachInstructionJoker *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__foreachInstructionJoker ;

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS class 'GGS_foreachInstructionEnumeratedConstant'           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstructionEnumeratedConstant ;

//---------------------------------------------------------------------------*

class GGS_foreachInstructionEnumeratedConstant : public GGS_foreachInstructionEnumeratedObjectElement {
//--- Default constructor
  public : inline GGS_foreachInstructionEnumeratedConstant (void) :
  GGS_foreachInstructionEnumeratedObjectElement () {}

//--- Pointer assignment constructor
  public : GGS_foreachInstructionEnumeratedConstant (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_foreachInstructionEnumeratedConstant (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_foreachInstructionEnumeratedConstant
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_foreachInstructionEnumeratedConstant constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_foreachInstructionEnumeratedConstant * getPtr (void) const {
    return (cPtr_foreachInstructionEnumeratedConstant *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mConstantName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_foreachInstructionEnumeratedConstant * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_foreachInstructionEnumeratedConstant * operator () (LOCATION_ARGS) const {
      return (cPtr_foreachInstructionEnumeratedConstant *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__foreachInstructionEnumeratedConstant ;

//---------------------------------------------------------------------------*
//                                                                           *
//          list '@foreachInstructionEnumeratedObjectElementList'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachInstructionEnumeratedObjectElementList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstructionEnumeratedObjectElementList ;

//---------------------------------------------------------------------------*

class GGS_foreachInstructionEnumeratedObjectElementList : public AC_galgas_list {
  public : typedef elementOf_GGS_foreachInstructionEnumeratedObjectElementList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_foreachInstructionEnumeratedObjectElementList constructor_emptyList (void) ;
  public : static GGS_foreachInstructionEnumeratedObjectElementList constructor_listWithValue (const GGS_foreachInstructionEnumeratedObjectElement & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_foreachInstructionEnumeratedObjectElementList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_foreachInstructionEnumeratedObjectElementList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_foreachInstructionEnumeratedObjectElementList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_foreachInstructionEnumeratedObjectElementList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_foreachInstructionEnumeratedObjectElement & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_foreachInstructionEnumeratedObjectElement & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_foreachInstructionEnumeratedObjectElement & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_foreachInstructionEnumeratedObjectElement & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_foreachInstructionEnumeratedObjectElementList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_foreachInstructionEnumeratedObjectElement & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_foreachInstructionEnumeratedObjectElementList operator_concat (const GGS_foreachInstructionEnumeratedObjectElementList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_foreachInstructionEnumeratedObjectElement & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_foreachInstructionEnumeratedObjectElement & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_foreachInstructionEnumeratedObjectElement & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_foreachInstructionEnumeratedObjectElement 
  reader_mElementAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMElementAtIndex (C_Compiler & inLexique,
                              const GGS_foreachInstructionEnumeratedObjectElement  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_foreachInstructionEnumeratedObjectElementList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_foreachInstructionEnumeratedObjectElement   & _mElement (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              list '@foreachInstructionEnumeratedObjectList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachInstructionEnumeratedObjectList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstructionEnumeratedObjectList ;

//---------------------------------------------------------------------------*

class GGS_foreachInstructionEnumeratedObjectList : public AC_galgas_list {
  public : typedef elementOf_GGS_foreachInstructionEnumeratedObjectList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_foreachInstructionEnumeratedObjectList constructor_emptyList (void) ;
  public : static GGS_foreachInstructionEnumeratedObjectList constructor_listWithValue (const GGS_bool& argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_lstring & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_foreachInstructionEnumeratedObjectList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_foreachInstructionEnumeratedObjectList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_foreachInstructionEnumeratedObjectList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_foreachInstructionEnumeratedObjectList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_bool& _out_0,
                              GGS_semanticExpression & _out_1,
                              GGS_foreachInstructionEnumeratedObjectElementList & _out_2,
                              GGS_bool& _out_3,
                              GGS_lstring & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_bool& _out_0,
                             GGS_semanticExpression & _out_1,
                             GGS_foreachInstructionEnumeratedObjectElementList & _out_2,
                             GGS_bool& _out_3,
                             GGS_lstring & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_bool& _out_0,
                                GGS_semanticExpression & _out_1,
                                GGS_foreachInstructionEnumeratedObjectElementList & _out_2,
                                GGS_bool& _out_3,
                                GGS_lstring & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_bool& _out_0,
                                 GGS_semanticExpression & _out_1,
                                 GGS_foreachInstructionEnumeratedObjectElementList & _out_2,
                                 GGS_bool& _out_3,
                                 GGS_lstring & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_foreachInstructionEnumeratedObjectList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_bool& argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_lstring & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_foreachInstructionEnumeratedObjectList operator_concat (const GGS_foreachInstructionEnumeratedObjectList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_bool& argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_bool& argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_bool& argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_bool
  reader_mIsAscendingAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression 
  reader_mEnumeratedExpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_foreachInstructionEnumeratedObjectElementList 
  reader_mElementListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mEndsWithEllipsisAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mPrefixAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMIsAscendingAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEnumeratedExpressionAtIndex (C_Compiler & inLexique,
                              const GGS_semanticExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMElementListAtIndex (C_Compiler & inLexique,
                              const GGS_foreachInstructionEnumeratedObjectElementList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMEndsWithEllipsisAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMPrefixAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_foreachInstructionEnumeratedObjectList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_bool  & _mIsAscending (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticExpression   & _mEnumeratedExpression (LOCATION_ARGS) const ;
    public : /* const */ GGS_foreachInstructionEnumeratedObjectElementList   & _mElementList (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mEndsWithEllipsis (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mPrefix (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_foreachInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_foreachInstruction ;

//---------------------------------------------------------------------------*

class GGS_foreachInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_foreachInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_foreachInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_foreachInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_foreachInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_foreachInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_foreachInstructionEnumeratedObjectList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticExpression & argument_3,
                                const GGS_semanticInstructionList & argument_4,
                                const GGS_semanticInstructionList & argument_5,
                                const GGS_semanticInstructionList & argument_6,
                                const GGS_semanticInstructionList & argument_7
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_foreachInstruction * getPtr (void) const {
    return (cPtr_foreachInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_foreachInstructionEnumeratedObjectList  reader_mEnumeratedObjectList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mIndexVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mWhileExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mBeforeInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mBetweenInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mDoInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mAfterInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_foreachInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_foreachInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_foreachInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__foreachInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           list '@ifBranchList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ifBranchList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_ifBranchList ;

//---------------------------------------------------------------------------*

class GGS_ifBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_ifBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ifBranchList constructor_emptyList (void) ;
  public : static GGS_ifBranchList constructor_listWithValue (const GGS_semanticExpression & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ifBranchList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_ifBranchList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ifBranchList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_ifBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_semanticExpression & _out_0,
                              GGS_semanticInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_semanticExpression & _out_0,
                             GGS_semanticInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_semanticExpression & _out_0,
                                GGS_semanticInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_semanticExpression & _out_0,
                                 GGS_semanticInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_ifBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_semanticExpression & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_ifBranchList operator_concat (const GGS_ifBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_semanticExpression & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_semanticExpression & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_semanticExpression 
  reader_mIFexpressionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mIFinstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMIFexpressionAtIndex (C_Compiler & inLexique,
                              const GGS_semanticExpression  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMIFinstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ifBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_semanticExpression   & _mIFexpression (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mIFinstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ifInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_ifInstruction ;

//---------------------------------------------------------------------------*

class GGS_ifInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_ifInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_ifInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ifInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_ifInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ifInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_ifBranchList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ifInstruction * getPtr (void) const {
    return (cPtr_ifInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ifBranchList  reader_mBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ifInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ifInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_ifInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ifInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_methodCallInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_methodCallInstruction ;

//---------------------------------------------------------------------------*

class GGS_methodCallInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_methodCallInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_methodCallInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_methodCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_methodCallInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_methodCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_methodCallInstruction * getPtr (void) const {
    return (cPtr_methodCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_methodCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_methodCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_methodCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__methodCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_modifierCallInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_modifierCallInstruction ;

//---------------------------------------------------------------------------*

class GGS_modifierCallInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_modifierCallInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_modifierCallInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_modifierCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_modifierCallInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_modifierCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_actualParameterList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_modifierCallInstruction * getPtr (void) const {
    return (cPtr_modifierCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mReceiverStructAttributes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mModifierName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_modifierCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_modifierCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_modifierCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__modifierCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_errorInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_errorInstruction ;

//---------------------------------------------------------------------------*

class GGS_errorInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_errorInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_errorInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_errorInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_errorInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_errorInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2,
                                const GGS_lstringlist & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_errorInstruction * getPtr (void) const {
    return (cPtr_errorInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mErrorExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mBuiltVariableList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_errorInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_errorInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_errorInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__errorInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_warningInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_warningInstruction ;

//---------------------------------------------------------------------------*

class GGS_warningInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_warningInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_warningInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_warningInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_warningInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_warningInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_warningInstruction * getPtr (void) const {
    return (cPtr_warningInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mReceiverExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mWarningExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_warningInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_warningInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_warningInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__warningInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_routineCallInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_routineCallInstruction ;

//---------------------------------------------------------------------------*

class GGS_routineCallInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_routineCallInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_routineCallInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_routineCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_routineCallInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_routineCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameterList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_routineCallInstruction * getPtr (void) const {
    return (cPtr_routineCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRoutineName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_routineCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_routineCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_routineCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__routineCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_matchEntry'                        *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_matchEntry ;

//---------------------------------------------------------------------------*

class GGS_matchEntry : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_matchEntry (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_matchEntry (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_matchEntry (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_matchEntry
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_matchEntry * getPtr (void) const {
    return (cPtr_matchEntry *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_matchEntry * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_matchEntry * operator () (LOCATION_ARGS) const {
      return (cPtr_matchEntry *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__matchEntry ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@matchEntryList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_matchEntryList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_matchEntryList ;

//---------------------------------------------------------------------------*

class GGS_matchEntryList : public AC_galgas_list {
  public : typedef elementOf_GGS_matchEntryList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_matchEntryList constructor_emptyList (void) ;
  public : static GGS_matchEntryList constructor_listWithValue (const GGS_matchEntry & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_matchEntryList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_matchEntryList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_matchEntryList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_matchEntryList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_matchEntry & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_matchEntry & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_matchEntry & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_matchEntry & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_matchEntryList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_matchEntry & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_matchEntryList operator_concat (const GGS_matchEntryList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_matchEntry & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_matchEntry & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_matchEntry & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_matchEntry 
  reader_mEntryAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMEntryAtIndex (C_Compiler & inLexique,
                              const GGS_matchEntry  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_matchEntryList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_matchEntry   & _mEntry (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_constantMatchEntry'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_constantMatchEntry ;

//---------------------------------------------------------------------------*

class GGS_constantMatchEntry : public GGS_matchEntry {
//--- Default constructor
  public : inline GGS_constantMatchEntry (void) :
  GGS_matchEntry () {}

//--- Pointer assignment constructor
  public : GGS_constantMatchEntry (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_constantMatchEntry (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_constantMatchEntry
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_constantMatchEntry constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_constantMatchEntry * getPtr (void) const {
    return (cPtr_constantMatchEntry *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mConstantName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_constantMatchEntry * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_constantMatchEntry * operator () (LOCATION_ARGS) const {
      return (cPtr_constantMatchEntry *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__constantMatchEntry ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_classMatchEntry'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_classMatchEntry ;

//---------------------------------------------------------------------------*

class GGS_classMatchEntry : public GGS_matchEntry {
//--- Default constructor
  public : inline GGS_classMatchEntry (void) :
  GGS_matchEntry () {}

//--- Pointer assignment constructor
  public : GGS_classMatchEntry (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_classMatchEntry (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_classMatchEntry
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_classMatchEntry constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_foreachInstructionEnumeratedObjectElementList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_classMatchEntry * getPtr (void) const {
    return (cPtr_classMatchEntry *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mClassName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_foreachInstructionEnumeratedObjectElementList  reader_mElements (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mEndsWithEllipsis (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_classMatchEntry * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_classMatchEntry * operator () (LOCATION_ARGS) const {
      return (cPtr_classMatchEntry *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__classMatchEntry ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@matchInstructionBranchList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_matchInstructionBranchList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_matchInstructionBranchList ;

//---------------------------------------------------------------------------*

class GGS_matchInstructionBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_matchInstructionBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_matchInstructionBranchList constructor_emptyList (void) ;
  public : static GGS_matchInstructionBranchList constructor_listWithValue (const GGS_matchEntryList & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_matchInstructionBranchList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_matchInstructionBranchList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_matchInstructionBranchList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_matchInstructionBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_matchEntryList & _out_0,
                              GGS_semanticInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_matchEntryList & _out_0,
                             GGS_semanticInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_matchEntryList & _out_0,
                                GGS_semanticInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_matchEntryList & _out_0,
                                 GGS_semanticInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_matchInstructionBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_matchEntryList & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_matchInstructionBranchList operator_concat (const GGS_matchInstructionBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_matchEntryList & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_matchEntryList & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_matchEntryList & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_matchEntryList 
  reader_mMatchEntryListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mMatchBranchInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMMatchEntryListAtIndex (C_Compiler & inLexique,
                              const GGS_matchEntryList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMMatchBranchInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_matchInstructionBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_matchEntryList   & _mMatchEntryList (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mMatchBranchInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_matchInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_matchInstruction ;

//---------------------------------------------------------------------------*

class GGS_matchInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_matchInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_matchInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_matchInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_matchInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_matchInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1,
                                const GGS_matchInstructionBranchList & argument_2,
                                const GGS_semanticInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_matchInstruction * getPtr (void) const {
    return (cPtr_matchInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mMatchedVariableNameList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_matchInstructionBranchList  reader_mMatchInstructionBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_matchInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_matchInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_matchInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__matchInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@castInstructionBranchList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_castInstructionBranchList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_castInstructionBranchList ;

//---------------------------------------------------------------------------*

class GGS_castInstructionBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_castInstructionBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_castInstructionBranchList constructor_emptyList (void) ;
  public : static GGS_castInstructionBranchList constructor_listWithValue (const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_castInstructionBranchList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_castInstructionBranchList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_castInstructionBranchList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_castInstructionBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_bool& _out_0,
                              GGS_lstring & _out_1,
                              GGS_lstring & _out_2,
                              GGS_bool& _out_3,
                              GGS_semanticInstructionList & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_bool& _out_0,
                             GGS_lstring & _out_1,
                             GGS_lstring & _out_2,
                             GGS_bool& _out_3,
                             GGS_semanticInstructionList & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_bool& _out_0,
                                GGS_lstring & _out_1,
                                GGS_lstring & _out_2,
                                GGS_bool& _out_3,
                                GGS_semanticInstructionList & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_bool& _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_bool& _out_3,
                                 GGS_semanticInstructionList & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_castInstructionBranchList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_castInstructionBranchList operator_concat (const GGS_castInstructionBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_bool
  reader_mUseKindOfClassAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mConstantVarNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mConstantVarNameIsUnusedAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mCastBranchInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMUseKindOfClassAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMConstantVarNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMConstantVarNameIsUnusedAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMCastBranchInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_castInstructionBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_bool  & _mUseKindOfClass (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mConstantVarName (LOCATION_ARGS) const ;
    public : /* const */ GGS_bool  & _mConstantVarNameIsUnused (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mCastBranchInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_elseOrDefaultForCastInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_elseOrDefaultForCastInstruction ;

//---------------------------------------------------------------------------*

class GGS_elseOrDefaultForCastInstruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_elseOrDefaultForCastInstruction (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_elseOrDefaultForCastInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_elseOrDefaultForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_elseOrDefaultForCastInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_elseOrDefaultForCastInstruction * getPtr (void) const {
    return (cPtr_elseOrDefaultForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_elseOrDefaultForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_elseOrDefaultForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_elseOrDefaultForCastInstruction *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__elseOrDefaultForCastInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_elseForCastInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_elseForCastInstruction ;

//---------------------------------------------------------------------------*

class GGS_elseForCastInstruction : public GGS_elseOrDefaultForCastInstruction {
//--- Default constructor
  public : inline GGS_elseForCastInstruction (void) :
  GGS_elseOrDefaultForCastInstruction () {}

//--- Pointer assignment constructor
  public : GGS_elseForCastInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_elseForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_elseForCastInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_elseForCastInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_semanticInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_elseForCastInstruction * getPtr (void) const {
    return (cPtr_elseForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_elseForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_elseForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_elseForCastInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__elseForCastInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_defaultForCastInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_defaultForCastInstruction ;

//---------------------------------------------------------------------------*

class GGS_defaultForCastInstruction : public GGS_elseOrDefaultForCastInstruction {
//--- Default constructor
  public : inline GGS_defaultForCastInstruction (void) :
  GGS_elseOrDefaultForCastInstruction () {}

//--- Pointer assignment constructor
  public : GGS_defaultForCastInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_defaultForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_defaultForCastInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_defaultForCastInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_defaultForCastInstruction * getPtr (void) const {
    return (cPtr_defaultForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_defaultForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_defaultForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_defaultForCastInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__defaultForCastInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_castInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_castInstruction ;

//---------------------------------------------------------------------------*

class GGS_castInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_castInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_castInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_castInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_castInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_castInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_castInstructionBranchList & argument_2,
                                const GGS_elseOrDefaultForCastInstruction & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_castInstruction * getPtr (void) const {
    return (cPtr_castInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_castInstructionBranchList  reader_mCastInstructionBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_elseOrDefaultForCastInstruction  reader_mElseOrDefault (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_castInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_castInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_castInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__castInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_addInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_addInstruction ;

//---------------------------------------------------------------------------*

class GGS_addInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_addInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_addInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_addInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_addInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_addInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_outExpressionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_addInstruction * getPtr (void) const {
    return (cPtr_addInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mStructAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_outExpressionList  reader_mExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_addInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_addInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_addInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__addInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_removeInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_removeInstruction ;

//---------------------------------------------------------------------------*

class GGS_removeInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_removeInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_removeInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_removeInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_removeInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_removeInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_removeInstruction * getPtr (void) const {
    return (cPtr_removeInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mStructAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_removeInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_removeInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_removeInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__removeInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_incrementInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_incrementInstruction ;

//---------------------------------------------------------------------------*

class GGS_incrementInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_incrementInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_incrementInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_incrementInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_incrementInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_incrementInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_incrementInstruction * getPtr (void) const {
    return (cPtr_incrementInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_incrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_incrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_incrementInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__incrementInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_decrementInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_decrementInstruction ;

//---------------------------------------------------------------------------*

class GGS_decrementInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_decrementInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_decrementInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_decrementInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_decrementInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_decrementInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_decrementInstruction * getPtr (void) const {
    return (cPtr_decrementInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReceiverName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_decrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_decrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_decrementInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__decrementInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_loopInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_loopInstruction ;

//---------------------------------------------------------------------------*

class GGS_loopInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_loopInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_loopInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_loopInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_loopInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_loopInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_semanticInstructionList & argument_2,
                                const GGS_semanticExpression & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_loopInstruction * getPtr (void) const {
    return (cPtr_loopInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mVariantExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mFirstInstructions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mLoopExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mSecondInstructions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_loopInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_loopInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_loopInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__loopInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_messageInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_messageInstruction ;

//---------------------------------------------------------------------------*

class GGS_messageInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_messageInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_messageInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_messageInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_messageInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_messageInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_messageInstruction * getPtr (void) const {
    return (cPtr_messageInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_messageInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_messageInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_messageInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__messageInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_logInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_logInstruction ;

//---------------------------------------------------------------------------*

class GGS_logInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_logInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_logInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_logInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_logInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_logInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstringlist & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_logInstruction * getPtr (void) const {
    return (cPtr_logInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstringlist  reader_mLoggedVariableList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_logInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_logInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_logInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__logInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_grammarInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_grammarInstruction ;

//---------------------------------------------------------------------------*

class GGS_grammarInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_grammarInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_grammarInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_grammarInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_grammarInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_grammarInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticExpression & argument_3,
                                const GGS_bool& argument_4,
                                const GGS_actualParameterList & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_grammarInstruction * getPtr (void) const {
    return (cPtr_grammarInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mGrammarComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLabelName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mSourceExpressionIsFile (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_grammarInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_grammarInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_grammarInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__grammarInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_withInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_withInstruction ;

//---------------------------------------------------------------------------*

class GGS_withInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_withInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_withInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_withInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_withInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_withInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstringlist & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_semanticExpression & argument_5,
                                const GGS_semanticInstructionList & argument_6,
                                const GGS_semanticInstructionList & argument_7
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_withInstruction * getPtr (void) const {
    return (cPtr_withInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mPrefix (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTargetObjectName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mStructAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mSearchMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticExpression  reader_mKeyExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mDoBranchInstructions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList  reader_mElseBranchInstructions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_withInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_withInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_withInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__withInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@switchBranches'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_switchBranches ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_switchBranches ;

//---------------------------------------------------------------------------*

class GGS_switchBranches : public AC_galgas_list {
  public : typedef elementOf_GGS_switchBranches cElement ;

//--- Constructor 'emptyList'
  public : static GGS_switchBranches constructor_emptyList (void) ;
  public : static GGS_switchBranches constructor_listWithValue (const GGS_lstringlist & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_switchBranches & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_switchBranches
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_switchBranches
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_switchBranches * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstringlist & _out_0,
                              GGS_semanticInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstringlist & _out_0,
                             GGS_semanticInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstringlist & _out_0,
                                GGS_semanticInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstringlist & _out_0,
                                 GGS_semanticInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_switchBranches inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstringlist & argument_0,
                                const GGS_semanticInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_switchBranches operator_concat (const GGS_switchBranches & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstringlist & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstringlist & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstringlist & argument_0,
                                const GGS_semanticInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstringlist 
  reader_mSwitchConstantListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mInstructionsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMSwitchConstantListAtIndex (C_Compiler & inLexique,
                              const GGS_lstringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMInstructionsAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_switchBranches & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstringlist   & _mSwitchConstantList (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mInstructions (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_switchInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_switchInstruction ;

//---------------------------------------------------------------------------*

class GGS_switchInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_switchInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_switchInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_switchInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_switchInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_switchInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_semanticExpression & argument_1,
                                const GGS_switchBranches & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_switchInstruction * getPtr (void) const {
    return (cPtr_switchInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_semanticExpression  reader_mSwitchExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_switchBranches  reader_mBranches (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_switchInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_switchInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_switchInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__switchInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeMethodInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_typeMethodInstruction ;

//---------------------------------------------------------------------------*

class GGS_typeMethodInstruction : public GGS_semanticInstruction {
//--- Default constructor
  public : inline GGS_typeMethodInstruction (void) :
  GGS_semanticInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMethodInstruction (const cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMethodInstruction (cPtr__AC_galgas_class & inObject) ;

//--- castFrom class method (implements cast expression)
  public : static GGS_typeMethodInstruction
  castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMethodInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMethodInstruction * getPtr (void) const {
    return (cPtr_typeMethodInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameterList  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMethodInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMethodInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMethodInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__typeMethodInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@abstractCategoryMethodList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_abstractCategoryMethodList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_abstractCategoryMethodList ;

//---------------------------------------------------------------------------*

class GGS_abstractCategoryMethodList : public AC_galgas_list {
  public : typedef elementOf_GGS_abstractCategoryMethodList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_abstractCategoryMethodList constructor_emptyList (void) ;
  public : static GGS_abstractCategoryMethodList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_abstractCategoryMethodList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_abstractCategoryMethodList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_abstractCategoryMethodList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_abstractCategoryMethodList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_abstractCategoryMethodList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_abstractCategoryMethodList operator_concat (const GGS_abstractCategoryMethodList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mAbstractCategoryMethodNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList 
  reader_mAbstractCategoryFormalParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAbstractCategoryMethodNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMAbstractCategoryFormalParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_abstractCategoryMethodList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mAbstractCategoryMethodName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterList   & _mAbstractCategoryFormalParameterList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Map list '@abstractCategoryMethodListMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_abstractCategoryMethodListMap ;

//---------------------------------------------------------------------------*

class GGS_abstractCategoryMethodListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_abstractCategoryMethodList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_abstractCategoryMethodListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_abstractCategoryMethodListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_abstractCategoryMethodListMap operator_concat (const GGS_abstractCategoryMethodListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalParameterList & inAttribute1) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_abstractCategoryMethodList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_abstractCategoryMethodListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_abstractCategoryMethodList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@categoryMethodList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_categoryMethodList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_categoryMethodList ;

//---------------------------------------------------------------------------*

class GGS_categoryMethodList : public AC_galgas_list {
  public : typedef elementOf_GGS_categoryMethodList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_categoryMethodList constructor_emptyList (void) ;
  public : static GGS_categoryMethodList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_categoryMethodList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_categoryMethodList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_categoryMethodList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_categoryMethodList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterList & _out_1,
                              GGS_semanticInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterList & _out_1,
                             GGS_semanticInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterList & _out_1,
                                GGS_semanticInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterList & _out_1,
                                 GGS_semanticInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_categoryMethodList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_categoryMethodList operator_concat (const GGS_categoryMethodList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mCategoryMethodNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList 
  reader_mCategoryFormalParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mRoutineInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMCategoryMethodNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMCategoryFormalParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMRoutineInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_categoryMethodList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mCategoryMethodName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterList   & _mCategoryFormalParameterList (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mRoutineInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map list '@categoryMethodListMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_categoryMethodListMap ;

//---------------------------------------------------------------------------*

class GGS_categoryMethodListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_categoryMethodList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_categoryMethodListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_categoryMethodListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_categoryMethodListMap operator_concat (const GGS_categoryMethodListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalParameterList & inAttribute1,
                        const GGS_semanticInstructionList & inAttribute2) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_categoryMethodList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_categoryMethodListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_categoryMethodList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@overridingCategoryMethodList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_overridingCategoryMethodList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_overridingCategoryMethodList ;

//---------------------------------------------------------------------------*

class GGS_overridingCategoryMethodList : public AC_galgas_list {
  public : typedef elementOf_GGS_overridingCategoryMethodList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_overridingCategoryMethodList constructor_emptyList (void) ;
  public : static GGS_overridingCategoryMethodList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_overridingCategoryMethodList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_overridingCategoryMethodList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_overridingCategoryMethodList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_overridingCategoryMethodList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalParameterList & _out_1,
                              GGS_semanticInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalParameterList & _out_1,
                             GGS_semanticInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalParameterList & _out_1,
                                GGS_semanticInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalParameterList & _out_1,
                                 GGS_semanticInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_overridingCategoryMethodList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_overridingCategoryMethodList operator_concat (const GGS_overridingCategoryMethodList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_semanticInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mOverridingCategoryMethodNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameterList 
  reader_mOverridingCategoryFormalParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mRoutineInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMOverridingCategoryMethodNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMOverridingCategoryFormalParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMRoutineInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_overridingCategoryMethodList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mOverridingCategoryMethodName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalParameterList   & _mOverridingCategoryFormalParameterList (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mRoutineInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Map list '@overridingCategoryMethodListMap'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_overridingCategoryMethodListMap ;

//---------------------------------------------------------------------------*

class GGS_overridingCategoryMethodListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_overridingCategoryMethodList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_overridingCategoryMethodListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_overridingCategoryMethodListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_overridingCategoryMethodListMap operator_concat (const GGS_overridingCategoryMethodListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalParameterList & inAttribute1,
                        const GGS_semanticInstructionList & inAttribute2) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_overridingCategoryMethodList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_overridingCategoryMethodListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_overridingCategoryMethodList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@abstractCategoryReaderList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_abstractCategoryReaderList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_abstractCategoryReaderList ;

//---------------------------------------------------------------------------*

class GGS_abstractCategoryReaderList : public AC_galgas_list {
  public : typedef elementOf_GGS_abstractCategoryReaderList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_abstractCategoryReaderList constructor_emptyList (void) ;
  public : static GGS_abstractCategoryReaderList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_abstractCategoryReaderList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_abstractCategoryReaderList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_abstractCategoryReaderList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_abstractCategoryReaderList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalInputParameterList & _out_1,
                              GGS_lstring & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalInputParameterList & _out_1,
                             GGS_lstring & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalInputParameterList & _out_1,
                                GGS_lstring & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalInputParameterList & _out_1,
                                 GGS_lstring & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_abstractCategoryReaderList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_abstractCategoryReaderList operator_concat (const GGS_abstractCategoryReaderList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mAbstractCategoryReaderNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalInputParameterList 
  reader_mAbstractCategoryFormalInputParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAbstractCategoryReaderNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMAbstractCategoryFormalInputParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalInputParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_abstractCategoryReaderList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mAbstractCategoryReaderName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalInputParameterList   & _mAbstractCategoryFormalInputParameterList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedTypeName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Map list '@abstractCategoryReaderListMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_abstractCategoryReaderListMap ;

//---------------------------------------------------------------------------*

class GGS_abstractCategoryReaderListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_abstractCategoryReaderList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_abstractCategoryReaderListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_abstractCategoryReaderListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_abstractCategoryReaderListMap operator_concat (const GGS_abstractCategoryReaderListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalInputParameterList & inAttribute1,
                        const GGS_lstring & inAttribute2) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_abstractCategoryReaderList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_abstractCategoryReaderListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_abstractCategoryReaderList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@categoryReaderList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_categoryReaderList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_categoryReaderList ;

//---------------------------------------------------------------------------*

class GGS_categoryReaderList : public AC_galgas_list {
  public : typedef elementOf_GGS_categoryReaderList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_categoryReaderList constructor_emptyList (void) ;
  public : static GGS_categoryReaderList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_categoryReaderList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_categoryReaderList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_categoryReaderList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_categoryReaderList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalInputParameterList & _out_1,
                              GGS_lstring & _out_2,
                              GGS_lstring & _out_3,
                              GGS_semanticInstructionList & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalInputParameterList & _out_1,
                             GGS_lstring & _out_2,
                             GGS_lstring & _out_3,
                             GGS_semanticInstructionList & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalInputParameterList & _out_1,
                                GGS_lstring & _out_2,
                                GGS_lstring & _out_3,
                                GGS_semanticInstructionList & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalInputParameterList & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_lstring & _out_3,
                                 GGS_semanticInstructionList & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_categoryReaderList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_categoryReaderList operator_concat (const GGS_categoryReaderList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mCategoryReaderNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalInputParameterList 
  reader_mReaderCategoryFormalInputParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedVariableNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mRoutineInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMCategoryReaderNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReaderCategoryFormalInputParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalInputParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedVariableNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMRoutineInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_categoryReaderList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mCategoryReaderName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalInputParameterList   & _mReaderCategoryFormalInputParameterList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedVariableName (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mRoutineInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map list '@categoryReaderListMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_categoryReaderListMap ;

//---------------------------------------------------------------------------*

class GGS_categoryReaderListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_categoryReaderList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_categoryReaderListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_categoryReaderListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_categoryReaderListMap operator_concat (const GGS_categoryReaderListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalInputParameterList & inAttribute1,
                        const GGS_lstring & inAttribute2,
                        const GGS_lstring & inAttribute3,
                        const GGS_semanticInstructionList & inAttribute4) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_categoryReaderList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_categoryReaderListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_categoryReaderList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@overridingCategoryReaderList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_overridingCategoryReaderList ;

//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_overridingCategoryReaderList ;

//---------------------------------------------------------------------------*

class GGS_overridingCategoryReaderList : public AC_galgas_list {
  public : typedef elementOf_GGS_overridingCategoryReaderList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_overridingCategoryReaderList constructor_emptyList (void) ;
  public : static GGS_overridingCategoryReaderList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_overridingCategoryReaderList & ioList,
                            const PMSInt32 inFirstIndex,
                            const PMSInt32 inCount) const ;

  public : GGS_overridingCategoryReaderList
  reader_subListWithRange (C_Compiler & inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_overridingCategoryReaderList
  reader_subListFromIndex (C_Compiler & inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_overridingCategoryReaderList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & inLexique,
                              GGS_lstring & _out_0,
                              GGS_formalInputParameterList & _out_1,
                              GGS_lstring & _out_2,
                              GGS_lstring & _out_3,
                              GGS_semanticInstructionList & _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & inLexique,
                             GGS_lstring & _out_0,
                             GGS_formalInputParameterList & _out_1,
                             GGS_lstring & _out_2,
                             GGS_lstring & _out_3,
                             GGS_semanticInstructionList & _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & inLexique,
                                GGS_lstring & _out_0,
                                GGS_formalInputParameterList & _out_1,
                                GGS_lstring & _out_2,
                                GGS_lstring & _out_3,
                                GGS_semanticInstructionList & _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_formalInputParameterList & _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_lstring & _out_3,
                                 GGS_semanticInstructionList & _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_overridingCategoryReaderList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_overridingCategoryReaderList operator_concat (const GGS_overridingCategoryReaderList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

  protected : void internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalInputParameterList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_semanticInstructionList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mOverridingCategoryReaderNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalInputParameterList 
  reader_mOverridingReaderFormalInputParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mReturnedVariableNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructionList 
  reader_mRoutineInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMOverridingCategoryReaderNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMOverridingReaderFormalInputParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_formalInputParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMReturnedVariableNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMRoutineInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_semanticInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_overridingCategoryReaderList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mOverridingCategoryReaderName (LOCATION_ARGS) const ;
    public : /* const */ GGS_formalInputParameterList   & _mOverridingReaderFormalInputParameterList (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedTypeName (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mReturnedVariableName (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticInstructionList   & _mRoutineInstructionList (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Map list '@overridingCategoryReaderListMap'                 *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_overridingCategoryReaderListMap ;

//---------------------------------------------------------------------------*

class GGS_overridingCategoryReaderListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_overridingCategoryReaderList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    performDescription (const PMSInt32 inIndentation) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_overridingCategoryReaderListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_overridingCategoryReaderListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_overridingCategoryReaderListMap operator_concat (const GGS_overridingCategoryReaderListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  addAssign_operation (const GGS_string & inKey,
                        const GGS_lstring & inAttribute0,
                        const GGS_formalInputParameterList & inAttribute1,
                        const GGS_lstring & inAttribute2,
                        const GGS_lstring & inAttribute3,
                        const GGS_semanticInstructionList & inAttribute4) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_overridingCategoryReaderList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_overridingCategoryReaderListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_overridingCategoryReaderList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_syntaxInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_syntaxInstruction : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_syntaxInstruction (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_syntaxInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_location  mStartLocation ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_semanticInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_semanticInstruction : public cPtr_syntaxInstruction {
  private : typedef cPtr_syntaxInstruction inherited ;
//--- Constructor
  public : cPtr_semanticInstruction (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_semanticInstruction (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@semanticInstructionList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticInstructionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_semanticInstruction  mInstruction ;
//--- Constructor
  public : elementOf_GGS_semanticInstructionList (const GGS_semanticInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_semanticInstructionList * nextObject (void) const { return (elementOf_GGS_semanticInstructionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_semanticInstructionList * previousObject (void) const { return (elementOf_GGS_semanticInstructionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_semanticInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_semanticDeclaration'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_semanticDeclaration : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_semanticDeclaration (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_semanticDeclaration (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@semanticDeclarationList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_semanticDeclarationList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_semanticDeclaration  mSemanticDeclaration ;
//--- Constructor
  public : elementOf_GGS_semanticDeclarationList (const GGS_semanticDeclaration & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_semanticDeclarationList * nextObject (void) const { return (elementOf_GGS_semanticDeclarationList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_semanticDeclarationList * previousObject (void) const { return (elementOf_GGS_semanticDeclarationList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_semanticDeclarationList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_externRoutineDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_externRoutineDeclaration : public cPtr_semanticDeclaration {
  private : typedef cPtr_semanticDeclaration inherited ;
//--- Constructor
  public : cPtr_externRoutineDeclaration (const GGS_lstring & ,
                                const GGS_formalParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_externRoutineDeclaration (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_formalParameterList  mFormalParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            abstract class 'cPtr_routinePrototypeDeclaration'              *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_routinePrototypeDeclaration : public cPtr_externRoutineDeclaration {
  private : typedef cPtr_externRoutineDeclaration inherited ;
//--- Constructor
  public : cPtr_routinePrototypeDeclaration (const GGS_lstring & ,
                                const GGS_formalParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_routinePrototypeDeclaration (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_routineDeclaration'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_routineDeclaration : public cPtr_routinePrototypeDeclaration {
  private : typedef cPtr_routinePrototypeDeclaration inherited ;
//--- Constructor
  public : cPtr_routineDeclaration (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_routineDeclaration (void) {}
  #endif

//--- Attributes
  public : GGS_semanticInstructionList  mRoutineInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_externFunctionDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_externFunctionDeclaration : public cPtr_semanticDeclaration {
  private : typedef cPtr_semanticDeclaration inherited ;
//--- Constructor
  public : cPtr_externFunctionDeclaration (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_externFunctionDeclaration (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mFunctionName ;
  public : GGS_formalParameterList  mFormalParameterList ;
  public : GGS_lstring  mResultTypeName ;
  public : GGS_lstring  mResultVariableName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_functionDeclaration'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_functionDeclaration : public cPtr_externFunctionDeclaration {
  private : typedef cPtr_externFunctionDeclaration inherited ;
//--- Constructor
  public : cPtr_functionDeclaration (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_functionDeclaration (void) {}
  #endif

//--- Attributes
  public : GGS_semanticInstructionList  mFunctionInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_localVariableDeclaration'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_localVariableDeclaration : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_localVariableDeclaration (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_localVariableDeclaration (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mVariableName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     abstract class 'cPtr_localVariableDeclarationWithInitialization'      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_localVariableDeclarationWithInitialization : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_localVariableDeclarationWithInitialization (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_localVariableDeclarationWithInitialization (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mVariableName ;
  public : GGS_lstring  mConstructorName ;
  public : GGS_outExpressionList  mConstructorArguments ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       abstract class 'cPtr_localVariableDeclarationWithAssignment'        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_localVariableDeclarationWithAssignment : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_localVariableDeclarationWithAssignment (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_localVariableDeclarationWithAssignment (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mVariableName ;
  public : GGS_semanticExpression  mSourceExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    abstract class 'cPtr_localConstantDeclarationWithSourceExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_localConstantDeclarationWithSourceExpression : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_localConstantDeclarationWithSourceExpression (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_localConstantDeclarationWithSourceExpression (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mVariableName ;
  public : GGS_semanticExpression  mSourceExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    abstract class 'cPtr_localConstantDeclarationWithConstructorCall'      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_localConstantDeclarationWithConstructorCall : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_localConstantDeclarationWithConstructorCall (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_localConstantDeclarationWithConstructorCall (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mVariableName ;
  public : GGS_lstring  mConstructorName ;
  public : GGS_outExpressionList  mConstructorArguments ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_assignmentInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_assignmentInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_assignmentInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_assignmentInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTargetVariableName ;
  public : GGS_lstringlist  mStructAttributeList ;
  public : GGS_semanticExpression  mSourceExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_appendInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_appendInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_appendInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_appendInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTargetVariableName ;
  public : GGS_lstringlist  mStructAttributeList ;
  public : GGS_semanticExpression  mSourceExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_sendInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sendInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_sendInstruction (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sendInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mSourceExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     abstract class 'cPtr_foreachInstructionEnumeratedObjectElement'       *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_foreachInstructionEnumeratedObjectElement : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_foreachInstructionEnumeratedObjectElement (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_foreachInstructionEnumeratedObjectElement (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_foreachInstructionJoker'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_foreachInstructionJoker : public cPtr_foreachInstructionEnumeratedObjectElement {
  private : typedef cPtr_foreachInstructionEnumeratedObjectElement inherited ;
//--- Constructor
  public : cPtr_foreachInstructionJoker (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_foreachInstructionJoker (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        abstract class 'cPtr_foreachInstructionEnumeratedConstant'         *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_foreachInstructionEnumeratedConstant : public cPtr_foreachInstructionEnumeratedObjectElement {
  private : typedef cPtr_foreachInstructionEnumeratedObjectElement inherited ;
//--- Constructor
  public : cPtr_foreachInstructionEnumeratedConstant (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_foreachInstructionEnumeratedConstant (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mConstantName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//     Element of list '@foreachInstructionEnumeratedObjectElementList'      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachInstructionEnumeratedObjectElementList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_foreachInstructionEnumeratedObjectElement  mElement ;
//--- Constructor
  public : elementOf_GGS_foreachInstructionEnumeratedObjectElementList (const GGS_foreachInstructionEnumeratedObjectElement & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_foreachInstructionEnumeratedObjectElementList * nextObject (void) const { return (elementOf_GGS_foreachInstructionEnumeratedObjectElementList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_foreachInstructionEnumeratedObjectElementList * previousObject (void) const { return (elementOf_GGS_foreachInstructionEnumeratedObjectElementList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_foreachInstructionEnumeratedObjectElementList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        Element of list '@foreachInstructionEnumeratedObjectList'          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachInstructionEnumeratedObjectList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_bool mIsAscending ;
  public : GGS_semanticExpression  mEnumeratedExpression ;
  public : GGS_foreachInstructionEnumeratedObjectElementList  mElementList ;
  public : GGS_bool mEndsWithEllipsis ;
  public : GGS_lstring  mPrefix ;
//--- Constructor
  public : elementOf_GGS_foreachInstructionEnumeratedObjectList (const GGS_bool& ,
                                const GGS_semanticExpression & ,
                                const GGS_foreachInstructionEnumeratedObjectElementList & ,
                                const GGS_bool& ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_foreachInstructionEnumeratedObjectList * nextObject (void) const { return (elementOf_GGS_foreachInstructionEnumeratedObjectList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_foreachInstructionEnumeratedObjectList * previousObject (void) const { return (elementOf_GGS_foreachInstructionEnumeratedObjectList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_foreachInstructionEnumeratedObjectList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_foreachInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_foreachInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_foreachInstruction (const GGS_location & ,
                                const GGS_foreachInstructionEnumeratedObjectList & ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticInstructionList & ,
                                const GGS_semanticInstructionList & ,
                                const GGS_semanticInstructionList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_foreachInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_foreachInstructionEnumeratedObjectList  mEnumeratedObjectList ;
  public : GGS_lstring  mIndexVariableName ;
  public : GGS_semanticExpression  mWhileExpression ;
  public : GGS_semanticInstructionList  mBeforeInstructionList ;
  public : GGS_semanticInstructionList  mBetweenInstructionList ;
  public : GGS_semanticInstructionList  mDoInstructionList ;
  public : GGS_semanticInstructionList  mAfterInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@ifBranchList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ifBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_semanticExpression  mIFexpression ;
  public : GGS_semanticInstructionList  mIFinstructionList ;
//--- Constructor
  public : elementOf_GGS_ifBranchList (const GGS_semanticExpression & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ifBranchList * nextObject (void) const { return (elementOf_GGS_ifBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ifBranchList * previousObject (void) const { return (elementOf_GGS_ifBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_ifBranchList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_ifInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ifInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_ifInstruction (const GGS_location & ,
                                const GGS_ifBranchList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ifInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_ifBranchList  mBranchList ;
  public : GGS_semanticInstructionList  mElseInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_methodCallInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_methodCallInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_methodCallInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_methodCallInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_lstring  mMethodName ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              abstract class 'cPtr_modifierCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_modifierCallInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_modifierCallInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_modifierCallInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverName ;
  public : GGS_lstringlist  mReceiverStructAttributes ;
  public : GGS_lstring  mModifierName ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_errorInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_errorInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_errorInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_errorInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_semanticExpression  mErrorExpression ;
  public : GGS_lstringlist  mBuiltVariableList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_warningInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_warningInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_warningInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_warningInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mReceiverExpression ;
  public : GGS_semanticExpression  mWarningExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_routineCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_routineCallInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_routineCallInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_routineCallInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mRoutineName ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     abstract class 'cPtr_matchEntry'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_matchEntry : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_matchEntry (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_matchEntry (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@matchEntryList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_matchEntryList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_matchEntry  mEntry ;
//--- Constructor
  public : elementOf_GGS_matchEntryList (const GGS_matchEntry & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_matchEntryList * nextObject (void) const { return (elementOf_GGS_matchEntryList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_matchEntryList * previousObject (void) const { return (elementOf_GGS_matchEntryList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_matchEntryList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_constantMatchEntry'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_constantMatchEntry : public cPtr_matchEntry {
  private : typedef cPtr_matchEntry inherited ;
//--- Constructor
  public : cPtr_constantMatchEntry (const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_constantMatchEntry (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mConstantName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_classMatchEntry'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_classMatchEntry : public cPtr_matchEntry {
  private : typedef cPtr_matchEntry inherited ;
//--- Constructor
  public : cPtr_classMatchEntry (const GGS_lstring & ,
                                const GGS_foreachInstructionEnumeratedObjectElementList & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_classMatchEntry (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mClassName ;
  public : GGS_foreachInstructionEnumeratedObjectElementList  mElements ;
  public : GGS_bool mEndsWithEllipsis ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@matchInstructionBranchList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_matchInstructionBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_matchEntryList  mMatchEntryList ;
  public : GGS_semanticInstructionList  mMatchBranchInstructionList ;
//--- Constructor
  public : elementOf_GGS_matchInstructionBranchList (const GGS_matchEntryList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_matchInstructionBranchList * nextObject (void) const { return (elementOf_GGS_matchInstructionBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_matchInstructionBranchList * previousObject (void) const { return (elementOf_GGS_matchInstructionBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_matchInstructionBranchList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_matchInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_matchInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_matchInstruction (const GGS_location & ,
                                const GGS_lstringlist & ,
                                const GGS_matchInstructionBranchList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_matchInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstringlist  mMatchedVariableNameList ;
  public : GGS_matchInstructionBranchList  mMatchInstructionBranchList ;
  public : GGS_semanticInstructionList  mElseInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@castInstructionBranchList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_castInstructionBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_bool mUseKindOfClass ;
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mConstantVarName ;
  public : GGS_bool mConstantVarNameIsUnused ;
  public : GGS_semanticInstructionList  mCastBranchInstructionList ;
//--- Constructor
  public : elementOf_GGS_castInstructionBranchList (const GGS_bool& ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_bool& ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_castInstructionBranchList * nextObject (void) const { return (elementOf_GGS_castInstructionBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_castInstructionBranchList * previousObject (void) const { return (elementOf_GGS_castInstructionBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_castInstructionBranchList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          abstract class 'cPtr_elseOrDefaultForCastInstruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_elseOrDefaultForCastInstruction : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_elseOrDefaultForCastInstruction (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_elseOrDefaultForCastInstruction (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_elseForCastInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_elseForCastInstruction : public cPtr_elseOrDefaultForCastInstruction {
  private : typedef cPtr_elseOrDefaultForCastInstruction inherited ;
//--- Constructor
  public : cPtr_elseForCastInstruction (const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_elseForCastInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticInstructionList  mElseInstructionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             abstract class 'cPtr_defaultForCastInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_defaultForCastInstruction : public cPtr_elseOrDefaultForCastInstruction {
  private : typedef cPtr_elseOrDefaultForCastInstruction inherited ;
//--- Constructor
  public : cPtr_defaultForCastInstruction (const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_defaultForCastInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mErrorLocationExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_castInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_castInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_castInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_castInstructionBranchList & ,
                                const GGS_elseOrDefaultForCastInstruction & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_castInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mExpression ;
  public : GGS_castInstructionBranchList  mCastInstructionBranchList ;
  public : GGS_elseOrDefaultForCastInstruction  mElseOrDefault ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_addInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_addInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_addInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_outExpressionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_addInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverName ;
  public : GGS_lstringlist  mStructAttributeList ;
  public : GGS_outExpressionList  mExpressionList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_removeInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_removeInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_removeInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_removeInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverName ;
  public : GGS_lstringlist  mStructAttributeList ;
  public : GGS_semanticExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_incrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_incrementInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_incrementInstruction (const GGS_location & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_incrementInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_decrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_decrementInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_decrementInstruction (const GGS_location & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_decrementInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mReceiverName ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_loopInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_loopInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_loopInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticInstructionList & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_loopInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mVariantExpression ;
  public : GGS_semanticInstructionList  mFirstInstructions ;
  public : GGS_semanticExpression  mLoopExpression ;
  public : GGS_semanticInstructionList  mSecondInstructions ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_messageInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_messageInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_messageInstruction (const GGS_location & ,
                                const GGS_semanticExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_messageInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mExpression ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_logInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_logInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_logInstruction (const GGS_location & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_logInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstringlist  mLoggedVariableList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_grammarInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_grammarInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_grammarInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & ,
                                const GGS_bool& ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_grammarInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mGrammarComponentName ;
  public : GGS_lstring  mLabelName ;
  public : GGS_semanticExpression  mSourceExpression ;
  public : GGS_bool mSourceExpressionIsFile ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_withInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_withInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_withInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & ,
                                const GGS_semanticExpression & ,
                                const GGS_semanticInstructionList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_withInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mPrefix ;
  public : GGS_lstring  mTargetObjectName ;
  public : GGS_lstringlist  mStructAttributeList ;
  public : GGS_lstring  mSearchMethodName ;
  public : GGS_semanticExpression  mKeyExpression ;
  public : GGS_semanticInstructionList  mDoBranchInstructions ;
  public : GGS_semanticInstructionList  mElseBranchInstructions ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@switchBranches'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_switchBranches : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstringlist  mSwitchConstantList ;
  public : GGS_semanticInstructionList  mInstructions ;
//--- Constructor
  public : elementOf_GGS_switchBranches (const GGS_lstringlist & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_switchBranches * nextObject (void) const { return (elementOf_GGS_switchBranches *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_switchBranches * previousObject (void) const { return (elementOf_GGS_switchBranches *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_switchBranches ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_switchInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_switchInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_switchInstruction (const GGS_location & ,
                                const GGS_semanticExpression & ,
                                const GGS_switchBranches & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_switchInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_semanticExpression  mSwitchExpression ;
  public : GGS_switchBranches  mBranches ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_typeMethodInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_typeMethodInstruction : public cPtr_semanticInstruction {
  private : typedef cPtr_semanticInstruction inherited ;
//--- Constructor
  public : cPtr_typeMethodInstruction (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_actualParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_typeMethodInstruction (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mTypeName ;
  public : GGS_lstring  mMethodName ;
  public : GGS_actualParameterList  mActualParameterList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@abstractCategoryMethodList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_abstractCategoryMethodList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mAbstractCategoryMethodName ;
  public : GGS_formalParameterList  mAbstractCategoryFormalParameterList ;
//--- Constructor
  public : elementOf_GGS_abstractCategoryMethodList (const GGS_lstring & ,
                                const GGS_formalParameterList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_abstractCategoryMethodList * nextObject (void) const { return (elementOf_GGS_abstractCategoryMethodList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_abstractCategoryMethodList * previousObject (void) const { return (elementOf_GGS_abstractCategoryMethodList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_abstractCategoryMethodList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@categoryMethodList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_categoryMethodList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mCategoryMethodName ;
  public : GGS_formalParameterList  mCategoryFormalParameterList ;
  public : GGS_semanticInstructionList  mRoutineInstructionList ;
//--- Constructor
  public : elementOf_GGS_categoryMethodList (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_categoryMethodList * nextObject (void) const { return (elementOf_GGS_categoryMethodList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_categoryMethodList * previousObject (void) const { return (elementOf_GGS_categoryMethodList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_categoryMethodList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@overridingCategoryMethodList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_overridingCategoryMethodList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mOverridingCategoryMethodName ;
  public : GGS_formalParameterList  mOverridingCategoryFormalParameterList ;
  public : GGS_semanticInstructionList  mRoutineInstructionList ;
//--- Constructor
  public : elementOf_GGS_overridingCategoryMethodList (const GGS_lstring & ,
                                const GGS_formalParameterList & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_overridingCategoryMethodList * nextObject (void) const { return (elementOf_GGS_overridingCategoryMethodList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_overridingCategoryMethodList * previousObject (void) const { return (elementOf_GGS_overridingCategoryMethodList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_overridingCategoryMethodList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@abstractCategoryReaderList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_abstractCategoryReaderList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mAbstractCategoryReaderName ;
  public : GGS_formalInputParameterList  mAbstractCategoryFormalInputParameterList ;
  public : GGS_lstring  mReturnedTypeName ;
//--- Constructor
  public : elementOf_GGS_abstractCategoryReaderList (const GGS_lstring & ,
                                const GGS_formalInputParameterList & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_abstractCategoryReaderList * nextObject (void) const { return (elementOf_GGS_abstractCategoryReaderList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_abstractCategoryReaderList * previousObject (void) const { return (elementOf_GGS_abstractCategoryReaderList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_abstractCategoryReaderList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@categoryReaderList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_categoryReaderList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mCategoryReaderName ;
  public : GGS_formalInputParameterList  mReaderCategoryFormalInputParameterList ;
  public : GGS_lstring  mReturnedTypeName ;
  public : GGS_lstring  mReturnedVariableName ;
  public : GGS_semanticInstructionList  mRoutineInstructionList ;
//--- Constructor
  public : elementOf_GGS_categoryReaderList (const GGS_lstring & ,
                                const GGS_formalInputParameterList & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_categoryReaderList * nextObject (void) const { return (elementOf_GGS_categoryReaderList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_categoryReaderList * previousObject (void) const { return (elementOf_GGS_categoryReaderList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_categoryReaderList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@overridingCategoryReaderList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_overridingCategoryReaderList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mOverridingCategoryReaderName ;
  public : GGS_formalInputParameterList  mOverridingReaderFormalInputParameterList ;
  public : GGS_lstring  mReturnedTypeName ;
  public : GGS_lstring  mReturnedVariableName ;
  public : GGS_semanticInstructionList  mRoutineInstructionList ;
//--- Constructor
  public : elementOf_GGS_overridingCategoryReaderList (const GGS_lstring & ,
                                const GGS_formalInputParameterList & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_semanticInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_overridingCategoryReaderList * nextObject (void) const { return (elementOf_GGS_overridingCategoryReaderList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_overridingCategoryReaderList * previousObject (void) const { return (elementOf_GGS_overridingCategoryReaderList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Friend class declaration
  friend class GGS_overridingCategoryReaderList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Declarations for 'semanticDeclarationStruct' struct             *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GGS_semanticDeclarationStruct ;

//---------------------------------------------------------------------------*

class GGS_semanticDeclarationStruct {
//--- Default constructor
  public : GGS_semanticDeclarationStruct (void) ;

//--- Virtual destructor
  public : virtual ~GGS_semanticDeclarationStruct (void) ;

//--- Handle 'drop' instruction
  public : void drop (void) ;

//--- Method 'isBuilt'
  public : bool isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_semanticDeclarationStruct * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_semanticDeclarationStruct * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool operator_isEqual (const GGS_semanticDeclarationStruct & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_semanticDeclarationStruct & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_semanticDeclarationStruct constructor_new (const GGS_semanticDeclarationList & argument_0,
                 const GGS_abstractCategoryMethodListMap& argument_1,
                 const GGS_categoryMethodListMap& argument_2,
                 const GGS_overridingCategoryMethodListMap& argument_3,
                 const GGS_abstractCategoryReaderListMap& argument_4,
                 const GGS_categoryReaderListMap& argument_5,
                 const GGS_overridingCategoryReaderListMap& argument_6) ;

//--- Readers
  public : inline GGS_semanticDeclarationList 
  reader_mSemanticDeclarationList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mSemanticDeclarationList ;
  }

  public : inline GGS_abstractCategoryMethodListMap
  reader_mAbstractCategoryMethodListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mAbstractCategoryMethodListMap ;
  }

  public : inline GGS_categoryMethodListMap
  reader_mCategoryMethodListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mCategoryMethodListMap ;
  }

  public : inline GGS_overridingCategoryMethodListMap
  reader_mOverridingCategoryMethodListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mOverridingCategoryMethodListMap ;
  }

  public : inline GGS_abstractCategoryReaderListMap
  reader_mAbstractCategoryReaderListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mAbstractCategoryReaderListMap ;
  }

  public : inline GGS_categoryReaderListMap
  reader_mCategoryReaderListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mCategoryReaderListMap ;
  }

  public : inline GGS_overridingCategoryReaderListMap
  reader_mOverridingCategoryReaderListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mOverridingCategoryReaderListMap ;
  }

//--- Attributes
  public : GGS_semanticDeclarationList  mSemanticDeclarationList ;
  public : GGS_abstractCategoryMethodListMap mAbstractCategoryMethodListMap ;
  public : GGS_categoryMethodListMap mCategoryMethodListMap ;
  public : GGS_overridingCategoryMethodListMap mOverridingCategoryMethodListMap ;
  public : GGS_abstractCategoryReaderListMap mAbstractCategoryReaderListMap ;
  public : GGS_categoryReaderListMap mCategoryReaderListMap ;
  public : GGS_overridingCategoryReaderListMap mOverridingCategoryReaderListMap ;
} ;

//---------------------------------------------------------------------------*

#endif
