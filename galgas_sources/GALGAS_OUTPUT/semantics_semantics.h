//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semantics_semantics.h'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 1st, 2008, at 11h21'38"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semantics_semantics_DEFINED
#define semantics_semantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_entity.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "common_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCplusPlusNameList ;
class GGS_typeExpression ;
class cPtr_typeExpression ;
class GGS_typeClassMessagesMap ;
class GGS_typeSemanticsTypesList ;
class GGS_typeVariablesMap ;
#include "cGalgasVariablesMap.h"
class GGS_L_assignedVariables ;
class GGS_typeCible ;
class cPtr_typeCible ;
class GGS_typeListeCibles ;
class GGS_L_nameWithType ;
class GGS_typeTableMethodesAimplementer ;
#include "cTableMethodesAimplementer.h"
class GGS_typeExpressionList ;
class GGS_varToDropList ;
class GGS_typeErrorInstruction ;
class cPtr_typeErrorInstruction ;
class GGS_typeWarningInstruction ;
class cPtr_typeWarningInstruction ;
class GGS_typeMessageInstruction ;
class cPtr_typeMessageInstruction ;
class GGS_typeMethodCallInstruction ;
class cPtr_typeMethodCallInstruction ;
class GGS_typeCallOfTypeMethodInstruction ;
class cPtr_typeCallOfTypeMethodInstruction ;
class GGS_typeModifierCallInstruction ;
class cPtr_typeModifierCallInstruction ;
class GGS_typeInstructionAppelMethodeListe ;
class cPtr_typeInstructionAppelMethodeListe ;
class GGS_typeInstructionDeclarationVarLocale ;
class cPtr_typeInstructionDeclarationVarLocale ;
class GGS_typeMapBlockPrologueInstruction ;
class cPtr_typeMapBlockPrologueInstruction ;
class GGS_typeMapBlockEpilogueInstruction ;
class cPtr_typeMapBlockEpilogueInstruction ;
class GGS_typeReaderCallInExpression ;
class cPtr_typeReaderCallInExpression ;
class GGS_typeFileWrapperWithStaticPath ;
class cPtr_typeFileWrapperWithStaticPath ;
class GGS_typeFileWrapperObjectInstanciation ;
class cPtr_typeFileWrapperObjectInstanciation ;
class GGS_typeDescriptionInExpression ;
class cPtr_typeDescriptionInExpression ;
class GGS_typeCastInExpression ;
class cPtr_typeCastInExpression ;
class GGS_typeAndOperation ;
class cPtr_typeAndOperation ;
class GGS_typeOrOperation ;
class cPtr_typeOrOperation ;
class GGS_typeXorOperation ;
class cPtr_typeXorOperation ;
class GGS_typeConcatOperation ;
class cPtr_typeConcatOperation ;
class GGS_typeTrueBool ;
class cPtr_typeTrueBool ;
class GGS_typeFalseBool ;
class cPtr_typeFalseBool ;
class GGS_typeLiteralStringExpression ;
class cPtr_typeLiteralStringExpression ;
class GGS_typeLiteralUIntExpression ;
class cPtr_typeLiteralUIntExpression ;
class GGS_typeLiteralSIntExpression ;
class cPtr_typeLiteralSIntExpression ;
class GGS_typeLiteralUInt64Expression ;
class cPtr_typeLiteralUInt64Expression ;
class GGS_typeLiteralSInt64Expression ;
class cPtr_typeLiteralSInt64Expression ;
class GGS_typeLiteralCharExpression ;
class cPtr_typeLiteralCharExpression ;
class GGS_typeLiteralDoubleExpression ;
class cPtr_typeLiteralDoubleExpression ;
class GGS_typeHereExpression ;
class cPtr_typeHereExpression ;
class GGS_typeConstructorExpression ;
class cPtr_typeConstructorExpression ;
class GGS_typeTestComplement ;
class cPtr_typeTestComplement ;
class GGS_typeLogicalNegate ;
class cPtr_typeLogicalNegate ;
class GGS_typeBoolOption ;
class cPtr_typeBoolOption ;
class GGS_typeUIntOption ;
class cPtr_typeUIntOption ;
class GGS_typeStringOption ;
class cPtr_typeStringOption ;
class GGS_typeVarInExpression ;
class cPtr_typeVarInExpression ;
class GGS_typeJokerInExpression ;
class cPtr_typeJokerInExpression ;
class GGS_typeAddOperation ;
class cPtr_typeAddOperation ;
class GGS_typeSubOperation ;
class cPtr_typeSubOperation ;
class GGS_typeMultiplyOperation ;
class cPtr_typeMultiplyOperation ;
class GGS_typeDivideOperation ;
class cPtr_typeDivideOperation ;
class GGS_typeModuloOperation ;
class cPtr_typeModuloOperation ;
class GGS_typeUnaryMinusOperation ;
class cPtr_typeUnaryMinusOperation ;
class GGS_typeEqualTest ;
class cPtr_typeEqualTest ;
class GGS_typeNonEqualTest ;
class cPtr_typeNonEqualTest ;
class GGS_typeStrictInfTest ;
class cPtr_typeStrictInfTest ;
class GGS_typeInfOrEqualTest ;
class cPtr_typeInfOrEqualTest ;
class GGS_typeStrictSupTest ;
class cPtr_typeStrictSupTest ;
class GGS_typeSupOrEqualTest ;
class cPtr_typeSupOrEqualTest ;
class GGS_typeLeftShiftOperation ;
class cPtr_typeLeftShiftOperation ;
class GGS_typeRightShiftOperation ;
class cPtr_typeRightShiftOperation ;
class GGS_typeTextTableCall ;
class cPtr_typeTextTableCall ;
class GGS_C_assignmentInstruction ;
class cPtr_C_assignmentInstruction ;
class GGS_C_dotEqualInstruction ;
class cPtr_C_dotEqualInstruction ;
class GGS_C_declarationInstructionWithAssignment ;
class cPtr_C_declarationInstructionWithAssignment ;
class GGS_C_while_instruction ;
class cPtr_C_while_instruction ;
class GGS_L_expression_instructionsList_list ;
class GGS_C_if_instruction ;
class cPtr_C_if_instruction ;
class GGS_L_switchBranchlist ;
class GGS_C_switch_instruction ;
class cPtr_C_switch_instruction ;
class GGS_typeTableRoutinesAimplementer ;
class GGS_typeTableAttributsSemantiques ;
class GGS_typeJoker ;
class cPtr_typeJoker ;
class GGS_typeEntiteDest ;
class cPtr_typeEntiteDest ;
class GGS_M_nonTerminalSymbolForSyntax ;
class GGS_C_grammarInstruction ;
class cPtr_C_grammarInstruction ;
class GGS_C_treewalkingInstruction ;
class cPtr_C_treewalkingInstruction ;
class GGS_typeAppendInstruction ;
class cPtr_typeAppendInstruction ;
class GGS_typeRemoveInstruction ;
class cPtr_typeRemoveInstruction ;
class GGS_typeIncrementInstruction ;
class cPtr_typeIncrementInstruction ;
class GGS_typeDecrementInstruction ;
class cPtr_typeDecrementInstruction ;
class GGS_L_matchInstructionCasesList ;
class GGS_typeMatchInstruction ;
class cPtr_typeMatchInstruction ;
class GGS_foreachEnumerationList ;
class GGS_typeForeachInstruction ;
class cPtr_typeForeachInstruction ;
class GGS_typeSimpleExtractInstruction ;
class cPtr_typeSimpleExtractInstruction ;
class GGS_typeStructuredExtractCasesList ;
class GGS_typeStructuredExtractInstructionWithElse ;
class cPtr_typeStructuredExtractInstructionWithElse ;
class GGS_AC_elseOrDefaultForCastInstruction ;
class cPtr_AC_elseOrDefaultForCastInstruction ;
class GGS_C_elseForCastInstruction ;
class cPtr_C_elseForCastInstruction ;
class GGS_C_defaultForCastInstruction ;
class cPtr_C_defaultForCastInstruction ;
class GGS_typeStructuredCastBranchList ;
class GGS_typeStructuredCastInstruction ;
class cPtr_typeStructuredCastInstruction ;
class GGS_typeRoutineCallInstruction ;
class cPtr_typeRoutineCallInstruction ;
class GGS_typeLogInstruction ;
class cPtr_typeLogInstruction ;
class GGS_typeDropInstruction ;
class cPtr_typeDropInstruction ;
class GGS_typeTableNomRoutinesDeclarees ;
class GGS_typeEntityToGenerate ;
class cPtr_typeEntityToGenerate ;
class GGS_typeExternTypeToGenerate ;
class cPtr_typeExternTypeToGenerate ;
class GGS_typeRoutineAengendrer ;
class cPtr_typeRoutineAengendrer ;
class GGS_C_listTypeToImplement ;
class cPtr_C_listTypeToImplement ;
class GGS_EXsortDescriptorList ;
class GGS_C_sortedListTypeToImplement ;
class cPtr_C_sortedListTypeToImplement ;
class GGS_typeDefinitionTableAimplementer ;
class cPtr_typeDefinitionTableAimplementer ;
class GGS_C_mapToImplement ;
class cPtr_C_mapToImplement ;
class GGS_C_classToImplement ;
class cPtr_C_classToImplement ;
class GGS_C_mapindexToImplement ;
class cPtr_C_mapindexToImplement ;
class GGS_domainRelationMap ;
class GGS_C_domainToImplement ;
class cPtr_C_domainToImplement ;
class GGS_typeEntiteActionExterne ;
class cPtr_typeEntiteActionExterne ;
class GGS_typeActionExterneAengendrer ;
class cPtr_typeActionExterneAengendrer ;
class GGS_typeEntitiesToGenerateList ;
class GGS_typeEnumCstMessageStringMap ;
class GGS_enumGalgasType ;
class cPtr_enumGalgasType ;
class GGS_treewalkingRoutineHeaderMap ;
class GGS_treewalkingRoutineToGenerateList ;
class GGS_routineDispatcherSortedList ;
class GGS_callInstruction ;
class cPtr_callInstruction ;
class GGS_C_metamodelEntityToImplement ;
class cPtr_C_metamodelEntityToImplement ;
class GGS_ruleDescriptorForProgramList ;
class GGS_wrapperFileSortedList ;
class GGS_wrapperDirectorySortedList ;
class GGS_wrapperExtensionMap ;
class GGS_C_wrapperToImplement ;
class cPtr_C_wrapperToImplement ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@typeCplusPlusNameList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeCplusPlusNameList ;

class GGS_typeCplusPlusNameList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeCplusPlusNameList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeCplusPlusNameList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeCplusPlusNameList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeCplusPlusNameList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeCplusPlusNameList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeCplusPlusNameList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeCplusPlusNameList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeCplusPlusName & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeCplusPlusName & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeCplusPlusName & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeCplusPlusName & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeCplusPlusNameList _operator_concat (const GGS_typeCplusPlusNameList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeCplusPlusNameList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeExpression : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_typeExpression (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_typeExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeExpression * getPtr (void) const {
    return (cPtr_typeExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@typeClassMessagesMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeClassMessagesMap ;

class GGS_typeClassMessagesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeClassMessagesMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeClassMessagesMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeClassMessagesMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeClassMessagesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeClassMessagesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeClassMessagesMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_lstring & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_lstring & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeClassMessagesMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeClassMessagesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeClassMessagesMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeClassMessagesMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@typeSemanticsTypesList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeSemanticsTypesList ;

class GGS_typeSemanticsTypesList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeSemanticsTypesList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeSemanticsTypesList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeSemanticsTypesList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeSemanticsTypesList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeSemanticsTypesList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeSemanticsTypesList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeSemanticsTypesList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_AC_galgasType & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_AC_galgasType & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_AC_galgasType & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_AC_galgasType & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeSemanticsTypesList _operator_concat (const GGS_typeSemanticsTypesList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeSemanticsTypesList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class map element 'e_typeVariablesMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeVariablesMap {
  public : GGS_AC_galgasType  mArgumentType ;
  public : GGS_typeCplusPlusName  mCplusPlusName ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@typeVariablesMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVariablesMap : public cGalgasVariablesMap <e_typeVariablesMap> {
//--- Get object pointer
  public : inline GGS_typeVariablesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeVariablesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeVariablesMap & /* inOperand */) const { return GGS_bool (true, true) ; }
  public : GGS_bool _operator_isNotEqual (const GGS_typeVariablesMap & /* inOperand */) const { return GGS_bool (true, true) ; }
//--- Handle 'emptyMap' constructor
  public : static GGS_typeVariablesMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
//--- 'searchForReadOnlyAccess' search method
public : void modifier_searchForReadOnlyAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForReadOnlyAccessGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForDestructiveReadAccess' search method
public : void modifier_searchForDestructiveReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForDestructiveReadAccessGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForReadWriteAccess' search method
public : void modifier_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForReadWriteAccessGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForWriteAccess' search method
public : void modifier_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForWriteAccessGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertListOfEntitiesLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertListOfEntitiesLocalVariableGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertSingleEntityLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertSingleEntityLocalVariableGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertEntityAttributeLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertEntityAttributeLocalVariableGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertInArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUnusedInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUnusedInArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertConstInArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUsedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUsedConstInArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUsedConstInArgumentNoShadow (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUsedConstInArgumentNoShadowGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUnusedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUnusedConstInArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertLocalVariableGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertOutArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertOutProperty (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertOutPropertyGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertInOutArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUsedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUsedInOutArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertUnusedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void modifier_insertUnusedInOutArgumentGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@L_assignedVariables'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_assignedVariables ;

class GGS_L_assignedVariables : public AC_galgas_list {
  public : typedef elementOf_GGS_L_assignedVariables cElement ;

//--- Constructor 'emptyList'
  public : static GGS_L_assignedVariables constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_assignedVariables constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_L_assignedVariables & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_L_assignedVariables
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_L_assignedVariables
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_assignedVariables * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeCplusPlusName & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeCplusPlusName & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeCplusPlusName & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeCplusPlusName & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_assignedVariables _operator_concat (const GGS_L_assignedVariables & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_L_assignedVariables & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_typeCible'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCible : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_typeCible (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_typeCible (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeCible (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeCible
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeCible * getPtr (void) const {
    return (cPtr_typeCible *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCible * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCible * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCible *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@typeListeCibles'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCibles ;

class GGS_typeListeCibles : public AC_galgas_list {
  public : typedef elementOf_GGS_typeListeCibles cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeListeCibles constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeListeCibles constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeCible & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeListeCibles & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeListeCibles
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeListeCibles
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeListeCibles * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeCible & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeCible & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeCible & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeCible & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCible & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeListeCibles _operator_concat (const GGS_typeListeCibles & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeCible & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeCible & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeCible & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeListeCibles & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@L_nameWithType'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_nameWithType ;

class GGS_L_nameWithType : public AC_galgas_list {
  public : typedef elementOf_GGS_L_nameWithType cElement ;

//--- Constructor 'emptyList'
  public : static GGS_L_nameWithType constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_nameWithType constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_L_nameWithType & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_L_nameWithType
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_L_nameWithType
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_nameWithType * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_nameWithType _operator_concat (const GGS_L_nameWithType & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_L_nameWithType & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           class map element 'e_typeTableMethodesAimplementer'             *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableMethodesAimplementer {
  public : GGS_L_EXsignature  aListeTypesParametres ;
  public : GGS_typeListeTypesEtNomsArgMethode  aListeTypeEtNomsArguments ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableMethodesAimplementer'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTableMethodesAimplementer : public cTableMethodesAimplementer <e_typeTableMethodesAimplementer> {
//--- Get object pointer
  public : inline GGS_typeTableMethodesAimplementer * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableMethodesAimplementer * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeTableMethodesAimplementer & /* inOperand */) const { return GGS_bool (true, true) ; }
  public : GGS_bool _operator_isNotEqual (const GGS_typeTableMethodesAimplementer & /* inOperand */) const { return GGS_bool (true, true) ; }
//--- Handle 'emptyMap' constructor
  public : static GGS_typeTableMethodesAimplementer constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertAbstract (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
public : void modifier_insertAbstractGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
//---
public : void modifier_insertNotAbstract (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
public : void modifier_insertNotAbstractGetIndex (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@typeExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeExpressionList ;

class GGS_typeExpressionList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeExpressionList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeExpressionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeExpressionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeExpressionList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeExpressionList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeExpressionList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeExpressionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeExpression & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeExpression & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeExpression & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeExpression & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeExpression & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeExpressionList _operator_concat (const GGS_typeExpressionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeExpression & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeExpressionList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@varToDropList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_varToDropList ;

class GGS_varToDropList : public AC_galgas_list {
  public : typedef elementOf_GGS_varToDropList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_varToDropList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_varToDropList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_varToDropList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_varToDropList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_varToDropList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_varToDropList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeCplusPlusName & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeCplusPlusName & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeCplusPlusName & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeCplusPlusName & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_varToDropList _operator_concat (const GGS_varToDropList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_varToDropList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeErrorInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeErrorInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeErrorInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeErrorInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeErrorInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeErrorInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeErrorInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_varToDropList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeErrorInstruction * getPtr (void) const {
    return (cPtr_typeErrorInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mErrorMessageExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_varToDropList  reader_mVarToDropList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeErrorInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeErrorInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeErrorInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeWarningInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeWarningInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeWarningInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeWarningInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeWarningInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeWarningInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeWarningInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeWarningInstruction * getPtr (void) const {
    return (cPtr_typeWarningInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mWarningLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mWarningMessageExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeWarningInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeWarningInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeWarningInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeMessageInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMessageInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeMessageInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMessageInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMessageInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMessageInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMessageInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMessageInstruction * getPtr (void) const {
    return (cPtr_typeMessageInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mMessageExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMessageInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMessageInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMessageInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeMethodCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMethodCallInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeMethodCallInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMethodCallInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMethodCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMethodCallInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMethodCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMethodCallInstruction * getPtr (void) const {
    return (cPtr_typeMethodCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomCppVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMethodeSimple (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMethodCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMethodCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMethodCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeCallOfTypeMethodInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCallOfTypeMethodInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeCallOfTypeMethodInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeCallOfTypeMethodInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeCallOfTypeMethodInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeCallOfTypeMethodInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeCallOfTypeMethodInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeCallOfTypeMethodInstruction * getPtr (void) const {
    return (cPtr_typeCallOfTypeMethodInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mTypeMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCallOfTypeMethodInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCallOfTypeMethodInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCallOfTypeMethodInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeModifierCallInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeModifierCallInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeModifierCallInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeModifierCallInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeModifierCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeModifierCallInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeModifierCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeModifierCallInstruction * getPtr (void) const {
    return (cPtr_typeModifierCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomCppVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMethodeSimple (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeModifierCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeModifierCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeModifierCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_typeInstructionAppelMethodeListe'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionAppelMethodeListe : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeInstructionAppelMethodeListe (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeInstructionAppelMethodeListe (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeInstructionAppelMethodeListe (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeInstructionAppelMethodeListe
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeInstructionAppelMethodeListe constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeCplusPlusNameList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeInstructionAppelMethodeListe * getPtr (void) const {
    return (cPtr_typeInstructionAppelMethodeListe *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomCppAttribut (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aMethodeDeListe (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusNameList  reader_aListeNomsCppArguments (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionAppelMethodeListe * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionAppelMethodeListe * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionAppelMethodeListe *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_typeInstructionDeclarationVarLocale'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionDeclarationVarLocale : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeInstructionDeclarationVarLocale (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeInstructionDeclarationVarLocale (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeInstructionDeclarationVarLocale (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeInstructionDeclarationVarLocale
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeInstructionDeclarationVarLocale constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_AC_galgasType & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeInstructionDeclarationVarLocale * getPtr (void) const {
    return (cPtr_typeInstructionDeclarationVarLocale *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomCppVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_galgasType  reader_aTypeVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionDeclarationVarLocale * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionDeclarationVarLocale * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionDeclarationVarLocale *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeMapBlockPrologueInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMapBlockPrologueInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeMapBlockPrologueInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMapBlockPrologueInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMapBlockPrologueInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMapBlockPrologueInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMapBlockPrologueInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMapBlockPrologueInstruction * getPtr (void) const {
    return (cPtr_typeMapBlockPrologueInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomVariableTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMethodeBloc (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mPrologueExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMapBlockPrologueInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMapBlockPrologueInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMapBlockPrologueInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeMapBlockEpilogueInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMapBlockEpilogueInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeMapBlockEpilogueInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMapBlockEpilogueInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMapBlockEpilogueInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMapBlockEpilogueInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMapBlockEpilogueInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMapBlockEpilogueInstruction * getPtr (void) const {
    return (cPtr_typeMapBlockEpilogueInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomVariableTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMethodeBloc (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mEpilogueExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMapBlockEpilogueInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMapBlockEpilogueInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMapBlockEpilogueInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeReaderCallInExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeReaderCallInExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeReaderCallInExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeReaderCallInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeReaderCallInExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeReaderCallInExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeReaderCallInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2,
                                const GGS_string& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeReaderCallInExpression * getPtr (void) const {
    return (cPtr_typeReaderCallInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mExpressionValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mReaderName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mConversionMethod (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeReaderCallInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeReaderCallInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeReaderCallInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeFileWrapperWithStaticPath'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFileWrapperWithStaticPath : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeFileWrapperWithStaticPath (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeFileWrapperWithStaticPath (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeFileWrapperWithStaticPath (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeFileWrapperWithStaticPath
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeFileWrapperWithStaticPath constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_uint & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeFileWrapperWithStaticPath * getPtr (void) const {
    return (cPtr_typeFileWrapperWithStaticPath *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFileWrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mFileIndex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFileWrapperWithStaticPath * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFileWrapperWithStaticPath * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFileWrapperWithStaticPath *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_typeFileWrapperObjectInstanciation'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFileWrapperObjectInstanciation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeFileWrapperObjectInstanciation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeFileWrapperObjectInstanciation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeFileWrapperObjectInstanciation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeFileWrapperObjectInstanciation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeFileWrapperObjectInstanciation constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeFileWrapperObjectInstanciation * getPtr (void) const {
    return (cPtr_typeFileWrapperObjectInstanciation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mFileWrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFileWrapperObjectInstanciation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFileWrapperObjectInstanciation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFileWrapperObjectInstanciation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeDescriptionInExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDescriptionInExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeDescriptionInExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeDescriptionInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeDescriptionInExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeDescriptionInExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeDescriptionInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeDescriptionInExpression * getPtr (void) const {
    return (cPtr_typeDescriptionInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mExpressionValue (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDescriptionInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDescriptionInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDescriptionInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeCastInExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCastInExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeCastInExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeCastInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeCastInExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeCastInExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeCastInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeExpression & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeCastInExpression * getPtr (void) const {
    return (cPtr_typeCastInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mCastedExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mCheckForKindOfClass (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mCastTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCastInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCastInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCastInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAndOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAndOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeAndOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeAndOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeAndOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeAndOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeAndOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeAndOperation * getPtr (void) const {
    return (cPtr_typeAndOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAndOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAndOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAndOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeOrOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeOrOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeOrOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeOrOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeOrOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeOrOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeOrOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeOrOperation * getPtr (void) const {
    return (cPtr_typeOrOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeOrOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeOrOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeOrOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeXorOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeXorOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeXorOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeXorOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeXorOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeXorOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeXorOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeXorOperation * getPtr (void) const {
    return (cPtr_typeXorOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeXorOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeXorOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeXorOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeConcatOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeConcatOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeConcatOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeConcatOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeConcatOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeConcatOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeConcatOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeConcatOperation * getPtr (void) const {
    return (cPtr_typeConcatOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeConcatOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeConcatOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeConcatOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeTrueBool'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTrueBool : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeTrueBool (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeTrueBool (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeTrueBool (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeTrueBool
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeTrueBool constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeTrueBool * getPtr (void) const {
    return (cPtr_typeTrueBool *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTrueBool * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTrueBool * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTrueBool *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFalseBool'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFalseBool : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeFalseBool (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeFalseBool (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeFalseBool (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeFalseBool
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeFalseBool constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeFalseBool * getPtr (void) const {
    return (cPtr_typeFalseBool *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFalseBool * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFalseBool * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFalseBool *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralStringExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralStringExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralStringExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralStringExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralStringExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralStringExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralStringExpression constructor_new (C_Compiler & inLexique,
                                const GGS_stringlist & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralStringExpression * getPtr (void) const {
    return (cPtr_typeLiteralStringExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_stringlist  reader_mLiteralStringList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralStringExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralStringExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralStringExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralUIntExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralUIntExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralUIntExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralUIntExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralUIntExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralUIntExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralUIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_luint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralUIntExpression * getPtr (void) const {
    return (cPtr_typeLiteralUIntExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint  reader_mLiteralInt (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralUIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralUIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralUIntExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralSIntExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralSIntExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralSIntExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralSIntExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralSIntExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralSIntExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralSIntExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralSIntExpression * getPtr (void) const {
    return (cPtr_typeLiteralSIntExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint  reader_mLiteralInt (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralSIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralSIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralSIntExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralUInt64Expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralUInt64Expression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralUInt64Expression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralUInt64Expression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralUInt64Expression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralUInt64Expression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralUInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_luint64 & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralUInt64Expression * getPtr (void) const {
    return (cPtr_typeLiteralUInt64Expression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_mLiteralInt (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralUInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralUInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralUInt64Expression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralSInt64Expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralSInt64Expression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralSInt64Expression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralSInt64Expression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralSInt64Expression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralSInt64Expression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralSInt64Expression constructor_new (C_Compiler & inLexique,
                                const GGS_lsint64 & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralSInt64Expression * getPtr (void) const {
    return (cPtr_typeLiteralSInt64Expression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lsint64  reader_mLiteralInt (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralSInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralSInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralSInt64Expression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralCharExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralCharExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralCharExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralCharExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralCharExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralCharExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralCharExpression constructor_new (C_Compiler & inLexique,
                                const GGS_lchar & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralCharExpression * getPtr (void) const {
    return (cPtr_typeLiteralCharExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lchar  reader_mLiteralChar (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralCharExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralCharExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralCharExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralDoubleExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralDoubleExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLiteralDoubleExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLiteralDoubleExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLiteralDoubleExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLiteralDoubleExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLiteralDoubleExpression constructor_new (C_Compiler & inLexique,
                                const GGS_ldouble & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLiteralDoubleExpression * getPtr (void) const {
    return (cPtr_typeLiteralDoubleExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_ldouble  reader_mLiteralDouble (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralDoubleExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralDoubleExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralDoubleExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeHereExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeHereExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeHereExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeHereExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeHereExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeHereExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeHereExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeHereExpression * getPtr (void) const {
    return (cPtr_typeHereExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeHereExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeHereExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeHereExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeConstructorExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeConstructorExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeConstructorExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeConstructorExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeConstructorExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeConstructorExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeConstructorExpression constructor_new (C_Compiler & inLexique,
                                const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeConstructorExpression * getPtr (void) const {
    return (cPtr_typeConstructorExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_string reader_mClassName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mClassMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeConstructorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeConstructorExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeConstructorExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeTestComplement'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTestComplement : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeTestComplement (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeTestComplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeTestComplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeTestComplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeTestComplement constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeTestComplement * getPtr (void) const {
    return (cPtr_typeTestComplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTestComplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTestComplement * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTestComplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeLogicalNegate'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLogicalNegate : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLogicalNegate (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLogicalNegate (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLogicalNegate (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLogicalNegate
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLogicalNegate constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLogicalNegate * getPtr (void) const {
    return (cPtr_typeLogicalNegate *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLogicalNegate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLogicalNegate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLogicalNegate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeBoolOption'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeBoolOption : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeBoolOption (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeBoolOption (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeBoolOption (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeBoolOption
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeBoolOption constructor_new (C_Compiler & inLexique,
                                const GGS_string& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeBoolOption * getPtr (void) const {
    return (cPtr_typeBoolOption *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_string reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeBoolOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeBoolOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeBoolOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUIntOption'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUIntOption : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeUIntOption (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeUIntOption (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeUIntOption (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeUIntOption
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeUIntOption constructor_new (C_Compiler & inLexique,
                                const GGS_string& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeUIntOption * getPtr (void) const {
    return (cPtr_typeUIntOption *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_string reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUIntOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUIntOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUIntOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStringOption'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStringOption : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeStringOption (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeStringOption (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeStringOption (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeStringOption
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeStringOption constructor_new (C_Compiler & inLexique,
                                const GGS_string& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeStringOption * getPtr (void) const {
    return (cPtr_typeStringOption *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_string reader_mOptionComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mOptionName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStringOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStringOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStringOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeVarInExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVarInExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeVarInExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeVarInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeVarInExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeVarInExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeVarInExpression constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeVarInExpression * getPtr (void) const {
    return (cPtr_typeVarInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mCppVarName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeVarInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeVarInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeVarInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeJokerInExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeJokerInExpression : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeJokerInExpression (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeJokerInExpression (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeJokerInExpression (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeJokerInExpression
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeJokerInExpression constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeJokerInExpression * getPtr (void) const {
    return (cPtr_typeJokerInExpression *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeJokerInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeJokerInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeJokerInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAddOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAddOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeAddOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeAddOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeAddOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeAddOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeAddOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeAddOperation * getPtr (void) const {
    return (cPtr_typeAddOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAddOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAddOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAddOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeSubOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSubOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeSubOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeSubOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeSubOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeSubOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeSubOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeSubOperation * getPtr (void) const {
    return (cPtr_typeSubOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSubOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSubOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSubOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeMultiplyOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMultiplyOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeMultiplyOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeMultiplyOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMultiplyOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMultiplyOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMultiplyOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMultiplyOperation * getPtr (void) const {
    return (cPtr_typeMultiplyOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMultiplyOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMultiplyOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMultiplyOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDivideOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDivideOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeDivideOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeDivideOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeDivideOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeDivideOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeDivideOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeDivideOperation * getPtr (void) const {
    return (cPtr_typeDivideOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDivideOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDivideOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDivideOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeModuloOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeModuloOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeModuloOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeModuloOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeModuloOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeModuloOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeModuloOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeModuloOperation * getPtr (void) const {
    return (cPtr_typeModuloOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeModuloOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeModuloOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeModuloOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeUnaryMinusOperation'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUnaryMinusOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeUnaryMinusOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeUnaryMinusOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeUnaryMinusOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeUnaryMinusOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeUnaryMinusOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeUnaryMinusOperation * getPtr (void) const {
    return (cPtr_typeUnaryMinusOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUnaryMinusOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUnaryMinusOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUnaryMinusOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeEqualTest'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEqualTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeEqualTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeEqualTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeEqualTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeEqualTest * getPtr (void) const {
    return (cPtr_typeEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeNonEqualTest'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeNonEqualTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeNonEqualTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeNonEqualTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeNonEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeNonEqualTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeNonEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeNonEqualTest * getPtr (void) const {
    return (cPtr_typeNonEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeNonEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeNonEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeNonEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStrictInfTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStrictInfTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeStrictInfTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeStrictInfTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeStrictInfTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeStrictInfTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeStrictInfTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeStrictInfTest * getPtr (void) const {
    return (cPtr_typeStrictInfTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStrictInfTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStrictInfTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStrictInfTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeInfOrEqualTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInfOrEqualTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeInfOrEqualTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeInfOrEqualTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeInfOrEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeInfOrEqualTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeInfOrEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeInfOrEqualTest * getPtr (void) const {
    return (cPtr_typeInfOrEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInfOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInfOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInfOrEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStrictSupTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStrictSupTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeStrictSupTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeStrictSupTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeStrictSupTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeStrictSupTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeStrictSupTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeStrictSupTest * getPtr (void) const {
    return (cPtr_typeStrictSupTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStrictSupTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStrictSupTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStrictSupTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeSupOrEqualTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSupOrEqualTest : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeSupOrEqualTest (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeSupOrEqualTest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeSupOrEqualTest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeSupOrEqualTest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeSupOrEqualTest constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeSupOrEqualTest * getPtr (void) const {
    return (cPtr_typeSupOrEqualTest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSupOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSupOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSupOrEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeLeftShiftOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLeftShiftOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeLeftShiftOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeLeftShiftOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLeftShiftOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLeftShiftOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLeftShiftOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLeftShiftOperation * getPtr (void) const {
    return (cPtr_typeLeftShiftOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLeftShiftOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLeftShiftOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLeftShiftOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeRightShiftOperation'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRightShiftOperation : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeRightShiftOperation (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeRightShiftOperation (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeRightShiftOperation (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeRightShiftOperation
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeRightShiftOperation constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeRightShiftOperation * getPtr (void) const {
    return (cPtr_typeRightShiftOperation *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mOperatorLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mLeftExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mRightExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRightShiftOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRightShiftOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRightShiftOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeTextTableCall'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTextTableCall : public GGS_typeExpression {
//--- Default constructor
  public : inline GGS_typeTextTableCall (void) : GGS_typeExpression () {}

//--- Pointer assignment constructor
  public : GGS_typeTextTableCall (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeTextTableCall (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeTextTableCall
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeTextTableCall constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeCplusPlusName & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeTextTableCall * getPtr (void) const {
    return (cPtr_typeTextTableCall *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMethodeTest (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_aNomCppClef (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTextTableCall * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTextTableCall * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTextTableCall *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_assignmentInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_assignmentInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_assignmentInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_assignmentInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_assignmentInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_assignmentInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_assignmentInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpression & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_assignmentInstruction * getPtr (void) const {
    return (cPtr_C_assignmentInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_assignmentInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_assignmentInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_assignmentInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_dotEqualInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_dotEqualInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_dotEqualInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_dotEqualInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_dotEqualInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_dotEqualInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_dotEqualInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_string& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_dotEqualInstruction * getPtr (void) const {
    return (cPtr_C_dotEqualInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mSourceExpressionConverter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_dotEqualInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_dotEqualInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_dotEqualInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_declarationInstructionWithAssignment'          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_declarationInstructionWithAssignment : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_declarationInstructionWithAssignment (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_declarationInstructionWithAssignment (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_declarationInstructionWithAssignment (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_declarationInstructionWithAssignment
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_declarationInstructionWithAssignment constructor_new (C_Compiler & inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_typeCplusPlusName & argument_1,
                                const GGS_typeExpression & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_declarationInstructionWithAssignment * getPtr (void) const {
    return (cPtr_C_declarationInstructionWithAssignment *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_AC_galgasType  reader_mVariableType (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_declarationInstructionWithAssignment * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_declarationInstructionWithAssignment * operator () (LOCATION_ARGS) const {
      return (cPtr_C_declarationInstructionWithAssignment *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_while_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_while_instruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_while_instruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_while_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_while_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_while_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_while_instruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1,
                                const GGS_typeExpression & argument_2,
                                const GGS_typeInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_while_instruction * getPtr (void) const {
    return (cPtr_C_while_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mVariantExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mInstructionList1 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mWhileExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mInstructionList2 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_while_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_while_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_while_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                list '@L_expression_instructionsList_list'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_expression_instructionsList_list ;

class GGS_L_expression_instructionsList_list : public AC_galgas_list {
  public : typedef elementOf_GGS_L_expression_instructionsList_list cElement ;

//--- Constructor 'emptyList'
  public : static GGS_L_expression_instructionsList_list constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_expression_instructionsList_list constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_L_expression_instructionsList_list & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_L_expression_instructionsList_list
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_L_expression_instructionsList_list
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_expression_instructionsList_list * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeExpression & _out_0,
                              GGS_typeInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeExpression & _out_0,
                             GGS_typeInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeExpression & _out_0,
                                GGS_typeInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeExpression & _out_0,
                                 GGS_typeInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_expression_instructionsList_list _operator_concat (const GGS_L_expression_instructionsList_list & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_L_expression_instructionsList_list & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_if_instruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_if_instruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_if_instruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_if_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_if_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_if_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_if_instruction constructor_new (C_Compiler & inLexique,
                                const GGS_L_expression_instructionsList_list & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_if_instruction * getPtr (void) const {
    return (cPtr_C_if_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_L_expression_instructionsList_list  reader_mIFbranchesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mElseInstructionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_if_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_if_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_if_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@L_switchBranchlist'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_switchBranchlist ;

class GGS_L_switchBranchlist : public AC_galgas_list {
  public : typedef elementOf_GGS_L_switchBranchlist cElement ;

//--- Constructor 'emptyList'
  public : static GGS_L_switchBranchlist constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_switchBranchlist constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_stringset & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_L_switchBranchlist & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_L_switchBranchlist
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_L_switchBranchlist
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_switchBranchlist * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_stringset & _out_0,
                              GGS_typeInstructionList & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_stringset & _out_0,
                             GGS_typeInstructionList & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_stringset & _out_0,
                                GGS_typeInstructionList & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_stringset & _out_0,
                                 GGS_typeInstructionList & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_stringset & argument_0,
                                const GGS_typeInstructionList & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_switchBranchlist _operator_concat (const GGS_L_switchBranchlist & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_stringset & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_stringset & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_stringset & argument_0,
                                const GGS_typeInstructionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_L_switchBranchlist & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_switch_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_switch_instruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_switch_instruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_switch_instruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_switch_instruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_switch_instruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_switch_instruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_L_switchBranchlist & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_switch_instruction * getPtr (void) const {
    return (cPtr_C_switch_instruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mSwitchExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mEnumTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_switchBranchlist  reader_mBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_switch_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_switch_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_switch_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableRoutinesAimplementer'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableRoutinesAimplementer ;

class GGS_typeTableRoutinesAimplementer : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableRoutinesAimplementer cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeTableRoutinesAimplementer & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeTableRoutinesAimplementer & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeTableRoutinesAimplementer * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableRoutinesAimplementer * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeTableRoutinesAimplementer constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeTableRoutinesAimplementer constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeTableRoutinesAimplementer & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableRoutinesAimplementer reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeTableRoutinesAimplementer & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableAttributsSemantiques'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableAttributsSemantiques ;

class GGS_typeTableAttributsSemantiques : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableAttributsSemantiques cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeTableAttributsSemantiques & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeTableAttributsSemantiques & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeTableAttributsSemantiques * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableAttributsSemantiques * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeTableAttributsSemantiques constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeCplusPlusName &  inParameter0,
                                const GGS_AC_galgasType &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeCplusPlusName   & outParameter0,
                                GGS_AC_galgasType   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_typeCplusPlusName & inParameter0,
                                   const GGS_AC_galgasType & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_typeCplusPlusName & outParameter0,
                                   GGS_AC_galgasType & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeTableAttributsSemantiques constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeTableAttributsSemantiques & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableAttributsSemantiques reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeTableAttributsSemantiques & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

void routine_buildMapWithLocalConstants (C_Compiler &,
                                GGS_L_nameWithType  ,
                                GGS_typeListeAttributsSemantiques  ,
                                GGS_typeVariablesMap  &,
                                GGS_location  ,
                                GGS_localConstantBuildStyleEnum ,
                                GGS_bool  COMMA_LOCATION_ARGS) ;

void routine_verifierCompatibiliteTypes (C_Compiler &,
                                const GGS_typeSemanticsTypesList  ,
                                const GGS_typeListeAttributsSemantiques  ,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

void routine_verifierCompatibiliteArgEffectifsSignature (C_Compiler &,
                                const GGS_L_EXsignature  ,
                                const GGS_L_actualParametersSignature  ,
                                const GGS_location  ,
                                GGS_typeInstructionList  &,
                                GGS_typeExpressionList  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_typeJoker'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeJoker : public GGS_typeCible {
//--- Default constructor
  public : inline GGS_typeJoker (void) : GGS_typeCible () {}

//--- Pointer assignment constructor
  public : GGS_typeJoker (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeJoker (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeJoker
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeJoker constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeJoker * getPtr (void) const {
    return (cPtr_typeJoker *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeJoker * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeJoker * operator () (LOCATION_ARGS) const {
      return (cPtr_typeJoker *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeEntiteDest'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteDest : public GGS_typeCible {
//--- Default constructor
  public : inline GGS_typeEntiteDest (void) : GGS_typeCible () {}

//--- Pointer assignment constructor
  public : GGS_typeEntiteDest (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeEntiteDest (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeEntiteDest
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeEntiteDest constructor_new (C_Compiler & inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_typeCplusPlusName & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeEntiteDest * getPtr (void) const {
    return (cPtr_typeEntiteDest *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_AC_galgasType  reader_aTypeVarDest (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_mCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_aPositionVariableCible (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntiteDest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntiteDest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEntiteDest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@M_nonTerminalSymbolForSyntax'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_nonTerminalSymbolForSyntax ;

class GGS_M_nonTerminalSymbolForSyntax : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_nonTerminalSymbolForSyntax cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_M_nonTerminalSymbolForSyntax & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_M_nonTerminalSymbolForSyntax & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_M_nonTerminalSymbolForSyntax * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_nonTerminalSymbolForSyntax * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_M_nonTerminalSymbolForSyntax constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonterminalSymbolAlts &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonterminalSymbolAlts   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_M_nonterminalSymbolAlts & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_M_nonterminalSymbolAlts & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_M_nonTerminalSymbolForSyntax constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_M_nonTerminalSymbolForSyntax & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_nonTerminalSymbolForSyntax reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_M_nonTerminalSymbolForSyntax & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_grammarInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_grammarInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_grammarInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_grammarInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_grammarInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_grammarInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_grammarInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_grammarInstruction * getPtr (void) const {
    return (cPtr_C_grammarInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mSourceFileCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mGrammarName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mAltSymbol (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMetamodelClassVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mLexiqueClassName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_grammarInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_grammarInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_grammarInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_treewalkingInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_treewalkingInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_C_treewalkingInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_treewalkingInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_treewalkingInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_treewalkingInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_treewalkingInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeCplusPlusName & argument_1,
                                const GGS_typeExpressionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_treewalkingInstruction * getPtr (void) const {
    return (cPtr_C_treewalkingInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTreeWalkingComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_mModelVariableCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_treewalkingInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_treewalkingInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_treewalkingInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeAppendInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAppendInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeAppendInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeAppendInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeAppendInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeAppendInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeAppendInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpressionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeAppendInstruction * getPtr (void) const {
    return (cPtr_typeAppendInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mSourceExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAppendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAppendInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAppendInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeRemoveInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRemoveInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeRemoveInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeRemoveInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeRemoveInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeRemoveInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeRemoveInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpressionList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeRemoveInstruction * getPtr (void) const {
    return (cPtr_typeRemoveInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mSourceExpressions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRemoveInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRemoveInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRemoveInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeIncrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeIncrementInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeIncrementInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeIncrementInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeIncrementInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeIncrementInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeIncrementInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeIncrementInstruction * getPtr (void) const {
    return (cPtr_typeIncrementInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeIncrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeIncrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeIncrementInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDecrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDecrementInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeDecrementInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeDecrementInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeDecrementInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeDecrementInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeDecrementInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeDecrementInstruction * getPtr (void) const {
    return (cPtr_typeDecrementInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mTargetVarCppName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDecrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDecrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDecrementInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@L_matchInstructionCasesList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_matchInstructionCasesList ;

class GGS_L_matchInstructionCasesList : public AC_galgas_list {
  public : typedef elementOf_GGS_L_matchInstructionCasesList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_L_matchInstructionCasesList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_L_matchInstructionCasesList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_L_matchInstructionCasesList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_L_matchInstructionCasesList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_L_matchInstructionCasesList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_L_matchInstructionCasesList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_lstring & _out_1,
                              GGS_typeInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_lstring & _out_1,
                             GGS_typeInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_lstring & _out_1,
                                GGS_typeInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_typeInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_L_matchInstructionCasesList _operator_concat (const GGS_L_matchInstructionCasesList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_L_matchInstructionCasesList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeMatchInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMatchInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeMatchInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeMatchInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeMatchInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeMatchInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeMatchInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeCplusPlusName & argument_2,
                                const GGS_typeCplusPlusName & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5,
                                const GGS_bool& argument_6,
                                const GGS_bool& argument_7,
                                const GGS_L_matchInstructionCasesList & argument_8,
                                const GGS_typeInstructionList & argument_9
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeMatchInstruction * getPtr (void) const {
    return (cPtr_typeMatchInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_aIndicatif1 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_aIndicatif2 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_aNomCppVariable1 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_aNomCppVariable2 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomTypeBase1 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomTypeBase2 (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mOperand1_isEnumeration (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mOperand2_isEnumeration (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_matchInstructionCasesList  reader_aListeCas (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mElseInstructionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMatchInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMatchInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMatchInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@foreachEnumerationList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachEnumerationList ;

class GGS_foreachEnumerationList : public AC_galgas_list {
  public : typedef elementOf_GGS_foreachEnumerationList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_foreachEnumerationList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_foreachEnumerationList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_foreachEnumerationList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_foreachEnumerationList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_foreachEnumerationList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_foreachEnumerationList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeExpression & _out_0,
                              GGS_location & _out_1,
                              GGS_string& _out_2,
                              GGS_bool& _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeExpression & _out_0,
                             GGS_location & _out_1,
                             GGS_string& _out_2,
                             GGS_bool& _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeExpression & _out_0,
                                GGS_location & _out_1,
                                GGS_string& _out_2,
                                GGS_bool& _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeExpression & _out_0,
                                 GGS_location & _out_1,
                                 GGS_string& _out_2,
                                 GGS_bool& _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_foreachEnumerationList _operator_concat (const GGS_foreachEnumerationList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_foreachEnumerationList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeForeachInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeForeachInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeForeachInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeForeachInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeForeachInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeForeachInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeForeachInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_foreachEnumerationList & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeForeachInstruction * getPtr (void) const {
    return (cPtr_typeForeachInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_foreachEnumerationList  reader_mForeachEnumerationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mWhileExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeForeachInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeForeachInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeForeachInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeSimpleExtractInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSimpleExtractInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeSimpleExtractInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeSimpleExtractInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeSimpleExtractInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeSimpleExtractInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeSimpleExtractInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_L_assignedVariables & argument_2,
                                const GGS_typeExpression & argument_3,
                                const GGS_lstring & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeSimpleExtractInstruction * getPtr (void) const {
    return (cPtr_typeSimpleExtractInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aNomVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomClasse (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_assignedVariables  reader_aListeAffectationParametresEffectifs (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSimpleExtractInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSimpleExtractInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSimpleExtractInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@typeStructuredExtractCasesList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredExtractCasesList ;

class GGS_typeStructuredExtractCasesList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeStructuredExtractCasesList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeStructuredExtractCasesList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeStructuredExtractCasesList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeStructuredExtractCasesList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeStructuredExtractCasesList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeStructuredExtractCasesList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeStructuredExtractCasesList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_location & _out_1,
                              GGS_typeInstructionList & _out_2,
                              GGS_bool& _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_location & _out_1,
                             GGS_typeInstructionList & _out_2,
                             GGS_bool& _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_location & _out_1,
                                GGS_typeInstructionList & _out_2,
                                GGS_bool& _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_location & _out_1,
                                 GGS_typeInstructionList & _out_2,
                                 GGS_bool& _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeStructuredExtractCasesList _operator_concat (const GGS_typeStructuredExtractCasesList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeStructuredExtractCasesList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       GALGAS class 'GGS_typeStructuredExtractInstructionWithElse'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStructuredExtractInstructionWithElse : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeStructuredExtractInstructionWithElse (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeStructuredExtractInstructionWithElse (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeStructuredExtractInstructionWithElse (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeStructuredExtractInstructionWithElse
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeStructuredExtractInstructionWithElse constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeStructuredExtractCasesList & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeStructuredExtractInstructionWithElse * getPtr (void) const {
    return (cPtr_typeStructuredExtractInstructionWithElse *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_mVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeStructuredExtractCasesList  reader_mCasesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStructuredExtractInstructionWithElse * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStructuredExtractInstructionWithElse * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStructuredExtractInstructionWithElse *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_AC_elseOrDefaultForCastInstruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_elseOrDefaultForCastInstruction : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_AC_elseOrDefaultForCastInstruction (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_AC_elseOrDefaultForCastInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_AC_elseOrDefaultForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_AC_elseOrDefaultForCastInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_AC_elseOrDefaultForCastInstruction * getPtr (void) const {
    return (cPtr_AC_elseOrDefaultForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_AC_elseOrDefaultForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_elseOrDefaultForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_AC_elseOrDefaultForCastInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_C_elseForCastInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_elseForCastInstruction : public GGS_AC_elseOrDefaultForCastInstruction {
//--- Default constructor
  public : inline GGS_C_elseForCastInstruction (void) : GGS_AC_elseOrDefaultForCastInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_elseForCastInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_elseForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_elseForCastInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_elseForCastInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeInstructionList & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_elseForCastInstruction * getPtr (void) const {
    return (cPtr_C_elseForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeInstructionList  reader_mElseInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_elseForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_elseForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_elseForCastInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_defaultForCastInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_defaultForCastInstruction : public GGS_AC_elseOrDefaultForCastInstruction {
//--- Default constructor
  public : inline GGS_C_defaultForCastInstruction (void) : GGS_AC_elseOrDefaultForCastInstruction () {}

//--- Pointer assignment constructor
  public : GGS_C_defaultForCastInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_defaultForCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_defaultForCastInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_defaultForCastInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_defaultForCastInstruction * getPtr (void) const {
    return (cPtr_C_defaultForCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeExpression  reader_mErrorLocationExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_location  reader_mLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_defaultForCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_defaultForCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_defaultForCastInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@typeStructuredCastBranchList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredCastBranchList ;

class GGS_typeStructuredCastBranchList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeStructuredCastBranchList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeStructuredCastBranchList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeStructuredCastBranchList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeCplusPlusNameList & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeStructuredCastBranchList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeStructuredCastBranchList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeStructuredCastBranchList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeStructuredCastBranchList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_bool& _out_1,
                              GGS_typeCplusPlusNameList & _out_2,
                              GGS_typeInstructionList & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_bool& _out_1,
                             GGS_typeCplusPlusNameList & _out_2,
                             GGS_typeInstructionList & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_bool& _out_1,
                                GGS_typeCplusPlusNameList & _out_2,
                                GGS_typeInstructionList & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_bool& _out_1,
                                 GGS_typeCplusPlusNameList & _out_2,
                                 GGS_typeInstructionList & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeCplusPlusNameList & argument_2,
                                const GGS_typeInstructionList & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeStructuredCastBranchList _operator_concat (const GGS_typeStructuredCastBranchList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeCplusPlusNameList & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeCplusPlusNameList & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeCplusPlusNameList & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeStructuredCastBranchList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeStructuredCastInstruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStructuredCastInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeStructuredCastInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeStructuredCastInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeStructuredCastInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeStructuredCastInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeStructuredCastInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeStructuredCastBranchList & argument_3,
                                const GGS_AC_elseOrDefaultForCastInstruction & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeStructuredCastInstruction * getPtr (void) const {
    return (cPtr_typeStructuredCastInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_mCastInstructionLocation (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpression  reader_mSourceExpression (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mSourceExpressionTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeStructuredCastBranchList  reader_mBranchList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_elseOrDefaultForCastInstruction  reader_mElseOrDefault (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStructuredCastInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStructuredCastInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStructuredCastInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeRoutineCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRoutineCallInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeRoutineCallInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeRoutineCallInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeRoutineCallInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeRoutineCallInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeRoutineCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1,
                                const GGS_L_EXsignature & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeRoutineCallInstruction * getPtr (void) const {
    return (cPtr_typeRoutineCallInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mRoutineName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_EXsignature  reader_mFormalParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIsExternActionCall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRoutineCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRoutineCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRoutineCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeLogInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLogInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeLogInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeLogInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeLogInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeLogInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeLogInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeCplusPlusName & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeLogInstruction * getPtr (void) const {
    return (cPtr_typeLogInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mGalgasVariableName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeCplusPlusName  reader_mLoggedVariable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLogInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLogInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLogInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDropInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDropInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_typeDropInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_typeDropInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeDropInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeDropInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeDropInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_typeCplusPlusName & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeDropInstruction * getPtr (void) const {
    return (cPtr_typeDropInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_typeCplusPlusName  reader_aVariableConsommee (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDropInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDropInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDropInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableNomRoutinesDeclarees'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableNomRoutinesDeclarees ;

class GGS_typeTableNomRoutinesDeclarees : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableNomRoutinesDeclarees cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeTableNomRoutinesDeclarees & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeTableNomRoutinesDeclarees & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeTableNomRoutinesDeclarees * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableNomRoutinesDeclarees * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeTableNomRoutinesDeclarees constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeTableNomRoutinesDeclarees constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeTableNomRoutinesDeclarees & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableNomRoutinesDeclarees reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeTableNomRoutinesDeclarees & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeEntityToGenerate'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntityToGenerate : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_typeEntityToGenerate (void) : AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_typeEntityToGenerate (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeEntityToGenerate (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeEntityToGenerate
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeEntityToGenerate * getPtr (void) const {
    return (cPtr_typeEntityToGenerate *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntityToGenerate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntityToGenerate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEntityToGenerate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeExternTypeToGenerate'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeExternTypeToGenerate : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_typeExternTypeToGenerate (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_typeExternTypeToGenerate (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeExternTypeToGenerate (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeExternTypeToGenerate
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeExternTypeToGenerate constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_M_externTypeConstructorMap & argument_1,
                                const GGS_typeTableMethodes & argument_2,
                                const GGS_typeTableMethodes & argument_3,
                                const GGS_bool& argument_4,
                                const GGS_typeListeAttributsSemantiques & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeExternTypeToGenerate * getPtr (void) const {
    return (cPtr_typeExternTypeToGenerate *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mGalgasName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_M_externTypeConstructorMap  reader_mConstructorMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeTableMethodes  reader_mModifiersMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeTableMethodes  reader_mReadersInInstructionMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mAcceptAddAssignOperatorCall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mAddAssignOperatorCallTypeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeExternTypeToGenerate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeExternTypeToGenerate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeExternTypeToGenerate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeRoutineAengendrer'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRoutineAengendrer : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_typeRoutineAengendrer (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_typeRoutineAengendrer (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeRoutineAengendrer (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeRoutineAengendrer
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeRoutineAengendrer constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeRoutineAengendrer * getPtr (void) const {
    return (cPtr_typeRoutineAengendrer *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomRoutine (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeTypesEtNomsArgMethode  reader_aListeTypeEtNomsArguments (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeInstructionList  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRoutineAengendrer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRoutineAengendrer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRoutineAengendrer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_listTypeToImplement'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_listTypeToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_listTypeToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_listTypeToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_listTypeToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_listTypeToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_listTypeToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_listTypeToImplement * getPtr (void) const {
    return (cPtr_C_listTypeToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomListe (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mNonExternAttributesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_listTypeToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_listTypeToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_listTypeToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@EXsortDescriptorList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_EXsortDescriptorList ;

class GGS_EXsortDescriptorList : public AC_galgas_list {
  public : typedef elementOf_GGS_EXsortDescriptorList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_EXsortDescriptorList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_EXsortDescriptorList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_EXsortDescriptorList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_EXsortDescriptorList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_EXsortDescriptorList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_EXsortDescriptorList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_bool& _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_bool& _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_bool& _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_bool& _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_EXsortDescriptorList _operator_concat (const GGS_EXsortDescriptorList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_EXsortDescriptorList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_sortedListTypeToImplement'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_sortedListTypeToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_sortedListTypeToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_sortedListTypeToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_sortedListTypeToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_sortedListTypeToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_sortedListTypeToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_EXsortDescriptorList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_sortedListTypeToImplement * getPtr (void) const {
    return (cPtr_C_sortedListTypeToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomListe (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mNonExternAttributesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_EXsortDescriptorList  reader_mSortDescriptorList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_sortedListTypeToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_sortedListTypeToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_sortedListTypeToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeDefinitionTableAimplementer'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDefinitionTableAimplementer : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_typeDefinitionTableAimplementer (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_typeDefinitionTableAimplementer (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeDefinitionTableAimplementer (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeDefinitionTableAimplementer
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeDefinitionTableAimplementer constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_insertOrSearchMethodList & argument_3,
                                const GGS_insertOrSearchMethodList & argument_4,
                                const GGS_typeTableBlocsDeTable & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeDefinitionTableAimplementer * getPtr (void) const {
    return (cPtr_typeDefinitionTableAimplementer *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mNonExternAttributesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_aNomClasseGenerique (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_insertOrSearchMethodList  reader_mInsertMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_insertOrSearchMethodList  reader_mSearchMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeTableBlocsDeTable  reader_aTableMethodesSurcharger (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDefinitionTableAimplementer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDefinitionTableAimplementer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDefinitionTableAimplementer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_mapToImplement'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_mapToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_mapToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_mapToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_mapToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_mapToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_mapToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_insertOrSearchMethodList & argument_2,
                                const GGS_insertOrSearchMethodList & argument_3,
                                const GGS_insertOrSearchMethodList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_mapToImplement * getPtr (void) const {
    return (cPtr_C_mapToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomTable (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mNonExternAttributesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_insertOrSearchMethodList  reader_mInsertMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_insertOrSearchMethodList  reader_mSearchMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_insertOrSearchMethodList  reader_mRemoveMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_mapToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_mapToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_mapToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_classToImplement'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_classToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_classToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_classToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_classToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_classToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_classToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeListeAttributsSemantiques & argument_2,
                                const GGS_typeTableMethodes & argument_3,
                                const GGS_typeTableMethodesAimplementer & argument_4,
                                const GGS_typeListeAttributsSemantiques & argument_5,
                                const GGS_typeSuperClassesMap & argument_6,
                                const GGS_typeClassMessagesMap & argument_7,
                                const GGS_string& argument_8
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_classToImplement * getPtr (void) const {
    return (cPtr_C_classToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomClasse (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIsAbstract (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_aListeTousAttributsNonExternes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeTableMethodes  reader_aTableToutesMethodes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeTableMethodesAimplementer  reader_mMethodsMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_aListeAttributsCourants (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeSuperClassesMap  reader_mAncestorClassesMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeClassMessagesMap  reader_mMessagesMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mClassMessage (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_classToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_classToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_classToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_mapindexToImplement'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_mapindexToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_mapindexToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_mapindexToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_mapindexToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_mapindexToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_mapindexToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeListeAttributsSemantiques & argument_2,
                                const GGS_mapIndexSearchReaderMap & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_mapindexToImplement * getPtr (void) const {
    return (cPtr_C_mapindexToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mMapindexTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMapTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_mMapAttributesList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_mapIndexSearchReaderMap  reader_mMapIndexSearchReaderMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_mapindexToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_mapindexToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_mapindexToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@domainRelationMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_domainRelationMap ;

class GGS_domainRelationMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_domainRelationMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_domainRelationMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_domainRelationMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_domainRelationMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_domainRelationMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_domainRelationMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_stringlist &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_stringlist   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_stringlist & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_stringlist & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_domainRelationMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_domainRelationMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_domainRelationMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_domainRelationMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_domainToImplement'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_domainToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_domainToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_domainToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_domainToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_domainToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_domainToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_domainAttributeMap & argument_1,
                                const GGS_domainRelationMap & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_domainToImplement * getPtr (void) const {
    return (cPtr_C_domainToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mDomainName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_domainAttributeMap  reader_mAttributeMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_domainRelationMap  reader_mRelationMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_domainToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_domainToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_domainToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeEntiteActionExterne'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteActionExterne : public GGS_AC_semanticsEntity {
//--- Default constructor
  public : inline GGS_typeEntiteActionExterne (void) : GGS_AC_semanticsEntity () {}

//--- Pointer assignment constructor
  public : GGS_typeEntiteActionExterne (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeEntiteActionExterne (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeEntiteActionExterne
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeEntiteActionExterne constructor_new (C_Compiler & inLexique,
                                const GGS_L_EXsignature & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeEntiteActionExterne * getPtr (void) const {
    return (cPtr_typeEntiteActionExterne *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_L_EXsignature  reader_aSignature (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- 'messageTypeEntite' message
  public : GGS_string reader_messageTypeEntite (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntiteActionExterne * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntiteActionExterne * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEntiteActionExterne *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeActionExterneAengendrer'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeActionExterneAengendrer : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_typeActionExterneAengendrer (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_typeActionExterneAengendrer (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_typeActionExterneAengendrer (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_typeActionExterneAengendrer
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_typeActionExterneAengendrer constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_L_EXsignature & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_typeActionExterneAengendrer * getPtr (void) const {
    return (cPtr_typeActionExterneAengendrer *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomAction (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_L_EXsignature  reader_aSignature (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeActionExterneAengendrer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeActionExterneAengendrer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeActionExterneAengendrer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@typeEntitiesToGenerateList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEntitiesToGenerateList ;

class GGS_typeEntitiesToGenerateList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeEntitiesToGenerateList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeEntitiesToGenerateList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_typeEntitiesToGenerateList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_typeEntityToGenerate & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeEntitiesToGenerateList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeEntitiesToGenerateList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeEntitiesToGenerateList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_typeEntitiesToGenerateList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeEntityToGenerate & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeEntityToGenerate & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeEntityToGenerate & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeEntityToGenerate & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeEntityToGenerate & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeEntitiesToGenerateList _operator_concat (const GGS_typeEntitiesToGenerateList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeEntityToGenerate & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeEntityToGenerate & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeEntityToGenerate & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeEntitiesToGenerateList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map '@typeEnumCstMessageStringMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEnumCstMessageStringMap ;

class GGS_typeEnumCstMessageStringMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeEnumCstMessageStringMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeEnumCstMessageStringMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeEnumCstMessageStringMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeEnumCstMessageStringMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeEnumCstMessageStringMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeEnumCstMessageStringMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_lstring & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_lstring & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeEnumCstMessageStringMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeEnumCstMessageStringMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeEnumCstMessageStringMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeEnumCstMessageStringMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_enumGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_enumGalgasType : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_enumGalgasType (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_enumGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_enumGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_enumGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_enumGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_enumConstantMap & argument_1,
                                const GGS_typeEnumMessageMap & argument_2,
                                const GGS_enumModifierMap & argument_3,
                                const GGS_enumMethodMap & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_enumGalgasType * getPtr (void) const {
    return (cPtr_enumGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mEnumTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_enumConstantMap  reader_mConstantMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeEnumMessageMap  reader_mEnumMessageMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_enumModifierMap  reader_mEnumActionMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_enumMethodMap  reader_mMethodMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_enumGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_enumGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_enumGalgasType *) mPointer ;
    }
  #endif
} ;

void routine_appendJokersIfNeeded (C_Compiler &,
                                GGS_typeCplusPlusNameList  &,
                                GGS_uint  ,
                                GGS_uint  ,
                                GGS_typeCplusPlusName   COMMA_LOCATION_ARGS) ;

void routine_generateSemanticsComponent (C_Compiler &,
                                GGS_lstring  &,
                                GGS_stringset  &,
                                GGS_string &,
                                GGS_typeEntitiesToGenerateList  &,
                                GGS_stringset  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map '@treewalkingRoutineHeaderMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_treewalkingRoutineHeaderMap ;

class GGS_treewalkingRoutineHeaderMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_treewalkingRoutineHeaderMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_treewalkingRoutineHeaderMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_treewalkingRoutineHeaderMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_treewalkingRoutineHeaderMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_treewalkingRoutineHeaderMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_treewalkingRoutineHeaderMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_EXsignature   & outParameter0,
                                GGS_typeListeTypesEtNomsArgMethode   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_L_EXsignature & inParameter0,
                                   const GGS_typeListeTypesEtNomsArgMethode & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_L_EXsignature & outParameter0,
                                   GGS_typeListeTypesEtNomsArgMethode & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_treewalkingRoutineHeaderMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_treewalkingRoutineHeaderMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_treewalkingRoutineHeaderMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_treewalkingRoutineHeaderMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 list '@treewalkingRoutineToGenerateList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_treewalkingRoutineToGenerateList ;

class GGS_treewalkingRoutineToGenerateList : public AC_galgas_list {
  public : typedef elementOf_GGS_treewalkingRoutineToGenerateList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_treewalkingRoutineToGenerateList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_treewalkingRoutineToGenerateList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_treewalkingRoutineToGenerateList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_treewalkingRoutineToGenerateList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_treewalkingRoutineToGenerateList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_treewalkingRoutineToGenerateList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_typeListeTypesEtNomsArgMethode & _out_1,
                              GGS_typeInstructionList & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_typeListeTypesEtNomsArgMethode & _out_1,
                             GGS_typeInstructionList & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_typeListeTypesEtNomsArgMethode & _out_1,
                                GGS_typeInstructionList & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_typeListeTypesEtNomsArgMethode & _out_1,
                                 GGS_typeInstructionList & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_treewalkingRoutineToGenerateList _operator_concat (const GGS_treewalkingRoutineToGenerateList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_treewalkingRoutineToGenerateList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                sorted list '@routineDispatcherSortedList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDispatcherSortedList ;

class GGS_routineDispatcherSortedList : public AC_galgas_sortedlist {
  public : typedef elementOf_GGS_routineDispatcherSortedList cElement ;
//--- Default Constructor
  public : GGS_routineDispatcherSortedList (void) ;
//--- Copy Constructor
  public : GGS_routineDispatcherSortedList (const GGS_routineDispatcherSortedList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (const GGS_routineDispatcherSortedList & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineDispatcherSortedList & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_routineDispatcherSortedList constructor_emptySortedList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_routineDispatcherSortedList constructor_sortedListWithValue (C_Compiler & _inLexique,
                                const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_routineDispatcherSortedList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & _inLexique,
                              GGS_string& _out_0,
                              GGS_uint & _out_1,
                              GGS_string& _out_2,
                              GGS_string& _out_3,
                              GGS_string& _out_4
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & _inLexique,
                             GGS_string& _out_0,
                             GGS_uint & _out_1,
                             GGS_string& _out_2,
                             GGS_string& _out_3,
                             GGS_string& _out_4
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & _inLexique,
                                GGS_string& _out_0,
                                GGS_uint & _out_1,
                                GGS_string& _out_2,
                                GGS_string& _out_3,
                                GGS_string& _out_4
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & _inLexique,
                                 GGS_string& _out_0,
                                 GGS_uint & _out_1,
                                 GGS_string& _out_2,
                                 GGS_string& _out_3,
                                 GGS_string& _out_4
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4) ;
//--- Handling '.' GALGAS operator
  public : GGS_routineDispatcherSortedList _operator_concat (const GGS_routineDispatcherSortedList & inOperand) const ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_string& argument_0,
                                const GGS_uint & argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_routineDispatcherSortedList & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

void routine_generate_treewalking (C_Compiler &,
                                const GGS_lstring  ,
                                const GGS_stringset  ,
                                const GGS_stringset  ,
                                const GGS_treewalkingRoutineToGenerateList  ,
                                const GGS_routineDispatcherSortedList  ,
                                const GGS_typeListeTypesEtNomsArgMethode  ,
                                const GGS_lstring   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_callInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_callInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : inline GGS_callInstruction (void) : GGS_typeInstruction () {}

//--- Pointer assignment constructor
  public : GGS_callInstruction (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_callInstruction (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_callInstruction
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_callInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_AC_galgasType & argument_2,
                                const GGS_typeExpressionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_callInstruction * getPtr (void) const {
    return (cPtr_callInstruction *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mCalledPropertyName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mEntityName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_AC_galgasType  reader_mPropertyType (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeExpressionList  reader_mExpressionsList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_callInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_callInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_callInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_C_metamodelEntityToImplement'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_metamodelEntityToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_metamodelEntityToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_metamodelEntityToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_metamodelEntityToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_metamodelEntityToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_metamodelEntityToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1,
                                const GGS_typeListeAttributsSemantiques & argument_2,
                                const GGS_typeListeAttributsSemantiques & argument_3,
                                const GGS_string& argument_4,
                                const GGS_uint & argument_5
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_metamodelEntityToImplement * getPtr (void) const {
    return (cPtr_C_metamodelEntityToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_aNomClasse (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_bool reader_mIsAbstract (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_aListeTousAttributsNonExternes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeListeAttributsSemantiques  reader_aListeAttributsCourants (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mSuperClassName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_uint  reader_mMetamodelClassID (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_metamodelEntityToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_metamodelEntityToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_metamodelEntityToImplement *) mPointer ;
    }
  #endif
} ;

void routine_generate_metamodel (C_Compiler &,
                                GGS_entityToImplementMap  ,
                                GGS_lstring  ,
                                GGS_typeEntitiesToGenerateList  ,
                                GGS_lstring  ,
                                GGS_stringlist   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@ruleDescriptorForProgramList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ruleDescriptorForProgramList ;

class GGS_ruleDescriptorForProgramList : public AC_galgas_list {
  public : typedef elementOf_GGS_ruleDescriptorForProgramList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_ruleDescriptorForProgramList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_ruleDescriptorForProgramList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_ruleDescriptorForProgramList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_ruleDescriptorForProgramList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_ruleDescriptorForProgramList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operators () used for method call
  public : const GGS_ruleDescriptorForProgramList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_string& _out_1,
                              GGS_lstring & _out_2,
                              GGS_typeInstructionList & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_string& _out_1,
                             GGS_lstring & _out_2,
                             GGS_typeInstructionList & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_string& _out_1,
                                GGS_lstring & _out_2,
                                GGS_typeInstructionList & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_string& _out_1,
                                 GGS_lstring & _out_2,
                                 GGS_typeInstructionList & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeInstructionList & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_ruleDescriptorForProgramList _operator_concat (const GGS_ruleDescriptorForProgramList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_typeInstructionList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_ruleDescriptorForProgramList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

void routine_performMetamodelInclusion (C_Compiler &,
                                const GGS_M_metamodelsComponents  ,
                                const GGS_lstring  ,
                                GGS_stringset  &,
                                GGS_entityToImplementMap  & COMMA_LOCATION_ARGS) ;

void routine_fixFileGenerationStartDirectory (C_Compiler &,
                                const GGS_lstring   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   sorted list '@wrapperFileSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperFileSortedList ;

class GGS_wrapperFileSortedList : public AC_galgas_sortedlist {
  public : typedef elementOf_GGS_wrapperFileSortedList cElement ;
//--- Default Constructor
  public : GGS_wrapperFileSortedList (void) ;
//--- Copy Constructor
  public : GGS_wrapperFileSortedList (const GGS_wrapperFileSortedList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (const GGS_wrapperFileSortedList & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_wrapperFileSortedList & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_wrapperFileSortedList constructor_emptySortedList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_wrapperFileSortedList constructor_sortedListWithValue (C_Compiler & _inLexique,
                                const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_wrapperFileSortedList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & _inLexique,
                              GGS_string& _out_0,
                              GGS_string& _out_1,
                              GGS_uint & _out_2,
                              GGS_uint & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & _inLexique,
                             GGS_string& _out_0,
                             GGS_string& _out_1,
                             GGS_uint & _out_2,
                             GGS_uint & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & _inLexique,
                                GGS_string& _out_0,
                                GGS_string& _out_1,
                                GGS_uint & _out_2,
                                GGS_uint & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & _inLexique,
                                 GGS_string& _out_0,
                                 GGS_string& _out_1,
                                 GGS_uint & _out_2,
                                 GGS_uint & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_wrapperFileSortedList _operator_concat (const GGS_wrapperFileSortedList & inOperand) const ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_uint & argument_2,
                                const GGS_uint & argument_3) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_wrapperFileSortedList & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                sorted list '@wrapperDirectorySortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperDirectorySortedList ;

class GGS_wrapperDirectorySortedList : public AC_galgas_sortedlist {
  public : typedef elementOf_GGS_wrapperDirectorySortedList cElement ;
//--- Default Constructor
  public : GGS_wrapperDirectorySortedList (void) ;
//--- Copy Constructor
  public : GGS_wrapperDirectorySortedList (const GGS_wrapperDirectorySortedList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (const GGS_wrapperDirectorySortedList & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_wrapperDirectorySortedList & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_wrapperDirectorySortedList constructor_emptySortedList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_wrapperDirectorySortedList constructor_sortedListWithValue (C_Compiler & _inLexique,
                                const GGS_string& argument_0,
                                const GGS_wrapperFileSortedList & argument_1,
                                const GGS_wrapperDirectorySortedList & argument_2,
                                const GGS_uint & argument_3
                                COMMA_LOCATION_ARGS) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_wrapperDirectorySortedList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & _inLexique,
                              GGS_string& _out_0,
                              GGS_wrapperFileSortedList & _out_1,
                              GGS_wrapperDirectorySortedList & _out_2,
                              GGS_uint & _out_3
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & _inLexique,
                             GGS_string& _out_0,
                             GGS_wrapperFileSortedList & _out_1,
                             GGS_wrapperDirectorySortedList & _out_2,
                             GGS_uint & _out_3
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & _inLexique,
                                GGS_string& _out_0,
                                GGS_wrapperFileSortedList & _out_1,
                                GGS_wrapperDirectorySortedList & _out_2,
                                GGS_uint & _out_3
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & _inLexique,
                                 GGS_string& _out_0,
                                 GGS_wrapperFileSortedList & _out_1,
                                 GGS_wrapperDirectorySortedList & _out_2,
                                 GGS_uint & _out_3
                                 COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_string& argument_0,
                                const GGS_wrapperFileSortedList & argument_1,
                                const GGS_wrapperDirectorySortedList & argument_2,
                                const GGS_uint & argument_3) ;
//--- Handling '.' GALGAS operator
  public : GGS_wrapperDirectorySortedList _operator_concat (const GGS_wrapperDirectorySortedList & inOperand) const ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_string& argument_0,
                                const GGS_wrapperFileSortedList & argument_1,
                                const GGS_wrapperDirectorySortedList & argument_2,
                                const GGS_uint & argument_3) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_wrapperDirectorySortedList & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@wrapperExtensionMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperExtensionMap ;

class GGS_wrapperExtensionMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_wrapperExtensionMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_wrapperExtensionMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_wrapperExtensionMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_wrapperExtensionMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_wrapperExtensionMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_wrapperExtensionMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_wrapperExtensionMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_wrapperExtensionMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_wrapperExtensionMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_wrapperExtensionMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_wrapperToImplement'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_wrapperToImplement : public GGS_typeEntityToGenerate {
//--- Default constructor
  public : inline GGS_C_wrapperToImplement (void) : GGS_typeEntityToGenerate () {}

//--- Pointer assignment constructor
  public : GGS_C_wrapperToImplement (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_C_wrapperToImplement (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_C_wrapperToImplement
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_C_wrapperToImplement constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_string& argument_1,
                                const GGS_wrapperExtensionMap & argument_2,
                                const GGS_wrapperFileSortedList & argument_3,
                                const GGS_wrapperDirectorySortedList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_C_wrapperToImplement * getPtr (void) const {
    return (cPtr_C_wrapperToImplement *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mWrapperName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_mSourceDirectory (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_wrapperExtensionMap  reader_mExtensionMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_wrapperFileSortedList  reader_mRegularFileSortedList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_wrapperDirectorySortedList  reader_mDirectorySortedList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_wrapperToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_wrapperToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_wrapperToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@typeCplusPlusNameList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeCplusPlusNameList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeCplusPlusName  mCppName ;
//--- Constructor
  public : elementOf_GGS_typeCplusPlusNameList (const GGS_typeCplusPlusName & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeCplusPlusNameList * nextObject (void) const { return (elementOf_GGS_typeCplusPlusNameList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeCplusPlusNameList * previousObject (void) const { return (elementOf_GGS_typeCplusPlusNameList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeCplusPlusNameList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@typeClassMessagesMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeClassMessagesMap {
  public : GGS_lstring  mMessage ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeClassMessagesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeClassMessagesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeClassMessagesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeClassMessagesMap * nextObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mNextItem ; }
  public : inline elementOf_GGS_typeClassMessagesMap * infObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeClassMessagesMap * supObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeClassMessagesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeSemanticsTypesList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeSemanticsTypesList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_AC_galgasType  mType ;
  public : GGS_lstring  mGalgasVariableName ;
//--- Constructor
  public : elementOf_GGS_typeSemanticsTypesList (const GGS_AC_galgasType & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeSemanticsTypesList * nextObject (void) const { return (elementOf_GGS_typeSemanticsTypesList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeSemanticsTypesList * previousObject (void) const { return (elementOf_GGS_typeSemanticsTypesList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeSemanticsTypesList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@L_assignedVariables'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_assignedVariables : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeCplusPlusName  aNomVariableCible ;
  public : GGS_lstring  aNomAttributSource ;
//--- Constructor
  public : elementOf_GGS_L_assignedVariables (const GGS_typeCplusPlusName & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_L_assignedVariables * nextObject (void) const { return (elementOf_GGS_L_assignedVariables *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_L_assignedVariables * previousObject (void) const { return (elementOf_GGS_L_assignedVariables *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_L_assignedVariables ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeCible.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@typeListeCibles'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCibles : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeCible  aCible ;
//--- Constructor
  public : elementOf_GGS_typeListeCibles (const GGS_typeCible & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeListeCibles * nextObject (void) const { return (elementOf_GGS_typeListeCibles *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeListeCibles * previousObject (void) const { return (elementOf_GGS_typeListeCibles *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeListeCibles ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_nameWithType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_nameWithType : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mType ;
  public : GGS_lstring  mName ;
//--- Constructor
  public : elementOf_GGS_L_nameWithType (const GGS_lstring & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_L_nameWithType * nextObject (void) const { return (elementOf_GGS_L_nameWithType *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_L_nameWithType * previousObject (void) const { return (elementOf_GGS_L_nameWithType *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_L_nameWithType ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@typeExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeExpressionList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeExpression  mExpression ;
//--- Constructor
  public : elementOf_GGS_typeExpressionList (const GGS_typeExpression & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeExpressionList * nextObject (void) const { return (elementOf_GGS_typeExpressionList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeExpressionList * previousObject (void) const { return (elementOf_GGS_typeExpressionList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@varToDropList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_varToDropList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeCplusPlusName  mVarToDrop ;
//--- Constructor
  public : elementOf_GGS_varToDropList (const GGS_typeCplusPlusName & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_varToDropList * nextObject (void) const { return (elementOf_GGS_varToDropList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_varToDropList * previousObject (void) const { return (elementOf_GGS_varToDropList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_varToDropList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeErrorInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeWarningInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeMessageInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeMethodCallInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeCallOfTypeMethodInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeModifierCallInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeInstructionAppelMethodeListe.h"

//---------------------------------------------------------------------------*

#include "include_typeInstructionDeclarationVarLocale.h"

//---------------------------------------------------------------------------*

#include "include_typeMapBlockPrologueInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeMapBlockEpilogueInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeReaderCallInExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeFileWrapperWithStaticPath.h"

//---------------------------------------------------------------------------*

#include "include_typeFileWrapperObjectInstanciation.h"

//---------------------------------------------------------------------------*

#include "include_typeDescriptionInExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeCastInExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeAndOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeOrOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeXorOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeConcatOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeTrueBool.h"

//---------------------------------------------------------------------------*

#include "include_typeFalseBool.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralStringExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralUIntExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralSIntExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralUInt64Expression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralSInt64Expression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralCharExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeLiteralDoubleExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeHereExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeConstructorExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeTestComplement.h"

//---------------------------------------------------------------------------*

#include "include_typeLogicalNegate.h"

//---------------------------------------------------------------------------*

#include "include_typeBoolOption.h"

//---------------------------------------------------------------------------*

#include "include_typeUIntOption.h"

//---------------------------------------------------------------------------*

#include "include_typeStringOption.h"

//---------------------------------------------------------------------------*

#include "include_typeVarInExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeJokerInExpression.h"

//---------------------------------------------------------------------------*

#include "include_typeAddOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeSubOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeMultiplyOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeDivideOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeModuloOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeUnaryMinusOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeEqualTest.h"

//---------------------------------------------------------------------------*

#include "include_typeNonEqualTest.h"

//---------------------------------------------------------------------------*

#include "include_typeStrictInfTest.h"

//---------------------------------------------------------------------------*

#include "include_typeInfOrEqualTest.h"

//---------------------------------------------------------------------------*

#include "include_typeStrictSupTest.h"

//---------------------------------------------------------------------------*

#include "include_typeSupOrEqualTest.h"

//---------------------------------------------------------------------------*

#include "include_typeLeftShiftOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeRightShiftOperation.h"

//---------------------------------------------------------------------------*

#include "include_typeTextTableCall.h"

//---------------------------------------------------------------------------*

#include "include_C_assignmentInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_dotEqualInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_declarationInstructionWithAssignment.h"

//---------------------------------------------------------------------------*

#include "include_C_while_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of list '@L_expression_instructionsList_list'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_expression_instructionsList_list : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeExpression  mIFexpression ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_L_expression_instructionsList_list (const GGS_typeExpression & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_L_expression_instructionsList_list * nextObject (void) const { return (elementOf_GGS_L_expression_instructionsList_list *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_L_expression_instructionsList_list * previousObject (void) const { return (elementOf_GGS_L_expression_instructionsList_list *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_L_expression_instructionsList_list ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_if_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@L_switchBranchlist'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_switchBranchlist : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_stringset  mConstantSet ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_L_switchBranchlist (const GGS_stringset & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_L_switchBranchlist * nextObject (void) const { return (elementOf_GGS_L_switchBranchlist *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_L_switchBranchlist * previousObject (void) const { return (elementOf_GGS_L_switchBranchlist *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_L_switchBranchlist ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_switch_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableRoutinesAimplementer'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableRoutinesAimplementer {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableRoutinesAimplementer : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableRoutinesAimplementer (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableRoutinesAimplementer & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * nextObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mNextItem ; }
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * infObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * supObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeTableRoutinesAimplementer mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableAttributsSemantiques'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableAttributsSemantiques {
  public : GGS_typeCplusPlusName  aNomCppAttribut ;
  public : GGS_AC_galgasType  mAttributType ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableAttributsSemantiques : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableAttributsSemantiques (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableAttributsSemantiques & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableAttributsSemantiques * nextObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mNextItem ; }
  public : inline elementOf_GGS_typeTableAttributsSemantiques * infObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableAttributsSemantiques * supObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeTableAttributsSemantiques mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeJoker.h"

//---------------------------------------------------------------------------*

#include "include_typeEntiteDest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of map '@M_nonTerminalSymbolForSyntax'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_nonTerminalSymbolForSyntax {
  public : GGS_M_nonterminalSymbolAlts  mAltParametersMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_nonTerminalSymbolForSyntax : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_nonTerminalSymbolForSyntax (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_nonTerminalSymbolForSyntax & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * nextObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mNextItem ; }
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * infObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mInfPtr ; }
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * supObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_M_nonTerminalSymbolForSyntax mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_grammarInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_treewalkingInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeAppendInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeRemoveInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeIncrementInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeDecrementInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@L_matchInstructionCasesList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_matchInstructionCasesList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mCase1_name ;
  public : GGS_lstring  mCase2_name ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_L_matchInstructionCasesList (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_L_matchInstructionCasesList * nextObject (void) const { return (elementOf_GGS_L_matchInstructionCasesList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_L_matchInstructionCasesList * previousObject (void) const { return (elementOf_GGS_L_matchInstructionCasesList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_L_matchInstructionCasesList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeMatchInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@foreachEnumerationList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachEnumerationList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeExpression  mSourceExpression ;
  public : GGS_location  mLocationOffset ;
  public : GGS_string mCppTypeName ;
  public : GGS_bool mAscending ;
//--- Constructor
  public : elementOf_GGS_foreachEnumerationList (const GGS_typeExpression & ,
                                const GGS_location & ,
                                const GGS_string& ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_foreachEnumerationList * nextObject (void) const { return (elementOf_GGS_foreachEnumerationList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_foreachEnumerationList * previousObject (void) const { return (elementOf_GGS_foreachEnumerationList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_foreachEnumerationList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeForeachInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeSimpleExtractInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@typeStructuredExtractCasesList'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredExtractCasesList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mClassName ;
  public : GGS_location  mResultVarID ;
  public : GGS_typeInstructionList  mInstructionList ;
  public : GGS_bool mNoUsedParameter ;
//--- Constructor
  public : elementOf_GGS_typeStructuredExtractCasesList (const GGS_lstring & ,
                                const GGS_location & ,
                                const GGS_typeInstructionList & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeStructuredExtractCasesList * nextObject (void) const { return (elementOf_GGS_typeStructuredExtractCasesList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeStructuredExtractCasesList * previousObject (void) const { return (elementOf_GGS_typeStructuredExtractCasesList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeStructuredExtractCasesList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeStructuredExtractInstructionWithElse.h"

//---------------------------------------------------------------------------*

#include "include_AC_elseOrDefaultForCastInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_elseForCastInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_defaultForCastInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeStructuredCastBranchList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredCastBranchList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mCastClassName ;
  public : GGS_bool mCheckForKindOfClass ;
  public : GGS_typeCplusPlusNameList  mLocalConstantName ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_typeStructuredCastBranchList (const GGS_lstring & ,
                                const GGS_bool& ,
                                const GGS_typeCplusPlusNameList & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeStructuredCastBranchList * nextObject (void) const { return (elementOf_GGS_typeStructuredCastBranchList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeStructuredCastBranchList * previousObject (void) const { return (elementOf_GGS_typeStructuredCastBranchList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeStructuredCastBranchList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeStructuredCastInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeRoutineCallInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeLogInstruction.h"

//---------------------------------------------------------------------------*

#include "include_typeDropInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableNomRoutinesDeclarees'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableNomRoutinesDeclarees {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableNomRoutinesDeclarees : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableNomRoutinesDeclarees (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableNomRoutinesDeclarees & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * nextObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mNextItem ; }
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * infObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * supObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeTableNomRoutinesDeclarees mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeEntityToGenerate.h"

//---------------------------------------------------------------------------*

#include "include_typeExternTypeToGenerate.h"

//---------------------------------------------------------------------------*

#include "include_typeRoutineAengendrer.h"

//---------------------------------------------------------------------------*

#include "include_C_listTypeToImplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@EXsortDescriptorList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_EXsortDescriptorList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mSortAttribute ;
  public : GGS_bool mAscendingOrder ;
//--- Constructor
  public : elementOf_GGS_EXsortDescriptorList (const GGS_lstring & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_EXsortDescriptorList * nextObject (void) const { return (elementOf_GGS_EXsortDescriptorList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_EXsortDescriptorList * previousObject (void) const { return (elementOf_GGS_EXsortDescriptorList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_EXsortDescriptorList ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_sortedListTypeToImplement.h"

//---------------------------------------------------------------------------*

#include "include_typeDefinitionTableAimplementer.h"

//---------------------------------------------------------------------------*

#include "include_C_mapToImplement.h"

//---------------------------------------------------------------------------*

#include "include_C_classToImplement.h"

//---------------------------------------------------------------------------*

#include "include_C_mapindexToImplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@domainRelationMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_domainRelationMap {
  public : GGS_stringlist  mDomains ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_domainRelationMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_domainRelationMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_domainRelationMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_domainRelationMap * nextObject (void) const { return (elementOf_GGS_domainRelationMap *) mNextItem ; }
  public : inline elementOf_GGS_domainRelationMap * infObject (void) const { return (elementOf_GGS_domainRelationMap *) mInfPtr ; }
  public : inline elementOf_GGS_domainRelationMap * supObject (void) const { return (elementOf_GGS_domainRelationMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_domainRelationMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_domainToImplement.h"

//---------------------------------------------------------------------------*

#include "include_typeEntiteActionExterne.h"

//---------------------------------------------------------------------------*

#include "include_typeActionExterneAengendrer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@typeEntitiesToGenerateList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEntitiesToGenerateList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeEntityToGenerate  mEntityToGenerate ;
//--- Constructor
  public : elementOf_GGS_typeEntitiesToGenerateList (const GGS_typeEntityToGenerate & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeEntitiesToGenerateList * nextObject (void) const { return (elementOf_GGS_typeEntitiesToGenerateList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeEntitiesToGenerateList * previousObject (void) const { return (elementOf_GGS_typeEntitiesToGenerateList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeEntitiesToGenerateList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of map '@typeEnumCstMessageStringMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeEnumCstMessageStringMap {
  public : GGS_lstring  mMessageString ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeEnumCstMessageStringMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeEnumCstMessageStringMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeEnumCstMessageStringMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * nextObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mNextItem ; }
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * infObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * supObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeEnumCstMessageStringMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_enumGalgasType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of map '@treewalkingRoutineHeaderMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_treewalkingRoutineHeaderMap {
  public : GGS_L_EXsignature  mRoutineSignature ;
  public : GGS_typeListeTypesEtNomsArgMethode  mFormalArgumentList ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_treewalkingRoutineHeaderMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_treewalkingRoutineHeaderMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_treewalkingRoutineHeaderMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_treewalkingRoutineHeaderMap * nextObject (void) const { return (elementOf_GGS_treewalkingRoutineHeaderMap *) mNextItem ; }
  public : inline elementOf_GGS_treewalkingRoutineHeaderMap * infObject (void) const { return (elementOf_GGS_treewalkingRoutineHeaderMap *) mInfPtr ; }
  public : inline elementOf_GGS_treewalkingRoutineHeaderMap * supObject (void) const { return (elementOf_GGS_treewalkingRoutineHeaderMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_treewalkingRoutineHeaderMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of list '@treewalkingRoutineToGenerateList'             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_treewalkingRoutineToGenerateList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mMetamodelClass ;
  public : GGS_typeListeTypesEtNomsArgMethode  mFormalArgumentList ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_treewalkingRoutineToGenerateList (const GGS_lstring & ,
                                const GGS_typeListeTypesEtNomsArgMethode & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_treewalkingRoutineToGenerateList * nextObject (void) const { return (elementOf_GGS_treewalkingRoutineToGenerateList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_treewalkingRoutineToGenerateList * previousObject (void) const { return (elementOf_GGS_treewalkingRoutineToGenerateList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_treewalkingRoutineToGenerateList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of sorted list '@routineDispatcherSortedList'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineDispatcherSortedList : public AC_galgas_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_string mMetamodelClassIDString ;
  public : GGS_uint  mMetamodelClassID ;
  public : GGS_string mRoutineName ;
  public : GGS_string mEntityName ;
  public : GGS_string mMetamodelName ;
//--- Constructor
  public : elementOf_GGS_routineDispatcherSortedList (const GGS_string& ,
                                const GGS_uint & ,
                                const GGS_string& ,
                                const GGS_string& ,
                                const GGS_string& ) ;

//--- Access to next
  public : inline elementOf_GGS_routineDispatcherSortedList * nextObject (void) const { return (elementOf_GGS_routineDispatcherSortedList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_routineDispatcherSortedList * previousObject (void) const { return (elementOf_GGS_routineDispatcherSortedList *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual sint32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;
  friend class GGS_routineDispatcherSortedList ;
} ;

//---------------------------------------------------------------------------*

#include "include_callInstruction.h"

//---------------------------------------------------------------------------*

#include "include_C_metamodelEntityToImplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@ruleDescriptorForProgramList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_ruleDescriptorForProgramList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mSourceExtension ;
  public : GGS_string mHelpMessage ;
  public : GGS_lstring  mSourceFileName ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Constructor
  public : elementOf_GGS_ruleDescriptorForProgramList (const GGS_lstring & ,
                                const GGS_string& ,
                                const GGS_lstring & ,
                                const GGS_typeInstructionList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_ruleDescriptorForProgramList * nextObject (void) const { return (elementOf_GGS_ruleDescriptorForProgramList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_ruleDescriptorForProgramList * previousObject (void) const { return (elementOf_GGS_ruleDescriptorForProgramList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_ruleDescriptorForProgramList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of sorted list '@wrapperFileSortedList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperFileSortedList : public AC_galgas_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_string mRegularFileName ;
  public : GGS_string mAbsoluteFilePath ;
  public : GGS_uint  mWrapperDirectoryIndex ;
  public : GGS_uint  mWrapperFileIndex ;
//--- Constructor
  public : elementOf_GGS_wrapperFileSortedList (const GGS_string& ,
                                const GGS_string& ,
                                const GGS_uint & ,
                                const GGS_uint & ) ;

//--- Access to next
  public : inline elementOf_GGS_wrapperFileSortedList * nextObject (void) const { return (elementOf_GGS_wrapperFileSortedList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_wrapperFileSortedList * previousObject (void) const { return (elementOf_GGS_wrapperFileSortedList *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual sint32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;
  friend class GGS_wrapperFileSortedList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Element of sorted list '@wrapperDirectorySortedList'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperDirectorySortedList : public AC_galgas_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_string mDirectoryName ;
  public : GGS_wrapperFileSortedList  mRegularFileSortedList ;
  public : GGS_wrapperDirectorySortedList  mDirectorySortedList ;
  public : GGS_uint  mWrapperDirectoryIndex ;
//--- Constructor
  public : elementOf_GGS_wrapperDirectorySortedList (const GGS_string& ,
                                const GGS_wrapperFileSortedList & ,
                                const GGS_wrapperDirectorySortedList & ,
                                const GGS_uint & ) ;

//--- Access to next
  public : inline elementOf_GGS_wrapperDirectorySortedList * nextObject (void) const { return (elementOf_GGS_wrapperDirectorySortedList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_wrapperDirectorySortedList * previousObject (void) const { return (elementOf_GGS_wrapperDirectorySortedList *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual sint32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;
  friend class GGS_wrapperDirectorySortedList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@wrapperExtensionMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_wrapperExtensionMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_wrapperExtensionMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_wrapperExtensionMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_wrapperExtensionMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_wrapperExtensionMap * nextObject (void) const { return (elementOf_GGS_wrapperExtensionMap *) mNextItem ; }
  public : inline elementOf_GGS_wrapperExtensionMap * infObject (void) const { return (elementOf_GGS_wrapperExtensionMap *) mInfPtr ; }
  public : inline elementOf_GGS_wrapperExtensionMap * supObject (void) const { return (elementOf_GGS_wrapperExtensionMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_wrapperExtensionMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_C_wrapperToImplement.h"

//---------------------------------------------------------------------------*

#endif
