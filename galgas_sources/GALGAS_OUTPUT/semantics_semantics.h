//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semantics_semantics.h'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      june 10th, 2006, at 17h19'55"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semantics_semantics_DEFINED
#define semantics_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

// Include imported semantics
#include "common_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCplusPlusName ;
class cPtr_typeCplusPlusName ;
class GGS_typeDirectName ;
class cPtr_typeDirectName ;
class GGS_typeCppThisName ;
class cPtr_typeCppThisName ;
class GGS_typeCppInheritedName ;
class cPtr_typeCppInheritedName ;
class GGS_typeAutomaticName ;
class cPtr_typeAutomaticName ;
class GGS_typeLocationAutomaticName ;
class cPtr_typeLocationAutomaticName ;
class GGS_typeOperandName ;
class cPtr_typeOperandName ;
class GGS_typeKeyName ;
class cPtr_typeKeyName ;
class GGS_typeNullName ;
class cPtr_typeNullName ;
class GGS_typeCplusPlusNameList ;
class GGS_typeExpression ;
class cPtr_typeExpression ;
class GGS_typeClassMessagesMap ;
class GGS_typeSemanticsTypesList ;
class GGS_typeVariablesMap ;
#include "cGalgasVariablesMap.h"
class GGS_L_assignedVariables ;
class GGS_typeCible ;
class cPtr_typeCible ;
class GGS_typeListeCibles ;
class GGS_typeListeTypesEtNomsArgMethode ;
class GGS_typeInstruction ;
class cPtr_typeInstruction ;
class GGS_typeInstructionList ;
class GGS_L_nameWithType ;
class GGS_typeTableMethodesAimplementer ;
#include "cTableMethodesAimplementer.h"
class GGS_typeExpressionList ;
class GGS_varToDropList ;
class GGS_typeErrorInstruction ;
class cPtr_typeErrorInstruction ;
class GGS_typeWarningInstruction ;
class cPtr_typeWarningInstruction ;
class GGS_typeMessageInstruction ;
class cPtr_typeMessageInstruction ;
class GGS_typeReaderCallInstruction ;
class cPtr_typeReaderCallInstruction ;
class GGS_typeModifierCallInstruction ;
class cPtr_typeModifierCallInstruction ;
class GGS_typeInstructionAppelMethodeListe ;
class cPtr_typeInstructionAppelMethodeListe ;
class GGS_typeInstructionDeclarationVarLocale ;
class cPtr_typeInstructionDeclarationVarLocale ;
class GGS_typeMapBlockPrologueInstruction ;
class cPtr_typeMapBlockPrologueInstruction ;
class GGS_typeMapBlockEpilogueInstruction ;
class cPtr_typeMapBlockEpilogueInstruction ;
class GGS_typeReaderCallInExpression ;
class cPtr_typeReaderCallInExpression ;
class GGS_typeAndOperation ;
class cPtr_typeAndOperation ;
class GGS_typeOrOperation ;
class cPtr_typeOrOperation ;
class GGS_typeXorOperation ;
class cPtr_typeXorOperation ;
class GGS_typeConcatOperation ;
class cPtr_typeConcatOperation ;
class GGS_typeTrueBool ;
class cPtr_typeTrueBool ;
class GGS_typeFalseBool ;
class cPtr_typeFalseBool ;
class GGS_typeLiteralStringExpression ;
class cPtr_typeLiteralStringExpression ;
class GGS_typeLiteralUIntExpression ;
class cPtr_typeLiteralUIntExpression ;
class GGS_typeLiteralSIntExpression ;
class cPtr_typeLiteralSIntExpression ;
class GGS_typeLiteralUInt64Expression ;
class cPtr_typeLiteralUInt64Expression ;
class GGS_typeLiteralSInt64Expression ;
class cPtr_typeLiteralSInt64Expression ;
class GGS_typeLiteralCharExpression ;
class cPtr_typeLiteralCharExpression ;
class GGS_typeLiteralDoubleExpression ;
class cPtr_typeLiteralDoubleExpression ;
class GGS_typeHereExpression ;
class cPtr_typeHereExpression ;
class GGS_typeConstructorExpression ;
class cPtr_typeConstructorExpression ;
class GGS_typeTestComplement ;
class cPtr_typeTestComplement ;
class GGS_typeLogicalNegate ;
class cPtr_typeLogicalNegate ;
class GGS_typeBoolOption ;
class cPtr_typeBoolOption ;
class GGS_typeUIntOption ;
class cPtr_typeUIntOption ;
class GGS_typeStringOption ;
class cPtr_typeStringOption ;
class GGS_typeVarInExpression ;
class cPtr_typeVarInExpression ;
class GGS_typeJokerInExpression ;
class cPtr_typeJokerInExpression ;
class GGS_typeAddOperation ;
class cPtr_typeAddOperation ;
class GGS_typeSubOperation ;
class cPtr_typeSubOperation ;
class GGS_typeMultiplyOperation ;
class cPtr_typeMultiplyOperation ;
class GGS_typeDivideOperation ;
class cPtr_typeDivideOperation ;
class GGS_typeModuloOperation ;
class cPtr_typeModuloOperation ;
class GGS_typeUnaryMinusOperation ;
class cPtr_typeUnaryMinusOperation ;
class GGS_typeEqualTest ;
class cPtr_typeEqualTest ;
class GGS_typeNonEqualTest ;
class cPtr_typeNonEqualTest ;
class GGS_typeStrictInfTest ;
class cPtr_typeStrictInfTest ;
class GGS_typeInfOrEqualTest ;
class cPtr_typeInfOrEqualTest ;
class GGS_typeStrictSupTest ;
class cPtr_typeStrictSupTest ;
class GGS_typeSupOrEqualTest ;
class cPtr_typeSupOrEqualTest ;
class GGS_typeLeftShiftOperation ;
class cPtr_typeLeftShiftOperation ;
class GGS_typeRightShiftOperation ;
class cPtr_typeRightShiftOperation ;
class GGS_typeTextTableCall ;
class cPtr_typeTextTableCall ;
class GGS_C_assignmentInstruction ;
class cPtr_C_assignmentInstruction ;
class GGS_C_declarationInstructionWithAssignment ;
class cPtr_C_declarationInstructionWithAssignment ;
class GGS_C_while_instruction ;
class cPtr_C_while_instruction ;
class GGS_L_expression_instructionsList_list ;
class GGS_C_if_instruction ;
class cPtr_C_if_instruction ;
class GGS_typeTableRoutinesAimplementer ;
class GGS_typeTableAttributsSemantiques ;
class GGS_typeJoker ;
class cPtr_typeJoker ;
class GGS_typeEntiteDest ;
class cPtr_typeEntiteDest ;
class GGS_M_nonTerminalSymbolForSyntax ;
class GGS_C_grammarInstruction ;
class cPtr_C_grammarInstruction ;
class GGS_typeAppendInstruction ;
class cPtr_typeAppendInstruction ;
class GGS_typeRemoveInstruction ;
class cPtr_typeRemoveInstruction ;
class GGS_typeIncrementInstruction ;
class cPtr_typeIncrementInstruction ;
class GGS_typeDecrementInstruction ;
class cPtr_typeDecrementInstruction ;
class GGS_typeInstructionAppelActionExterne ;
class cPtr_typeInstructionAppelActionExterne ;
class GGS_L_matchInstructionCasesList ;
class GGS_typeMatchInstruction ;
class cPtr_typeMatchInstruction ;
class GGS_foreachEnumerationList ;
class GGS_typeForeachInstruction ;
class cPtr_typeForeachInstruction ;
class GGS_typeSimpleExtractInstruction ;
class cPtr_typeSimpleExtractInstruction ;
class GGS_typeStructuredExtractCasesList ;
class GGS_typeStructuredExtractInstructionWithElse ;
class cPtr_typeStructuredExtractInstructionWithElse ;
class GGS_typeRoutineCallInstruction ;
class cPtr_typeRoutineCallInstruction ;
class GGS_typeDropInstruction ;
class cPtr_typeDropInstruction ;
class GGS_typeTableNomRoutinesDeclarees ;
class GGS_typeEntityToGenerate ;
class cPtr_typeEntityToGenerate ;
class GGS_typeExternTypeToGenerate ;
class cPtr_typeExternTypeToGenerate ;
class GGS_typeRoutineAengendrer ;
class cPtr_typeRoutineAengendrer ;
class GGS_C_listTypeToImplement ;
class cPtr_C_listTypeToImplement ;
class GGS_typeDefinitionTableAimplementer ;
class cPtr_typeDefinitionTableAimplementer ;
class GGS_C_mapToImplement ;
class cPtr_C_mapToImplement ;
class GGS_typeDefClasseAbstraiteAimplementer ;
class cPtr_typeDefClasseAbstraiteAimplementer ;
class GGS_typeDefClasseNonAbstraiteAimplementer ;
class cPtr_typeDefClasseNonAbstraiteAimplementer ;
class GGS_typeEntiteActionExterne ;
class cPtr_typeEntiteActionExterne ;
class GGS_typeActionExterneAengendrer ;
class cPtr_typeActionExterneAengendrer ;
class GGS_typeEntitiesToGenerateList ;
class GGS_typeEnumCstMessageStringMap ;
class GGS_enumGalgasType ;
class cPtr_enumGalgasType ;
class GGS_mapAsConstraintPropertyMap ;
class GGS_passMap ;
class GGS_sharedPropertyList ;
class GGS_callInstructionSharedPropertySignatureMap ;
class GGS_constrainedEntityPassMap ;
class GGS_constraintAllPropertiesMap ;
class GGS_indexMap ;
class GGS_constrainedEntityMap ;
class GGS_callInstruction ;
class cPtr_callInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeCplusPlusName'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCplusPlusName {
//--- Pointer to actual instance
  protected : cPtr_typeCplusPlusName * mPointer ;
//--- Default constructor
  public : GGS_typeCplusPlusName (void) ;
//--- Copy constructor
  public : GGS_typeCplusPlusName (const GGS_typeCplusPlusName &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeCplusPlusName (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeCplusPlusName &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeCplusPlusName & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeCplusPlusName * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCplusPlusName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCplusPlusName * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeDirectName'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDirectName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeDirectName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDirectName constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDirectName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDirectName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDirectName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeCppThisName'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCppThisName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeCppThisName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeCppThisName constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCppThisName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCppThisName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCppThisName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeCppInheritedName'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCppInheritedName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeCppInheritedName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeCppInheritedName constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCppInheritedName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCppInheritedName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeCppInheritedName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAutomaticName'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAutomaticName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeAutomaticName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeAutomaticName constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAutomaticName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAutomaticName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAutomaticName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLocationAutomaticName'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLocationAutomaticName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeLocationAutomaticName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLocationAutomaticName constructor_new (C_Lexique & inLexique,
                                const GGS_location & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLocationAutomaticName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLocationAutomaticName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLocationAutomaticName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeOperandName'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeOperandName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeOperandName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeOperandName constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_bool& argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeOperandName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeOperandName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeOperandName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_typeKeyName'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeKeyName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeKeyName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeKeyName constructor_new (C_Lexique & inLexique,
                                const GGS_location & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeKeyName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeKeyName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeKeyName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeNullName'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeNullName : public GGS_typeCplusPlusName {
//--- Default Constructor
  public : GGS_typeNullName (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeNullName constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeNullName * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeNullName * operator () (LOCATION_ARGS) const {
      return (cPtr_typeNullName *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@typeCplusPlusNameList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeCplusPlusNameList ;

class GGS_typeCplusPlusNameList {
  public : typedef elementOf_GGS_typeCplusPlusNameList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeCplusPlusNameList (void) ;
//--- Copy Constructor
  public : GGS_typeCplusPlusNameList (const GGS_typeCplusPlusNameList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeCplusPlusNameList & inSource) ;
//--- Destructor
  public : ~GGS_typeCplusPlusNameList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeCplusPlusNameList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeCplusPlusName & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeExpression {
//--- Pointer to actual instance
  protected : cPtr_typeExpression * mPointer ;
//--- Default constructor
  public : GGS_typeExpression (void) ;
//--- Copy constructor
  public : GGS_typeExpression (const GGS_typeExpression &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeExpression (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeExpression &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeExpression & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeExpression * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeExpression * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@typeClassMessagesMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeClassMessagesMap ;

class GGS_typeClassMessagesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeClassMessagesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeClassMessagesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeClassMessagesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeClassMessagesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_lstring & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_lstring & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeClassMessagesMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeClassMessagesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeClassMessagesMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@typeSemanticsTypesList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeSemanticsTypesList ;

class GGS_typeSemanticsTypesList {
  public : typedef elementOf_GGS_typeSemanticsTypesList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeSemanticsTypesList (void) ;
//--- Copy Constructor
  public : GGS_typeSemanticsTypesList (const GGS_typeSemanticsTypesList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeSemanticsTypesList & inSource) ;
//--- Destructor
  public : ~GGS_typeSemanticsTypesList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeSemanticsTypesList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class map element 'e_typeVariablesMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeVariablesMap {
  public : GGS_AC_galgasType  mArgumentType ;
  public : GGS_typeCplusPlusName  mCplusPlusName ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map 'typeVariablesMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVariablesMap : public cGalgasVariablesMap <e_typeVariablesMap> {
//--- Get object pointer
  public : inline GGS_typeVariablesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeVariablesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- Handle 'emptyMap' constructor
  public : static GGS_typeVariablesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- 'searchForReadOnlyAccess' search method
public : void method_searchForReadOnlyAccess (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForReadOnlyAccessGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForDestructiveReadAccess' search method
public : void method_searchForDestructiveReadAccess (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForDestructiveReadAccessGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForReadWriteAccess' search method
public : void method_searchForReadWriteAccess (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForReadWriteAccessGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchForWriteAccess' search method
public : void method_searchForWriteAccess (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
public : void method_searchForWriteAccessGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_AC_galgasType   & outParameter0,
                                GGS_typeCplusPlusName   & outParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertListOfEntitiesLocalVariable (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertListOfEntitiesLocalVariableGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertSingleEntityLocalVariable (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertSingleEntityLocalVariableGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertEntityAttributeLocalVariable (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertEntityAttributeLocalVariableGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertInArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertInArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertUnusedInArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertUnusedInArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertConstInArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertConstInArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertUsedConstInArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertUsedConstInArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertUnusedConstInArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertUnusedConstInArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertLocalVariable (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertLocalVariableGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertOutArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertOutArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertOutProperty (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertOutPropertyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertInOutArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertInOutArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertUsedInOutArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertUsedInOutArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertUnusedInOutArgument (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
public : void method_insertUnusedInOutArgumentGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_AC_galgasType &  inParameter0,
                                const GGS_typeCplusPlusName &  inParameter1 COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@L_assignedVariables'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_assignedVariables ;

class GGS_L_assignedVariables {
  public : typedef elementOf_GGS_L_assignedVariables element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_L_assignedVariables (void) ;
//--- Copy Constructor
  public : GGS_L_assignedVariables (const GGS_L_assignedVariables & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_L_assignedVariables & inSource) ;
//--- Destructor
  public : ~GGS_L_assignedVariables (void) ;

//--- Constructor 'emptyList'
  public : static GGS_L_assignedVariables constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_typeCible'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeCible {
//--- Pointer to actual instance
  protected : cPtr_typeCible * mPointer ;
//--- Default constructor
  public : GGS_typeCible (void) ;
//--- Copy constructor
  public : GGS_typeCible (const GGS_typeCible &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeCible (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeCible &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeCible & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeCible * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeCible * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeCible * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@typeListeCibles'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCibles ;

class GGS_typeListeCibles {
  public : typedef elementOf_GGS_typeListeCibles element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeListeCibles (void) ;
//--- Copy Constructor
  public : GGS_typeListeCibles (const GGS_typeListeCibles & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeListeCibles & inSource) ;
//--- Destructor
  public : ~GGS_typeListeCibles (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeListeCibles constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCible & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeCible & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@typeListeTypesEtNomsArgMethode'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeTypesEtNomsArgMethode ;

class GGS_typeListeTypesEtNomsArgMethode {
  public : typedef elementOf_GGS_typeListeTypesEtNomsArgMethode element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeListeTypesEtNomsArgMethode (void) ;
//--- Copy Constructor
  public : GGS_typeListeTypesEtNomsArgMethode (const GGS_typeListeTypesEtNomsArgMethode & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeListeTypesEtNomsArgMethode & inSource) ;
//--- Destructor
  public : ~GGS_typeListeTypesEtNomsArgMethode (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeListeTypesEtNomsArgMethode constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_formalArgumentPassingMode& argument_1,
                                const GGS_typeCplusPlusName & argument_2,
                                const GGS_bool& argument_3) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_formalArgumentPassingMode& argument_1,
                                const GGS_typeCplusPlusName & argument_2,
                                const GGS_bool& argument_3) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstruction {
//--- Pointer to actual instance
  protected : cPtr_typeInstruction * mPointer ;
//--- Default constructor
  public : GGS_typeInstruction (void) ;
//--- Copy constructor
  public : GGS_typeInstruction (const GGS_typeInstruction &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeInstruction (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeInstruction &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeInstruction & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeInstruction * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstruction * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@typeInstructionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeInstructionList ;

class GGS_typeInstructionList {
  public : typedef elementOf_GGS_typeInstructionList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeInstructionList (void) ;
//--- Copy Constructor
  public : GGS_typeInstructionList (const GGS_typeInstructionList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeInstructionList & inSource) ;
//--- Destructor
  public : ~GGS_typeInstructionList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeInstructionList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeInstruction & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeInstruction & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@L_nameWithType'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_nameWithType ;

class GGS_L_nameWithType {
  public : typedef elementOf_GGS_L_nameWithType element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_L_nameWithType (void) ;
//--- Copy Constructor
  public : GGS_L_nameWithType (const GGS_L_nameWithType & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_L_nameWithType & inSource) ;
//--- Destructor
  public : ~GGS_L_nameWithType (void) ;

//--- Constructor 'emptyList'
  public : static GGS_L_nameWithType constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           class map element 'e_typeTableMethodesAimplementer'             *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableMethodesAimplementer {
  public : GGS_L_EXsignature  aListeTypesParametres ;
  public : GGS_typeListeTypesEtNomsArgMethode  aListeTypeEtNomsArguments ;
  public : GGS_typeInstructionList  mInstructionList ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map 'typeTableMethodesAimplementer'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTableMethodesAimplementer : public cTableMethodesAimplementer <e_typeTableMethodesAimplementer> {
//--- Get object pointer
  public : inline GGS_typeTableMethodesAimplementer * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableMethodesAimplementer * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- Handle 'emptyMap' constructor
  public : static GGS_typeTableMethodesAimplementer constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//---
public : void method_insertAbstract (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
public : void method_insertAbstractGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
//---
public : void method_insertNotAbstract (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
public : void method_insertNotAbstractGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_EXsignature &  inParameter0,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter1,
                                const GGS_typeInstructionList &  inParameter2 COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@typeExpressionList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeExpressionList ;

class GGS_typeExpressionList {
  public : typedef elementOf_GGS_typeExpressionList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeExpressionList (void) ;
//--- Copy Constructor
  public : GGS_typeExpressionList (const GGS_typeExpressionList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeExpressionList & inSource) ;
//--- Destructor
  public : ~GGS_typeExpressionList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeExpressionList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeExpression & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeExpression & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@varToDropList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_varToDropList ;

class GGS_varToDropList {
  public : typedef elementOf_GGS_varToDropList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_varToDropList (void) ;
//--- Copy Constructor
  public : GGS_varToDropList (const GGS_varToDropList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_varToDropList & inSource) ;
//--- Destructor
  public : ~GGS_varToDropList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_varToDropList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeCplusPlusName & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeErrorInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeErrorInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeErrorInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeErrorInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2,
                                const GGS_varToDropList & argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeErrorInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeErrorInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeErrorInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeWarningInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeWarningInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeWarningInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeWarningInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeWarningInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeWarningInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeWarningInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeMessageInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMessageInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeMessageInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeMessageInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMessageInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMessageInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMessageInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeReaderCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeReaderCallInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeReaderCallInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeReaderCallInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeReaderCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeReaderCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeReaderCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeModifierCallInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeModifierCallInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeModifierCallInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeModifierCallInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeModifierCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeModifierCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeModifierCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_typeInstructionAppelMethodeListe'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionAppelMethodeListe : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeInstructionAppelMethodeListe (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeInstructionAppelMethodeListe constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeCplusPlusNameList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionAppelMethodeListe * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionAppelMethodeListe * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionAppelMethodeListe *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_typeInstructionDeclarationVarLocale'           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionDeclarationVarLocale : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeInstructionDeclarationVarLocale (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeInstructionDeclarationVarLocale constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_AC_galgasType & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionDeclarationVarLocale * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionDeclarationVarLocale * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionDeclarationVarLocale *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeMapBlockPrologueInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMapBlockPrologueInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeMapBlockPrologueInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeMapBlockPrologueInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMapBlockPrologueInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMapBlockPrologueInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMapBlockPrologueInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeMapBlockEpilogueInstruction'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMapBlockEpilogueInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeMapBlockEpilogueInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeMapBlockEpilogueInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMapBlockEpilogueInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMapBlockEpilogueInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMapBlockEpilogueInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeReaderCallInExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeReaderCallInExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeReaderCallInExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeReaderCallInExpression constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2,
                                const GGS_location & argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeReaderCallInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeReaderCallInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeReaderCallInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAndOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAndOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeAndOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeAndOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAndOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAndOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAndOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeOrOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeOrOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeOrOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeOrOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeOrOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeOrOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeOrOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeXorOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeXorOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeXorOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeXorOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeXorOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeXorOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeXorOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeConcatOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeConcatOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeConcatOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeConcatOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeConcatOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeConcatOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeConcatOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeTrueBool'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTrueBool : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeTrueBool (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeTrueBool constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTrueBool * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTrueBool * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTrueBool *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeFalseBool'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeFalseBool : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeFalseBool (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeFalseBool constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeFalseBool * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeFalseBool * operator () (LOCATION_ARGS) const {
      return (cPtr_typeFalseBool *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralStringExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralStringExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralStringExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralStringExpression constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralStringExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralStringExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralStringExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralUIntExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralUIntExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralUIntExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralUIntExpression constructor_new (C_Lexique & inLexique,
                                const GGS_luint & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralUIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralUIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralUIntExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralSIntExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralSIntExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralSIntExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralSIntExpression constructor_new (C_Lexique & inLexique,
                                const GGS_lsint & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralSIntExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralSIntExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralSIntExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralUInt64Expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralUInt64Expression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralUInt64Expression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralUInt64Expression constructor_new (C_Lexique & inLexique,
                                const GGS_luint64 & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralUInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralUInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralUInt64Expression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralSInt64Expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralSInt64Expression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralSInt64Expression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralSInt64Expression constructor_new (C_Lexique & inLexique,
                                const GGS_lsint64 & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralSInt64Expression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralSInt64Expression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralSInt64Expression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeLiteralCharExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralCharExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralCharExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralCharExpression constructor_new (C_Lexique & inLexique,
                                const GGS_lchar & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralCharExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralCharExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralCharExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeLiteralDoubleExpression'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLiteralDoubleExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLiteralDoubleExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLiteralDoubleExpression constructor_new (C_Lexique & inLexique,
                                const GGS_ldouble & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLiteralDoubleExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLiteralDoubleExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLiteralDoubleExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeHereExpression'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeHereExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeHereExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeHereExpression constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeHereExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeHereExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeHereExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeConstructorExpression'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeConstructorExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeConstructorExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeConstructorExpression constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeConstructorExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeConstructorExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeConstructorExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeTestComplement'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTestComplement : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeTestComplement (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeTestComplement constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTestComplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTestComplement * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTestComplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeLogicalNegate'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLogicalNegate : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLogicalNegate (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLogicalNegate constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLogicalNegate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLogicalNegate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLogicalNegate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeBoolOption'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeBoolOption : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeBoolOption (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeBoolOption constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeBoolOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeBoolOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeBoolOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeUIntOption'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUIntOption : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeUIntOption (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeUIntOption constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUIntOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUIntOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUIntOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStringOption'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStringOption : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeStringOption (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeStringOption constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStringOption * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStringOption * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStringOption *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeVarInExpression'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeVarInExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeVarInExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeVarInExpression constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeVarInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeVarInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeVarInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeJokerInExpression'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeJokerInExpression : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeJokerInExpression (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeJokerInExpression constructor_new (C_Lexique & inLexique,
                                const GGS_location & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeJokerInExpression * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeJokerInExpression * operator () (LOCATION_ARGS) const {
      return (cPtr_typeJokerInExpression *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeAddOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAddOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeAddOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeAddOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAddOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAddOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAddOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeSubOperation'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSubOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeSubOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeSubOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSubOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSubOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSubOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeMultiplyOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMultiplyOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeMultiplyOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeMultiplyOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMultiplyOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMultiplyOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMultiplyOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDivideOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDivideOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeDivideOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDivideOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDivideOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDivideOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDivideOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeModuloOperation'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeModuloOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeModuloOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeModuloOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeModuloOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeModuloOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeModuloOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeUnaryMinusOperation'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeUnaryMinusOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeUnaryMinusOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeUnaryMinusOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeUnaryMinusOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeUnaryMinusOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeUnaryMinusOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_typeEqualTest'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEqualTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeEqualTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeEqualTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeNonEqualTest'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeNonEqualTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeNonEqualTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeNonEqualTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeNonEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeNonEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeNonEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStrictInfTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStrictInfTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeStrictInfTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeStrictInfTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStrictInfTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStrictInfTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStrictInfTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeInfOrEqualTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInfOrEqualTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeInfOrEqualTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeInfOrEqualTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInfOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInfOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInfOrEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeStrictSupTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStrictSupTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeStrictSupTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeStrictSupTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStrictSupTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStrictSupTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStrictSupTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeSupOrEqualTest'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSupOrEqualTest : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeSupOrEqualTest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeSupOrEqualTest constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSupOrEqualTest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSupOrEqualTest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSupOrEqualTest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeLeftShiftOperation'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeLeftShiftOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeLeftShiftOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeLeftShiftOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeLeftShiftOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeLeftShiftOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeLeftShiftOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeRightShiftOperation'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRightShiftOperation : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeRightShiftOperation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeRightShiftOperation constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRightShiftOperation * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRightShiftOperation * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRightShiftOperation *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeTextTableCall'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTextTableCall : public GGS_typeExpression {
//--- Default Constructor
  public : GGS_typeTextTableCall (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeTextTableCall constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeCplusPlusName & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeTextTableCall * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeTextTableCall * operator () (LOCATION_ARGS) const {
      return (cPtr_typeTextTableCall *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_C_assignmentInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_assignmentInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_C_assignmentInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_assignmentInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpression & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_assignmentInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_assignmentInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_assignmentInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_C_declarationInstructionWithAssignment'          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_declarationInstructionWithAssignment : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_C_declarationInstructionWithAssignment (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_declarationInstructionWithAssignment constructor_new (C_Lexique & inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_typeCplusPlusName & argument_1,
                                const GGS_typeExpression & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_declarationInstructionWithAssignment * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_declarationInstructionWithAssignment * operator () (LOCATION_ARGS) const {
      return (cPtr_C_declarationInstructionWithAssignment *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_C_while_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_while_instruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_C_while_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_while_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1,
                                const GGS_typeExpression & argument_2,
                                const GGS_typeInstructionList & argument_3,
                                const GGS_location & argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_while_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_while_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_while_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                list '@L_expression_instructionsList_list'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_expression_instructionsList_list ;

class GGS_L_expression_instructionsList_list {
  public : typedef elementOf_GGS_L_expression_instructionsList_list element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_L_expression_instructionsList_list (void) ;
//--- Copy Constructor
  public : GGS_L_expression_instructionsList_list (const GGS_L_expression_instructionsList_list & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_L_expression_instructionsList_list & inSource) ;
//--- Destructor
  public : ~GGS_L_expression_instructionsList_list (void) ;

//--- Constructor 'emptyList'
  public : static GGS_L_expression_instructionsList_list constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeExpression & argument_0,
                                const GGS_typeInstructionList & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_if_instruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_if_instruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_C_if_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_if_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_L_expression_instructionsList_list & argument_0,
                                const GGS_typeInstructionList & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_if_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_if_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_if_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableRoutinesAimplementer'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableRoutinesAimplementer ;

class GGS_typeTableRoutinesAimplementer : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableRoutinesAimplementer element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableRoutinesAimplementer * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableRoutinesAimplementer * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableRoutinesAimplementer constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeTableRoutinesAimplementer constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableRoutinesAimplementer & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableRoutinesAimplementer reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableAttributsSemantiques'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableAttributsSemantiques ;

class GGS_typeTableAttributsSemantiques : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableAttributsSemantiques element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableAttributsSemantiques * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableAttributsSemantiques * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableAttributsSemantiques constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeCplusPlusName &  inParameter0,
                                const GGS_AC_galgasType &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeCplusPlusName   & outParameter0,
                                GGS_AC_galgasType   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeCplusPlusName & inParameter0,
                                  const GGS_AC_galgasType & inParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeCplusPlusName & outParameter0,
                                  GGS_AC_galgasType & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeTableAttributsSemantiques constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableAttributsSemantiques & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableAttributsSemantiques reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

void routine_buildMapWithLocalConstants (C_Lexique &,
                                GGS_L_nameWithType  ,
                                GGS_typeListeAttributsSemantiques  ,
                                GGS_typeVariablesMap  &,
                                GGS_location  ,
                                GGS_localConstantBuildStyleEnum ,
                                GGS_bool  COMMA_LOCATION_ARGS) ;

void routine_verifierCompatibiliteTypes (C_Lexique &,
                                const GGS_typeSemanticsTypesList  &,
                                const GGS_typeListeAttributsSemantiques  &,
                                const GGS_location  & COMMA_LOCATION_ARGS) ;

void routine_verifierCompatibiliteArgEffectifsSignature (C_Lexique &,
                                const GGS_L_EXsignature  &,
                                const GGS_L_actualParametersSignature  &,
                                const GGS_location  &,
                                GGS_typeInstructionList  &,
                                GGS_typeExpressionList  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_typeJoker'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeJoker : public GGS_typeCible {
//--- Default Constructor
  public : GGS_typeJoker (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeJoker constructor_new (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeJoker * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeJoker * operator () (LOCATION_ARGS) const {
      return (cPtr_typeJoker *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeEntiteDest'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteDest : public GGS_typeCible {
//--- Default Constructor
  public : GGS_typeEntiteDest (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeEntiteDest constructor_new (C_Lexique & inLexique,
                                const GGS_AC_galgasType & argument_0,
                                const GGS_typeCplusPlusName & argument_1,
                                const GGS_location & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntiteDest * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntiteDest * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEntiteDest *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@M_nonTerminalSymbolForSyntax'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_M_nonTerminalSymbolForSyntax ;

class GGS_M_nonTerminalSymbolForSyntax : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_M_nonTerminalSymbolForSyntax element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_nonTerminalSymbolForSyntax * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_M_nonTerminalSymbolForSyntax * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_M_nonTerminalSymbolForSyntax constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonterminalSymbolAlts &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonterminalSymbolAlts   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_M_nonterminalSymbolAlts & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_M_nonterminalSymbolAlts & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_M_nonTerminalSymbolForSyntax constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_M_nonTerminalSymbolForSyntax & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_M_nonTerminalSymbolForSyntax reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_grammarInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_grammarInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_C_grammarInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_grammarInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeExpressionList & argument_2,
                                const GGS_lstring & argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_grammarInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_grammarInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_grammarInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeAppendInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeAppendInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeAppendInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeAppendInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpressionList & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeAppendInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeAppendInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeAppendInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeRemoveInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRemoveInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeRemoveInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeRemoveInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeExpressionList & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRemoveInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRemoveInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRemoveInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeIncrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeIncrementInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeIncrementInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeIncrementInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeIncrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeIncrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeIncrementInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeDecrementInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDecrementInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeDecrementInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDecrementInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDecrementInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDecrementInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDecrementInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           GALGAS class 'GGS_typeInstructionAppelActionExterne'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionAppelActionExterne : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeInstructionAppelActionExterne (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeInstructionAppelActionExterne constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1,
                                const GGS_L_EXsignature & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionAppelActionExterne * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionAppelActionExterne * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionAppelActionExterne *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@L_matchInstructionCasesList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_matchInstructionCasesList ;

class GGS_L_matchInstructionCasesList {
  public : typedef elementOf_GGS_L_matchInstructionCasesList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_L_matchInstructionCasesList (void) ;
//--- Copy Constructor
  public : GGS_L_matchInstructionCasesList (const GGS_L_matchInstructionCasesList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_L_matchInstructionCasesList & inSource) ;
//--- Destructor
  public : ~GGS_L_matchInstructionCasesList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_L_matchInstructionCasesList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeInstructionList & argument_2) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeMatchInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMatchInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeMatchInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeMatchInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_location & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeCplusPlusName & argument_2,
                                const GGS_typeCplusPlusName & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_lstring & argument_5,
                                const GGS_bool& argument_6,
                                const GGS_bool& argument_7,
                                const GGS_L_matchInstructionCasesList & argument_8,
                                const GGS_typeInstructionList & argument_9 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeMatchInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeMatchInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeMatchInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      list '@foreachEnumerationList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachEnumerationList ;

class GGS_foreachEnumerationList {
  public : typedef elementOf_GGS_foreachEnumerationList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_foreachEnumerationList (void) ;
//--- Copy Constructor
  public : GGS_foreachEnumerationList (const GGS_foreachEnumerationList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_foreachEnumerationList & inSource) ;
//--- Destructor
  public : ~GGS_foreachEnumerationList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_foreachEnumerationList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeCplusPlusName & argument_0,
                                const GGS_location & argument_1,
                                const GGS_string& argument_2) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeForeachInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeForeachInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeForeachInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeForeachInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_foreachEnumerationList & argument_0,
                                const GGS_typeExpression & argument_1,
                                const GGS_typeInstructionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeForeachInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeForeachInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeForeachInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeSimpleExtractInstruction'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeSimpleExtractInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeSimpleExtractInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeSimpleExtractInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_L_assignedVariables & argument_2,
                                const GGS_typeExpression & argument_3,
                                const GGS_lstring & argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeSimpleExtractInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeSimpleExtractInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeSimpleExtractInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@typeStructuredExtractCasesList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredExtractCasesList ;

class GGS_typeStructuredExtractCasesList {
  public : typedef elementOf_GGS_typeStructuredExtractCasesList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeStructuredExtractCasesList (void) ;
//--- Copy Constructor
  public : GGS_typeStructuredExtractCasesList (const GGS_typeStructuredExtractCasesList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeStructuredExtractCasesList & inSource) ;
//--- Destructor
  public : ~GGS_typeStructuredExtractCasesList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeStructuredExtractCasesList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_location & argument_1,
                                const GGS_typeInstructionList & argument_2,
                                const GGS_bool& argument_3) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       GALGAS class 'GGS_typeStructuredExtractInstructionWithElse'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeStructuredExtractInstructionWithElse : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeStructuredExtractInstructionWithElse (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeStructuredExtractInstructionWithElse constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0,
                                const GGS_typeStructuredExtractCasesList & argument_1,
                                const GGS_typeInstructionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeStructuredExtractInstructionWithElse * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeStructuredExtractInstructionWithElse * operator () (LOCATION_ARGS) const {
      return (cPtr_typeStructuredExtractInstructionWithElse *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeRoutineCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRoutineCallInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeRoutineCallInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeRoutineCallInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRoutineCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRoutineCallInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRoutineCallInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeDropInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDropInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_typeDropInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDropInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeCplusPlusName & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDropInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDropInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDropInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Map '@typeTableNomRoutinesDeclarees'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableNomRoutinesDeclarees ;

class GGS_typeTableNomRoutinesDeclarees : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeTableNomRoutinesDeclarees element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableNomRoutinesDeclarees * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeTableNomRoutinesDeclarees * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeTableNomRoutinesDeclarees constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeTableNomRoutinesDeclarees constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeTableNomRoutinesDeclarees & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeTableNomRoutinesDeclarees reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeEntityToGenerate'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntityToGenerate {
//--- Pointer to actual instance
  protected : cPtr_typeEntityToGenerate * mPointer ;
//--- Default constructor
  public : GGS_typeEntityToGenerate (void) ;
//--- Copy constructor
  public : GGS_typeEntityToGenerate (const GGS_typeEntityToGenerate &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeEntityToGenerate (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeEntityToGenerate &) ;
//--- _isBuilt
  public : inline bool _isBuilt (void) const { return mPointer != NULL ; }
//--- isEqualTo
  public : inline bool isEqualTo (const GGS_typeEntityToGenerate & _inOperand) const {
    return mPointer == _inOperand.mPointer ;
  }
//--- getPtr
  public : inline cPtr_typeEntityToGenerate * getPtr (void) const {
    return mPointer ;
  }
//--- drop
  public : void _drop_operation (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntityToGenerate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntityToGenerate * operator () (LOCATION_ARGS) const {
      return mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeExternTypeToGenerate'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeExternTypeToGenerate : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeExternTypeToGenerate (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeExternTypeToGenerate constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeExternTypeToGenerate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeExternTypeToGenerate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeExternTypeToGenerate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeRoutineAengendrer'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeRoutineAengendrer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeRoutineAengendrer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeRoutineAengendrer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeTypesEtNomsArgMethode & argument_1,
                                const GGS_typeInstructionList & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeRoutineAengendrer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeRoutineAengendrer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeRoutineAengendrer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_listTypeToImplement'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_listTypeToImplement : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_C_listTypeToImplement (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_listTypeToImplement constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_L_nameWithType & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_listTypeToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_listTypeToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_listTypeToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeDefinitionTableAimplementer'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDefinitionTableAimplementer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeDefinitionTableAimplementer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDefinitionTableAimplementer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_L_nameWithType & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_insertOrSearchMethodList & argument_4,
                                const GGS_insertOrSearchMethodList & argument_5,
                                const GGS_typeTableBlocsDeTable & argument_6 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDefinitionTableAimplementer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDefinitionTableAimplementer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDefinitionTableAimplementer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_C_mapToImplement'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_mapToImplement : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_C_mapToImplement (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_C_mapToImplement constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_L_nameWithType & argument_2,
                                const GGS_insertOrSearchMethodList & argument_3,
                                const GGS_insertOrSearchMethodList & argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_mapToImplement * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_mapToImplement * operator () (LOCATION_ARGS) const {
      return (cPtr_C_mapToImplement *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          GALGAS class 'GGS_typeDefClasseAbstraiteAimplementer'            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDefClasseAbstraiteAimplementer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeDefClasseAbstraiteAimplementer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDefClasseAbstraiteAimplementer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_typeTableMethodes & argument_2,
                                const GGS_typeTableMethodesAimplementer & argument_3,
                                const GGS_typeListeAttributsSemantiques & argument_4,
                                const GGS_L_nameWithType & argument_5,
                                const GGS_typeSuperClassesMap & argument_6,
                                const GGS_typeClassMessagesMap & argument_7 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDefClasseAbstraiteAimplementer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDefClasseAbstraiteAimplementer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDefClasseAbstraiteAimplementer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         GALGAS class 'GGS_typeDefClasseNonAbstraiteAimplementer'          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDefClasseNonAbstraiteAimplementer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeDefClasseNonAbstraiteAimplementer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeDefClasseNonAbstraiteAimplementer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_typeTableMethodes & argument_2,
                                const GGS_typeTableMethodesAimplementer & argument_3,
                                const GGS_typeListeAttributsSemantiques & argument_4,
                                const GGS_L_nameWithType & argument_5,
                                const GGS_typeSuperClassesMap & argument_6,
                                const GGS_typeClassMessagesMap & argument_7 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeDefClasseNonAbstraiteAimplementer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDefClasseNonAbstraiteAimplementer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeDefClasseNonAbstraiteAimplementer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeEntiteActionExterne'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteActionExterne : public GGS_AC_semanticsEntity {
//--- Default Constructor
  public : GGS_typeEntiteActionExterne (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeEntiteActionExterne constructor_new (C_Lexique & inLexique,
                                const GGS_L_EXsignature & argument_0 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeEntiteActionExterne * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeEntiteActionExterne * operator () (LOCATION_ARGS) const {
      return (cPtr_typeEntiteActionExterne *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeActionExterneAengendrer'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeActionExterneAengendrer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeActionExterneAengendrer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_typeActionExterneAengendrer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_L_EXsignature & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeActionExterneAengendrer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeActionExterneAengendrer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeActionExterneAengendrer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    list '@typeEntitiesToGenerateList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEntitiesToGenerateList ;

class GGS_typeEntitiesToGenerateList {
  public : typedef elementOf_GGS_typeEntitiesToGenerateList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeEntitiesToGenerateList (void) ;
//--- Copy Constructor
  public : GGS_typeEntitiesToGenerateList (const GGS_typeEntitiesToGenerateList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeEntitiesToGenerateList & inSource) ;
//--- Destructor
  public : ~GGS_typeEntitiesToGenerateList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeEntitiesToGenerateList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeEntityToGenerate & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeEntityToGenerate & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

void routine_enterBuiltinTypes (C_Lexique &,
                                GGS_M_semanticsEntitiesForUse  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map '@typeEnumCstMessageStringMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEnumCstMessageStringMap ;

class GGS_typeEnumCstMessageStringMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeEnumCstMessageStringMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeEnumCstMessageStringMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeEnumCstMessageStringMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeEnumCstMessageStringMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_lstring & inParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_lstring & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_typeEnumCstMessageStringMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeEnumCstMessageStringMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeEnumCstMessageStringMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_enumGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_enumGalgasType : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_enumGalgasType (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_enumGalgasType constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_enumConstantMap & argument_1,
                                const GGS_typeEnumMessageMap & argument_2 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_enumGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_enumGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_enumGalgasType *) mPointer ;
    }
  #endif
} ;

void routine_appendJokersIfNeeded (C_Lexique &,
                                GGS_typeCplusPlusNameList  &,
                                GGS_uint  ,
                                GGS_uint  ,
                                GGS_typeCplusPlusName   COMMA_LOCATION_ARGS) ;

void routine_generateSemanticsComponent (C_Lexique &,
                                GGS_lstring  &,
                                GGS_stringset  &,
                                GGS_string &,
                                GGS_typeEntitiesToGenerateList  &,
                                GGS_stringset  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map '@mapAsConstraintPropertyMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_mapAsConstraintPropertyMap ;

class GGS_mapAsConstraintPropertyMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_mapAsConstraintPropertyMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_mapAsConstraintPropertyMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_mapAsConstraintPropertyMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_mapAsConstraintPropertyMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0,
                                const GGS_lstring &  inParameter1,
                                const GGS_uint &  inParameter2,
                                const GGS_string&  inParameter3,
                                const GGS_bool&  inParameter4 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_lstring   & outParameter1,
                                GGS_uint   & outParameter2,
                                GGS_string  & outParameter3,
                                GGS_bool  & outParameter4 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_lstring & inParameter0,
                                  const GGS_lstring & inParameter1,
                                  const GGS_uint & inParameter2,
                                  const GGS_string& inParameter3,
                                  const GGS_bool& inParameter4,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_lstring & outParameter0,
                                  GGS_lstring & outParameter1,
                                  GGS_uint & outParameter2,
                                  GGS_string& outParameter3,
                                  GGS_bool& outParameter4,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_mapAsConstraintPropertyMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_mapAsConstraintPropertyMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_mapAsConstraintPropertyMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                              Map '@passMap'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_passMap ;

class GGS_passMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_passMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_passMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_passMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_passMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchKeyAndGetIndex' Search Method
  public : void method_searchKeyAndGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_passMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_passMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_passMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@sharedPropertyList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sharedPropertyList ;

class GGS_sharedPropertyList {
  public : typedef elementOf_GGS_sharedPropertyList element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_sharedPropertyList (void) ;
//--- Copy Constructor
  public : GGS_sharedPropertyList (const GGS_sharedPropertyList & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_sharedPropertyList & inSource) ;
//--- Destructor
  public : ~GGS_sharedPropertyList (void) ;

//--- Constructor 'emptyList'
  public : static GGS_sharedPropertyList constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Map '@callInstructionSharedPropertySignatureMap'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_callInstructionSharedPropertySignatureMap ;

class GGS_callInstructionSharedPropertySignatureMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_callInstructionSharedPropertySignatureMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_callInstructionSharedPropertySignatureMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_callInstructionSharedPropertySignatureMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_callInstructionSharedPropertySignatureMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_sharedPropertyList &  inParameter0,
                                const GGS_location &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_sharedPropertyList   & outParameter0,
                                GGS_location   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_sharedPropertyList & inParameter0,
                                  const GGS_location & inParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_sharedPropertyList & outParameter0,
                                  GGS_location & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_callInstructionSharedPropertySignatureMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_callInstructionSharedPropertySignatureMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_callInstructionSharedPropertySignatureMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Map '@constrainedEntityPassMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constrainedEntityPassMap ;

class GGS_constrainedEntityPassMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_constrainedEntityPassMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_constrainedEntityPassMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_constrainedEntityPassMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_constrainedEntityPassMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeInstructionList &  inParameter0,
                                const GGS_sharedPropertyList &  inParameter1,
                                const GGS_stringset &  inParameter2,
                                const GGS_callInstructionSharedPropertySignatureMap &  inParameter3 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeInstructionList   & outParameter0,
                                GGS_sharedPropertyList   & outParameter1,
                                GGS_stringset   & outParameter2,
                                GGS_callInstructionSharedPropertySignatureMap   & outParameter3 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeInstructionList & inParameter0,
                                  const GGS_sharedPropertyList & inParameter1,
                                  const GGS_stringset & inParameter2,
                                  const GGS_callInstructionSharedPropertySignatureMap & inParameter3,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeInstructionList & outParameter0,
                                  GGS_sharedPropertyList & outParameter1,
                                  GGS_stringset & outParameter2,
                                  GGS_callInstructionSharedPropertySignatureMap & outParameter3,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_constrainedEntityPassMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_constrainedEntityPassMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_constrainedEntityPassMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map '@constraintAllPropertiesMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constraintAllPropertiesMap ;

class GGS_constraintAllPropertiesMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_constraintAllPropertiesMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_constraintAllPropertiesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_constraintAllPropertiesMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_constraintAllPropertiesMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_constraintAllPropertiesMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_constraintAllPropertiesMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_constraintAllPropertiesMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             Map '@indexMap'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_indexMap ;

class GGS_indexMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_indexMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_indexMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_indexMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_indexMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0,
                                const GGS_uint &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_lstring & inParameter0,
                                  const GGS_uint & inParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_lstring & outParameter0,
                                  GGS_uint & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_indexMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_indexMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_indexMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@constrainedEntityMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_constrainedEntityMap ;

class GGS_constrainedEntityMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_constrainedEntityMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_constrainedEntityMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_constrainedEntityMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_constrainedEntityMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_stringset &  inParameter0,
                                const GGS_constrainedEntityPassMap &  inParameter1,
                                const GGS_lstring &  inParameter2,
                                const GGS_entityPropertyMap &  inParameter3,
                                const GGS_stringset &  inParameter4,
                                const GGS_location &  inParameter5,
                                const GGS_mapAsConstraintPropertyMap &  inParameter6,
                                const GGS_mapAsConstraintPropertyMap &  inParameter7,
                                const GGS_constraintAllPropertiesMap &  inParameter8,
                                const GGS_indexMap &  inParameter9,
                                const GGS_indexMap &  inParameter10 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_stringset   & outParameter0,
                                GGS_constrainedEntityPassMap   & outParameter1,
                                GGS_lstring   & outParameter2,
                                GGS_entityPropertyMap   & outParameter3,
                                GGS_stringset   & outParameter4,
                                GGS_location   & outParameter5,
                                GGS_mapAsConstraintPropertyMap   & outParameter6,
                                GGS_mapAsConstraintPropertyMap   & outParameter7,
                                GGS_constraintAllPropertiesMap   & outParameter8,
                                GGS_indexMap   & outParameter9,
                                GGS_indexMap   & outParameter10 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_stringset & inParameter0,
                                  const GGS_constrainedEntityPassMap & inParameter1,
                                  const GGS_lstring & inParameter2,
                                  const GGS_entityPropertyMap & inParameter3,
                                  const GGS_stringset & inParameter4,
                                  const GGS_location & inParameter5,
                                  const GGS_mapAsConstraintPropertyMap & inParameter6,
                                  const GGS_mapAsConstraintPropertyMap & inParameter7,
                                  const GGS_constraintAllPropertiesMap & inParameter8,
                                  const GGS_indexMap & inParameter9,
                                  const GGS_indexMap & inParameter10,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_stringset & outParameter0,
                                  GGS_constrainedEntityPassMap & outParameter1,
                                  GGS_lstring & outParameter2,
                                  GGS_entityPropertyMap & outParameter3,
                                  GGS_stringset & outParameter4,
                                  GGS_location & outParameter5,
                                  GGS_mapAsConstraintPropertyMap & outParameter6,
                                  GGS_mapAsConstraintPropertyMap & outParameter7,
                                  GGS_constraintAllPropertiesMap & outParameter8,
                                  GGS_indexMap & outParameter9,
                                  GGS_indexMap & outParameter10,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
  public : static GGS_constrainedEntityMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_constrainedEntityMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_constrainedEntityMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

void routine_generate_constraints (C_Lexique &,
                                GGS_passMap  ,
                                GGS_entityToImplementMap  ,
                                GGS_mapEntityMap  ,
                                GGS_lstring  ,
                                GGS_lstring  ,
                                GGS_constrainedEntityMap  ,
                                GGS_stringset  ,
                                GGS_lstring   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_callInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_callInstruction : public GGS_typeInstruction {
//--- Default Constructor
  public : GGS_callInstruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique COMMA_LOCATION_ARGS) const ;
//--- 'new' constructor
  public : static GGS_callInstruction constructor_new (C_Lexique & inLexique,
                                const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_metamodelPropertyKind& argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_L_lstringList & argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_callInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_callInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_callInstruction *) mPointer ;
    }
  #endif
} ;

void routine_displayConstraintDefinitionErrors (C_Lexique &,
                                GGS_stringset  ,
                                GGS_stringset   COMMA_LOCATION_ARGS) ;

void routine_displayConstraintDefinitionErrorsNoElse (C_Lexique &,
                                GGS_stringset  ,
                                GGS_stringset   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

#include "include_typeCplusPlusName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeDirectName'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDirectName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeCppThisName'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeCppThisName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeCppInheritedName'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeCppInheritedName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeAutomaticName'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeAutomaticName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeLocationAutomaticName'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLocationAutomaticName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeOperandName'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeOperandName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeKeyName'                             *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeKeyName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeNullName'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeNullName.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@typeCplusPlusNameList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeCplusPlusNameList {
  private : elementOf_GGS_typeCplusPlusNameList * mNextItem ;
    public : GGS_typeCplusPlusName  mCppName ;
  public : elementOf_GGS_typeCplusPlusNameList (const GGS_typeCplusPlusName & ) ;

  public : inline elementOf_GGS_typeCplusPlusNameList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeCplusPlusNameList (const elementOf_GGS_typeCplusPlusNameList &) ;
  private : void operator = (const elementOf_GGS_typeCplusPlusNameList &) ;
  public : inline ~elementOf_GGS_typeCplusPlusNameList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeCplusPlusNameList ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@typeClassMessagesMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeClassMessagesMap {
  public : GGS_lstring  mMessage ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeClassMessagesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeClassMessagesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeClassMessagesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeClassMessagesMap * nextObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mNextItem ; }
  public : inline elementOf_GGS_typeClassMessagesMap * infObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeClassMessagesMap * supObject (void) const { return (elementOf_GGS_typeClassMessagesMap *) mSupPtr ; }
//--- Data member
  public : e_typeClassMessagesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@typeSemanticsTypesList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeSemanticsTypesList {
  private : elementOf_GGS_typeSemanticsTypesList * mNextItem ;
    public : GGS_AC_galgasType  mType ;
    public : GGS_lstring  mGalgasVariableName ;
  public : elementOf_GGS_typeSemanticsTypesList (const GGS_AC_galgasType & ,
                                const GGS_lstring & ) ;

  public : inline elementOf_GGS_typeSemanticsTypesList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeSemanticsTypesList (const elementOf_GGS_typeSemanticsTypesList &) ;
  private : void operator = (const elementOf_GGS_typeSemanticsTypesList &) ;
  public : inline ~elementOf_GGS_typeSemanticsTypesList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeSemanticsTypesList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@L_assignedVariables'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_assignedVariables {
  private : elementOf_GGS_L_assignedVariables * mNextItem ;
    public : GGS_typeCplusPlusName  aNomVariableCible ;
    public : GGS_lstring  aNomAttributSource ;
  public : elementOf_GGS_L_assignedVariables (const GGS_typeCplusPlusName & ,
                                const GGS_lstring & ) ;

  public : inline elementOf_GGS_L_assignedVariables * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_assignedVariables (const elementOf_GGS_L_assignedVariables &) ;
  private : void operator = (const elementOf_GGS_L_assignedVariables &) ;
  public : inline ~elementOf_GGS_L_assignedVariables (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_assignedVariables ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeCible.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@typeListeCibles'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeCibles {
  private : elementOf_GGS_typeListeCibles * mNextItem ;
    public : GGS_typeCible  aCible ;
  public : elementOf_GGS_typeListeCibles (const GGS_typeCible & ) ;

  public : inline elementOf_GGS_typeListeCibles * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeCibles (const elementOf_GGS_typeListeCibles &) ;
  private : void operator = (const elementOf_GGS_typeListeCibles &) ;
  public : inline ~elementOf_GGS_typeListeCibles (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeListeCibles ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@typeListeTypesEtNomsArgMethode'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeTypesEtNomsArgMethode {
  private : elementOf_GGS_typeListeTypesEtNomsArgMethode * mNextItem ;
    public : GGS_AC_galgasType  mType ;
    public : GGS_formalArgumentPassingMode mFormalArgumentPassingMode ;
    public : GGS_typeCplusPlusName  mCppName ;
    public : GGS_bool mModeIn ;
  public : elementOf_GGS_typeListeTypesEtNomsArgMethode (const GGS_AC_galgasType & ,
                                const GGS_formalArgumentPassingMode& ,
                                const GGS_typeCplusPlusName & ,
                                const GGS_bool& ) ;

  public : inline elementOf_GGS_typeListeTypesEtNomsArgMethode * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeTypesEtNomsArgMethode (const elementOf_GGS_typeListeTypesEtNomsArgMethode &) ;
  private : void operator = (const elementOf_GGS_typeListeTypesEtNomsArgMethode &) ;
  public : inline ~elementOf_GGS_typeListeTypesEtNomsArgMethode (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeListeTypesEtNomsArgMethode ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@typeInstructionList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeInstructionList {
  private : elementOf_GGS_typeInstructionList * mNextItem ;
    public : GGS_typeInstruction  mInstruction ;
  public : elementOf_GGS_typeInstructionList (const GGS_typeInstruction & ) ;

  public : inline elementOf_GGS_typeInstructionList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeInstructionList (const elementOf_GGS_typeInstructionList &) ;
  private : void operator = (const elementOf_GGS_typeInstructionList &) ;
  public : inline ~elementOf_GGS_typeInstructionList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeInstructionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@L_nameWithType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_nameWithType {
  private : elementOf_GGS_L_nameWithType * mNextItem ;
    public : GGS_lstring  mType ;
    public : GGS_lstring  mName ;
  public : elementOf_GGS_L_nameWithType (const GGS_lstring & ,
                                const GGS_lstring & ) ;

  public : inline elementOf_GGS_L_nameWithType * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_nameWithType (const elementOf_GGS_L_nameWithType &) ;
  private : void operator = (const elementOf_GGS_L_nameWithType &) ;
  public : inline ~elementOf_GGS_L_nameWithType (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_nameWithType ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@typeExpressionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeExpressionList {
  private : elementOf_GGS_typeExpressionList * mNextItem ;
    public : GGS_typeExpression  mExpression ;
  public : elementOf_GGS_typeExpressionList (const GGS_typeExpression & ) ;

  public : inline elementOf_GGS_typeExpressionList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeExpressionList (const elementOf_GGS_typeExpressionList &) ;
  private : void operator = (const elementOf_GGS_typeExpressionList &) ;
  public : inline ~elementOf_GGS_typeExpressionList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeExpressionList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@varToDropList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_varToDropList {
  private : elementOf_GGS_varToDropList * mNextItem ;
    public : GGS_typeCplusPlusName  mVarToDrop ;
  public : elementOf_GGS_varToDropList (const GGS_typeCplusPlusName & ) ;

  public : inline elementOf_GGS_varToDropList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_varToDropList (const elementOf_GGS_varToDropList &) ;
  private : void operator = (const elementOf_GGS_varToDropList &) ;
  public : inline ~elementOf_GGS_varToDropList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_varToDropList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeErrorInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeErrorInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeWarningInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeWarningInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeMessageInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeMessageInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeReaderCallInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeReaderCallInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeModifierCallInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeModifierCallInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeInstructionAppelMethodeListe'                  *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInstructionAppelMethodeListe.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               class 'typeInstructionDeclarationVarLocale'                 *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInstructionDeclarationVarLocale.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeMapBlockPrologueInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeMapBlockPrologueInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeMapBlockEpilogueInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeMapBlockEpilogueInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeReaderCallInExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeReaderCallInExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeAndOperation'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeAndOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeOrOperation'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeOrOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeXorOperation'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeXorOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeConcatOperation'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeConcatOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'typeTrueBool'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeTrueBool.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeFalseBool'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeFalseBool.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeLiteralStringExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralStringExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeLiteralUIntExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralUIntExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeLiteralSIntExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralSIntExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeLiteralUInt64Expression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralUInt64Expression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeLiteralSInt64Expression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralSInt64Expression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeLiteralCharExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralCharExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeLiteralDoubleExpression'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLiteralDoubleExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeHereExpression'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeHereExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeConstructorExpression'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeConstructorExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeTestComplement'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeTestComplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeLogicalNegate'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLogicalNegate.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeBoolOption'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeBoolOption.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeUIntOption'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeUIntOption.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeStringOption'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeStringOption.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeVarInExpression'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeVarInExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeJokerInExpression'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeJokerInExpression.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeAddOperation'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeAddOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeSubOperation'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeSubOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeMultiplyOperation'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeMultiplyOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeDivideOperation'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDivideOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeModuloOperation'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeModuloOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeUnaryMinusOperation'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeUnaryMinusOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeEqualTest'                            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeEqualTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeNonEqualTest'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeNonEqualTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeStrictInfTest'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeStrictInfTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeInfOrEqualTest'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInfOrEqualTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeStrictSupTest'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeStrictSupTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeSupOrEqualTest'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeSupOrEqualTest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeLeftShiftOperation'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeLeftShiftOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeRightShiftOperation'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRightShiftOperation.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeTextTableCall'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeTextTableCall.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'C_assignmentInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_assignmentInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              class 'C_declarationInstructionWithAssignment'               *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_declarationInstructionWithAssignment.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_while_instruction'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_while_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of list '@L_expression_instructionsList_list'            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_expression_instructionsList_list {
  private : elementOf_GGS_L_expression_instructionsList_list * mNextItem ;
    public : GGS_typeExpression  mIFexpression ;
    public : GGS_typeInstructionList  mInstructionList ;
  public : elementOf_GGS_L_expression_instructionsList_list (const GGS_typeExpression & ,
                                const GGS_typeInstructionList & ) ;

  public : inline elementOf_GGS_L_expression_instructionsList_list * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_expression_instructionsList_list (const elementOf_GGS_L_expression_instructionsList_list &) ;
  private : void operator = (const elementOf_GGS_L_expression_instructionsList_list &) ;
  public : inline ~elementOf_GGS_L_expression_instructionsList_list (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_expression_instructionsList_list ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_if_instruction'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_if_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableRoutinesAimplementer'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableRoutinesAimplementer {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableRoutinesAimplementer : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableRoutinesAimplementer (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableRoutinesAimplementer & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * nextObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mNextItem ; }
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * infObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableRoutinesAimplementer * supObject (void) const { return (elementOf_GGS_typeTableRoutinesAimplementer *) mSupPtr ; }
//--- Data member
  public : e_typeTableRoutinesAimplementer mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableAttributsSemantiques'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableAttributsSemantiques {
  public : GGS_typeCplusPlusName  aNomCppAttribut ;
  public : GGS_AC_galgasType  mAttributType ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableAttributsSemantiques : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableAttributsSemantiques (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableAttributsSemantiques & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableAttributsSemantiques * nextObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mNextItem ; }
  public : inline elementOf_GGS_typeTableAttributsSemantiques * infObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableAttributsSemantiques * supObject (void) const { return (elementOf_GGS_typeTableAttributsSemantiques *) mSupPtr ; }
//--- Data member
  public : e_typeTableAttributsSemantiques mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            class 'typeJoker'                              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeJoker.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeEntiteDest'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeEntiteDest.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of map '@M_nonTerminalSymbolForSyntax'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_nonTerminalSymbolForSyntax {
  public : GGS_M_nonterminalSymbolAlts  mAltParametersMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_M_nonTerminalSymbolForSyntax : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_M_nonTerminalSymbolForSyntax (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_M_nonTerminalSymbolForSyntax & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * nextObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mNextItem ; }
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * infObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mInfPtr ; }
  public : inline elementOf_GGS_M_nonTerminalSymbolForSyntax * supObject (void) const { return (elementOf_GGS_M_nonTerminalSymbolForSyntax *) mSupPtr ; }
//--- Data member
  public : e_M_nonTerminalSymbolForSyntax mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_grammarInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_grammarInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeAppendInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeAppendInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeRemoveInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRemoveInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeIncrementInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeIncrementInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeDecrementInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDecrementInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'typeInstructionAppelActionExterne'                  *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInstructionAppelActionExterne.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@L_matchInstructionCasesList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_matchInstructionCasesList {
  private : elementOf_GGS_L_matchInstructionCasesList * mNextItem ;
    public : GGS_lstring  mCase1_name ;
    public : GGS_lstring  mCase2_name ;
    public : GGS_typeInstructionList  mInstructionList ;
  public : elementOf_GGS_L_matchInstructionCasesList (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_typeInstructionList & ) ;

  public : inline elementOf_GGS_L_matchInstructionCasesList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_matchInstructionCasesList (const elementOf_GGS_L_matchInstructionCasesList &) ;
  private : void operator = (const elementOf_GGS_L_matchInstructionCasesList &) ;
  public : inline ~elementOf_GGS_L_matchInstructionCasesList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_matchInstructionCasesList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeMatchInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeMatchInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@foreachEnumerationList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_foreachEnumerationList {
  private : elementOf_GGS_foreachEnumerationList * mNextItem ;
    public : GGS_typeCplusPlusName  mCppEnumeratedVariableName ;
    public : GGS_location  mLocationOffset ;
    public : GGS_string mCppTypeName ;
  public : elementOf_GGS_foreachEnumerationList (const GGS_typeCplusPlusName & ,
                                const GGS_location & ,
                                const GGS_string& ) ;

  public : inline elementOf_GGS_foreachEnumerationList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_foreachEnumerationList (const elementOf_GGS_foreachEnumerationList &) ;
  private : void operator = (const elementOf_GGS_foreachEnumerationList &) ;
  public : inline ~elementOf_GGS_foreachEnumerationList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_foreachEnumerationList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeForeachInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeForeachInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeSimpleExtractInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeSimpleExtractInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@typeStructuredExtractCasesList'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeStructuredExtractCasesList {
  private : elementOf_GGS_typeStructuredExtractCasesList * mNextItem ;
    public : GGS_lstring  mClassName ;
    public : GGS_location  mResultVarID ;
    public : GGS_typeInstructionList  mInstructionList ;
    public : GGS_bool mNoUsedParameter ;
  public : elementOf_GGS_typeStructuredExtractCasesList (const GGS_lstring & ,
                                const GGS_location & ,
                                const GGS_typeInstructionList & ,
                                const GGS_bool& ) ;

  public : inline elementOf_GGS_typeStructuredExtractCasesList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeStructuredExtractCasesList (const elementOf_GGS_typeStructuredExtractCasesList &) ;
  private : void operator = (const elementOf_GGS_typeStructuredExtractCasesList &) ;
  public : inline ~elementOf_GGS_typeStructuredExtractCasesList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeStructuredExtractCasesList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'typeStructuredExtractInstructionWithElse'              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeStructuredExtractInstructionWithElse.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeRoutineCallInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRoutineCallInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeDropInstruction'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDropInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of map '@typeTableNomRoutinesDeclarees'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableNomRoutinesDeclarees {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeTableNomRoutinesDeclarees : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeTableNomRoutinesDeclarees (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeTableNomRoutinesDeclarees & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * nextObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mNextItem ; }
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * infObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mInfPtr ; }
  public : inline elementOf_GGS_typeTableNomRoutinesDeclarees * supObject (void) const { return (elementOf_GGS_typeTableNomRoutinesDeclarees *) mSupPtr ; }
//--- Data member
  public : e_typeTableNomRoutinesDeclarees mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#include "include_typeEntityToGenerate.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeExternTypeToGenerate'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeExternTypeToGenerate.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'typeRoutineAengendrer'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeRoutineAengendrer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_listTypeToImplement'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_listTypeToImplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeDefinitionTableAimplementer'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDefinitionTableAimplementer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'C_mapToImplement'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_mapToImplement.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'typeDefClasseAbstraiteAimplementer'                 *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDefClasseAbstraiteAimplementer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              class 'typeDefClasseNonAbstraiteAimplementer'                *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeDefClasseNonAbstraiteAimplementer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeEntiteActionExterne'                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeEntiteActionExterne.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeActionExterneAengendrer'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeActionExterneAengendrer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@typeEntitiesToGenerateList'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeEntitiesToGenerateList {
  private : elementOf_GGS_typeEntitiesToGenerateList * mNextItem ;
    public : GGS_typeEntityToGenerate  mEntityToGenerate ;
  public : elementOf_GGS_typeEntitiesToGenerateList (const GGS_typeEntityToGenerate & ) ;

  public : inline elementOf_GGS_typeEntitiesToGenerateList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeEntitiesToGenerateList (const elementOf_GGS_typeEntitiesToGenerateList &) ;
  private : void operator = (const elementOf_GGS_typeEntitiesToGenerateList &) ;
  public : inline ~elementOf_GGS_typeEntitiesToGenerateList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeEntitiesToGenerateList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of map '@typeEnumCstMessageStringMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeEnumCstMessageStringMap {
  public : GGS_lstring  mMessageString ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeEnumCstMessageStringMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeEnumCstMessageStringMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeEnumCstMessageStringMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * nextObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mNextItem ; }
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * infObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeEnumCstMessageStringMap * supObject (void) const { return (elementOf_GGS_typeEnumCstMessageStringMap *) mSupPtr ; }
//--- Data member
  public : e_typeEnumCstMessageStringMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'enumGalgasType'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_enumGalgasType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of map '@mapAsConstraintPropertyMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_mapAsConstraintPropertyMap {
  public : GGS_lstring  mMapTypeName ;
  public : GGS_lstring  mElementTypeName ;
  public : GGS_uint  mPassIndex ;
  public : GGS_string mPassName ;
  public : GGS_bool mIsShared ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_mapAsConstraintPropertyMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_mapAsConstraintPropertyMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_mapAsConstraintPropertyMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_mapAsConstraintPropertyMap * nextObject (void) const { return (elementOf_GGS_mapAsConstraintPropertyMap *) mNextItem ; }
  public : inline elementOf_GGS_mapAsConstraintPropertyMap * infObject (void) const { return (elementOf_GGS_mapAsConstraintPropertyMap *) mInfPtr ; }
  public : inline elementOf_GGS_mapAsConstraintPropertyMap * supObject (void) const { return (elementOf_GGS_mapAsConstraintPropertyMap *) mSupPtr ; }
//--- Data member
  public : e_mapAsConstraintPropertyMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@passMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class e_passMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_passMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_passMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_passMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_passMap * nextObject (void) const { return (elementOf_GGS_passMap *) mNextItem ; }
  public : inline elementOf_GGS_passMap * infObject (void) const { return (elementOf_GGS_passMap *) mInfPtr ; }
  public : inline elementOf_GGS_passMap * supObject (void) const { return (elementOf_GGS_passMap *) mSupPtr ; }
//--- Data member
  public : e_passMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@sharedPropertyList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sharedPropertyList {
  private : elementOf_GGS_sharedPropertyList * mNextItem ;
    public : GGS_lstring  mSharedPropertyTypeName ;
    public : GGS_lstring  mSharedPropertyName ;
  public : elementOf_GGS_sharedPropertyList (const GGS_lstring & ,
                                const GGS_lstring & ) ;

  public : inline elementOf_GGS_sharedPropertyList * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_sharedPropertyList (const elementOf_GGS_sharedPropertyList &) ;
  private : void operator = (const elementOf_GGS_sharedPropertyList &) ;
  public : inline ~elementOf_GGS_sharedPropertyList (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
  friend class GGS_sharedPropertyList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       Element of map '@callInstructionSharedPropertySignatureMap'         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_callInstructionSharedPropertySignatureMap {
  public : GGS_sharedPropertyList  mSignature ;
  public : GGS_location  mSignatureLocation ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_callInstructionSharedPropertySignatureMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_callInstructionSharedPropertySignatureMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_callInstructionSharedPropertySignatureMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_callInstructionSharedPropertySignatureMap * nextObject (void) const { return (elementOf_GGS_callInstructionSharedPropertySignatureMap *) mNextItem ; }
  public : inline elementOf_GGS_callInstructionSharedPropertySignatureMap * infObject (void) const { return (elementOf_GGS_callInstructionSharedPropertySignatureMap *) mInfPtr ; }
  public : inline elementOf_GGS_callInstructionSharedPropertySignatureMap * supObject (void) const { return (elementOf_GGS_callInstructionSharedPropertySignatureMap *) mSupPtr ; }
//--- Data member
  public : e_callInstructionSharedPropertySignatureMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of map '@constrainedEntityPassMap'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class e_constrainedEntityPassMap {
  public : GGS_typeInstructionList  mInstructionList ;
  public : GGS_sharedPropertyList  mSharedPropertyList ;
  public : GGS_stringset  mConstraintPropertyDefinitionSet ;
  public : GGS_callInstructionSharedPropertySignatureMap  mCallInstructionSharedPropertySignatureMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_constrainedEntityPassMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_constrainedEntityPassMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_constrainedEntityPassMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_constrainedEntityPassMap * nextObject (void) const { return (elementOf_GGS_constrainedEntityPassMap *) mNextItem ; }
  public : inline elementOf_GGS_constrainedEntityPassMap * infObject (void) const { return (elementOf_GGS_constrainedEntityPassMap *) mInfPtr ; }
  public : inline elementOf_GGS_constrainedEntityPassMap * supObject (void) const { return (elementOf_GGS_constrainedEntityPassMap *) mSupPtr ; }
//--- Data member
  public : e_constrainedEntityPassMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of map '@constraintAllPropertiesMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_constraintAllPropertiesMap {
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_constraintAllPropertiesMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_constraintAllPropertiesMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_constraintAllPropertiesMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_constraintAllPropertiesMap * nextObject (void) const { return (elementOf_GGS_constraintAllPropertiesMap *) mNextItem ; }
  public : inline elementOf_GGS_constraintAllPropertiesMap * infObject (void) const { return (elementOf_GGS_constraintAllPropertiesMap *) mInfPtr ; }
  public : inline elementOf_GGS_constraintAllPropertiesMap * supObject (void) const { return (elementOf_GGS_constraintAllPropertiesMap *) mSupPtr ; }
//--- Data member
  public : e_constraintAllPropertiesMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@indexMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class e_indexMap {
  public : GGS_lstring  mMapTypeName ;
  public : GGS_uint  mPassIndex ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_indexMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_indexMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_indexMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_indexMap * nextObject (void) const { return (elementOf_GGS_indexMap *) mNextItem ; }
  public : inline elementOf_GGS_indexMap * infObject (void) const { return (elementOf_GGS_indexMap *) mInfPtr ; }
  public : inline elementOf_GGS_indexMap * supObject (void) const { return (elementOf_GGS_indexMap *) mSupPtr ; }
//--- Data member
  public : e_indexMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of map '@constrainedEntityMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_constrainedEntityMap {
  public : GGS_stringset  mPassesDefinedByInheritanceTreeRootEntity ;
  public : GGS_constrainedEntityPassMap  mConstrainedEntityPassMap ;
  public : GGS_lstring  mSuperEntityName ;
  public : GGS_entityPropertyMap  mEntityPropertiesMap ;
  public : GGS_stringset  mDescendantEntitySet ;
  public : GGS_location  mEndOfConstraintLocation ;
  public : GGS_mapAsConstraintPropertyMap  mMapAsConstraintPropertyCurrentMap ;
  public : GGS_mapAsConstraintPropertyMap  mAllMapsAsConstraintPropertyMap ;
  public : GGS_constraintAllPropertiesMap  mConstraintAllPropertiesMap ;
  public : GGS_indexMap  mCurrentIndexMap ;
  public : GGS_indexMap  mInheritedIndexMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_constrainedEntityMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_constrainedEntityMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_constrainedEntityMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_constrainedEntityMap * nextObject (void) const { return (elementOf_GGS_constrainedEntityMap *) mNextItem ; }
  public : inline elementOf_GGS_constrainedEntityMap * infObject (void) const { return (elementOf_GGS_constrainedEntityMap *) mInfPtr ; }
  public : inline elementOf_GGS_constrainedEntityMap * supObject (void) const { return (elementOf_GGS_constrainedEntityMap *) mSupPtr ; }
//--- Data member
  public : e_constrainedEntityMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique, C_String & ioString COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'callInstruction'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_callInstruction.h"

//---------------------------------------------------------------------------*

#endif
