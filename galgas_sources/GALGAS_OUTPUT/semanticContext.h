//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'semanticContext.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 20th, 2010, at 21h32'19"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semanticContext_DEFINED
#define semanticContext_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/GGS__header.h"

//---------------------------------------------------------------------------*

// Include imported semantics
#include "optionCompilation.h"
#include "semanticsClassMethods.h"
#include "semanticsConstructors.h"
#include "semanticsInstanceMethods.h"
#include "semanticsModifiers.h"
#include "semanticsReaders.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_grammarLabelMap ;
class GGS_grammarMap ;
class GGS_routineMap ;
class GGS_functionMap ;
class GGS_filewrapperTemplateMap ;
class GGS_filewrapperMap ;
class GGS_optionComponentMapForSemanticAnalysis ;
class GGS_semanticContext ;
class GGS_collectedTypeMap ;
class GGS_collectedTypeMapIndex ;
class GGS_partiallyOrderedSemanticDeclarationListAST ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@grammarLabelMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_grammarLabelMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarLabelMap ;

//---------------------------------------------------------------------------*

class GGS_grammarLabelMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_grammarLabelMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_grammarLabelMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_grammarLabelMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_grammarLabelMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_grammarLabelMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_grammarLabelMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_grammarLabelMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_grammarLabelMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_formalParameterSignature & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_formalParameterSignature & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_grammarLabelMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_grammarLabelMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_grammarLabelMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_grammarLabelMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_grammarLabelMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_formalParameterSignature   & _mLabelSignature (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@grammarMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_grammarMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarMap ;

//---------------------------------------------------------------------------*

class GGS_grammarMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_grammarMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_grammarMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_grammarMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_grammarMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_grammarMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_grammarMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_grammarMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_grammarMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_grammarLabelMap & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_grammarLabelMap &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_grammarLabelMap   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_grammarLabelMap & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_grammarLabelMap & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_grammarMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_grammarMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_grammarMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_grammarMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_grammarMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_grammarLabelMap   & _mLabelMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@routineMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_routineMap ;

//---------------------------------------------------------------------------*

class GGS_routineMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_routineMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_routineMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_routineMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_routineMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_routineMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_routineMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_formalParameterSignature & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_formalParameterSignature & outParameter0,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_routineMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_routineMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_routineMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_routineMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_routineMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_formalParameterSignature   & _mRoutineSignature (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@functionMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_functionMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_functionMap ;

//---------------------------------------------------------------------------*

class GGS_functionMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_functionMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_functionMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_functionMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_functionMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_functionMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_functionMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_functionMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_functionMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_unifiedTypeMapProxy & inValue1
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList &  inParameter0,
                                const GGS_unifiedTypeMapProxy &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_unifiedTypeMapProxy   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_unifiedTypeMapProxyList & inParameter0,
                                   const GGS_unifiedTypeMapProxy & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_unifiedTypeMapProxyList & outParameter0,
                                   GGS_unifiedTypeMapProxy & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_functionMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_functionMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_functionMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_functionMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_functionMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_unifiedTypeMapProxyList   & _mFunctionSignature (LOCATION_ARGS) const ;
    public : /* const */ GGS_unifiedTypeMapProxy   & _mResultType (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map '@filewrapperTemplateMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_filewrapperTemplateMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperTemplateMap ;

//---------------------------------------------------------------------------*

class GGS_filewrapperTemplateMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_filewrapperTemplateMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_filewrapperTemplateMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_filewrapperTemplateMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_filewrapperTemplateMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_filewrapperTemplateMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_filewrapperTemplateMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_filewrapperTemplateMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_filewrapperTemplateMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_lstring & inValue1
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList &  inParameter0,
                                const GGS_lstring &  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_lstring   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_unifiedTypeMapProxyList & inParameter0,
                                   const GGS_lstring & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_unifiedTypeMapProxyList & outParameter0,
                                   GGS_lstring & outParameter1,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_filewrapperTemplateMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_filewrapperTemplateMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_filewrapperTemplateMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_filewrapperTemplateMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_filewrapperTemplateMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_unifiedTypeMapProxyList   & _mTemplateSignature (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstring   & _mFilewrapperTemplatePath (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@filewrapperMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_filewrapperMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperMap ;

//---------------------------------------------------------------------------*

class GGS_filewrapperMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_filewrapperMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_filewrapperMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_filewrapperMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_filewrapperMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_filewrapperMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_filewrapperMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_filewrapperMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_filewrapperMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_lstring & inValue0,
                                             const GGS_lstringlist & inValue1,
                                             const GGS_filewrapperTemplateMap & inValue2
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0,
                                const GGS_lstringlist &  inParameter1,
                                const GGS_filewrapperTemplateMap &  inParameter2 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_lstringlist   & outParameter1,
                                GGS_filewrapperTemplateMap   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_lstring & inParameter0,
                                   const GGS_lstringlist & inParameter1,
                                   const GGS_filewrapperTemplateMap & inParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_lstring & outParameter0,
                                   GGS_lstringlist & outParameter1,
                                   GGS_filewrapperTemplateMap & outParameter2,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_filewrapperMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_filewrapperMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_filewrapperMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_filewrapperMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_filewrapperMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _mFilewrapperPath (LOCATION_ARGS) const ;
    public : /* const */ GGS_lstringlist   & _mFilewrapperExtensionList (LOCATION_ARGS) const ;
    public : /* const */ GGS_filewrapperTemplateMap   & _mFilewrapperTemplateMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Map '@optionComponentMapForSemanticAnalysis'                *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_optionComponentMapForSemanticAnalysis ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis ;

//---------------------------------------------------------------------------*

class GGS_optionComponentMapForSemanticAnalysis : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_optionComponentMapForSemanticAnalysis cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_optionComponentMapForSemanticAnalysis castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_optionComponentMapForSemanticAnalysis * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_optionComponentMapForSemanticAnalysis * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_optionComponentMapForSemanticAnalysis constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_optionComponentMapForSemanticAnalysis constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
,
                                             const GGS_commandLineOptionMap & inValue0,
                                             const GGS_commandLineOptionMap & inValue1,
                                             const GGS_commandLineOptionMap & inValue2
                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_commandLineOptionMap &  inParameter0,
                                const GGS_commandLineOptionMap &  inParameter1,
                                const GGS_commandLineOptionMap &  inParameter2 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_commandLineOptionMap   & outParameter0,
                                GGS_commandLineOptionMap   & outParameter1,
                                GGS_commandLineOptionMap   & outParameter2 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   const GGS_commandLineOptionMap & inParameter0,
                                   const GGS_commandLineOptionMap & inParameter1,
                                   const GGS_commandLineOptionMap & inParameter2,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_commandLineOptionMap & outParameter0,
                                   GGS_commandLineOptionMap & outParameter1,
                                   GGS_commandLineOptionMap & outParameter2,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_optionComponentMapForSemanticAnalysis constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_optionComponentMapForSemanticAnalysis & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_optionComponentMapForSemanticAnalysis reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_optionComponentMapForSemanticAnalysis & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_optionComponentMapForSemanticAnalysis & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_commandLineOptionMap   & _mBoolOptionMap (LOCATION_ARGS) const ;
    public : /* const */ GGS_commandLineOptionMap   & _mUIntOptionMap (LOCATION_ARGS) const ;
    public : /* const */ GGS_commandLineOptionMap   & _mStringOptionMap (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@collectedTypeMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_collectedTypeMap ;

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMap ;

//---------------------------------------------------------------------------*

class GGS_collectedTypeMap : public AC_GGS_map {
//--- Element Class
  public : typedef elementOf_GGS_collectedTypeMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_collectedTypeMap & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_collectedTypeMap & inOperand) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_collectedTypeMap castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Create an element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_string & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_collectedTypeMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_collectedTypeMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_collectedTypeMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- 'mapWithKeyAndValue' constructor
  public : static GGS_collectedTypeMap constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey

                                             COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                  const PMUInt32 inInitialState,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                  const PMUInt32 inActionIndex,
                                  const utf32 * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
  public : static GGS_collectedTypeMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_collectedTypeMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_collectedTypeMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;

//--------------------------------- Key stringset (for map with an associated automaton)
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_collectedTypeMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_collectedTypeMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map index '@collectedTypeMapIndex'                     *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMapIndex ;

//---------------------------------------------------------------------------*

class GGS_collectedTypeMapIndex : public AC_GGS_mapindex {
//--- 'null' constructor
  public : static GGS_collectedTypeMapIndex
  constructor_null (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS) ;

//--- Comparison operators
  public : GGS_bool operator_isEqual (const GGS_collectedTypeMapIndex & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_collectedTypeMapIndex & inOperand) const ;

//--- 'description' reader declaration
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;

//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_collectedTypeMapIndex castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Type Method 'makeRegularProxy'
  public : static void
  class_method_makeRegularProxy (C_Compiler & inLexique,
                                 GGS_collectedTypeMap & ioMap,
                                 const GGS_string & inKey,
                                 GGS_collectedTypeMapIndex & outIndex
                                 COMMA_LOCATION_ARGS) ;

//--- Method Access
  public : inline const GGS_collectedTypeMapIndex *
  operator () (UNUSED_LOCATION_ARGS) const {
    return this ;
  }

//--- Attribute access
//--- Constructors from map readers
  public : static GGS_collectedTypeMapIndex constructor_searchKey (C_Compiler & inLexique,
              const GGS_collectedTypeMap & inMap,
              const GGS_lstring & inKey
              COMMA_LOCATION_ARGS) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Routine 'collectAttributeTypes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_collectAttributeTypes (C_Compiler &,
                                const GGS_attributeInCollectionListAST  ,
                                GGS_collectedTypeMap  & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@semanticDeclarationAST.collectType'            *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__semanticDeclarationAST__collectType)  (C_Compiler & inLexique,
                                const cPtr_semanticDeclarationAST * inObjectPtr,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__collectType (typeCategoryMethod__semanticDeclarationAST__collectType inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__collectType
findCategoryMethod__semanticDeclarationAST__collectType (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@semanticDeclarationAST.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__semanticDeclarationAST__enterType)  (C_Compiler & inLexique,
                                const cPtr_semanticDeclarationAST * inObjectPtr,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterType (typeCategoryMethod__semanticDeclarationAST__enterType inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterType
findCategoryMethod__semanticDeclarationAST__enterType (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//        sorted list '@partiallyOrderedSemanticDeclarationListAST'          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_partiallyOrderedSemanticDeclarationListAST ;
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST ;

//---------------------------------------------------------------------------*


class GGS_partiallyOrderedSemanticDeclarationListAST : public AC_GGS_sortedlist {
  public : typedef elementOf_GGS_partiallyOrderedSemanticDeclarationListAST cElement ;
//--- Default Constructor
  public : GGS_partiallyOrderedSemanticDeclarationListAST (void) ;
//--- Copy Constructor
  public : GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_partiallyOrderedSemanticDeclarationListAST & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator_isEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_partiallyOrderedSemanticDeclarationListAST constructor_emptySortedList (void) ;
  public : static GGS_partiallyOrderedSemanticDeclarationListAST constructor_sortedListWithValue (const GGS_string& argument_0,
                           const GGS_string& argument_1,
                           const GGS_semanticDeclarationAST & argument_2) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_partiallyOrderedSemanticDeclarationListAST * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & inLexique,
                              GGS_string& _out_0,
                              GGS_string& _out_1,
                              GGS_semanticDeclarationAST & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & inLexique,
                             GGS_string& _out_0,
                             GGS_string& _out_1,
                             GGS_semanticDeclarationAST & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & inLexique,
                                GGS_string& _out_0,
                                GGS_string& _out_1,
                                GGS_semanticDeclarationAST & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & inLexique,
                                 GGS_string& _out_0,
                                 GGS_string& _out_1,
                                 GGS_semanticDeclarationAST & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_partiallyOrderedSemanticDeclarationListAST inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_partiallyOrderedSemanticDeclarationListAST operator_concat (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const ;

//--- Internal Methods
  protected : void internalAppendValues (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2) ;
//--- List Insulation
  protected : void insulateList (void) ;
//--- Reader 'description
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_partiallyOrderedSemanticDeclarationListAST castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_partiallyOrderedSemanticDeclarationListAST & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_string & _mDependanceString (LOCATION_ARGS) const ;
    public : /* const */ GGS_string & _mTypeString (LOCATION_ARGS) const ;
    public : /* const */ GGS_semanticDeclarationAST  & _mSemanticDeclaration (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void (*typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration)  (C_Compiler & inLexique,
                                const cPtr_semanticDeclarationAST * inObjectPtr,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration inRoutine,
                     const PMSInt32 inClassID) ;

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration
findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (AC_galgasClassRunTimeInformationEX * inClassPtr) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'buildSemanticContext'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSemanticContext (C_Compiler &,
                                const GGS_semanticDeclarationListAST  ,
                                const GGS_location  ,
                                GGS_semanticContext & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of map '@grammarLabelMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_grammarLabelMap {
  public : GGS_formalParameterSignature  mLabelSignature ;

  public : e_grammarLabelMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_grammarLabelMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_grammarLabelMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_grammarLabelMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_grammarLabelMap * nextObject (void) const { return (elementOf_GGS_grammarLabelMap *) mNextItem ; }
  public : inline elementOf_GGS_grammarLabelMap * infObject (void) const { return (elementOf_GGS_grammarLabelMap *) mInfPtr ; }
  public : inline elementOf_GGS_grammarLabelMap * supObject (void) const { return (elementOf_GGS_grammarLabelMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_grammarLabelMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@grammarMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_grammarMap {
  public : GGS_grammarLabelMap  mLabelMap ;

  public : e_grammarMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_grammarMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_grammarMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_grammarMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_grammarMap * nextObject (void) const { return (elementOf_GGS_grammarMap *) mNextItem ; }
  public : inline elementOf_GGS_grammarMap * infObject (void) const { return (elementOf_GGS_grammarMap *) mInfPtr ; }
  public : inline elementOf_GGS_grammarMap * supObject (void) const { return (elementOf_GGS_grammarMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_grammarMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@routineMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_routineMap {
  public : GGS_formalParameterSignature  mRoutineSignature ;

  public : e_routineMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_routineMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_routineMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_routineMap * nextObject (void) const { return (elementOf_GGS_routineMap *) mNextItem ; }
  public : inline elementOf_GGS_routineMap * infObject (void) const { return (elementOf_GGS_routineMap *) mInfPtr ; }
  public : inline elementOf_GGS_routineMap * supObject (void) const { return (elementOf_GGS_routineMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_routineMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@functionMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_functionMap {
  public : GGS_unifiedTypeMapProxyList  mFunctionSignature ;
  public : GGS_unifiedTypeMapProxy  mResultType ;

  public : e_functionMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_functionMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_functionMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_functionMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_functionMap * nextObject (void) const { return (elementOf_GGS_functionMap *) mNextItem ; }
  public : inline elementOf_GGS_functionMap * infObject (void) const { return (elementOf_GGS_functionMap *) mInfPtr ; }
  public : inline elementOf_GGS_functionMap * supObject (void) const { return (elementOf_GGS_functionMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_functionMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@filewrapperTemplateMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_filewrapperTemplateMap {
  public : GGS_unifiedTypeMapProxyList  mTemplateSignature ;
  public : GGS_lstring  mFilewrapperTemplatePath ;

  public : e_filewrapperTemplateMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_filewrapperTemplateMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_filewrapperTemplateMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_filewrapperTemplateMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_filewrapperTemplateMap * nextObject (void) const { return (elementOf_GGS_filewrapperTemplateMap *) mNextItem ; }
  public : inline elementOf_GGS_filewrapperTemplateMap * infObject (void) const { return (elementOf_GGS_filewrapperTemplateMap *) mInfPtr ; }
  public : inline elementOf_GGS_filewrapperTemplateMap * supObject (void) const { return (elementOf_GGS_filewrapperTemplateMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_filewrapperTemplateMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@filewrapperMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_filewrapperMap {
  public : GGS_lstring  mFilewrapperPath ;
  public : GGS_lstringlist  mFilewrapperExtensionList ;
  public : GGS_filewrapperTemplateMap  mFilewrapperTemplateMap ;

  public : e_filewrapperMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_filewrapperMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_filewrapperMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_filewrapperMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_filewrapperMap * nextObject (void) const { return (elementOf_GGS_filewrapperMap *) mNextItem ; }
  public : inline elementOf_GGS_filewrapperMap * infObject (void) const { return (elementOf_GGS_filewrapperMap *) mInfPtr ; }
  public : inline elementOf_GGS_filewrapperMap * supObject (void) const { return (elementOf_GGS_filewrapperMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_filewrapperMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Element of map '@optionComponentMapForSemanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

class e_optionComponentMapForSemanticAnalysis {
  public : GGS_commandLineOptionMap  mBoolOptionMap ;
  public : GGS_commandLineOptionMap  mUIntOptionMap ;
  public : GGS_commandLineOptionMap  mStringOptionMap ;

  public : e_optionComponentMapForSemanticAnalysis (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_optionComponentMapForSemanticAnalysis : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_optionComponentMapForSemanticAnalysis (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_optionComponentMapForSemanticAnalysis & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_optionComponentMapForSemanticAnalysis * nextObject (void) const { return (elementOf_GGS_optionComponentMapForSemanticAnalysis *) mNextItem ; }
  public : inline elementOf_GGS_optionComponentMapForSemanticAnalysis * infObject (void) const { return (elementOf_GGS_optionComponentMapForSemanticAnalysis *) mInfPtr ; }
  public : inline elementOf_GGS_optionComponentMapForSemanticAnalysis * supObject (void) const { return (elementOf_GGS_optionComponentMapForSemanticAnalysis *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_optionComponentMapForSemanticAnalysis mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Declarations for 'semanticContext' struct                  *
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptorEX kTypeDescriptor_GGS_semanticContext ;

//---------------------------------------------------------------------------*

class GGS_semanticContext : public GGS__root {
//--- Default constructor
  public : GGS_semanticContext (void) ;

//--- Virtual destructor
  public : virtual ~GGS_semanticContext (void) ;

//--- Handle 'drop' instruction
  public : void drop (void) ;

//--- Method 'isBuilt'
  public : bool isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_semanticContext * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_semanticContext * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool operator_isEqual (const GGS_semanticContext & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_semanticContext & inOperand) const ;

//--- Reader 'description'
  public : virtual GGS_string reader_description (const PMSInt32 inIndentation = 0) const ;
//--- Introspection
  public : virtual const C_galgas_type_descriptorEX * typeDescriptor (void) const ;

  public : GGS_object reader_object (void) const ;

  public : static GGS_semanticContext castFromObject (C_Compiler & inLexique,
                                           const GGS_object & inObject,
                                           const GGS_location & inErrorLocation
                                           COMMA_LOCATION_ARGS) ;

//--- Galgas 'new' destructor
  public : static GGS_semanticContext constructor_new (const GGS_unifiedTypeMap & argument_0,
                 const GGS_routineMap & argument_1,
                 const GGS_functionMap & argument_2,
                 const GGS_filewrapperMap & argument_3,
                 const GGS_grammarMap & argument_4,
                 const GGS_optionComponentMapForSemanticAnalysis & argument_5) ;

//--- Readers
  public : inline GGS_unifiedTypeMap 
  reader_mTypeMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mTypeMap ;
  }

  public : inline GGS_routineMap 
  reader_mRoutineMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRoutineMap ;
  }

  public : inline GGS_functionMap 
  reader_mFunctionMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mFunctionMap ;
  }

  public : inline GGS_filewrapperMap 
  reader_mFilewrapperMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mFilewrapperMap ;
  }

  public : inline GGS_grammarMap 
  reader_mGrammarMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mGrammarMap ;
  }

  public : inline GGS_optionComponentMapForSemanticAnalysis 
  reader_mOptionComponentMapForSemanticAnalysis (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mOptionComponentMapForSemanticAnalysis ;
  }

//--- Attributes
  public : GGS_unifiedTypeMap  mTypeMap ;
  public : GGS_routineMap  mRoutineMap ;
  public : GGS_functionMap  mFunctionMap ;
  public : GGS_filewrapperMap  mFilewrapperMap ;
  public : GGS_grammarMap  mGrammarMap ;
  public : GGS_optionComponentMapForSemanticAnalysis  mOptionComponentMapForSemanticAnalysis ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of map '@collectedTypeMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_collectedTypeMap {

} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_collectedTypeMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_collectedTypeMap (const GGS_lstring & inKey,
                                     const PMSInt32 inIndex,
                                     const e_collectedTypeMap & inInfo,
                                     const PMUInt32 inInitialState = 0) ;
//--- Get pointers
  public : inline elementOf_GGS_collectedTypeMap * nextObject (void) const { return (elementOf_GGS_collectedTypeMap *) mNextItem ; }
  public : inline elementOf_GGS_collectedTypeMap * infObject (void) const { return (elementOf_GGS_collectedTypeMap *) mInfPtr ; }
  public : inline elementOf_GGS_collectedTypeMap * supObject (void) const { return (elementOf_GGS_collectedTypeMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_collectedTypeMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (const PMSInt32 inElementIndex,
                                         C_String & ioString,
                                         const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//   Element of sorted list '@partiallyOrderedSemanticDeclarationListAST'    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_partiallyOrderedSemanticDeclarationListAST : public AC_GGS_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_string mDependanceString ;
  public : GGS_string mTypeString ;
  public : GGS_semanticDeclarationAST  mSemanticDeclaration ;
//--- Constructor
  public : elementOf_GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_string& ,
                                const GGS_string& ,
                                const GGS_semanticDeclarationAST & ) ;

//--- Access to next
  public : inline elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * nextObject (void) const { return (elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * previousObject (void) const { return (elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual PMSInt32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;
  friend class GGS_partiallyOrderedSemanticDeclarationListAST ;
} ;

//---------------------------------------------------------------------------*

#endif
