//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'XcodeProjectGeneration.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 23th, 2008, at 15h7'20"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "XcodeProjectGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "XcodeProjectGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "computeKey"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeKey (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inValue,
                                GGS_string & var_cas_outKey COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeKey at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outKey = var_cas_inValue.reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (8)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (8)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeKey\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@Xcode_groupList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_Xcode_groupList::
elementOf_GGS_Xcode_groupList (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mTargetKey (argument_0),
mGroupName (argument_1),
mChildrenGroupList (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_Xcode_groupList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_Xcode_groupList * _p = dynamic_cast <const elementOf_GGS_Xcode_groupList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mTargetKey._operator_isEqual (_p->mTargetKey).boolValue ()
         && mGroupName._operator_isEqual (_p->mGroupName).boolValue ()
         && mChildrenGroupList._operator_isEqual (_p->mChildrenGroupList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_Xcode_groupList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTargetKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mGroupName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mChildrenGroupList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@Xcode_groupList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
_internalAppendValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_stringlist & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
_internalPrependValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_stringlist & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
_addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList GGS_Xcode_groupList::
_operator_concat (const GGS_Xcode_groupList & inOperand) const {
  GGS_Xcode_groupList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
_dotAssign_operation (const GGS_Xcode_groupList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_Xcode_groupList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mTargetKey ;
          GGS_string p_1 = p->mGroupName ;
          GGS_stringlist  p_2 = p->mChildrenGroupList ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_string& argument_0,
                     const GGS_string& argument_1,
                     const GGS_stringlist & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mTargetKey,
                                _p->mGroupName,
                                _p->mChildrenGroupList
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList  GGS_Xcode_groupList::
constructor_emptyList (void) {
  GGS_Xcode_groupList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList  GGS_Xcode_groupList::
constructor_listWithValue (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2) {
  GGS_Xcode_groupList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
internalSubListWithRange (GGS_Xcode_groupList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mTargetKey, _p->mGroupName, _p->mChildrenGroupList) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList GGS_Xcode_groupList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_groupList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList GGS_Xcode_groupList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_groupList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_groupList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@Xcode_groupList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
method_first (C_Compiler & _inLexique,
              GGS_string& _out_0,
              GGS_string& _out_1,
              GGS_stringlist & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mGroupName ;
    _out_2 = _p->mChildrenGroupList ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
method_last (C_Compiler & _inLexique,
             GGS_string& _out_0,
             GGS_string& _out_1,
             GGS_stringlist & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mGroupName ;
    _out_2 = _p->mChildrenGroupList ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_stringlist & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mGroupName ;
    _out_2 = _p->mChildrenGroupList ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_string& _out_0,
                GGS_string& _out_1,
                GGS_stringlist & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mGroupName ;
    _out_2 = _p->mChildrenGroupList ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_groupList::
reader_mTargetKeyAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTargetKey ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_groupList::
reader_mGroupNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mGroupName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist  GGS_Xcode_groupList::
reader_mChildrenGroupListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_stringlist  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mChildrenGroupList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_setMTargetKeyAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTargetKey = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_setMGroupNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mGroupName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_groupList::
modifier_setMChildrenGroupListAtIndex (C_Compiler & inLexique,
                              const GGS_stringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mChildrenGroupList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_groupList::cEnumerator::_mTargetKey (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mTargetKey ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_groupList::cEnumerator::_mGroupName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mGroupName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_stringlist  & GGS_Xcode_groupList::cEnumerator::_mChildrenGroupList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mChildrenGroupList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@Xcode_buildConfigurationList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_Xcode_buildConfigurationList::
elementOf_GGS_Xcode_buildConfigurationList (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mTargetKey (argument_0),
mXCBuildConfigurationKey (argument_1),
mSettings (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_Xcode_buildConfigurationList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_Xcode_buildConfigurationList * _p = dynamic_cast <const elementOf_GGS_Xcode_buildConfigurationList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mTargetKey._operator_isEqual (_p->mTargetKey).boolValue ()
         && mXCBuildConfigurationKey._operator_isEqual (_p->mXCBuildConfigurationKey).boolValue ()
         && mSettings._operator_isEqual (_p->mSettings).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_Xcode_buildConfigurationList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTargetKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mXCBuildConfigurationKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSettings.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@Xcode_buildConfigurationList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
_internalAppendValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_stringlist & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
_internalPrependValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_stringlist & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
_addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList GGS_Xcode_buildConfigurationList::
_operator_concat (const GGS_Xcode_buildConfigurationList & inOperand) const {
  GGS_Xcode_buildConfigurationList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
_dotAssign_operation (const GGS_Xcode_buildConfigurationList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_Xcode_buildConfigurationList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mTargetKey ;
          GGS_string p_1 = p->mXCBuildConfigurationKey ;
          GGS_stringlist  p_2 = p->mSettings ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_string& argument_0,
                     const GGS_string& argument_1,
                     const GGS_stringlist & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mTargetKey,
                                _p->mXCBuildConfigurationKey,
                                _p->mSettings
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList  GGS_Xcode_buildConfigurationList::
constructor_emptyList (void) {
  GGS_Xcode_buildConfigurationList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList  GGS_Xcode_buildConfigurationList::
constructor_listWithValue (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_stringlist & argument_2) {
  GGS_Xcode_buildConfigurationList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
internalSubListWithRange (GGS_Xcode_buildConfigurationList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mTargetKey, _p->mXCBuildConfigurationKey, _p->mSettings) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList GGS_Xcode_buildConfigurationList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_buildConfigurationList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList GGS_Xcode_buildConfigurationList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_buildConfigurationList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_buildConfigurationList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@Xcode_buildConfigurationList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
method_first (C_Compiler & _inLexique,
              GGS_string& _out_0,
              GGS_string& _out_1,
              GGS_stringlist & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mXCBuildConfigurationKey ;
    _out_2 = _p->mSettings ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
method_last (C_Compiler & _inLexique,
             GGS_string& _out_0,
             GGS_string& _out_1,
             GGS_stringlist & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mXCBuildConfigurationKey ;
    _out_2 = _p->mSettings ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_stringlist & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mXCBuildConfigurationKey ;
    _out_2 = _p->mSettings ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_string& _out_0,
                GGS_string& _out_1,
                GGS_stringlist & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mXCBuildConfigurationKey ;
    _out_2 = _p->mSettings ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_buildConfigurationList::
reader_mTargetKeyAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTargetKey ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_buildConfigurationList::
reader_mXCBuildConfigurationKeyAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mXCBuildConfigurationKey ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist  GGS_Xcode_buildConfigurationList::
reader_mSettingsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_stringlist  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSettings ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_setMTargetKeyAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTargetKey = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_setMXCBuildConfigurationKeyAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mXCBuildConfigurationKey = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_buildConfigurationList::
modifier_setMSettingsAtIndex (C_Compiler & inLexique,
                              const GGS_stringlist  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSettings = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_buildConfigurationList::cEnumerator::_mTargetKey (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mTargetKey ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_buildConfigurationList::cEnumerator::_mXCBuildConfigurationKey (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mXCBuildConfigurationKey ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_stringlist  & GGS_Xcode_buildConfigurationList::cEnumerator::_mSettings (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mSettings ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@Xcode_targetList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_Xcode_targetList::
elementOf_GGS_Xcode_targetList (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4,
                                const GGS_string& argument_5
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mTargetKey (argument_0),
mTargetName (argument_1),
mTargetConfigurationKey (argument_2),
mProductInstallPath (argument_3),
mProductName (argument_4),
mProductTypeExtension (argument_5) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_Xcode_targetList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_Xcode_targetList * _p = dynamic_cast <const elementOf_GGS_Xcode_targetList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mTargetKey._operator_isEqual (_p->mTargetKey).boolValue ()
         && mTargetName._operator_isEqual (_p->mTargetName).boolValue ()
         && mTargetConfigurationKey._operator_isEqual (_p->mTargetConfigurationKey).boolValue ()
         && mProductInstallPath._operator_isEqual (_p->mProductInstallPath).boolValue ()
         && mProductName._operator_isEqual (_p->mProductName).boolValue ()
         && mProductTypeExtension._operator_isEqual (_p->mProductTypeExtension).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_Xcode_targetList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTargetKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTargetName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTargetConfigurationKey.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mProductInstallPath.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mProductName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mProductTypeExtension.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@Xcode_targetList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
_internalAppendValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_string& argument_2,
                    const GGS_string& argument_3,
                    const GGS_string& argument_4,
                    const GGS_string& argument_5
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
_internalPrependValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_string& argument_2,
                    const GGS_string& argument_3,
                    const GGS_string& argument_4,
                    const GGS_string& argument_5
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
_addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4,
                                const GGS_string& argument_5) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()&& argument_3._isBuilt ()&& argument_4._isBuilt ()&& argument_5._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList GGS_Xcode_targetList::
_operator_concat (const GGS_Xcode_targetList & inOperand) const {
  GGS_Xcode_targetList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
_dotAssign_operation (const GGS_Xcode_targetList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_Xcode_targetList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mTargetKey ;
          GGS_string p_1 = p->mTargetName ;
          GGS_string p_2 = p->mTargetConfigurationKey ;
          GGS_string p_3 = p->mProductInstallPath ;
          GGS_string p_4 = p->mProductName ;
          GGS_string p_5 = p->mProductTypeExtension ;
          _internalAppendValues (p_0, p_1, p_2, p_3, p_4, p_5 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_string& argument_0,
                     const GGS_string& argument_1,
                     const GGS_string& argument_2,
                     const GGS_string& argument_3,
                     const GGS_string& argument_4,
                     const GGS_string& argument_5
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mTargetKey,
                                _p->mTargetName,
                                _p->mTargetConfigurationKey,
                                _p->mProductInstallPath,
                                _p->mProductName,
                                _p->mProductTypeExtension
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList  GGS_Xcode_targetList::
constructor_emptyList (void) {
  GGS_Xcode_targetList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList  GGS_Xcode_targetList::
constructor_listWithValue (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_string& argument_2,
                                const GGS_string& argument_3,
                                const GGS_string& argument_4,
                                const GGS_string& argument_5) {
  GGS_Xcode_targetList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4, argument_5) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
internalSubListWithRange (GGS_Xcode_targetList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mTargetKey, _p->mTargetName, _p->mTargetConfigurationKey, _p->mProductInstallPath, _p->mProductName, _p->mProductTypeExtension) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList GGS_Xcode_targetList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_targetList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList GGS_Xcode_targetList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_Xcode_targetList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@Xcode_targetList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
method_first (C_Compiler & _inLexique,
              GGS_string& _out_0,
              GGS_string& _out_1,
              GGS_string& _out_2,
              GGS_string& _out_3,
              GGS_string& _out_4,
              GGS_string& _out_5
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mTargetName ;
    _out_2 = _p->mTargetConfigurationKey ;
    _out_3 = _p->mProductInstallPath ;
    _out_4 = _p->mProductName ;
    _out_5 = _p->mProductTypeExtension ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
method_last (C_Compiler & _inLexique,
             GGS_string& _out_0,
             GGS_string& _out_1,
             GGS_string& _out_2,
             GGS_string& _out_3,
             GGS_string& _out_4,
             GGS_string& _out_5
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mTargetName ;
    _out_2 = _p->mTargetConfigurationKey ;
    _out_3 = _p->mProductInstallPath ;
    _out_4 = _p->mProductName ;
    _out_5 = _p->mProductTypeExtension ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_string& _out_2,
                 GGS_string& _out_3,
                 GGS_string& _out_4,
                 GGS_string& _out_5
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mTargetName ;
    _out_2 = _p->mTargetConfigurationKey ;
    _out_3 = _p->mProductInstallPath ;
    _out_4 = _p->mProductName ;
    _out_5 = _p->mProductTypeExtension ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_string& _out_0,
                GGS_string& _out_1,
                GGS_string& _out_2,
                GGS_string& _out_3,
                GGS_string& _out_4,
                GGS_string& _out_5
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mTargetKey ;
    _out_1 = _p->mTargetName ;
    _out_2 = _p->mTargetConfigurationKey ;
    _out_3 = _p->mProductInstallPath ;
    _out_4 = _p->mProductName ;
    _out_5 = _p->mProductTypeExtension ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
    _out_3._drop () ;
    _out_4._drop () ;
    _out_5._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mTargetKeyAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTargetKey ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mTargetNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTargetName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mTargetConfigurationKeyAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTargetConfigurationKey ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mProductInstallPathAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mProductInstallPath ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mProductNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mProductName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_targetList::
reader_mProductTypeExtensionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_string result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mProductTypeExtension ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMTargetKeyAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTargetKey = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMTargetNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTargetName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMTargetConfigurationKeyAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTargetConfigurationKey = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMProductInstallPathAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mProductInstallPath = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMProductNameAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mProductName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_Xcode_targetList::
modifier_setMProductTypeExtensionAtIndex (C_Compiler & inLexique,
                              const GGS_string & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mProductTypeExtension = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mTargetKey (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mTargetKey ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mTargetName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mTargetName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mTargetConfigurationKey (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mTargetConfigurationKey ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mProductInstallPath (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mProductInstallPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mProductName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mProductName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_Xcode_targetList::cEnumerator::_mProductTypeExtension (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mProductTypeExtension ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_Xcode_rootObject'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_Xcode_rootObject::
cPtr_Xcode_rootObject (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_Xcode_groupList & argument_2,
                                const GGS_string& argument_3,
                                const GGS_Xcode_buildConfigurationList & argument_4,
                                const GGS_Xcode_targetList & argument_5,
                                const GGS_string& argument_6
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mProjectName (argument_0),
mRootObjectKey (argument_1),
mGroupList (argument_2),
mMainGroupKey (argument_3),
mBuildConfigurationList (argument_4),
mTargetList (argument_5),
mProjectDefaultConfigurationKey (argument_6) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_Xcode_rootObject * GGS_Xcode_rootObject::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_Xcode_rootObject *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_Xcode_rootObject::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_Xcode_rootObject * _p = dynamic_cast <const cPtr_Xcode_rootObject *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mProjectName._operator_isEqual (_p->mProjectName).boolValue ()
         && mRootObjectKey._operator_isEqual (_p->mRootObjectKey).boolValue ()
         && mGroupList._operator_isEqual (_p->mGroupList).boolValue ()
         && mMainGroupKey._operator_isEqual (_p->mMainGroupKey).boolValue ()
         && mBuildConfigurationList._operator_isEqual (_p->mBuildConfigurationList).boolValue ()
         && mTargetList._operator_isEqual (_p->mTargetList).boolValue ()
         && mProjectDefaultConfigurationKey._operator_isEqual (_p->mProjectDefaultConfigurationKey).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_Xcode_rootObject::
method_build (C_Compiler & /* _inLexique */,
                                GGS_string& var_cas_ioString COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_ioString = ((((((GGS_string (true, "// !$*UTF8*$!\n"))._operator_concat (GGS_string (true, "{\n")))._operator_concat (GGS_string (true, "\tarchiveVersion = 1;\n")))._operator_concat (GGS_string (true, "\tclasses = {\n")))._operator_concat (GGS_string (true, "\t};\n")))._operator_concat (GGS_string (true, "\tobjectVersion = 42;\n")))._operator_concat (GGS_string (true, "\tobjects = {\n"
    "\n")) ;
  var_cas_ioString.writeString ("/* Begin PBXGroup section */\n") ;
  {
    GGS_Xcode_groupList::cEnumerator enumerator_1656 (mGroupList, true) ;
    const GGS_Xcode_groupList::cElement * operand_1656 = NULL ;
    while (((operand_1656 = enumerator_1656.nextObject ()))) {
      macroValidPointer (operand_1656) ;
      var_cas_ioString.writeString ("\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_1656->mTargetKey) ;
      var_cas_ioString.writeString (" = {\n"
      "\t\t\tisa = PBXGroup;\n"
      "\t\t\tchildren = (\n") ;
      {
        GGS_stringlist::cEnumerator enumerator_1806 (operand_1656->mChildrenGroupList, true) ;
        const GGS_stringlist::cElement * operand_1806 = NULL ;
        while (((operand_1806 = enumerator_1806.nextObject ()))) {
          macroValidPointer (operand_1806) ;
          var_cas_ioString.writeString ("\t\t\t\t") ;
          var_cas_ioString._dotAssign_operation (operand_1806->mValue) ;
          var_cas_ioString.writeString (",\n") ;
        }
      }
      var_cas_ioString.writeString ("\t\t\t);\n") ;
      if (((operand_1656->mGroupName)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_ioString.writeString ("\t\t\tname = \"") ;
        var_cas_ioString._dotAssign_operation (operand_1656->mGroupName) ;
        var_cas_ioString.writeString ("\";\n") ;
      }
      var_cas_ioString.writeString ("\t\t\tsourceTree = \"<group>\";\n"
      "\t\t};\n") ;
    }
  }
  var_cas_ioString.writeString ("/* End PBXGroup section */\n"
    "\n") ;
  var_cas_ioString.writeString ("/* Begin PBXNativeTarget section */\n") ;
  {
    GGS_Xcode_targetList::cEnumerator enumerator_2272 (mTargetList, true) ;
    const GGS_Xcode_targetList::cElement * operand_2272 = NULL ;
    while (((operand_2272 = enumerator_2272.nextObject ()))) {
      macroValidPointer (operand_2272) ;
      var_cas_ioString.writeString ("\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mTargetKey) ;
      var_cas_ioString.writeString (" /* ") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mTargetName) ;
      var_cas_ioString.writeString (" */ {\n"
      "\t\t\tisa = PBXNativeTarget;\n"
      "\t\t\tbuildConfigurationList = ") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mTargetConfigurationKey) ;
      var_cas_ioString.writeString (" /* Build configuration list for PBXNativeTarget \"") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mTargetName) ;
      var_cas_ioString.writeString ("\" */;\n"
      "\t\t\tbuildPhases = (\n"
      "\t\t\t);\n"
      "\t\t\tbuildRules = (\n"
      "\t\t\t);\n"
      "\t\t\tdependencies = (\n"
      "\t\t\t);\n"
      "\t\t\tname = \"") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mTargetName) ;
      var_cas_ioString.writeString ("\";\n"
      "\t\t\tproductInstallPath = \"") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mProductInstallPath) ;
      var_cas_ioString.writeString ("\";\n"
      "\t\t\tproductName = \"") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mProductName) ;
      var_cas_ioString.writeString ("\";\n"
      "\t\t\tproductType = \"com.apple.product-type.") ;
      var_cas_ioString._dotAssign_operation (operand_2272->mProductTypeExtension) ;
      var_cas_ioString.writeString ("\";\n"
      "\t\t}\n") ;
    }
  }
  var_cas_ioString.writeString ("/* End PBXNativeTarget section */\n") ;
  var_cas_ioString.writeString ("/* Begin PBXProject section */\n"
  "\t\t") ;
  var_cas_ioString._dotAssign_operation (mRootObjectKey) ;
  var_cas_ioString.writeString (" /* Project object */ = {\n"
  "\t\t\tisa = PBXProject;\n"
  "\t\t\tbuildConfigurationList = ") ;
  var_cas_ioString._dotAssign_operation (mProjectDefaultConfigurationKey) ;
  var_cas_ioString.writeString (" /* Build configuration list for PBXProject \"") ;
  var_cas_ioString._dotAssign_operation (mProjectName) ;
  var_cas_ioString.writeString ("\" */;\n"
  "\t\t\tcompatibilityVersion = \"Xcode 2.4\";\n"
  "\t\t\thasScannedForEncodings = 1;\n"
  "\t\t\tmainGroup = ") ;
  var_cas_ioString._dotAssign_operation (mMainGroupKey) ;
  var_cas_ioString.writeString (";\n"
  "\t\t\tprojectDirPath = \"\";\n"
  "\t\t\tprojectRoot = \"\";\n"
  "\t\t\ttargets = (\n") ;
  {
    GGS_Xcode_targetList::cEnumerator enumerator_3668 (mTargetList, true) ;
    const GGS_Xcode_targetList::cElement * operand_3668 = NULL ;
    while (((operand_3668 = enumerator_3668.nextObject ()))) {
      macroValidPointer (operand_3668) ;
      var_cas_ioString.writeString ("\t\t\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_3668->mTargetKey) ;
      var_cas_ioString.writeString (" /* ") ;
      var_cas_ioString._dotAssign_operation (operand_3668->mTargetName) ;
      var_cas_ioString.writeString (" */,\n") ;
    }
  }
  var_cas_ioString.writeString ("\t\t\t);\n"
  "\t\t};\n"
  "/* End PBXProject section */\n"
    "\n") ;
  var_cas_ioString.writeString ("/* Begin XCBuildConfiguration section */\n") ;
  {
    GGS_Xcode_buildConfigurationList::cEnumerator enumerator_3986 (mBuildConfigurationList, true) ;
    const GGS_Xcode_buildConfigurationList::cElement * operand_3986 = NULL ;
    while (((operand_3986 = enumerator_3986.nextObject ()))) {
      macroValidPointer (operand_3986) ;
      var_cas_ioString.writeString ("\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_3986->mXCBuildConfigurationKey) ;
      var_cas_ioString.writeString (" /* Default */ = {\n"
      "\t\t\tisa = XCBuildConfiguration;\n"
      "\t\t\tbuildSettings = {\n") ;
      {
        GGS_stringlist::cEnumerator enumerator_4174 (operand_3986->mSettings, true) ;
        const GGS_stringlist::cElement * operand_4174 = NULL ;
        while (((operand_4174 = enumerator_4174.nextObject ()))) {
          macroValidPointer (operand_4174) ;
          var_cas_ioString.writeString ("\t\t\t\t") ;
          var_cas_ioString._dotAssign_operation (operand_4174->mValue) ;
          var_cas_ioString.writeString ("\n") ;
        }
      }
      var_cas_ioString.writeString ("\t\t\t};\n"
      "\t\t\tname = Default;\n"
      "\t\t};\n") ;
    }
  }
  var_cas_ioString.writeString ("/* End XCBuildConfiguration section */\n"
    "\n") ;
  var_cas_ioString.writeString ("/* Begin XCConfigurationList section */\n") ;
  {
    GGS_Xcode_buildConfigurationList::cEnumerator enumerator_4545 (mBuildConfigurationList, true) ;
    const GGS_Xcode_buildConfigurationList::cElement * operand_4545 = NULL ;
    while (((operand_4545 = enumerator_4545.nextObject ()))) {
      macroValidPointer (operand_4545) ;
      var_cas_ioString.writeString ("\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_4545->mTargetKey) ;
      var_cas_ioString.writeString (" /* Build configuration list */ = {\n"
      "\t\t\tisa = XCConfigurationList;\n"
      "\t\t\tbuildConfigurations = (\n"
      "\t\t\t\t") ;
      var_cas_ioString._dotAssign_operation (operand_4545->mXCBuildConfigurationKey) ;
      var_cas_ioString.writeString (" /* Default */,\n"
      "\t\t\t);\n"
      "\t\t\tdefaultConfigurationIsVisible = 0;\n"
      "\t\t\tdefaultConfigurationName = Default;\n"
      "\t\t};\n") ;
    }
  }
  var_cas_ioString.writeString ("/* End XCConfigurationList section */\n") ;
  var_cas_ioString.writeString ("\t};\n"
  "\trootObject = ") ;
  var_cas_ioString._dotAssign_operation (mRootObjectKey) ;
  var_cas_ioString.writeString (" /* Project object */ ;\n"
  "}\n") ;
}

//---------------------------------------------------------------------------*

void cPtr_Xcode_rootObject::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@Xcode_rootObject:"
           << mProjectName.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mRootObjectKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mGroupList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mMainGroupKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mBuildConfigurationList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mTargetList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mProjectDefaultConfigurationKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_Xcode_rootObject::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_Xcode_rootObject::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_Xcode_rootObject (& typeid (cPtr_Xcode_rootObject), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_Xcode_rootObject::galgasRTTI (void) const {
  return & gClassInfoFor__Xcode_rootObject ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_Xcode_rootObject'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_Xcode_rootObject::
GGS_Xcode_rootObject (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_rootObject::
GGS_Xcode_rootObject (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_Xcode_rootObject GGS_Xcode_rootObject::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_Xcode_rootObject _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_Xcode_rootObject *> (inPointer) != NULL)
      : (typeid (cPtr_Xcode_rootObject) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_Xcode_rootObject (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_Xcode_rootObject),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_rootObject GGS_Xcode_rootObject::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_string& argument_0,
                 const GGS_string& argument_1,
                 const GGS_Xcode_groupList & argument_2,
                 const GGS_string& argument_3,
                 const GGS_Xcode_buildConfigurationList & argument_4,
                 const GGS_Xcode_targetList & argument_5,
                 const GGS_string& argument_6
                                COMMA_LOCATION_ARGS) {
  GGS_Xcode_rootObject result ;
  macroMyNew (result.mPointer, cPtr_Xcode_rootObject (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_rootObject::
reader_mProjectName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mProjectName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_rootObject::
reader_mRootObjectKey (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mRootObjectKey ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_groupList  GGS_Xcode_rootObject::
reader_mGroupList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_Xcode_groupList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mGroupList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_rootObject::
reader_mMainGroupKey (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mMainGroupKey ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_buildConfigurationList  GGS_Xcode_rootObject::
reader_mBuildConfigurationList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_Xcode_buildConfigurationList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mBuildConfigurationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_Xcode_targetList  GGS_Xcode_rootObject::
reader_mTargetList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_Xcode_targetList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mTargetList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_Xcode_rootObject::
reader_mProjectDefaultConfigurationKey (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_Xcode_rootObject *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_Xcode_rootObject *) mPointer)->mProjectDefaultConfigurationKey ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_Xcode_rootObject::actualTypeName (void) const {
  return "Xcode_rootObject" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_Xcode_rootObject::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__Xcode_rootObject ("Xcode_rootObject") ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generateXcodeProject"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateXcodeProject (C_Compiler & _inLexique,
                                const GGS_string  var_cas_inProjectName,
                                const GGS_string  var_cas_in_pbxproj_filePath COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateXcodeProject at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_Xcode_groupList  var_cas_groupList ;
  var_cas_groupList = GGS_Xcode_groupList ::constructor_emptyList () ;
  GGS_Xcode_buildConfigurationList  var_cas_buildConfigurationList ;
  var_cas_buildConfigurationList = GGS_Xcode_buildConfigurationList ::constructor_emptyList () ;
  GGS_Xcode_targetList  var_cas_targetList ;
  var_cas_targetList = GGS_Xcode_targetList ::constructor_emptyList () ;
  GGS_stringlist  var_cas_mainGroupChildrenList ;
  var_cas_mainGroupChildrenList = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_generatedByGalgasGroupKey ;
  var_cas_generatedByGalgasGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (158)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (158)) ;
  var_cas_groupList._addAssign_operation (var_cas_generatedByGalgasGroupKey, GGS_string (true, "Generated by GALGAS"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_generatedByGalgasGroupKey) ;
  GGS_string var_cas_handCodedSourcesGroupKey ;
  var_cas_handCodedSourcesGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (162)) ;
  var_cas_groupList._addAssign_operation (var_cas_handCodedSourcesGroupKey, GGS_string (true, "Hand Coded Sources"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_handCodedSourcesGroupKey) ;
  GGS_stringlist  var_cas_libpmGroupChildrenList ;
  var_cas_libpmGroupChildrenList = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_cachesSubGroupKey ;
  var_cas_cachesSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (168)) ;
  var_cas_groupList._addAssign_operation (var_cas_cachesSubGroupKey, GGS_string (true, "Caches"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_cachesSubGroupKey) ;
  GGS_string var_cas_bddSubGroupKey ;
  var_cas_bddSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (172)) ;
  var_cas_groupList._addAssign_operation (var_cas_bddSubGroupKey, GGS_string (true, "Binary Decision Diagrams"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_bddSubGroupKey) ;
  GGS_string var_cas_collectionSubGroupKey ;
  var_cas_collectionSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (176)) ;
  var_cas_groupList._addAssign_operation (var_cas_collectionSubGroupKey, GGS_string (true, "Collections"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_collectionSubGroupKey) ;
  GGS_string var_cas_cocoaGALGASSubGroupKey ;
  var_cas_cocoaGALGASSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (180)) ;
  var_cas_groupList._addAssign_operation (var_cas_cocoaGALGASSubGroupKey, GGS_string (true, "Cocoa GALGAS"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_cocoaGALGASSubGroupKey) ;
  GGS_string var_cas_cocoaUtilitiesSubGroupKey ;
  var_cas_cocoaUtilitiesSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (184)) ;
  var_cas_groupList._addAssign_operation (var_cas_cocoaUtilitiesSubGroupKey, GGS_string (true, "Cocoa Utilities"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_cocoaUtilitiesSubGroupKey) ;
  GGS_string var_cas_commandLineInterfaceSubGroupKey ;
  var_cas_commandLineInterfaceSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (188)) ;
  var_cas_groupList._addAssign_operation (var_cas_commandLineInterfaceSubGroupKey, GGS_string (true, "Command Line Interface"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_commandLineInterfaceSubGroupKey) ;
  GGS_string var_cas_filesSubGroupKey ;
  var_cas_filesSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (192)) ;
  var_cas_groupList._addAssign_operation (var_cas_filesSubGroupKey, GGS_string (true, "Files"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_filesSubGroupKey) ;
  GGS_string var_cas_GALGASSubGroupKey ;
  var_cas_GALGASSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (196)) ;
  var_cas_groupList._addAssign_operation (var_cas_GALGASSubGroupKey, GGS_string (true, "GALGAS"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_GALGASSubGroupKey) ;
  GGS_string var_cas_streamsSubGroupKey ;
  var_cas_streamsSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (200)) ;
  var_cas_groupList._addAssign_operation (var_cas_streamsSubGroupKey, GGS_string (true, "Streams"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_streamsSubGroupKey) ;
  GGS_string var_cas_timeSubGroupKey ;
  var_cas_timeSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (204)) ;
  var_cas_groupList._addAssign_operation (var_cas_timeSubGroupKey, GGS_string (true, "Time"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_timeSubGroupKey) ;
  GGS_string var_cas_tinyXMLSubGroupKey ;
  var_cas_tinyXMLSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (208)) ;
  var_cas_groupList._addAssign_operation (var_cas_tinyXMLSubGroupKey, GGS_string (true, "Tiny XML"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_tinyXMLSubGroupKey) ;
  GGS_string var_cas_unicodeSubGroupKey ;
  var_cas_unicodeSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (212)) ;
  var_cas_groupList._addAssign_operation (var_cas_unicodeSubGroupKey, GGS_string (true, "Unicode"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_unicodeSubGroupKey) ;
  GGS_string var_cas_utilitiesSubGroupKey ;
  var_cas_utilitiesSubGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (216)) ;
  var_cas_groupList._addAssign_operation (var_cas_utilitiesSubGroupKey, GGS_string (true, "Utilities"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_libpmGroupChildrenList._addAssign_operation (var_cas_utilitiesSubGroupKey) ;
  GGS_string var_cas_libpmGroupKey ;
  var_cas_libpmGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (220)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (220)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (220)) ;
  var_cas_groupList._addAssign_operation (var_cas_libpmGroupKey, GGS_string (true, "LIBPM"), var_cas_libpmGroupChildrenList) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_libpmGroupKey) ;
  GGS_string var_cas_resourcesGroupKey ;
  var_cas_resourcesGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (224)) ;
  var_cas_groupList._addAssign_operation (var_cas_resourcesGroupKey, GGS_string (true, "Resources"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_resourcesGroupKey) ;
  GGS_string var_cas_frameworksGroupKey ;
  var_cas_frameworksGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (228)) ;
  var_cas_groupList._addAssign_operation (var_cas_frameworksGroupKey, GGS_string (true, "Frameworks"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_frameworksGroupKey) ;
  GGS_string var_cas_productsGroupKey ;
  var_cas_productsGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (232)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (232)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (232)) ;
  var_cas_groupList._addAssign_operation (var_cas_productsGroupKey, GGS_string (true, "Products"), GGS_stringlist ::constructor_emptyList ()) ;
  var_cas_mainGroupChildrenList._addAssign_operation (var_cas_productsGroupKey) ;
  GGS_string var_cas_mainGroupKey ;
  var_cas_mainGroupKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (236)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (236)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  var_cas_groupList._addAssign_operation (var_cas_mainGroupKey, GGS_string (true, ""), var_cas_mainGroupChildrenList) ;
  GGS_stringlist  var_cas_projectDefaultSettings ;
  var_cas_projectDefaultSettings = GGS_stringlist ::constructor_emptyList () ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "ALWAYS_SEARCH_USER_PATHS = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "ARCHS = (ppc, i386,);")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_DEBUGGING_SYMBOLS = default;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_GENERATE_DEBUGGING_SYMBOLS = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_PRECOMPILE_PREFIX_HEADER = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_THREADSAFE_STATICS = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_TREAT_NONCONFORMANT_CODE_ERRORS_AS_WARNINGS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_TREAT_WARNINGS_AS_ERRORS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_64_TO_32_BIT_CONVERSION = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_ABOUT_MISSING_NEWLINE = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_ABOUT_RETURN_TYPE = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_CHECK_SWITCH_STATEMENTS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_INHIBIT_ALL_WARNINGS = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_MISSING_PARENTHESES = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_PEDANTIC = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_PROTOTYPE_CONVERSION = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_SHADOW = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_SIGN_COMPARE = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNINITIALIZED_AUTOS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNKNOWN_PRAGMAS = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNUSED_FUNCTION = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNUSED_LABEL = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNUSED_PARAMETER = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNUSED_VALUE = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "GCC_WARN_UNUSED_VARIABLE = YES;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "HEADER_SEARCH_PATHS = (../galgas_sources/GALGAS_OUTPUT, ../hand_coded_sources, ../../libpm,);")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "PREBINDING = NO;")) ;
  var_cas_projectDefaultSettings._addAssign_operation (GGS_string (true, "SDKROOT = /Developer/SDKs/MacOSX10.4u.sdk;")) ;
  GGS_string var_cas_projectDefaultConfigurationKey ;
  var_cas_projectDefaultConfigurationKey = GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (277)) ;
  var_cas_buildConfigurationList._addAssign_operation (var_cas_projectDefaultConfigurationKey, GGS_uint ::constructor_sequenceNumber (_inLexique COMMA_HERE).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (278)), var_cas_projectDefaultSettings) ;
  GGS_Xcode_rootObject  var_cas_p ;
  var_cas_p = GGS_Xcode_rootObject ::constructor_new (_inLexique, var_cas_inProjectName, GGS_string (true, "project").reader_md5 (_inLexique COMMA_SOURCE_FILE_AT_LINE (282)).reader_rightSubString (_inLexique, GGS_uint (true, 24U) COMMA_SOURCE_FILE_AT_LINE (282)), var_cas_groupList, var_cas_mainGroupKey, var_cas_buildConfigurationList, var_cas_targetList, var_cas_projectDefaultConfigurationKey COMMA_HERE) ;
  GGS_string var_cas_fileNewContents ;
  const GGS_Xcode_rootObject  _temp_13769 = var_cas_p ;
  if (_temp_13769._isBuilt ()) {
    _temp_13769 (HERE)->method_build (_inLexique, var_cas_fileNewContents COMMA_SOURCE_FILE_AT_LINE (291)) ;
  }
  const GGS_string _temp_13897 = var_cas_in_pbxproj_filePath.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (294)) ;
  if (_temp_13897._isBuilt ()) {
    _temp_13897 (HERE)->method_makeDirectory (_inLexique COMMA_SOURCE_FILE_AT_LINE (294)) ;
  }
  const GGS_string _temp_13952 = var_cas_fileNewContents ;
  if (_temp_13952._isBuilt ()) {
    _temp_13952 (HERE)->method_writeToFileWhenDifferentContents (_inLexique, var_cas_in_pbxproj_filePath COMMA_SOURCE_FILE_AT_LINE (295)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateXcodeProject\n") ;
  #endif
}

//---------------------------------------------------------------------------*

