//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'templateCodeGeneration.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 10th, 2010, at 10h0'30"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "templateCodeGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateCodeGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@templateInstructionForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration> gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration (typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration
findCategoryMethod__templateInstructionForGeneration__templateCodeGeneration (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration.count ()) {
      result = gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__templateInstructionForGeneration__templateCodeGeneration (superClassPtr) ;
        gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "templateCodeGenerationForListInstruction"    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateCodeGenerationForListInstruction (C_CompilerEx & inLexique,
                                const GGS_templateInstructionListForGeneration   var_cas_inInstructionList,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & var_cas_ioUseColumnMarker
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateCodeGenerationForListInstruction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_templateInstructionListForGeneration::cEnumerator enumerator_2247 (var_cas_inInstructionList, true) ;
    const GGS_templateInstructionListForGeneration::cElement * operand_2247 = NULL ;
    while (((operand_2247 = enumerator_2247.nextObject ()))) {
      macroValidPointer (operand_2247) ;
      { typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration method = findCategoryMethod__templateInstructionForGeneration__templateCodeGeneration (operand_2247->mInstruction.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_2247->mInstruction (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (43)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateCodeGenerationForListInstruction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionStringForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionStringForGeneration__templateCodeGeneration (C_CompilerEx &,
                                const cPtr_templateInstructionStringForGeneration * operand_2606,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & /* var_cas_ioUnusedVariableCppNameSet */,
                                GGS_bool & /* var_cas_ioUseColumnMarker */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2606 != NULL) {
    var_cas_ioGeneratedCode.appendCString ("result << ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_2606->mTemplateString.reader_utf8Representation ()) ;
    var_cas_ioGeneratedCode.appendCString (" ;\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionExpressionForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionExpressionForGeneration__templateCodeGeneration (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionExpressionForGeneration * operand_3022,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & /* var_cas_ioUseColumnMarker */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3022 != NULL) {
    GGS_string var_cas_cppName ;
    { typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_3022->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3022->mExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (73)) ;
      }
    }
    var_cas_ioGeneratedCode.appendCString ("result << ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_cppName) ;
    var_cas_ioGeneratedCode.appendCString (".stringValue () ;\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateBlockInstructionForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateBlockInstructionForGeneration__templateCodeGeneration (C_CompilerEx & inLexique,
                                const cPtr_templateBlockInstructionForGeneration * operand_3561,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3561 != NULL) {
    GGS_string var_cas_indendationVarCppName ;
    { typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_3561->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_3561->mExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_indendationVarCppName COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }
    }
    var_cas_ioGeneratedCode.appendCString ("if (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_indendationVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".isValid ()) {\n") ;
    var_cas_ioGeneratedCode.appendCString ("  result.incIndentation ((PMSInt32) ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_indendationVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".uintValue ()) ;\n") ;
    var_cas_ioGeneratedCode.appendCString ("}\n") ;
    ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_3561->mBlockInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (91)) ;
    var_cas_ioGeneratedCode.appendCString ("if (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_indendationVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".isValid ()) {\n") ;
    var_cas_ioGeneratedCode.appendCString ("  result.incIndentation (- ((PMSInt32) ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_indendationVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".uintValue ())) ;\n") ;
    var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGetColumnLocationForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGetColumnLocationForGeneration__templateCodeGeneration (C_CompilerEx &,
                                const cPtr_templateInstructionGetColumnLocationForGeneration * operand_4677,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & /* var_cas_ioUnusedVariableCppNameSet */,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4677 != NULL) {
    var_cas_ioUseColumnMarker = GGS_bool (true) ;
    var_cas_ioGeneratedCode.appendCString ("columnMarker = result.currentColumn () ;\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionGotoColumnLocationForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionGotoColumnLocationForGeneration__templateCodeGeneration (C_CompilerEx &,
                                const cPtr_templateInstructionGotoColumnLocationForGeneration * operand_5108,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & /* var_cas_ioTemporaryVariableIndex */,
                                GGS_stringset  & /* var_cas_ioUnusedVariableCppNameSet */,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5108 != NULL) {
    var_cas_ioUseColumnMarker = GGS_bool (true) ;
    var_cas_ioGeneratedCode.appendCString ("result.appendSpacesUntilColumn (columnMarker) ;\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionForeachForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionForeachForGeneration__templateCodeGeneration (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionForeachForGeneration * operand_5535,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5535 != NULL) {
    GGS_string var_cas_foreachVarCppName ;
    { typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_5535->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_5535->mExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_foreachVarCppName COMMA_SOURCE_FILE_AT_LINE (137)) ;
      }
    }
    const GGS_bool cond_5958 = (operand_5535->mIndexCppName.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_5958.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.appendCString ("GALGAS_uint ") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mIndexCppName) ;
      var_cas_ioGeneratedCode.appendCString (" (0) ;\n") ;
    }
    var_cas_ioGeneratedCode.appendCString ("if (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_foreachVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".isValid ()) {\n") ;
    var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (144)) ;
    var_cas_ioGeneratedCode.appendCString ("cEnumerator_") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (145)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (145))) ;
    var_cas_ioGeneratedCode.appendCString (" ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
    var_cas_ioGeneratedCode.appendCString (" (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_foreachVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (", ") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mIsAscending.reader_cString (inLexique COMMA_SOURCE_FILE_AT_LINE (146))) ;
    var_cas_ioGeneratedCode.appendCString (") ;\n") ;
    const GGS_bool cond_6510 = (operand_5535->mBeforeInstructionList.reader_length ().add_operation (inLexique, operand_5535->mAfterInstructionList.reader_length () COMMA_SOURCE_FILE_AT_LINE (148))).operator_strictSup (GGS_uint (0U)) ;
    if (cond_6510.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.appendCString ("const bool nonEmpty_") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
      var_cas_ioGeneratedCode.appendCString (" = ") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
      var_cas_ioGeneratedCode.appendCString (".hasCurrentObject () ;\n") ;
    }
    const GGS_bool cond_6957 = (operand_5535->mBeforeInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_6957.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.appendCString ("if (nonEmpty_") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
      var_cas_ioGeneratedCode.appendCString (") {\n") ;
      var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (153)) ;
      ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_5535->mBeforeInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (154)) ;
      var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (161)) ;
      var_cas_ioGeneratedCode.appendCString ("}\n") ;
    }
    var_cas_ioGeneratedCode.appendCString ("while (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
    var_cas_ioGeneratedCode.appendCString (".hasCurrentObject ()) {\n") ;
    var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (165)) ;
    ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_5535->mDoInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (167)) ;
    const GGS_bool cond_7742 = (operand_5535->mBetweenInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_7742.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.appendCString ("if (") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
      var_cas_ioGeneratedCode.appendCString (".hasNextObject ()) {\n") ;
      var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (177)) ;
      ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_5535->mBetweenInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (178)) ;
      var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (185)) ;
      var_cas_ioGeneratedCode.appendCString ("}\n") ;
    }
    const GGS_bool cond_7862 = (operand_5535->mIndexCppName.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_7862.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mIndexCppName) ;
      var_cas_ioGeneratedCode.appendCString (".increment () ;\n") ;
    }
    var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
    var_cas_ioGeneratedCode.appendCString (".gotoNextObject () ;\n") ;
    var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (194)) ;
    var_cas_ioGeneratedCode.appendCString ("}\n") ;
    const GGS_bool cond_8463 = (operand_5535->mAfterInstructionList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_8463.isBuiltAndTrue ()) {
      var_cas_ioGeneratedCode.appendCString ("if (nonEmpty_") ;
      var_cas_ioGeneratedCode.dotAssign_operation (operand_5535->mEnumeratorCppName) ;
      var_cas_ioGeneratedCode.appendCString (") {\n") ;
      var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (199)) ;
      ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_5535->mAfterInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (200)) ;
      var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (207)) ;
      var_cas_ioGeneratedCode.appendCString ("}\n") ;
    }
    var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (211)) ;
    var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionIfForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionIfForGeneration__templateCodeGeneration (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionIfForGeneration * operand_8715,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8715 != NULL) {
    {
      GGS_templateInstructionIfBranchListForGeneration::cEnumerator enumerator_8893 (operand_8715->mTemplateInstructionIfBranchList, true) ;
      const GGS_templateInstructionIfBranchListForGeneration::cElement * operand_8893 = NULL ;
      while (((operand_8893 = enumerator_8893.nextObject ()))) {
        macroValidPointer (operand_8893) ;
        GGS_string var_cas_ifVarCppName ;
        { typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_8893->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_8893->mExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_ifVarCppName COMMA_SOURCE_FILE_AT_LINE (226)) ;
          }
        }
        var_cas_ioGeneratedCode.appendCString ("if (") ;
        var_cas_ioGeneratedCode.dotAssign_operation (var_cas_ifVarCppName) ;
        var_cas_ioGeneratedCode.appendCString (".isValidAndTrue ()) {\n") ;
        var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (228)) ;
        ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_8893->mInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (229)) ;
        var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (236)) ;
        var_cas_ioGeneratedCode.appendCString ("}else{\n") ;
        var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (238)) ;
      }
    }
    ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_8715->mElseInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (241)) ;
    {
      GGS_templateInstructionIfBranchListForGeneration::cEnumerator enumerator_9772 (operand_8715->mTemplateInstructionIfBranchList, true) ;
      const GGS_templateInstructionIfBranchListForGeneration::cElement * operand_9772 = NULL ;
      while (((operand_9772 = enumerator_9772.nextObject ()))) {
        macroValidPointer (operand_9772) ;
        var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (249)) ;
        var_cas_ioGeneratedCode.appendCString ("}\n") ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@templateInstructionSwitchForGeneration.templateCodeGeneration'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__templateInstructionSwitchForGeneration__templateCodeGeneration (C_CompilerEx & inLexique,
                                const cPtr_templateInstructionSwitchForGeneration * operand_10038,
                                GGS_string & var_cas_ioGeneratedCode,
                                GGS_uint  & var_cas_ioTemporaryVariableIndex,
                                GGS_stringset  & var_cas_ioUnusedVariableCppNameSet,
                                GGS_bool & var_cas_ioUseColumnMarker
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10038 != NULL) {
    GGS_string var_cas_switchVarCppName ;
    { typeCategoryMethod__semanticExpressionForGeneration__generateExpression method = findCategoryMethod__semanticExpressionForGeneration__generateExpression (operand_10038->mSwitchExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_10038->mSwitchExpression (HERE), var_cas_ioGeneratedCode, var_cas_ioTemporaryVariableIndex, var_cas_ioUnusedVariableCppNameSet, var_cas_switchVarCppName COMMA_SOURCE_FILE_AT_LINE (264)) ;
      }
    }
    var_cas_ioGeneratedCode.appendCString ("switch (") ;
    var_cas_ioGeneratedCode.dotAssign_operation (var_cas_switchVarCppName) ;
    var_cas_ioGeneratedCode.appendCString (".enumValue ()) {\n") ;
    var_cas_ioGeneratedCode.appendCString ("case GALGAS_") ;
    var_cas_ioGeneratedCode.dotAssign_operation (operand_10038->mSwitchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (267))) ;
    var_cas_ioGeneratedCode.appendCString ("::kNotBuilt :\n") ;
    var_cas_ioGeneratedCode.appendCString ("break ;\n") ;
    {
      GGS_templateInstructionSwitchBranchListForGeneration::cEnumerator enumerator_10634 (operand_10038->mTemplateInstructionSwitchBranchList, true) ;
      const GGS_templateInstructionSwitchBranchListForGeneration::cElement * operand_10634 = NULL ;
      while (((operand_10634 = enumerator_10634.nextObject ()))) {
        macroValidPointer (operand_10634) ;
        {
          GGS_lstringlist::cEnumerator enumerator_10663 (operand_10634->mConstantList, true) ;
          const GGS_lstringlist::cElement * operand_10663 = NULL ;
          while (((operand_10663 = enumerator_10663.nextObject ()))) {
            macroValidPointer (operand_10663) ;
            var_cas_ioGeneratedCode.appendCString ("case GALGAS_") ;
            var_cas_ioGeneratedCode.dotAssign_operation (operand_10038->mSwitchExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (272)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
            var_cas_ioGeneratedCode.appendCString ("::kEnum_") ;
            var_cas_ioGeneratedCode.dotAssign_operation (operand_10663->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272)).reader_identifierRepresentation ()) ;
            var_cas_ioGeneratedCode.appendCString (" : {\n") ;
          }
        }
        var_cas_ioGeneratedCode.modifier_incIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (274)) ;
        ::routine_templateCodeGenerationForListInstruction (inLexique,  operand_10634->mInstructionList,  var_cas_ioGeneratedCode,  var_cas_ioTemporaryVariableIndex,  var_cas_ioUnusedVariableCppNameSet,  var_cas_ioUseColumnMarker COMMA_SOURCE_FILE_AT_LINE (275)) ;
        var_cas_ioGeneratedCode.modifier_decIndentation (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (282)) ;
        var_cas_ioGeneratedCode.appendCString ("} break ;\n") ;
      }
    }
    var_cas_ioGeneratedCode.appendCString ("}\n") ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_templateCodeGeneration (void) {
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionStringForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionStringForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionExpressionForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionExpressionForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateBlockInstructionForGeneration__templateCodeGeneration, gClassInfoFor__templateBlockInstructionForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionGetColumnLocationForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionGetColumnLocationForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionGotoColumnLocationForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionGotoColumnLocationForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionForeachForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionForeachForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionIfForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionIfForGeneration.slotID ()) ;
  enterCategoryMethod__templateInstructionForGeneration__templateCodeGeneration ((typeCategoryMethod__templateInstructionForGeneration__templateCodeGeneration) category_method__templateInstructionSwitchForGeneration__templateCodeGeneration, gClassInfoFor__templateInstructionSwitchForGeneration.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_templateCodeGeneration (void) {
  gDispatchTableForMethod__templateInstructionForGeneration__templateCodeGeneration.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_templateCodeGeneration (prologueRoutineFor_templateCodeGeneration, epilogueRoutineFor_templateCodeGeneration) ;

//---------------------------------------------------------------------------*

