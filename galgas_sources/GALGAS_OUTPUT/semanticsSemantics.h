//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semanticsSemantics.h'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      april 24th, 2009, at 20h28'12"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef semanticsSemantics_DEFINED
#define semanticsSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "parameterArgumentMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableStateAutomaton ;
class GGS_variableMap ;
class GGS_ACGalgasType ;
class cPtr_ACGalgasType ;
class GGS_typeMap ;
class GGS_typeMapIndex ;
class GGS_sortedTypeList ;
class GGS_typeList ;
class GGS_signature ;
class GGS_attributeList ;
class GGS_locationGalgasType ;
class cPtr_locationGalgasType ;
class GGS_stringGalgasType ;
class cPtr_stringGalgasType ;
class GGS_charGalgasType ;
class cPtr_charGalgasType ;
class GGS_boolGalgasType ;
class cPtr_boolGalgasType ;
class GGS_uintGalgasType ;
class cPtr_uintGalgasType ;
class GGS_sintGalgasType ;
class cPtr_sintGalgasType ;
class GGS_uint64GalgasType ;
class cPtr_uint64GalgasType ;
class GGS_sint64GalgasType ;
class cPtr_sint64GalgasType ;
class GGS_doubleGalgasType ;
class cPtr_doubleGalgasType ;
class GGS_lstringGalgasType ;
class cPtr_lstringGalgasType ;
class GGS_lcharGalgasType ;
class cPtr_lcharGalgasType ;
class GGS_lboolGalgasType ;
class cPtr_lboolGalgasType ;
class GGS_luintGalgasType ;
class cPtr_luintGalgasType ;
class GGS_lsintGalgasType ;
class cPtr_lsintGalgasType ;
class GGS_luint64GalgasType ;
class cPtr_luint64GalgasType ;
class GGS_lsint64GalgasType ;
class cPtr_lsint64GalgasType ;
class GGS_ldoubleGalgasType ;
class cPtr_ldoubleGalgasType ;
class GGS_stringsetGalgasType ;
class cPtr_stringsetGalgasType ;
class GGS_binarysetGalgasType ;
class cPtr_binarysetGalgasType ;
class GGS_classMethodList ;
class GGS_classGalgasType ;
class cPtr_classGalgasType ;
class GGS_listGalgasType ;
class cPtr_listGalgasType ;
class GGS_listmapGalgasType ;
class cPtr_listmapGalgasType ;
class GGS_structGalgasType ;
class cPtr_structGalgasType ;
class GGS_sortDescriptorList ;
class GGS_sortedlistGalgasType ;
class cPtr_sortedlistGalgasType ;
class GGS_mapType ;
class cPtr_mapType ;
class GGS_mapindexType ;
class cPtr_mapindexType ;
class GGS_enumConstructorMap ;
class GGS_enumType ;
class cPtr_enumType ;
class GGS_routineMap ;
class GGS_functionMap ;
class GGS_classIndexList ;
class GGS_descendantClassListMap ;
class GGS_semanticContext ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for 'variableStateAutomaton' Enumeration               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableStateAutomaton {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterUsed, enum_inputFormalParameterDefined, enum_inputFormalParameterDropped, enum_inputFormalParameterUsed, enum_localConstantDeclared, enum_localConstantDefined, enum_localContantUsed, enum_localVariableDeclared, enum_localVariableDropped, enum_localVariableUsed} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_variableStateAutomaton (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_variableStateAutomaton (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_variableStateAutomaton  constructor_constantInputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_constantInputFormalParameterDefined) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_inputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_inputFormalParameterDefined) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_localConstantDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localConstantDeclared) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_localVariableDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localVariableDeclared) ;
  }

//--- Readers

//--- Modifiers
  public : void modifier_writeAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;

//--- Methods

//--- Operators
  public : GGS_variableStateAutomaton operator_endOfRepeatedBranch (C_Compiler & _inLexique,
           const GGS_variableStateAutomaton & inOperand,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_variableStateAutomaton inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@variableMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_variableMap ;

class GGS_variableMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_variableMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_variableMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_variableMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_variableMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_variableMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_variableMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

//--- 'insertListOfEntitiesLocalVariable' Insert Modifier
  public : void modifier_insertListOfEntitiesLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertSingleEntityLocalVariable' Insert Modifier
  public : void modifier_insertSingleEntityLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertEntityAttributeLocalVariable' Insert Modifier
  public : void modifier_insertEntityAttributeLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertInArgument' Insert Modifier
  public : void modifier_insertInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedInArgument' Insert Modifier
  public : void modifier_insertUnusedInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertConstInArgument' Insert Modifier
  public : void modifier_insertConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedConstInArgument' Insert Modifier
  public : void modifier_insertUsedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedConstInArgumentNoShadow' Insert Modifier
  public : void modifier_insertUsedConstInArgumentNoShadow (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedConstInArgument' Insert Modifier
  public : void modifier_insertUnusedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertLocalVariable' Insert Modifier
  public : void modifier_insertLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertOutArgument' Insert Modifier
  public : void modifier_insertOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertOutProperty' Insert Modifier
  public : void modifier_insertOutProperty (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertInOutArgument' Insert Modifier
  public : void modifier_insertInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedInOutArgument' Insert Modifier
  public : void modifier_insertUsedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedInOutArgument' Insert Modifier
  public : void modifier_insertUnusedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchForReadOnlyAccess' Search Method
  public : void method_searchForReadOnlyAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForDestructiveReadAccess' Search Method
  public : void method_searchForDestructiveReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForReadWriteAccess' Search Method
  public : void method_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForWriteAccess' Search Method
  public : void method_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_variableMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_variableMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_variableMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_variableMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_variableMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ACGalgasType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ACGalgasType : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_ACGalgasType (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_ACGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ACGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ACGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ACGalgasType * getPtr (void) const {
    return (cPtr_ACGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ACGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ACGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_ACGalgasType *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__ACGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                              Map '@typeMap'                               *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeMap ;

class GGS_typeMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_typeMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_typeMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_typeMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMTypeForKey (C_Compiler & inLexique,
                        const GGS_ACGalgasType & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_ACGalgasType &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_ACGalgasType   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_ACGalgasType & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_ACGalgasType & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_typeMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_typeMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_typeMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_ACGalgasType   & _mType (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map index '@typeMapIndex'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeMapIndex : public AC_galgas_mapindex {
//--- 'null' constructor
  public : static GGS_typeMapIndex
  constructor_null (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS) ;

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_typeMapIndex & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_typeMapIndex & inOperand) const ;

//--- 'description' reader declaration
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Type Method 'makeRegularIndex'
  public : static void
  class_method_makeRegularIndex (C_Compiler & inLexique,
                                 const GGS_lstring & inKey,
                                 GGS_typeMap & ioMap,
                                 GGS_typeMapIndex & outIndex
                                 COMMA_LOCATION_ARGS) ;

//--- Method Access
  public : inline const GGS_typeMapIndex *
  operator () (UNUSED_LOCATION_ARGS) const {
    return this ;
  }

//--- Search method(s)
  public : void
  method_searchKey (C_Compiler & inLexique,
                     GGS_lstring & outKey,
                     GGS_ACGalgasType & outAttribute1
                     COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      sorted list '@sortedTypeList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sortedTypeList ;

class GGS_sortedTypeList : public AC_galgas_sortedlist {
  public : typedef elementOf_GGS_sortedTypeList cElement ;
//--- Default Constructor
  public : GGS_sortedTypeList (void) ;
//--- Copy Constructor
  public : GGS_sortedTypeList (const GGS_sortedTypeList & inSource) ;
//--- Comparison Operators
  public : GGS_bool _operator_isEqual (const GGS_sortedTypeList & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_sortedTypeList & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_sortedTypeList constructor_emptySortedList (void) ;
  public : static GGS_sortedTypeList constructor_sortedListWithValue (const GGS_ACGalgasType & argument_0,
                           const GGS_string& argument_1) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_sortedTypeList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & _inLexique,
                              GGS_ACGalgasType & _out_0,
                              GGS_string& _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & _inLexique,
                             GGS_ACGalgasType & _out_0,
                             GGS_string& _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & _inLexique,
                                GGS_ACGalgasType & _out_0,
                                GGS_string& _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & _inLexique,
                                 GGS_ACGalgasType & _out_0,
                                 GGS_string& _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_sortedTypeList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_ACGalgasType & argument_0,
                                const GGS_string& argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_sortedTypeList _operator_concat (const GGS_sortedTypeList & inOperand) const ;

//--- Internal Methods
  protected : void _internalAppendValues (const GGS_ACGalgasType & argument_0,
                                const GGS_string& argument_1) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_sortedTypeList & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_ACGalgasType   & _mType (LOCATION_ARGS) const ;
    public : /* const */ GGS_string  & _mSortString (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                             list '@typeList'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeList ;

class GGS_typeList : public AC_galgas_list {
  public : typedef elementOf_GGS_typeList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_typeList constructor_emptyList (void) ;
  public : static GGS_typeList constructor_listWithValue (const GGS_ACGalgasType & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_typeList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_typeList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_typeList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_typeList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_ACGalgasType & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_ACGalgasType & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_ACGalgasType & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_ACGalgasType & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_typeList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_ACGalgasType & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_typeList _operator_concat (const GGS_typeList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_ACGalgasType & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_ACGalgasType & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_ACGalgasType & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_ACGalgasType 
  reader_mTypeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMTypeAtIndex (C_Compiler & inLexique,
                              const GGS_ACGalgasType  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_typeList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_ACGalgasType   & _mType (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            list '@signature'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_signature ;

class GGS_signature : public AC_galgas_list {
  public : typedef elementOf_GGS_signature cElement ;

//--- Constructor 'emptyList'
  public : static GGS_signature constructor_emptyList (void) ;
  public : static GGS_signature constructor_listWithValue (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_formalArgumentPassingMode& argument_2) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_signature & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_signature
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_signature
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_signature * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeMapIndex & _out_0,
                              GGS_lstring & _out_1,
                              GGS_formalArgumentPassingMode& _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeMapIndex & _out_0,
                             GGS_lstring & _out_1,
                             GGS_formalArgumentPassingMode& _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeMapIndex & _out_0,
                                GGS_lstring & _out_1,
                                GGS_formalArgumentPassingMode& _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeMapIndex & _out_0,
                                 GGS_lstring & _out_1,
                                 GGS_formalArgumentPassingMode& _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_signature inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_formalArgumentPassingMode& argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_signature _operator_concat (const GGS_signature & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_formalArgumentPassingMode& argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_formalArgumentPassingMode& argument_2
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_formalArgumentPassingMode& argument_2
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_typeMapIndex 
  reader_mAttributeTypeIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mFormalArgumentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_formalArgumentPassingMode
  reader_mFormalArgumentPassingModeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAttributeTypeIndexAtIndex (C_Compiler & inLexique,
                              const GGS_typeMapIndex  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMFormalArgumentPassingModeAtIndex (C_Compiler & inLexique,
                              const GGS_formalArgumentPassingMode & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_signature & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_typeMapIndex   & _mAttributeTypeIndex (LOCATION_ARGS) const ;
  public : /* const */ GGS_lstring   & _mFormalArgumentName (LOCATION_ARGS) const ;
  public : /* const */ GGS_formalArgumentPassingMode  & _mFormalArgumentPassingMode (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@attributeList'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_attributeList ;

class GGS_attributeList : public AC_galgas_list {
  public : typedef elementOf_GGS_attributeList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_attributeList constructor_emptyList (void) ;
  public : static GGS_attributeList constructor_listWithValue (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_attributeList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_attributeList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_attributeList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_attributeList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeMapIndex & _out_0,
                              GGS_lstring & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeMapIndex & _out_0,
                             GGS_lstring & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeMapIndex & _out_0,
                                GGS_lstring & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeMapIndex & _out_0,
                                 GGS_lstring & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_attributeList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_attributeList _operator_concat (const GGS_attributeList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeMapIndex & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_typeMapIndex 
  reader_mAttributeTypeIndexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring 
  reader_mAttributeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAttributeTypeIndexAtIndex (C_Compiler & inLexique,
                              const GGS_typeMapIndex  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMAttributeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_attributeList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_typeMapIndex   & _mAttributeTypeIndex (LOCATION_ARGS) const ;
  public : /* const */ GGS_lstring   & _mAttributeName (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_locationGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_locationGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_locationGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_locationGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_locationGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_locationGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_locationGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_locationGalgasType * getPtr (void) const {
    return (cPtr_locationGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_locationGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_locationGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_locationGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__locationGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_stringGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_stringGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_stringGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_stringGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_stringGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_stringGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_stringGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_stringGalgasType * getPtr (void) const {
    return (cPtr_stringGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_stringGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_stringGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_stringGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__stringGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_charGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_charGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_charGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_charGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_charGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_charGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_charGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_charGalgasType * getPtr (void) const {
    return (cPtr_charGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_charGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_charGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_charGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__charGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_boolGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_boolGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_boolGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_boolGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_boolGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_boolGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_boolGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_boolGalgasType * getPtr (void) const {
    return (cPtr_boolGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_boolGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_boolGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_boolGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__boolGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_uintGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_uintGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_uintGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_uintGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_uintGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_uintGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_uintGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_uintGalgasType * getPtr (void) const {
    return (cPtr_uintGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_uintGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_uintGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_uintGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__uintGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_sintGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sintGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_sintGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_sintGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sintGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sintGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sintGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sintGalgasType * getPtr (void) const {
    return (cPtr_sintGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sintGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sintGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_sintGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sintGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_uint64GalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_uint64GalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_uint64GalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_uint64GalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_uint64GalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_uint64GalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_uint64GalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_uint64GalgasType * getPtr (void) const {
    return (cPtr_uint64GalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_uint64GalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_uint64GalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_uint64GalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__uint64GalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_sint64GalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sint64GalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_sint64GalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_sint64GalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sint64GalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sint64GalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sint64GalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sint64GalgasType * getPtr (void) const {
    return (cPtr_sint64GalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sint64GalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sint64GalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_sint64GalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sint64GalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_doubleGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_doubleGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_doubleGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_doubleGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_doubleGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_doubleGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_doubleGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_doubleGalgasType * getPtr (void) const {
    return (cPtr_doubleGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_doubleGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_doubleGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_doubleGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__doubleGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_lstringGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lstringGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_lstringGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_lstringGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lstringGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_lstringGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lstringGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lstringGalgasType * getPtr (void) const {
    return (cPtr_lstringGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lstringGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lstringGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_lstringGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lstringGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_lcharGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lcharGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_lcharGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_lcharGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lcharGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_lcharGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lcharGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lcharGalgasType * getPtr (void) const {
    return (cPtr_lcharGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lcharGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lcharGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_lcharGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lcharGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_lboolGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lboolGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_lboolGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_lboolGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lboolGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_lboolGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lboolGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lboolGalgasType * getPtr (void) const {
    return (cPtr_lboolGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lboolGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lboolGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_lboolGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lboolGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_luintGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_luintGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_luintGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_luintGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_luintGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_luintGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_luintGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_luintGalgasType * getPtr (void) const {
    return (cPtr_luintGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_luintGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_luintGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_luintGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__luintGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_lsintGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lsintGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_lsintGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_lsintGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lsintGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_lsintGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lsintGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lsintGalgasType * getPtr (void) const {
    return (cPtr_lsintGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lsintGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lsintGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_lsintGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lsintGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_luint64GalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_luint64GalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_luint64GalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_luint64GalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_luint64GalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_luint64GalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_luint64GalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_luint64GalgasType * getPtr (void) const {
    return (cPtr_luint64GalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_luint64GalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_luint64GalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_luint64GalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__luint64GalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_lsint64GalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lsint64GalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_lsint64GalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_lsint64GalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_lsint64GalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_lsint64GalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_lsint64GalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_lsint64GalgasType * getPtr (void) const {
    return (cPtr_lsint64GalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_lsint64GalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_lsint64GalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_lsint64GalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__lsint64GalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_ldoubleGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ldoubleGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_ldoubleGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_ldoubleGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ldoubleGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ldoubleGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ldoubleGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ldoubleGalgasType * getPtr (void) const {
    return (cPtr_ldoubleGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ldoubleGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ldoubleGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_ldoubleGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ldoubleGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_stringsetGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_stringsetGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_stringsetGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_stringsetGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_stringsetGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_stringsetGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_stringsetGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_stringsetGalgasType * getPtr (void) const {
    return (cPtr_stringsetGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_stringsetGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_stringsetGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_stringsetGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__stringsetGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_binarysetGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_binarysetGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_binarysetGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_binarysetGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_binarysetGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_binarysetGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_binarysetGalgasType constructor_new (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_binarysetGalgasType * getPtr (void) const {
    return (cPtr_binarysetGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_binarysetGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_binarysetGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_binarysetGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__binarysetGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@classMethodList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_classMethodList ;

class GGS_classMethodList : public AC_galgas_list {
  public : typedef elementOf_GGS_classMethodList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_classMethodList constructor_emptyList (void) ;
  public : static GGS_classMethodList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_signature & argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_classMethodList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_classMethodList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_classMethodList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_classMethodList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_signature & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_signature & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_signature & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_signature & _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_classMethodList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_signature & argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_classMethodList _operator_concat (const GGS_classMethodList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_signature & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_signature & argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_signature & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mMethodNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_signature 
  reader_mMethodSignatureAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMMethodNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMMethodSignatureAtIndex (C_Compiler & inLexique,
                              const GGS_signature  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_classMethodList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mMethodName (LOCATION_ARGS) const ;
  public : /* const */ GGS_signature   & _mMethodSignature (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_classGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_classGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_classGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_classGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_classGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_classGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_classGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_bool& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_typeMapIndex & argument_2,
                                const GGS_attributeList & argument_3,
                                const GGS_classMethodList & argument_4
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_classGalgasType * getPtr (void) const {
    return (cPtr_classGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_bool reader_mIsAbstract (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mClassName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeMapIndex  reader_mSuperClassIndex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_attributeList  reader_mAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_classMethodList  reader_mMethodList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_classGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_classGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_classGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__classGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_listGalgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_listGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_listGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_listGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_listGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_listGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_listGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_attributeList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_listGalgasType * getPtr (void) const {
    return (cPtr_listGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mListTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_attributeList  reader_mAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_listGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_listGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_listGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__listGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_listmapGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_listmapGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_listmapGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_listmapGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_listmapGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_listmapGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_listmapGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeMapIndex & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_listmapGalgasType * getPtr (void) const {
    return (cPtr_listmapGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mListmapTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeMapIndex  reader_mAssociatedListTypeIndex (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_listmapGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_listmapGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_listmapGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__listmapGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_structGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_structGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_structGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_structGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_structGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_structGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_structGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_attributeList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_structGalgasType * getPtr (void) const {
    return (cPtr_structGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mStructTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_attributeList  reader_mAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_structGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_structGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_structGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__structGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        list '@sortDescriptorList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sortDescriptorList ;

class GGS_sortDescriptorList : public AC_galgas_list {
  public : typedef elementOf_GGS_sortDescriptorList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_sortDescriptorList constructor_emptyList (void) ;
  public : static GGS_sortDescriptorList constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_sortDescriptorList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_sortDescriptorList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_sortDescriptorList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_sortDescriptorList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_lstring & _out_0,
                              GGS_bool& _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_lstring & _out_0,
                             GGS_bool& _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_lstring & _out_0,
                                GGS_bool& _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_lstring & _out_0,
                                 GGS_bool& _out_1
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_sortDescriptorList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1) ;
//--- Handling '.' GALGAS operator
  public : GGS_sortDescriptorList _operator_concat (const GGS_sortDescriptorList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_bool& argument_1
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_lstring 
  reader_mAttributeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;
  public : GGS_bool
  reader_mAscendingAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMAttributeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;
  public : void
  modifier_setMAscendingAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_sortDescriptorList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_lstring   & _mAttributeName (LOCATION_ARGS) const ;
  public : /* const */ GGS_bool  & _mAscending (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sortedlistGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sortedlistGalgasType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_sortedlistGalgasType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_sortedlistGalgasType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sortedlistGalgasType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sortedlistGalgasType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sortedlistGalgasType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_attributeList & argument_1,
                                const GGS_sortDescriptorList & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sortedlistGalgasType * getPtr (void) const {
    return (cPtr_sortedlistGalgasType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mListTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_attributeList  reader_mAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_sortDescriptorList  reader_mSortDescriptorList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sortedlistGalgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sortedlistGalgasType * operator () (LOCATION_ARGS) const {
      return (cPtr_sortedlistGalgasType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sortedlistGalgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_mapType'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_mapType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_mapType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_mapType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_mapType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_mapType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_mapType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_attributeList & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_mapType * getPtr (void) const {
    return (cPtr_mapType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mMapTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_attributeList  reader_mAttributeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_mapType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_mapType * operator () (LOCATION_ARGS) const {
      return (cPtr_mapType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__mapType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_mapindexType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_mapindexType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_mapindexType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_mapindexType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_mapindexType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_mapindexType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_mapindexType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeMapIndex & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_mapindexType * getPtr (void) const {
    return (cPtr_mapindexType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mMapIndexTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_typeMapIndex  reader_mIndexOfMapType (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mSearchMethodName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_mapindexType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_mapindexType * operator () (LOCATION_ARGS) const {
      return (cPtr_mapindexType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__mapindexType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Map '@enumConstructorMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_enumConstructorMap ;

class GGS_enumConstructorMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_enumConstructorMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_enumConstructorMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_enumConstructorMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_enumConstructorMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_enumConstructorMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_enumConstructorMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_enumConstructorMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_enumConstructorMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_enumConstructorMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_enumConstructorMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_enumConstructorMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_enumType'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_enumType : public GGS_ACGalgasType {
//--- Default constructor
  public : inline GGS_enumType (void) :
  GGS_ACGalgasType () {}

//--- Pointer assignment constructor
  public : GGS_enumType (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_enumType (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_enumType
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_enumType constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_enumConstructorMap & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_enumType * getPtr (void) const {
    return (cPtr_enumType *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mEnumTypeName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_enumConstructorMap  reader_mEnumConstructorMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_enumType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_enumType * operator () (LOCATION_ARGS) const {
      return (cPtr_enumType *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__enumType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@routineMap'                              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap ;

class GGS_routineMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_routineMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_routineMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_routineMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_routineMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_routineMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMRoutineSignatureForKey (C_Compiler & inLexique,
                        const GGS_signature & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_signature &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_signature   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_signature & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_signature & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_routineMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_routineMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_routineMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_routineMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_routineMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_signature   & _mRoutineSignature (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@functionMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_functionMap ;

class GGS_functionMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_functionMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_functionMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_functionMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_functionMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_functionMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_functionMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setMFunctionSignatureForKey (C_Compiler & inLexique,
                        const GGS_signature & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;
  public : void modifier_setMResultTypeIndexForKey (C_Compiler & inLexique,
                        const GGS_typeMapIndex & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_signature &  inParameter0,
                                const GGS_typeMapIndex &  inParameter1 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_signature   & outParameter0,
                                GGS_typeMapIndex   & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_signature & inParameter0,
                                   const GGS_typeMapIndex & inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_signature & outParameter0,
                                   GGS_typeMapIndex & outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_functionMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_functionMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_functionMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_functionMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_functionMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_signature   & _mFunctionSignature (LOCATION_ARGS) const ;
    public : /* const */ GGS_typeMapIndex   & _mResultTypeIndex (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          list '@classIndexList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_classIndexList ;

class GGS_classIndexList : public AC_galgas_list {
  public : typedef elementOf_GGS_classIndexList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_classIndexList constructor_emptyList (void) ;
  public : static GGS_classIndexList constructor_listWithValue (const GGS_typeMapIndex & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_classIndexList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_classIndexList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_classIndexList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_classIndexList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_typeMapIndex & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_typeMapIndex & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_typeMapIndex & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_typeMapIndex & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_classIndexList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeMapIndex & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_classIndexList _operator_concat (const GGS_classIndexList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_typeMapIndex & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_typeMapIndex & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_typeMapIndex & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_typeMapIndex 
  reader_mClassMapindexAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setMClassMapindexAtIndex (C_Compiler & inLexique,
                              const GGS_typeMapIndex  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_classIndexList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_typeMapIndex   & _mClassMapindex (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Map list '@descendantClassListMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_descendantClassListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_classIndexList mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    _description (C_Compiler & _inLexique,
                  const sint32 inIndentation
                  COMMA_LOCATION_ARGS) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_descendantClassListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_descendantClassListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_descendantClassListMap _operator_concat (const GGS_descendantClassListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  _addAssign_operation (const GGS_string & inKey,
                        const GGS_typeMapIndex & inAttribute0) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_classIndexList
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_descendantClassListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_classIndexList & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@variableMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_variableMap {

} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_variableMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_variableMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_variableMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_variableMap * nextObject (void) const { return (elementOf_GGS_variableMap *) mNextItem ; }
  public : inline elementOf_GGS_variableMap * infObject (void) const { return (elementOf_GGS_variableMap *) mInfPtr ; }
  public : inline elementOf_GGS_variableMap * supObject (void) const { return (elementOf_GGS_variableMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_variableMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_ACGalgasType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ACGalgasType : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_ACGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ACGalgasType (void) {}
  #endif

//--- Attributes
//--- Method 'checkTypeCrossReferences'
  public : virtual void method_checkTypeCrossReferences (C_Compiler &,
                                GGS_uint  
                                COMMA_LOCATION_ARGS) const ;

//--- Method 'generatePredeclarationInHeader'
  public : virtual void method_generatePredeclarationInHeader (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Method 'generateDeclaration_1_inHeader'
  public : virtual void method_generateDeclaration_1_inHeader (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Method 'generateDeclaration_2_inHeader'
  public : virtual void method_generateDeclaration_2_inHeader (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Method 'generateImplementation'
  public : virtual void method_generateImplementation (C_Compiler &,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Element of map '@typeMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeMap {
  public : GGS_ACGalgasType  mType ;

  public : e_typeMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeMap * nextObject (void) const { return (elementOf_GGS_typeMap *) mNextItem ; }
  public : inline elementOf_GGS_typeMap * infObject (void) const { return (elementOf_GGS_typeMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeMap * supObject (void) const { return (elementOf_GGS_typeMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_typeMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of sorted list '@sortedTypeList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sortedTypeList : public AC_galgas_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_ACGalgasType  mType ;
  public : GGS_string mSortString ;
//--- Constructor
  public : elementOf_GGS_sortedTypeList (const GGS_ACGalgasType & ,
                                const GGS_string& ) ;

//--- Access to next
  public : inline elementOf_GGS_sortedTypeList * nextObject (void) const { return (elementOf_GGS_sortedTypeList *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_sortedTypeList * previousObject (void) const { return (elementOf_GGS_sortedTypeList *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual sint32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;
  friend class GGS_sortedTypeList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@typeList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_ACGalgasType  mType ;
//--- Constructor
  public : elementOf_GGS_typeList (const GGS_ACGalgasType & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_typeList * nextObject (void) const { return (elementOf_GGS_typeList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_typeList * previousObject (void) const { return (elementOf_GGS_typeList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_typeList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@signature'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_signature : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeMapIndex  mAttributeTypeIndex ;
  public : GGS_lstring  mFormalArgumentName ;
  public : GGS_formalArgumentPassingMode mFormalArgumentPassingMode ;
//--- Constructor
  public : elementOf_GGS_signature (const GGS_typeMapIndex & ,
                                const GGS_lstring & ,
                                const GGS_formalArgumentPassingMode& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_signature * nextObject (void) const { return (elementOf_GGS_signature *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_signature * previousObject (void) const { return (elementOf_GGS_signature *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_signature ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@attributeList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_attributeList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeMapIndex  mAttributeTypeIndex ;
  public : GGS_lstring  mAttributeName ;
//--- Constructor
  public : elementOf_GGS_attributeList (const GGS_typeMapIndex & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_attributeList * nextObject (void) const { return (elementOf_GGS_attributeList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_attributeList * previousObject (void) const { return (elementOf_GGS_attributeList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_attributeList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_locationGalgasType'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_locationGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_locationGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_locationGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_stringGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_stringGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_stringGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_stringGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_charGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_charGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_charGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_charGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_boolGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_boolGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_boolGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_boolGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_uintGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_uintGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_uintGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_uintGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_sintGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sintGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_sintGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sintGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_uint64GalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_uint64GalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_uint64GalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_uint64GalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_sint64GalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sint64GalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_sint64GalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sint64GalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_doubleGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_doubleGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_doubleGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_doubleGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_lstringGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lstringGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_lstringGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lstringGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_lcharGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lcharGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_lcharGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lcharGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_lboolGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lboolGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_lboolGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lboolGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_luintGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_luintGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_luintGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_luintGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_lsintGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lsintGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_lsintGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lsintGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_luint64GalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_luint64GalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_luint64GalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_luint64GalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_lsint64GalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_lsint64GalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_lsint64GalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_lsint64GalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_ldoubleGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ldoubleGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_ldoubleGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ldoubleGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_stringsetGalgasType'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_stringsetGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_stringsetGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_stringsetGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_binarysetGalgasType'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_binarysetGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_binarysetGalgasType (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_binarysetGalgasType (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@classMethodList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_classMethodList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mMethodName ;
  public : GGS_signature  mMethodSignature ;
//--- Constructor
  public : elementOf_GGS_classMethodList (const GGS_lstring & ,
                                const GGS_signature & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_classMethodList * nextObject (void) const { return (elementOf_GGS_classMethodList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_classMethodList * previousObject (void) const { return (elementOf_GGS_classMethodList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_classMethodList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_classGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_classGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_classGalgasType (const GGS_bool& ,
                                const GGS_lstring & ,
                                const GGS_typeMapIndex & ,
                                const GGS_attributeList & ,
                                const GGS_classMethodList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_classGalgasType (void) {}
  #endif

//--- Attributes
  public : GGS_bool mIsAbstract ;
  public : GGS_lstring  mClassName ;
  public : GGS_typeMapIndex  mSuperClassIndex ;
  public : GGS_attributeList  mAttributeList ;
  public : GGS_classMethodList  mMethodList ;
//--- Method 'checkTypeCrossReferences'
  public : virtual void method_checkTypeCrossReferences (C_Compiler &,
                                GGS_uint  
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_listGalgasType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_listGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_listGalgasType (const GGS_lstring & ,
                                const GGS_attributeList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_listGalgasType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mListTypeName ;
  public : GGS_attributeList  mAttributeList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_listmapGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_listmapGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_listmapGalgasType (const GGS_lstring & ,
                                const GGS_typeMapIndex & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_listmapGalgasType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mListmapTypeName ;
  public : GGS_typeMapIndex  mAssociatedListTypeIndex ;
//--- Method 'checkTypeCrossReferences'
  public : virtual void method_checkTypeCrossReferences (C_Compiler &,
                                GGS_uint  
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_structGalgasType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_structGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_structGalgasType (const GGS_lstring & ,
                                const GGS_attributeList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_structGalgasType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mStructTypeName ;
  public : GGS_attributeList  mAttributeList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@sortDescriptorList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sortDescriptorList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_lstring  mAttributeName ;
  public : GGS_bool mAscending ;
//--- Constructor
  public : elementOf_GGS_sortDescriptorList (const GGS_lstring & ,
                                const GGS_bool& 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_sortDescriptorList * nextObject (void) const { return (elementOf_GGS_sortDescriptorList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_sortDescriptorList * previousObject (void) const { return (elementOf_GGS_sortDescriptorList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_sortDescriptorList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                abstract class 'cPtr_sortedlistGalgasType'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sortedlistGalgasType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_sortedlistGalgasType (const GGS_lstring & ,
                                const GGS_attributeList & ,
                                const GGS_sortDescriptorList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sortedlistGalgasType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mListTypeName ;
  public : GGS_attributeList  mAttributeList ;
  public : GGS_sortDescriptorList  mSortDescriptorList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      abstract class 'cPtr_mapType'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_mapType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_mapType (const GGS_lstring & ,
                                const GGS_attributeList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_mapType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mMapTypeName ;
  public : GGS_attributeList  mAttributeList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    abstract class 'cPtr_mapindexType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_mapindexType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_mapindexType (const GGS_lstring & ,
                                const GGS_typeMapIndex & ,
                                const GGS_lstring & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_mapindexType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mMapIndexTypeName ;
  public : GGS_typeMapIndex  mIndexOfMapType ;
  public : GGS_lstring  mSearchMethodName ;
//--- Method 'checkTypeCrossReferences'
  public : virtual void method_checkTypeCrossReferences (C_Compiler &,
                                GGS_uint  
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@enumConstructorMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_enumConstructorMap {

} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_enumConstructorMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_enumConstructorMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_enumConstructorMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_enumConstructorMap * nextObject (void) const { return (elementOf_GGS_enumConstructorMap *) mNextItem ; }
  public : inline elementOf_GGS_enumConstructorMap * infObject (void) const { return (elementOf_GGS_enumConstructorMap *) mInfPtr ; }
  public : inline elementOf_GGS_enumConstructorMap * supObject (void) const { return (elementOf_GGS_enumConstructorMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_enumConstructorMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      abstract class 'cPtr_enumType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_enumType : public cPtr_ACGalgasType {
  private : typedef cPtr_ACGalgasType inherited ;
//--- Constructor
  public : cPtr_enumType (const GGS_lstring & ,
                                const GGS_enumConstructorMap & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_enumType (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  mEnumTypeName ;
  public : GGS_enumConstructorMap  mEnumConstructorMap ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of map '@routineMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_routineMap {
  public : GGS_signature  mRoutineSignature ;

  public : e_routineMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_routineMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_routineMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_routineMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_routineMap * nextObject (void) const { return (elementOf_GGS_routineMap *) mNextItem ; }
  public : inline elementOf_GGS_routineMap * infObject (void) const { return (elementOf_GGS_routineMap *) mInfPtr ; }
  public : inline elementOf_GGS_routineMap * supObject (void) const { return (elementOf_GGS_routineMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_routineMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@functionMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_functionMap {
  public : GGS_signature  mFunctionSignature ;
  public : GGS_typeMapIndex  mResultTypeIndex ;

  public : e_functionMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_functionMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_functionMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_functionMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_functionMap * nextObject (void) const { return (elementOf_GGS_functionMap *) mNextItem ; }
  public : inline elementOf_GGS_functionMap * infObject (void) const { return (elementOf_GGS_functionMap *) mInfPtr ; }
  public : inline elementOf_GGS_functionMap * supObject (void) const { return (elementOf_GGS_functionMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_functionMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@classIndexList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_classIndexList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_typeMapIndex  mClassMapindex ;
//--- Constructor
  public : elementOf_GGS_classIndexList (const GGS_typeMapIndex & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_classIndexList * nextObject (void) const { return (elementOf_GGS_classIndexList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_classIndexList * previousObject (void) const { return (elementOf_GGS_classIndexList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_classIndexList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Declarations for 'semanticContext' struct                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_semanticContext {
//--- Default constructor
  public : GGS_semanticContext (void) ;

//--- Virtual destructor
  public : virtual ~GGS_semanticContext (void) ;

//--- Handle 'drop' instruction
  public : void _drop (void) ;

//--- Method 'isBuilt'
  public : bool isBuilt (void) const ;

//--- Support for method call handling in GALGAS
  public : inline const GGS_semanticContext * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
  public : inline GGS_semanticContext * operator () (UNUSED_LOCATION_ARGS) { return this ; }

//--- Comparison
  public : GGS_bool _operator_isEqual (const GGS_semanticContext & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_semanticContext & inOperand) const ;

//--- Reader 'description'
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;
//--- Galgas 'new' destructor
  public : static GGS_semanticContext constructor_new (const GGS_typeMap & argument_0,
                 const GGS_routineMap & argument_1,
                 const GGS_functionMap & argument_2,
                 const GGS_descendantClassListMap& argument_3) ;

//--- Readers
  public : inline GGS_typeMap 
  reader_mTypeMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mTypeMap ;
  }

  public : inline GGS_routineMap 
  reader_mRoutineMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mRoutineMap ;
  }

  public : inline GGS_functionMap 
  reader_mFunctionMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mFunctionMap ;
  }

  public : inline GGS_descendantClassListMap
  reader_mDescendantClassListMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
    return mDescendantClassListMap ;
  }

//--- Attributes
  public : GGS_typeMap  mTypeMap ;
  public : GGS_routineMap  mRoutineMap ;
  public : GGS_functionMap  mFunctionMap ;
  public : GGS_descendantClassListMap mDescendantClassListMap ;
} ;

//---------------------------------------------------------------------------*

#endif
