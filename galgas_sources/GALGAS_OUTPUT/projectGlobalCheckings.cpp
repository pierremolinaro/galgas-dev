//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'projectGlobalCheckings.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 22th, 2010, at 19h28'12"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "projectGlobalCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectGlobalCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "optionLL1grammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_genericMultiMethodListMap ("genericMultiMethodListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_genericMultiMethodListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_lstringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_genericMultiMethodListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_genericMultiMethodListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_genericMultiMethodListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_genericMultiMethodListMap GGS_genericMultiMethodListMap::
constructor_emptyMap (void) {
  GGS_genericMultiMethodListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_genericMultiMethodListMap::
_typeNameForDescriptionReader (void) const {
  return "@genericMultiMethodListMap" ;
}

//---------------------------------------------------------------------------*

GGS_genericMultiMethodListMap GGS_genericMultiMethodListMap::
operator_concat (const GGS_genericMultiMethodListMap & inOperand) const {
  GGS_genericMultiMethodListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_genericMultiMethodListMap::
dotAssign_operation (const GGS_genericMultiMethodListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_lstringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_genericMultiMethodListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_lstring & inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_lstringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstringlist GGS_genericMultiMethodListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_lstringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_genericMultiMethodListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_genericMultiMethodListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_genericMultiMethodListMap::cEnumerator::
cEnumerator (const GGS_genericMultiMethodListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_lstringlist & GGS_genericMultiMethodListMap::cEnumerator::
_mList (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_genericMultiMethodListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_genericMultiMethodListMap * p = NULL ;
    macroMyNew (p, GGS_genericMultiMethodListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_genericMultiMethodListMap GGS_genericMultiMethodListMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_genericMultiMethodListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_genericMultiMethodListMap * p = dynamic_cast <const GGS_genericMultiMethodListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_genericMultiMethodListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_genericMultiMethodListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_genericMultiMethodListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.buildMultiMethodListMaps'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__buildMultiMethodListMaps (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_3669,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3669 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.buildMultiMethodListMaps'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps> gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps (typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps
findCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@abstractCategoryMethodAST.buildMultiMethodListMaps'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_4225,
                                GGS_genericMultiMethodListMap & var_cas_ioAbstractMultiMethodListMapAST,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4225 != NULL) {
    var_cas_ioAbstractMultiMethodListMapAST.addAssign_operation (operand_4225->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79)), operand_4225->mAbstractCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@categoryMethodAST.buildMultiMethodListMaps'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_categoryMethodAST * operand_4864,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & var_cas_ioMultiMethodListMap,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4864 != NULL) {
    var_cas_ioMultiMethodListMap.addAssign_operation (operand_4864->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95)), operand_4864->mCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@overridingCategoryMethodAST.buildMultiMethodListMaps'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_5494,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & var_cas_ioOverridingMultiMethodListMap,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5494 != NULL) {
    var_cas_ioOverridingMultiMethodListMap.addAssign_operation (operand_5494->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), operand_5494->mOverridingCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@abstractCategoryReaderAST.buildMultiMethodListMaps'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_6142,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & var_cas_ioAbstractMultiReaderListMap,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6142 != NULL) {
    var_cas_ioAbstractMultiReaderListMap.addAssign_operation (operand_6142->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127)), operand_6142->mAbstractCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@categoryReaderAST.buildMultiMethodListMaps'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_categoryReaderAST * operand_6778,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & var_cas_ioMultiReaderListMap,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6778 != NULL) {
    var_cas_ioMultiReaderListMap.addAssign_operation (operand_6778->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143)), operand_6778->mCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@overridingCategoryReaderAST.buildMultiMethodListMaps'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__buildMultiMethodListMaps (C_Compiler & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_7408,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiMethodListMapAST */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioOverridingMultiMethodListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioAbstractMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & /* var_cas_ioMultiReaderListMap */,
                                GGS_genericMultiMethodListMap & var_cas_ioOverridingMultiReaderListMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7408 != NULL) {
    var_cas_ioOverridingMultiReaderListMap.addAssign_operation (operand_7408->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)), operand_7408->mOverridingCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_descendantClassListMap ("descendantClassListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_unifiedTypeMapProxyList::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_descendantClassListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_descendantClassListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_descendantClassListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
constructor_emptyMap (void) {
  GGS_descendantClassListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_descendantClassListMap::
_typeNameForDescriptionReader (void) const {
  return "@descendantClassListMap" ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
operator_concat (const GGS_descendantClassListMap & inOperand) const {
  GGS_descendantClassListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
dotAssign_operation (const GGS_descendantClassListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_unifiedTypeMapProxy & inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxyList GGS_descendantClassListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxyList result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_unifiedTypeMapProxyList::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_descendantClassListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_descendantClassListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cEnumerator::
cEnumerator (const GGS_descendantClassListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_unifiedTypeMapProxyList & GGS_descendantClassListMap::cEnumerator::
_mList (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_descendantClassListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_descendantClassListMap * p = NULL ;
    macroMyNew (p, GGS_descendantClassListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_descendantClassListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_descendantClassListMap * p = dynamic_cast <const GGS_descendantClassListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_descendantClassListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_descendantClassListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_descendantClassListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              class map '@multiMethodMapForGlobalCheckings'                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiMethodMapForGlobalCheckings ("multiMethodMapForGlobalCheckings", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiMethodMapForGlobalCheckings::
elementOf_GGS_multiMethodMapForGlobalCheckings (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiMethodMapForGlobalCheckings & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiMethodMapForGlobalCheckings::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiMethodMapForGlobalCheckings::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiMethodMapForGlobalCheckings::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiMethodMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiMethodMapForGlobalCheckings * info = (e_multiMethodMapForGlobalCheckings *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiMethodMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiMethodMapForGlobalCheckings * info = (e_multiMethodMapForGlobalCheckings *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForGlobalCheckings GGS_multiMethodMapForGlobalCheckings::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForGlobalCheckings result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiMethodMapForGlobalCheckings info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForGlobalCheckings::
operator_isEqual (const GGS_multiMethodMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForGlobalCheckings::
operator_isNotEqual (const GGS_multiMethodMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiMethodMapForGlobalCheckings info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiMethodMapForGlobalCheckings::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForGlobalCheckings::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForGlobalCheckings GGS_multiMethodMapForGlobalCheckings::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiMethodMapForGlobalCheckings & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForGlobalCheckings result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForGlobalCheckings GGS_multiMethodMapForGlobalCheckings::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiMethodMapForGlobalCheckings result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiMethodMapForGlobalCheckings::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiMethodMapForGlobalCheckings " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiMethodMapForGlobalCheckings::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiMethodMapForGlobalCheckings * p = NULL ;
    macroMyNew (p, GGS_multiMethodMapForGlobalCheckings (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForGlobalCheckings GGS_multiMethodMapForGlobalCheckings::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForGlobalCheckings result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiMethodMapForGlobalCheckings * p = dynamic_cast <const GGS_multiMethodMapForGlobalCheckings *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiMethodMapForGlobalCheckings, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiMethodMapForGlobalCheckings::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiMethodMapForGlobalCheckings ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForGlobalCheckings GGS_multiMethodMapForGlobalCheckings::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForGlobalCheckings result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              class map '@multiReaderMapForGlobalCheckings'                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiReaderMapForGlobalCheckings ("multiReaderMapForGlobalCheckings", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiReaderMapForGlobalCheckings::
elementOf_GGS_multiReaderMapForGlobalCheckings (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiReaderMapForGlobalCheckings & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiReaderMapForGlobalCheckings::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiReaderMapForGlobalCheckings::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiReaderMapForGlobalCheckings::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiReaderMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiReaderMapForGlobalCheckings * info = (e_multiReaderMapForGlobalCheckings *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiReaderMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiReaderMapForGlobalCheckings * info = (e_multiReaderMapForGlobalCheckings *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMapForGlobalCheckings GGS_multiReaderMapForGlobalCheckings::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiReaderMapForGlobalCheckings result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiReaderMapForGlobalCheckings info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiReaderMapForGlobalCheckings::
operator_isEqual (const GGS_multiReaderMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiReaderMapForGlobalCheckings::
operator_isNotEqual (const GGS_multiReaderMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiReaderMapForGlobalCheckings info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiReaderMapForGlobalCheckings::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiReaderMapForGlobalCheckings::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMapForGlobalCheckings GGS_multiReaderMapForGlobalCheckings::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiReaderMapForGlobalCheckings & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiReaderMapForGlobalCheckings result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMapForGlobalCheckings GGS_multiReaderMapForGlobalCheckings::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiReaderMapForGlobalCheckings result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiReaderMapForGlobalCheckings::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiReaderMapForGlobalCheckings " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiReaderMapForGlobalCheckings::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiReaderMapForGlobalCheckings * p = NULL ;
    macroMyNew (p, GGS_multiReaderMapForGlobalCheckings (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMapForGlobalCheckings GGS_multiReaderMapForGlobalCheckings::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiReaderMapForGlobalCheckings result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiReaderMapForGlobalCheckings * p = dynamic_cast <const GGS_multiReaderMapForGlobalCheckings *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiReaderMapForGlobalCheckings, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiReaderMapForGlobalCheckings::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiReaderMapForGlobalCheckings ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMapForGlobalCheckings GGS_multiReaderMapForGlobalCheckings::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_multiReaderMapForGlobalCheckings result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "outputDirectory"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_outputDirectory (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_outputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outOuputDirectory ;
  const GGS_bool cond_9898 = (var_cas_inSourceFile.ggs_string ().reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (201))).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_9898.isBuiltAndTrue ()) {
    var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () ;
    var_cas_outOuputDirectory.appendCString ("/GALGAS_OUTPUT") ;
  }else if (cond_9898.isBuiltAndFalse ()) {
    var_cas_outOuputDirectory = GGS_string ("GALGAS_OUTPUT") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_outputDirectory\n") ;
  #endif
  return var_cas_outOuputDirectory ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_outputDirectory (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_outputDirectory (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_outputDirectory [1] = {& kTypeDescriptor_GGS_lstring } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_outputDirectory ("outputDirectory",
                              functionForGenericCall_outputDirectory,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_outputDirectory) ;

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "checkMultiMethodDefinitionForClass"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMultiMethodDefinitionForClass (C_Compiler & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractMultiMethodName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_genericMultiMethodListMap  var_cas_inOverridingMultiMethodListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMultiMethodDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (219)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_10483 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_10483 = NULL ;
    while (((operand_10483 = enumerator_10483.nextObject ()))) {
      macroValidPointer (operand_10483) ;
      const GGS_lstring  var_cas_descendantClassName = operand_10483->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
      GGS_lstringlist  var_cas_overridingMethods = var_cas_inOverridingMultiMethodListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) COMMA_SOURCE_FILE_AT_LINE (222)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_10714 (var_cas_overridingMethods, true) ;
        const GGS_lstringlist::cElement * operand_10714 = NULL ;
        while (((operand_10714 = enumerator_10714.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_10714) ;
          var_cas_found = (var_cas_inAbstractMultiMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225))).operator_isEqual (operand_10714->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225))) ;
        }
      }
      const GGS_bool cond_11738 = (var_cas_found).operator_not () ;
      if (cond_11738.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_10942_0 ;
        GGS_typeKindEnum automatic_var_10942_1 ;
        GGS_typedAttributeList  automatic_var_10942_2 ;
        GGS_attributeMap  automatic_var_10942_3 ;
        GGS_typedAttributeList  automatic_var_10942_4 ;
        GGS_constructorMap  automatic_var_10942_5 ;
        GGS_readerMap  automatic_var_10942_6 ;
        GGS_modifierMap  automatic_var_10942_7 ;
        GGS_instanceMethodMap  automatic_var_10942_8 ;
        GGS_classMethodMap  automatic_var_10942_9 ;
        GGS_enumerationDescriptorList  automatic_var_10942_10 ;
        GGS_uint  automatic_var_10942_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_10942_12 ;
        GGS_nativeAttributeList  automatic_var_10942_13 ;
        GGS_stringset  automatic_var_10942_14 ;
        GGS_lstringlist  automatic_var_10942_15 ;
        GGS_typedAttributeList  automatic_var_10942_16 ;
        GGS_mapSearchMethodListAST  automatic_var_10942_17 ;
        GGS_mapSearchMethodListAST  automatic_var_10942_18 ;
        GGS_withAccessorMap  automatic_var_10942_19 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_10942_0, automatic_var_10942_1, automatic_var_10942_2, automatic_var_10942_3, automatic_var_10942_4, automatic_var_10942_5, automatic_var_10942_6, automatic_var_10942_7, automatic_var_10942_8, automatic_var_10942_9, automatic_var_10942_10, automatic_var_10942_11, automatic_var_10942_12, automatic_var_10942_13, automatic_var_10942_14, automatic_var_10942_15, automatic_var_10942_16, automatic_var_10942_17, automatic_var_10942_18, automatic_var_10942_19 COMMA_SOURCE_FILE_AT_LINE (229)) ;
        }
        const GGS_bool cond_11429 = (var_cas_isConcrete).operator_not () ;
        if (cond_11429.isBuiltAndTrue ()) {
          ::routine_checkMultiMethodDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234)),  var_cas_inAbstractMultiMethodName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingMultiMethodListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (232)) ;
        }else if (cond_11429.isBuiltAndFalse ()) {
          var_cas_inAbstractMultiMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract multi method '")).operator_concat (var_cas_inAbstractMultiMethodName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this method")) COMMA_SOURCE_FILE_AT_LINE (244)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMultiMethodDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "checkMultiReaderDefinitionForClass"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMultiReaderDefinitionForClass (C_Compiler & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractMultiReaderName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_genericMultiMethodListMap  var_cas_inOverridingMultiReaderListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMultiReaderDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (259)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_12289 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_12289 = NULL ;
    while (((operand_12289 = enumerator_12289.nextObject ()))) {
      macroValidPointer (operand_12289) ;
      GGS_lstring  var_cas_descendantClassName = operand_12289->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ;
      GGS_lstringlist  var_cas_overridingReaders = var_cas_inOverridingMultiReaderListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262)) COMMA_SOURCE_FILE_AT_LINE (262)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_12514 (var_cas_overridingReaders, true) ;
        const GGS_lstringlist::cElement * operand_12514 = NULL ;
        while (((operand_12514 = enumerator_12514.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_12514) ;
          var_cas_found = (var_cas_inAbstractMultiReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (265))).operator_isEqual (operand_12514->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (265))) ;
        }
      }
      const GGS_bool cond_13541 = (var_cas_found).operator_not () ;
      if (cond_13541.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_12742_0 ;
        GGS_typeKindEnum automatic_var_12742_1 ;
        GGS_typedAttributeList  automatic_var_12742_2 ;
        GGS_attributeMap  automatic_var_12742_3 ;
        GGS_typedAttributeList  automatic_var_12742_4 ;
        GGS_constructorMap  automatic_var_12742_5 ;
        GGS_readerMap  automatic_var_12742_6 ;
        GGS_modifierMap  automatic_var_12742_7 ;
        GGS_instanceMethodMap  automatic_var_12742_8 ;
        GGS_classMethodMap  automatic_var_12742_9 ;
        GGS_enumerationDescriptorList  automatic_var_12742_10 ;
        GGS_uint  automatic_var_12742_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_12742_12 ;
        GGS_nativeAttributeList  automatic_var_12742_13 ;
        GGS_stringset  automatic_var_12742_14 ;
        GGS_lstringlist  automatic_var_12742_15 ;
        GGS_typedAttributeList  automatic_var_12742_16 ;
        GGS_mapSearchMethodListAST  automatic_var_12742_17 ;
        GGS_mapSearchMethodListAST  automatic_var_12742_18 ;
        GGS_withAccessorMap  automatic_var_12742_19 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_12742_0, automatic_var_12742_1, automatic_var_12742_2, automatic_var_12742_3, automatic_var_12742_4, automatic_var_12742_5, automatic_var_12742_6, automatic_var_12742_7, automatic_var_12742_8, automatic_var_12742_9, automatic_var_12742_10, automatic_var_12742_11, automatic_var_12742_12, automatic_var_12742_13, automatic_var_12742_14, automatic_var_12742_15, automatic_var_12742_16, automatic_var_12742_17, automatic_var_12742_18, automatic_var_12742_19 COMMA_SOURCE_FILE_AT_LINE (269)) ;
        }
        const GGS_bool cond_13229 = (var_cas_isConcrete).operator_not () ;
        if (cond_13229.isBuiltAndTrue ()) {
          ::routine_checkMultiReaderDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)),  var_cas_inAbstractMultiReaderName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingMultiReaderListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (272)) ;
        }else if (cond_13229.isBuiltAndFalse ()) {
          var_cas_inAbstractMultiReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract category reader '")).operator_concat (var_cas_inAbstractMultiReaderName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this reader")) COMMA_SOURCE_FILE_AT_LINE (284)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMultiReaderDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "performProjectGlobalCheckings"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_Compiler & inLexique,
                                const GGS_parsedComponentStruct  var_cas_inParsedComponentStruct,
                                const GGS_location   var_cas_inEndOfSourceFile
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectGlobalCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationList COMMA_SOURCE_FILE_AT_LINE (297)) ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_14002 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (299)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_14002 = NULL ;
    while (((operand_14002 = enumerator_14002.nextObject ()))) {
      macroValidPointer (operand_14002) ;
      var_cas_semanticDeclarationList.dotAssign_operation (operand_14002->mInfo.mRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
    }
  }
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  GGS_string (""),  var_cas_semanticDeclarationList,  var_cas_inEndOfSourceFile,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (304)) ;
  GGS_descendantClassListMap var_cas_descendantClassListMap = GGS_descendantClassListMap::constructor_emptyMap () ;
  {
    GGS_unifiedTypeMap::cEnumerator enumerator_14509 (var_cas_semanticContext.mTypeMap, true) ;
    const GGS_unifiedTypeMap::cElement * operand_14509 = NULL ;
    while (((operand_14509 = enumerator_14509.nextObject ()))) {
      macroValidPointer (operand_14509) ;
      const GGS_bool cond_14713 = (operand_14509->mInfo.mSuperType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (314))).operator_not () ;
      if (cond_14713.isBuiltAndTrue ()) {
        var_cas_descendantClassListMap.addAssign_operation (operand_14509->mInfo.mSuperType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (316)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_semanticContext.mTypeMap, operand_14509->mKey COMMA_SOURCE_FILE_AT_LINE (317))) ;
      }
    }
  }
  GGS_genericMultiMethodListMap var_cas_abstractMultiMethodListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  GGS_genericMultiMethodListMap var_cas_multiMethodListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  GGS_genericMultiMethodListMap var_cas_overridingMultiMethodListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  GGS_genericMultiMethodListMap var_cas_abstractMultiReaderListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  GGS_genericMultiMethodListMap var_cas_multiReaderListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  GGS_genericMultiMethodListMap var_cas_overridingMultiReaderListMap = GGS_genericMultiMethodListMap::constructor_emptyMap () ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_15179 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (328)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_15179 = NULL ;
    while (((operand_15179 = enumerator_15179.nextObject ()))) {
      macroValidPointer (operand_15179) ;
      {
        GGS_semanticDeclarationListAST::cEnumerator enumerator_15249 (operand_15179->mInfo.mRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (329)), true) ;
        const GGS_semanticDeclarationListAST::cElement * operand_15249 = NULL ;
        while (((operand_15249 = enumerator_15249.nextObject ()))) {
          macroValidPointer (operand_15249) ;
          { typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps method = findCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps (operand_15249->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_15249->mSemanticDeclaration (HERE), var_cas_abstractMultiMethodListMap, var_cas_multiMethodListMap, var_cas_overridingMultiMethodListMap, var_cas_abstractMultiReaderListMap, var_cas_multiReaderListMap, var_cas_overridingMultiReaderListMap COMMA_SOURCE_FILE_AT_LINE (330)) ;
            }
          }
        }
      }
    }
  }
  const GGS_bool cond_18410 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (341))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_18410.isBuiltAndTrue ()) {
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_15761 (var_cas_abstractMultiMethodListMap, true) ;
      while (enumerator_15761.hasCurrentObject ()) {
        GGS_multiMethodMapForGlobalCheckings  var_cas_multiMethodMap = GGS_multiMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_15852 (enumerator_15761._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_15852 = NULL ;
          while (((operand_15852 = enumerator_15852.nextObject ()))) {
            macroValidPointer (operand_15852) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_15852->mValue COMMA_SOURCE_FILE_AT_LINE (346)) ;
          }
        }
        enumerator_15761.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_16039 (var_cas_multiMethodListMap, true) ;
      while (enumerator_16039.hasCurrentObject ()) {
        GGS_multiMethodMapForGlobalCheckings  var_cas_multiMethodMap = GGS_multiMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (351)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_16130 (enumerator_16039._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_16130 = NULL ;
          while (((operand_16130 = enumerator_16130.nextObject ()))) {
            macroValidPointer (operand_16130) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_16130->mValue COMMA_SOURCE_FILE_AT_LINE (353)) ;
          }
        }
        enumerator_16039.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_16333 (var_cas_overridingMultiMethodListMap, true) ;
      while (enumerator_16333.hasCurrentObject ()) {
        GGS_multiMethodMapForGlobalCheckings  var_cas_multiMethodMap = GGS_multiMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (358)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_16424 (enumerator_16333._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_16424 = NULL ;
          while (((operand_16424 = enumerator_16424.nextObject ()))) {
            macroValidPointer (operand_16424) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_16424->mValue COMMA_SOURCE_FILE_AT_LINE (360)) ;
          }
        }
        enumerator_16333.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_16711 (var_cas_abstractMultiMethodListMap, true) ;
      while (enumerator_16711.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_16734 (enumerator_16711._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_16734 = NULL ;
          while (((operand_16734 = enumerator_16734.nextObject ()))) {
            macroValidPointer (operand_16734) ;
            ::routine_checkMultiMethodDefinitionForClass (inLexique,  enumerator_16711._key (HERE),  enumerator_16711._key (HERE),  operand_16734->mValue,  var_cas_descendantClassListMap,  var_cas_overridingMultiMethodListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (368)) ;
          }
        }
        enumerator_16711.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_17247 (var_cas_abstractMultiReaderListMap, true) ;
      while (enumerator_17247.hasCurrentObject ()) {
        GGS_multiReaderMapForGlobalCheckings  var_cas_multiReaderMap = GGS_multiReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (383)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_17338 (enumerator_17247._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_17338 = NULL ;
          while (((operand_17338 = enumerator_17338.nextObject ()))) {
            macroValidPointer (operand_17338) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_17338->mValue COMMA_SOURCE_FILE_AT_LINE (385)) ;
          }
        }
        enumerator_17247.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_17525 (var_cas_multiReaderListMap, true) ;
      while (enumerator_17525.hasCurrentObject ()) {
        GGS_multiReaderMapForGlobalCheckings  var_cas_multiReaderMap = GGS_multiReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (390)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_17616 (enumerator_17525._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_17616 = NULL ;
          while (((operand_17616 = enumerator_17616.nextObject ()))) {
            macroValidPointer (operand_17616) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_17616->mValue COMMA_SOURCE_FILE_AT_LINE (392)) ;
          }
        }
        enumerator_17525.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_17819 (var_cas_overridingMultiReaderListMap, true) ;
      while (enumerator_17819.hasCurrentObject ()) {
        GGS_multiReaderMapForGlobalCheckings  var_cas_multiReaderMap = GGS_multiReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (397)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_17910 (enumerator_17819._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_17910 = NULL ;
          while (((operand_17910 = enumerator_17910.nextObject ()))) {
            macroValidPointer (operand_17910) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_17910->mValue COMMA_SOURCE_FILE_AT_LINE (399)) ;
          }
        }
        enumerator_17819.next () ;
      }
    }
    {
      GGS_genericMultiMethodListMap::cEnumerator enumerator_18128 (var_cas_abstractMultiReaderListMap, true) ;
      while (enumerator_18128.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_18151 (enumerator_18128._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_18151 = NULL ;
          while (((operand_18151 = enumerator_18151.nextObject ()))) {
            macroValidPointer (operand_18151) ;
            ::routine_checkMultiReaderDefinitionForClass (inLexique,  enumerator_18128._key (HERE),  enumerator_18128._key (HERE),  operand_18151->mValue,  var_cas_descendantClassListMap,  var_cas_overridingMultiReaderListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (405)) ;
          }
        }
        enumerator_18128.next () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectGlobalCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_targetFileListMap ("targetFileListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_stringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_targetFileListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_targetFileListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_targetFileListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
constructor_emptyMap (void) {
  GGS_targetFileListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_targetFileListMap::
_typeNameForDescriptionReader (void) const {
  return "@targetFileListMap" ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
operator_concat (const GGS_targetFileListMap & inOperand) const {
  GGS_targetFileListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
dotAssign_operation (const GGS_targetFileListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_string& inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_stringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_targetFileListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cEnumerator::
cEnumerator (const GGS_targetFileListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_stringlist & GGS_targetFileListMap::cEnumerator::
_mList (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_targetFileListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_targetFileListMap * p = NULL ;
    macroMyNew (p, GGS_targetFileListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_targetFileListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_targetFileListMap * p = dynamic_cast <const GGS_targetFileListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_targetFileListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_targetFileListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_targetFileListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_sourceFileMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

e_sourceFileMap::e_sourceFileMap (void) :
mFullPath (),
mSourceKind () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map '@sourceFileMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sourceFileMap ("sourceFileMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_sourceFileMap::
elementOf_GGS_sourceFileMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_sourceFileMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_sourceFileMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFullPath.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSourceKind.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_sourceFileMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_sourceFileMap * ptr = dynamic_cast <const elementOf_GGS_sourceFileMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFullPath.operator_isEqual (ptr->mInfo.mFullPath)).boolValue ()
           && (mInfo.mSourceKind.operator_isEqual (ptr->mInfo.mSourceKind)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_sourceFileMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_sourceFileMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
operator_isEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
operator_isNotEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_string& inParameter0,
               const GGS_sourceFileKind& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_sourceFileMap info  ;
    info.mFullPath = inParameter0 ;
    info.mSourceKind = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_sourceFileKind  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFullPath ;
    outParameter1 = node->mInfo.mSourceKind ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_sourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_sourceFileKind& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_sourceFileMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_sourceFileMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_sourceFileMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @sourceFileMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_sourceFileMap::cEnumerator::_mFullPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFullPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sourceFileKind & GGS_sourceFileMap::cEnumerator::_mSourceKind (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSourceKind ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_sourceFileMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sourceFileMap * p = NULL ;
    macroMyNew (p, GGS_sourceFileMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sourceFileMap * p = dynamic_cast <const GGS_sourceFileMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sourceFileMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sourceFileMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sourceFileMap ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_string& inValue0,
                                             const GGS_sourceFileKind& inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_sourceFileMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'fileListTemplateFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_fileListTemplateFileWrapper (
  "",
  0,
  gWrapperAllFiles_fileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_fileListTemplateFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS.isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Lib PM directory\n"
      "ifdef LIBPM_PATH_ENV_VAR\n"
      "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
      "  $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (given by LIBPM_PATH_ENV_VAR environment variable))\n"
      "else\n"
      "  ifeq ($(shell if [ -d ../libpm ] ; then echo 1 ; else echo 0 ; fi), 1) \n"
      "    LIB_PM_PATH := ../libpm\n"
      "    $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (libpm found at this path))\n"
      "  else\n"
      "    ifeq ($(shell if [ -d ../../libpm ] ; then echo 1 ; else echo 0 ; fi), 1) \n"
      "      LIB_PM_PATH := ../../libpm\n"
      "      $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (libpm found at this path))\n"
      "    else\n"
      "      $(error Cannot find libpm: neither ../libpm nor ../../libpm exist, LIBPM_PATH_ENV_VAR environment variable does not exist)\n"
      "      LIB_PM_PATH :=\n"
      "    endif\n"
      "  endif\n"
      "endif\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Project source files directories                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
      "SOURCES_DIR += ../galgas_sources/GALGAS_OUTPUT/include-files\n" ;
    result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Source files names list (without their actual path)       *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES :=\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
      "\n"
      "#--- Hand-coded files ---------------------\n" ;
    result << var_cas_HAND_CODED_SOURCE_LIST ;
    result << "\n"
      "\n"
      "#--- Files generated by GALGAS ------------\n" ;
    result << var_cas_GALGAS_SOURCE_LIST ;
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_projectGlobalCheckings (void) {
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps (category_method__semanticDeclarationAST__buildMultiMethodListMaps, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__abstractCategoryMethodAST__buildMultiMethodListMaps, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__categoryMethodAST__buildMultiMethodListMaps, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__overridingCategoryMethodAST__buildMultiMethodListMaps, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__abstractCategoryReaderAST__buildMultiMethodListMaps, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__categoryReaderAST__buildMultiMethodListMaps, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildMultiMethodListMaps) category_method__overridingCategoryReaderAST__buildMultiMethodListMaps, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_projectGlobalCheckings (void) {
  gDispatchTableForMethod__semanticDeclarationAST__buildMultiMethodListMaps.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_projectGlobalCheckings (prologueRoutineFor_projectGlobalCheckings, epilogueRoutineFor_projectGlobalCheckings) ;

//---------------------------------------------------------------------------*

