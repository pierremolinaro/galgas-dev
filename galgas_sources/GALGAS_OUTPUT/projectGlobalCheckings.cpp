//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'projectGlobalCheckings.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 13th, 2010, at 15h13'41"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "projectGlobalCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectGlobalCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "optionLL1grammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_descendantClassListMap ("descendantClassListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_unifiedTypeMapProxyList::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_descendantClassListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_descendantClassListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_descendantClassListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
constructor_emptyMap (void) {
  GGS_descendantClassListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_descendantClassListMap::
_typeNameForDescriptionReader (void) const {
  return "@descendantClassListMap" ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
operator_concat (const GGS_descendantClassListMap & inOperand) const {
  GGS_descendantClassListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
dotAssign_operation (const GGS_descendantClassListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_unifiedTypeMapProxy & inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxyList GGS_descendantClassListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxyList result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_unifiedTypeMapProxyList::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_descendantClassListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_descendantClassListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cEnumerator::
cEnumerator (const GGS_descendantClassListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_unifiedTypeMapProxyList & GGS_descendantClassListMap::cEnumerator::
_object (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_descendantClassListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_descendantClassListMap * p = NULL ;
    macroMyNew (p, GGS_descendantClassListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_descendantClassListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_descendantClassListMap * p = dynamic_cast <const GGS_descendantClassListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_descendantClassListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_descendantClassListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_descendantClassListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@multiMethodMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiMethodMap ("multiMethodMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiMethodMap::
elementOf_GGS_multiMethodMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiMethodMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiMethodMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiMethodMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiMethodMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiMethodMap * info = (e_multiMethodMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiMethodMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiMethodMap * info = (e_multiMethodMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMap GGS_multiMethodMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiMethodMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMap::
operator_isEqual (const GGS_multiMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMap::
operator_isNotEqual (const GGS_multiMethodMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiMethodMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiMethodMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiMethodMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMap GGS_multiMethodMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiMethodMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMap GGS_multiMethodMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiMethodMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiMethodMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiMethodMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiMethodMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiMethodMap * p = NULL ;
    macroMyNew (p, GGS_multiMethodMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMap GGS_multiMethodMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiMethodMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiMethodMap * p = dynamic_cast <const GGS_multiMethodMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiMethodMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiMethodMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiMethodMap ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMap GGS_multiMethodMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_multiMethodMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@multiReaderMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiReaderMap ("multiReaderMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiReaderMap::
elementOf_GGS_multiReaderMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiReaderMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiReaderMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiReaderMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiReaderMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiReaderMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiReaderMap * info = (e_multiReaderMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiReaderMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiReaderMap * info = (e_multiReaderMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMap GGS_multiReaderMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiReaderMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiReaderMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiReaderMap::
operator_isEqual (const GGS_multiReaderMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiReaderMap::
operator_isNotEqual (const GGS_multiReaderMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiReaderMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiReaderMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiReaderMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMap GGS_multiReaderMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiReaderMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiReaderMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMap GGS_multiReaderMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiReaderMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiReaderMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiReaderMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiReaderMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiReaderMap * p = NULL ;
    macroMyNew (p, GGS_multiReaderMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMap GGS_multiReaderMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiReaderMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiReaderMap * p = dynamic_cast <const GGS_multiReaderMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiReaderMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiReaderMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiReaderMap ;
}

//---------------------------------------------------------------------------*

GGS_multiReaderMap GGS_multiReaderMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_multiReaderMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "outputDirectory"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_outputDirectory (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_outputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outOuputDirectory ;
  const GGS_bool cond_4731 = (var_cas_inSourceFile.ggs_string ().reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (81))).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_4731.isBuiltAndTrue ()) {
    var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () ;
    var_cas_outOuputDirectory.appendCString ("/GALGAS_OUTPUT") ;
  }else if (cond_4731.isBuiltAndFalse ()) {
    var_cas_outOuputDirectory = GGS_string ("GALGAS_OUTPUT") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_outputDirectory\n") ;
  #endif
  return var_cas_outOuputDirectory ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_outputDirectory (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_outputDirectory (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_outputDirectory [1] = {& kTypeDescriptor_GGS_lstring } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_outputDirectory ("outputDirectory",
                              functionForGenericCall_outputDirectory,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_outputDirectory) ;

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "checkMultiMethodDefinitionForClass"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMultiMethodDefinitionForClass (C_Compiler & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractCategoryMethodName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_overridingMultiMethodListMapAST  var_cas_inOverridingCategoryMethodListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMultiMethodDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (99)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_5328 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_5328 = NULL ;
    while (((operand_5328 = enumerator_5328.nextObject ()))) {
      macroValidPointer (operand_5328) ;
      const GGS_lstring  var_cas_descendantClassName = operand_5328->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (101)) ;
      GGS_overridingMultiMethodListAST  var_cas_overridingMethods = var_cas_inOverridingCategoryMethodListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) COMMA_SOURCE_FILE_AT_LINE (102)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_overridingMultiMethodListAST::cEnumerator enumerator_5579 (var_cas_overridingMethods, true) ;
        const GGS_overridingMultiMethodListAST::cElement * operand_5579 = NULL ;
        while (((operand_5579 = enumerator_5579.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_5579) ;
          var_cas_found = (var_cas_inAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))).operator_isEqual (operand_5579->mOverridingMultiMethodMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
        }
      }
      const GGS_bool cond_6644 = (var_cas_found).operator_not () ;
      if (cond_6644.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_5836_0 ;
        GGS_typeKindEnum automatic_var_5836_1 ;
        GGS_typedAttributeList  automatic_var_5836_2 ;
        GGS_attributeMap  automatic_var_5836_3 ;
        GGS_typedAttributeList  automatic_var_5836_4 ;
        GGS_constructorMap  automatic_var_5836_5 ;
        GGS_readerMap  automatic_var_5836_6 ;
        GGS_modifierMap  automatic_var_5836_7 ;
        GGS_instanceMethodMap  automatic_var_5836_8 ;
        GGS_classMethodMap  automatic_var_5836_9 ;
        GGS_enumerationDescriptorList  automatic_var_5836_10 ;
        GGS_uint  automatic_var_5836_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_5836_12 ;
        GGS_nativeAttributeList  automatic_var_5836_13 ;
        GGS_lstringlist  automatic_var_5836_14 ;
        GGS_typedAttributeList  automatic_var_5836_15 ;
        GGS_mapSearchMethodListAST  automatic_var_5836_16 ;
        GGS_mapSearchMethodListAST  automatic_var_5836_17 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_5836_0, automatic_var_5836_1, automatic_var_5836_2, automatic_var_5836_3, automatic_var_5836_4, automatic_var_5836_5, automatic_var_5836_6, automatic_var_5836_7, automatic_var_5836_8, automatic_var_5836_9, automatic_var_5836_10, automatic_var_5836_11, automatic_var_5836_12, automatic_var_5836_13, automatic_var_5836_14, automatic_var_5836_15, automatic_var_5836_16, automatic_var_5836_17 COMMA_SOURCE_FILE_AT_LINE (109)) ;
        }
        const GGS_bool cond_6329 = (var_cas_isConcrete).operator_not () ;
        if (cond_6329.isBuiltAndTrue ()) {
          ::routine_checkMultiMethodDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)),  var_cas_inAbstractCategoryMethodName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingCategoryMethodListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (112)) ;
        }else if (cond_6329.isBuiltAndFalse ()) {
          var_cas_inAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract multi method '")).operator_concat (var_cas_inAbstractCategoryMethodName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this method")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMultiMethodDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "checkMultiReaderDefinitionForClass"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkMultiReaderDefinitionForClass (C_Compiler & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractCategoryReaderName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_overridingMultiReaderListMapAST  var_cas_inOverridingCategoryReaderListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkMultiReaderDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (139)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_7207 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_7207 = NULL ;
    while (((operand_7207 = enumerator_7207.nextObject ()))) {
      macroValidPointer (operand_7207) ;
      GGS_lstring  var_cas_descendantClassName = operand_7207->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
      GGS_overridingMultiReaderListAST  var_cas_overridingReaders = var_cas_inOverridingCategoryReaderListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)) COMMA_SOURCE_FILE_AT_LINE (142)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_overridingMultiReaderListAST::cEnumerator enumerator_7452 (var_cas_overridingReaders, true) ;
        const GGS_overridingMultiReaderListAST::cElement * operand_7452 = NULL ;
        while (((operand_7452 = enumerator_7452.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_7452) ;
          var_cas_found = (var_cas_inAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145))).operator_isEqual (operand_7452->mOverridingMultiReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145))) ;
        }
      }
      const GGS_bool cond_8514 = (var_cas_found).operator_not () ;
      if (cond_8514.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_7703_0 ;
        GGS_typeKindEnum automatic_var_7703_1 ;
        GGS_typedAttributeList  automatic_var_7703_2 ;
        GGS_attributeMap  automatic_var_7703_3 ;
        GGS_typedAttributeList  automatic_var_7703_4 ;
        GGS_constructorMap  automatic_var_7703_5 ;
        GGS_readerMap  automatic_var_7703_6 ;
        GGS_modifierMap  automatic_var_7703_7 ;
        GGS_instanceMethodMap  automatic_var_7703_8 ;
        GGS_classMethodMap  automatic_var_7703_9 ;
        GGS_enumerationDescriptorList  automatic_var_7703_10 ;
        GGS_uint  automatic_var_7703_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_7703_12 ;
        GGS_nativeAttributeList  automatic_var_7703_13 ;
        GGS_lstringlist  automatic_var_7703_14 ;
        GGS_typedAttributeList  automatic_var_7703_15 ;
        GGS_mapSearchMethodListAST  automatic_var_7703_16 ;
        GGS_mapSearchMethodListAST  automatic_var_7703_17 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_7703_0, automatic_var_7703_1, automatic_var_7703_2, automatic_var_7703_3, automatic_var_7703_4, automatic_var_7703_5, automatic_var_7703_6, automatic_var_7703_7, automatic_var_7703_8, automatic_var_7703_9, automatic_var_7703_10, automatic_var_7703_11, automatic_var_7703_12, automatic_var_7703_13, automatic_var_7703_14, automatic_var_7703_15, automatic_var_7703_16, automatic_var_7703_17 COMMA_SOURCE_FILE_AT_LINE (149)) ;
        }
        const GGS_bool cond_8196 = (var_cas_isConcrete).operator_not () ;
        if (cond_8196.isBuiltAndTrue ()) {
          ::routine_checkMultiReaderDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (154)),  var_cas_inAbstractCategoryReaderName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingCategoryReaderListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (152)) ;
        }else if (cond_8196.isBuiltAndFalse ()) {
          var_cas_inAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract category reader '")).operator_concat (var_cas_inAbstractCategoryReaderName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this reader")) COMMA_SOURCE_FILE_AT_LINE (164)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkMultiReaderDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "performProjectGlobalCheckings"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_Compiler & inLexique,
                                const GGS_parsedComponentStruct  var_cas_inParsedComponentStruct,
                                const GGS_location   var_cas_inEndOfSourceFile
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectGlobalCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationList COMMA_SOURCE_FILE_AT_LINE (177)) ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_8975 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (179)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_8975 = NULL ;
    while (((operand_8975 = enumerator_8975.nextObject ()))) {
      macroValidPointer (operand_8975) ;
      var_cas_semanticDeclarationList.dotAssign_operation (operand_8975->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
    }
  }
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationList,  GGS_optionComponentMapForSemanticAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)),  var_cas_inEndOfSourceFile,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (184)) ;
  GGS_descendantClassListMap var_cas_descendantClassListMap = GGS_descendantClassListMap::constructor_emptyMap () ;
  {
    GGS_unifiedTypeMap::cEnumerator enumerator_9557 (var_cas_semanticContext.mTypeMap, true) ;
    const GGS_unifiedTypeMap::cElement * operand_9557 = NULL ;
    while (((operand_9557 = enumerator_9557.nextObject ()))) {
      macroValidPointer (operand_9557) ;
      const GGS_bool cond_9773 = (operand_9557->mInfo.mSuperType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (194))).operator_not () ;
      if (cond_9773.isBuiltAndTrue ()) {
        var_cas_descendantClassListMap.addAssign_operation (operand_9557->mInfo.mSuperType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (196)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_semanticContext.mTypeMap, operand_9557->mKey COMMA_SOURCE_FILE_AT_LINE (197))) ;
      }
    }
  }
  const GGS_bool cond_13928 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (202))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_13928.isBuiltAndTrue ()) {
    GGS_abstractMultiMethodListMapAST var_cas_abstractCategoryMethodListMap = GGS_abstractMultiMethodListMapAST::constructor_emptyMap () ;
    GGS_multiMethodListMapAST var_cas_categoryMethodListMap = GGS_multiMethodListMapAST::constructor_emptyMap () ;
    GGS_overridingMultiMethodListMapAST var_cas_overridingCategoryMethodListMap = GGS_overridingMultiMethodListMapAST::constructor_emptyMap () ;
    {
      GGS_parsedSemanticsComponentMap::cEnumerator enumerator_10093 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), true) ;
      const GGS_parsedSemanticsComponentMap::cElement * operand_10093 = NULL ;
      while (((operand_10093 = enumerator_10093.nextObject ()))) {
        macroValidPointer (operand_10093) ;
        var_cas_abstractCategoryMethodListMap.dotAssign_operation (operand_10093->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_mAbstractCategoryMethodListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) ;
        var_cas_categoryMethodListMap.dotAssign_operation (operand_10093->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (208)).reader_mCategoryMethodListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (208))) ;
        var_cas_overridingCategoryMethodListMap.dotAssign_operation (operand_10093->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (209)).reader_mOverridingCategoryMethodListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (209))) ;
      }
    }
    {
      GGS_abstractMultiMethodListMapAST::cEnumerator enumerator_10579 (var_cas_abstractCategoryMethodListMap, true) ;
      while (enumerator_10579.hasCurrentObject ()) {
        GGS_multiMethodMap  var_cas_multiMethodMap = GGS_multiMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        {
          GGS_abstracMultiMethodListAST::cEnumerator enumerator_10653 (enumerator_10579._object (HERE), true) ;
          const GGS_abstracMultiMethodListAST::cElement * operand_10653 = NULL ;
          while (((operand_10653 = enumerator_10653.nextObject ()))) {
            macroValidPointer (operand_10653) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_10653->mAbstractMultiMethodName COMMA_SOURCE_FILE_AT_LINE (215)) ;
          }
        }
        enumerator_10579.next () ;
      }
    }
    {
      GGS_multiMethodListMapAST::cEnumerator enumerator_10861 (var_cas_categoryMethodListMap, true) ;
      while (enumerator_10861.hasCurrentObject ()) {
        GGS_multiMethodMap  var_cas_multiMethodMap = GGS_multiMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        {
          GGS_multiMethodListAST::cEnumerator enumerator_10935 (enumerator_10861._object (HERE), true) ;
          const GGS_multiMethodListAST::cElement * operand_10935 = NULL ;
          while (((operand_10935 = enumerator_10935.nextObject ()))) {
            macroValidPointer (operand_10935) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_10935->mMultiMethodName COMMA_SOURCE_FILE_AT_LINE (222)) ;
          }
        }
        enumerator_10861.next () ;
      }
    }
    {
      GGS_overridingMultiMethodListMapAST::cEnumerator enumerator_11151 (var_cas_overridingCategoryMethodListMap, true) ;
      while (enumerator_11151.hasCurrentObject ()) {
        GGS_multiMethodMap  var_cas_multiMethodMap = GGS_multiMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        {
          GGS_overridingMultiMethodListAST::cEnumerator enumerator_11225 (enumerator_11151._object (HERE), true) ;
          const GGS_overridingMultiMethodListAST::cElement * operand_11225 = NULL ;
          while (((operand_11225 = enumerator_11225.nextObject ()))) {
            macroValidPointer (operand_11225) ;
            var_cas_multiMethodMap.modifier_insertKey (inLexique, operand_11225->mOverridingMultiMethodMethodName COMMA_SOURCE_FILE_AT_LINE (229)) ;
          }
        }
        enumerator_11151.next () ;
      }
    }
    {
      GGS_abstractMultiMethodListMapAST::cEnumerator enumerator_11544 (var_cas_abstractCategoryMethodListMap, true) ;
      while (enumerator_11544.hasCurrentObject ()) {
        {
          GGS_abstracMultiMethodListAST::cEnumerator enumerator_11568 (enumerator_11544._object (HERE), true) ;
          const GGS_abstracMultiMethodListAST::cElement * operand_11568 = NULL ;
          while (((operand_11568 = enumerator_11568.nextObject ()))) {
            macroValidPointer (operand_11568) ;
            ::routine_checkMultiMethodDefinitionForClass (inLexique,  enumerator_11544._key (HERE),  enumerator_11544._key (HERE),  operand_11568->mAbstractMultiMethodName,  var_cas_descendantClassListMap,  var_cas_overridingCategoryMethodListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (237)) ;
          }
        }
        enumerator_11544.next () ;
      }
    }
    GGS_abstractMultiReaderListMapAST var_cas_abstractCategoryReaderListMap = GGS_abstractMultiReaderListMapAST::constructor_emptyMap () ;
    GGS_multiReaderListMapAST var_cas_categoryReaderListMap = GGS_multiReaderListMapAST::constructor_emptyMap () ;
    GGS_overridingMultiReaderListMapAST var_cas_overridingCategoryReaderListMap = GGS_overridingMultiReaderListMapAST::constructor_emptyMap () ;
    {
      GGS_parsedSemanticsComponentMap::cEnumerator enumerator_12251 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (254)), true) ;
      const GGS_parsedSemanticsComponentMap::cElement * operand_12251 = NULL ;
      while (((operand_12251 = enumerator_12251.nextObject ()))) {
        macroValidPointer (operand_12251) ;
        var_cas_abstractCategoryReaderListMap.dotAssign_operation (operand_12251->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (255)).reader_mAbstractCategoryReaderListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (255))) ;
        var_cas_categoryReaderListMap.dotAssign_operation (operand_12251->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (256)).reader_mCategoryReaderListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (256))) ;
        var_cas_overridingCategoryReaderListMap.dotAssign_operation (operand_12251->mInfo.mRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_mOverridingCategoryReaderListMap (inLexique COMMA_SOURCE_FILE_AT_LINE (257))) ;
      }
    }
    {
      GGS_abstractMultiReaderListMapAST::cEnumerator enumerator_12737 (var_cas_abstractCategoryReaderListMap, true) ;
      while (enumerator_12737.hasCurrentObject ()) {
        GGS_multiReaderMap  var_cas_multiReaderMap = GGS_multiReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ;
        {
          GGS_abstractMultiReaderListAST::cEnumerator enumerator_12811 (enumerator_12737._object (HERE), true) ;
          const GGS_abstractMultiReaderListAST::cElement * operand_12811 = NULL ;
          while (((operand_12811 = enumerator_12811.nextObject ()))) {
            macroValidPointer (operand_12811) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_12811->mAbstractMultiReaderName COMMA_SOURCE_FILE_AT_LINE (263)) ;
          }
        }
        enumerator_12737.next () ;
      }
    }
    {
      GGS_multiReaderListMapAST::cEnumerator enumerator_13019 (var_cas_categoryReaderListMap, true) ;
      while (enumerator_13019.hasCurrentObject ()) {
        GGS_multiReaderMap  var_cas_multiReaderMap = GGS_multiReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (268)) ;
        {
          GGS_multiReaderListAST::cEnumerator enumerator_13093 (enumerator_13019._object (HERE), true) ;
          const GGS_multiReaderListAST::cElement * operand_13093 = NULL ;
          while (((operand_13093 = enumerator_13093.nextObject ()))) {
            macroValidPointer (operand_13093) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_13093->mMultiReaderName COMMA_SOURCE_FILE_AT_LINE (270)) ;
          }
        }
        enumerator_13019.next () ;
      }
    }
    {
      GGS_overridingMultiReaderListMapAST::cEnumerator enumerator_13309 (var_cas_overridingCategoryReaderListMap, true) ;
      while (enumerator_13309.hasCurrentObject ()) {
        GGS_multiReaderMap  var_cas_multiReaderMap = GGS_multiReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ;
        {
          GGS_overridingMultiReaderListAST::cEnumerator enumerator_13383 (enumerator_13309._object (HERE), true) ;
          const GGS_overridingMultiReaderListAST::cElement * operand_13383 = NULL ;
          while (((operand_13383 = enumerator_13383.nextObject ()))) {
            macroValidPointer (operand_13383) ;
            var_cas_multiReaderMap.modifier_insertKey (inLexique, operand_13383->mOverridingMultiReaderName COMMA_SOURCE_FILE_AT_LINE (277)) ;
          }
        }
        enumerator_13309.next () ;
      }
    }
    {
      GGS_abstractMultiReaderListMapAST::cEnumerator enumerator_13624 (var_cas_abstractCategoryReaderListMap, true) ;
      while (enumerator_13624.hasCurrentObject ()) {
        {
          GGS_abstractMultiReaderListAST::cEnumerator enumerator_13648 (enumerator_13624._object (HERE), true) ;
          const GGS_abstractMultiReaderListAST::cElement * operand_13648 = NULL ;
          while (((operand_13648 = enumerator_13648.nextObject ()))) {
            macroValidPointer (operand_13648) ;
            ::routine_checkMultiReaderDefinitionForClass (inLexique,  enumerator_13624._key (HERE),  enumerator_13624._key (HERE),  operand_13648->mAbstractMultiReaderName,  var_cas_descendantClassListMap,  var_cas_overridingCategoryReaderListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (283)) ;
          }
        }
        enumerator_13624.next () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectGlobalCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_targetFileListMap ("targetFileListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_stringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_targetFileListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_targetFileListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_targetFileListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
constructor_emptyMap (void) {
  GGS_targetFileListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_targetFileListMap::
_typeNameForDescriptionReader (void) const {
  return "@targetFileListMap" ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::
operator_concat (const GGS_targetFileListMap & inOperand) const {
  GGS_targetFileListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
dotAssign_operation (const GGS_targetFileListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_targetFileListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_string& inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_stringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_listForKey (C_Compiler & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_stringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_targetFileListMap::
reader_allKeys (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_targetFileListMap::
reader_keyList (C_Compiler & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap::cEnumerator::
cEnumerator (const GGS_targetFileListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_stringlist & GGS_targetFileListMap::cEnumerator::
_object (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_targetFileListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_targetFileListMap * p = NULL ;
    macroMyNew (p, GGS_targetFileListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_targetFileListMap GGS_targetFileListMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_targetFileListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_targetFileListMap * p = dynamic_cast <const GGS_targetFileListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_targetFileListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_targetFileListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_targetFileListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_sourceFileMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

e_sourceFileMap::e_sourceFileMap (void) :
mFullPath (),
mSourceKind () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        class map '@sourceFileMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_sourceFileMap ("sourceFileMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_sourceFileMap::
elementOf_GGS_sourceFileMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_sourceFileMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_sourceFileMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFullPath.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mSourceKind.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_sourceFileMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_sourceFileMap * ptr = dynamic_cast <const elementOf_GGS_sourceFileMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFullPath.operator_isEqual (ptr->mInfo.mFullPath)).boolValue ()
           && (mInfo.mSourceKind.operator_isEqual (ptr->mInfo.mSourceKind)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_sourceFileMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_sourceFileMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_sourceFileMap * info = (e_sourceFileMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_sourceFileMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
operator_isEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_sourceFileMap::
operator_isNotEqual (const GGS_sourceFileMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_string& inParameter0,
               const GGS_sourceFileKind& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_sourceFileMap info  ;
    info.mFullPath = inParameter0 ;
    info.mSourceKind = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_string  & outParameter0,
               GGS_sourceFileKind  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFullPath ;
    outParameter1 = node->mInfo.mSourceKind ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_sourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_sourceFileMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_sourceFileMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string& inParameter0,
                                const GGS_sourceFileKind& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_sourceFileMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_sourceFileMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_sourceFileMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_sourceFileMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @sourceFileMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_sourceFileMap::cEnumerator::_mFullPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFullPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_sourceFileKind & GGS_sourceFileMap::cEnumerator::_mSourceKind (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mSourceKind ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_sourceFileMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_sourceFileMap * p = NULL ;
    macroMyNew (p, GGS_sourceFileMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_sourceFileMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_sourceFileMap * p = dynamic_cast <const GGS_sourceFileMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_sourceFileMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_sourceFileMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_sourceFileMap ;
}

//---------------------------------------------------------------------------*

GGS_sourceFileMap GGS_sourceFileMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_string& inValue0,
                                             const GGS_sourceFileKind& inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_sourceFileMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'fileListTemplateFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_fileListTemplateFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_fileListTemplateFileWrapper (
  "",
  0,
  gWrapperAllFiles_fileListTemplateFileWrapper_0,
  0,
  gWrapperAllDirectories_fileListTemplateFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCES_SUB_DIRS.isBuilt ()
    && var_cas_GALGAS_SOURCE_LIST.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Lib PM directory\n"
      "ifdef LIBPM_PATH_ENV_VAR\n"
      "  LIB_PM_PATH := $(LIBPM_PATH_ENV_VAR)\n"
      "  $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (given by LIBPM_PATH_ENV_VAR environment variable))\n"
      "else\n"
      "  ifeq ($(shell if [ -d ../libpm ] ; then echo 1 ; else echo 0 ; fi), 1) \n"
      "    LIB_PM_PATH := ../libpm\n"
      "    $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (libpm found at this path))\n"
      "  else\n"
      "    ifeq ($(shell if [ -d ../../libpm ] ; then echo 1 ; else echo 0 ; fi), 1) \n"
      "      LIB_PM_PATH := ../../libpm\n"
      "      $(info *** LIBPM path:\"$(LIB_PM_PATH)\" (libpm found at this path))\n"
      "    else\n"
      "      $(error Cannot find libpm: neither ../libpm nor ../../libpm exist, LIBPM_PATH_ENV_VAR environment variable does not exist)\n"
      "      LIB_PM_PATH :=\n"
      "    endif\n"
      "  endif\n"
      "endif\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Project source files directories                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
      "SOURCES_DIR += ../galgas_sources/GALGAS_OUTPUT/include-files\n" ;
    result << var_cas_HAND_CODED_SOURCES_SUB_DIRS ;
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Source files names list (without their actual path)       *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES :=\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "include $(LIB_PM_PATH)/galgas/galgas_sources_for_makefile.mke\n"
      "\n"
      "#--- Hand-coded files ---------------------\n" ;
    result << var_cas_HAND_CODED_SOURCE_LIST ;
    result << "\n"
      "\n"
      "#--- Files generated by GALGAS ------------\n" ;
    result << var_cas_GALGAS_SOURCE_LIST ;
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*

