//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'projectGlobalCheckings.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 31th, 2010, at 19h59'19"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "projectGlobalCheckings.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "projectGlobalCheckings.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "grammarLL1grammar.h"
#include "optionLL1grammar.h"
#include "programSLRgrammar.h"
#include "projectLL1grammar.h"
#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_genericCategoryMethodListMap ("genericCategoryMethodListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_genericCategoryMethodListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_lstringlist::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_genericCategoryMethodListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_genericCategoryMethodListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_genericCategoryMethodListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_genericCategoryMethodListMap GGS_genericCategoryMethodListMap::
constructor_emptyMap (void) {
  GGS_genericCategoryMethodListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_genericCategoryMethodListMap::
_typeNameForDescriptionReader (void) const {
  return "@genericCategoryMethodListMap" ;
}

//---------------------------------------------------------------------------*

GGS_genericCategoryMethodListMap GGS_genericCategoryMethodListMap::
operator_concat (const GGS_genericCategoryMethodListMap & inOperand) const {
  GGS_genericCategoryMethodListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_genericCategoryMethodListMap::
dotAssign_operation (const GGS_genericCategoryMethodListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_lstringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_genericCategoryMethodListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_lstring & inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_lstringlist & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstringlist GGS_genericCategoryMethodListMap::
reader_listForKey (C_CompilerEx & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_lstringlist::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_genericCategoryMethodListMap::
reader_allKeys (C_CompilerEx & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_genericCategoryMethodListMap::
reader_keyList (C_CompilerEx & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_genericCategoryMethodListMap::cEnumerator::
cEnumerator (const GGS_genericCategoryMethodListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_lstringlist & GGS_genericCategoryMethodListMap::cEnumerator::
_mList (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_genericCategoryMethodListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_genericCategoryMethodListMap * p = NULL ;
    macroMyNew (p, GGS_genericCategoryMethodListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_genericCategoryMethodListMap GGS_genericCategoryMethodListMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_genericCategoryMethodListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_genericCategoryMethodListMap * p = dynamic_cast <const GGS_genericCategoryMethodListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_genericCategoryMethodListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_genericCategoryMethodListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_genericCategoryMethodListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@semanticDeclarationAST.buildCategoryMethodListMaps'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__buildCategoryMethodListMaps (C_CompilerEx &,
                                const cPtr_semanticDeclarationAST * operand_3675,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3675 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.buildCategoryMethodListMaps'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps> gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps (typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps
findCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps.count ()) {
      result = gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps (superClassPtr) ;
        gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@abstractCategoryMethodAST.buildCategoryMethodListMaps'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryMethodAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryMethodAST * operand_4436,
                                GGS_genericCategoryMethodListMap & var_cas_ioAbstractCategoryMethodListMapAST,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4436 != NULL) {
    var_cas_ioAbstractCategoryMethodListMapAST.addAssign_operation (operand_4436->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83)), operand_4436->mAbstractCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@categoryMethodAST.buildCategoryMethodListMaps'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_categoryMethodAST * operand_5283,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & var_cas_ioCategoryMethodListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5283 != NULL) {
    var_cas_ioCategoryMethodListMap.addAssign_operation (operand_5283->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (101)), operand_5283->mCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingCategoryMethodAST.buildCategoryMethodListMaps' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryMethodAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryMethodAST * operand_6121,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioOverridingCategoryMethodListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6121 != NULL) {
    var_cas_ioOverridingCategoryMethodListMap.addAssign_operation (operand_6121->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), operand_6121->mOverridingCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryMethodAST.buildCategoryMethodListMaps'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryMethodAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryMethodAST * operand_6987,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioOverridingAbstractCategoryMethodListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6987 != NULL) {
    var_cas_ioOverridingAbstractCategoryMethodListMap.addAssign_operation (operand_6987->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)), operand_6987->mOverridingCategoryMethodName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@abstractCategoryReaderAST.buildCategoryMethodListMaps'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractCategoryReaderAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_abstractCategoryReaderAST * operand_7851,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioAbstractCategoryReaderListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7851 != NULL) {
    var_cas_ioAbstractCategoryReaderListMap.addAssign_operation (operand_7851->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (155)), operand_7851->mAbstractCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@categoryReaderAST.buildCategoryMethodListMaps'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryReaderAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_categoryReaderAST * operand_8695,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioCategoryReaderListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8695 != NULL) {
    var_cas_ioCategoryReaderListMap.addAssign_operation (operand_8695->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (173)), operand_8695->mCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingCategoryReaderAST.buildCategoryMethodListMaps' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingCategoryReaderAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_overridingCategoryReaderAST * operand_9533,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioOverridingCategoryReaderListMap,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryReaderListMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9533 != NULL) {
    var_cas_ioOverridingCategoryReaderListMap.addAssign_operation (operand_9533->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191)), operand_9533->mOverridingCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@overridingAbstractCategoryReaderAST.buildCategoryMethodListMaps'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingAbstractCategoryReaderAST__buildCategoryMethodListMaps (C_CompilerEx & inLexique,
                                const cPtr_overridingAbstractCategoryReaderAST * operand_10399,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryMethodListMapAST */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingAbstractCategoryMethodListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioAbstractCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & /* var_cas_ioOverridingCategoryReaderListMap */,
                                GGS_genericCategoryMethodListMap & var_cas_ioOverridingAbstractCategoryReaderListMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10399 != NULL) {
    var_cas_ioOverridingAbstractCategoryReaderListMap.addAssign_operation (operand_10399->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), operand_10399->mAbstractCategoryReaderName) ;
  }
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_descendantClassListMap ("descendantClassListMap", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cElement::cElement (LOCATION_ARGS) :
cPtrListMapObject (THERE),
mListObject (GGS_unifiedTypeMapProxyList::constructor_emptyList ()) {
}

//---------------------------------------------------------------------------*

cPtrObject * GGS_descendantClassListMap::cElement::cloneObject (LOCATION_ARGS) {
  cElement * result = NULL ;
  macroMyNew (result, cElement (THERE)) ;
  result->mListObject = mListObject ;
  return result ;
}

//---------------------------------------------------------------------------*

bool GGS_descendantClassListMap::cElement::isEqual (const cPtrListMapObject * inOperand) const {
  const GGS_bool equal = mListObject.operator_isEqual (((cElement *) inOperand)->mListObject) ;
  return equal.boolValue () ;
}

//---------------------------------------------------------------------------*

C_String GGS_descendantClassListMap::cElement::
performDescription (const PMSInt32 inIndentation) const {
  const GGS_string s = mListObject.reader_description (inIndentation) ;
  return s.string () ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
constructor_emptyMap (void) {
  GGS_descendantClassListMap result ;
  result.alloc (HERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_descendantClassListMap::
_typeNameForDescriptionReader (void) const {
  return "@descendantClassListMap" ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::
operator_concat (const GGS_descendantClassListMap & inOperand) const {
  GGS_descendantClassListMap result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
dotAssign_operation (const GGS_descendantClassListMap inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count (HERE) == 0) {
      * this = inOperand ;
    }else if (inOperand.count (HERE) > 0) {
      cPtrDictionary * dictPtr = macroPtr (inOperand, cPtrDictionary)  ;
      cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
      const PMSInt32 objectCount = dictPtr->count () ;
      for (PMSInt32 i=0 ; i<objectCount ; i++) {
        const GGS_string key = nodeSortedArray [i].key () ;
        const PM_C_Object object = nodeSortedArray [i].mObject ;
        cElement * elementPtr = macroPtr (object, cElement) ;
        bool wasInserted = false ;
        cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (key, wasInserted) ;
        if (wasInserted) {
           cElement * p = NULL ;
           macroMyNew (p, cElement (HERE)) ;
           nodePtr->mObject.setPointer (p) ;
        }
        GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
        listPtr.dotAssign_operation (elementPtr->mListObject) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_descendantClassListMap::
addAssign_operation (const GGS_string & inKey,
                      const GGS_unifiedTypeMapProxy & inAttribute0) {
  if (isBuilt () && inKey.isBuilt () && inAttribute0.isBuilt ()) {
    bool wasInserted = false ;
    cPtrDictionaryNode * nodePtr = findOrAddNodeForKey (inKey, wasInserted) ;
    MF_Assert (nodePtr != NULL, "NULL pointer (was inserted %d)", wasInserted, 0) ;
    if (wasInserted) {
       cElement * p = NULL ;
       macroMyNew (p, cElement (HERE)) ;
       nodePtr->mObject.setPointer (p) ;
    }
    GGS_unifiedTypeMapProxyList & listPtr = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    listPtr.addAssign_operation (inAttribute0) ;
  }
}

//---------------------------------------------------------------------------*

GGS_unifiedTypeMapProxyList GGS_descendantClassListMap::
reader_listForKey (C_CompilerEx & /* inLexique */,
                   const GGS_string & inKey
                   COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_unifiedTypeMapProxyList result ;
  if (isBuilt () && inKey.isBuilt ()) {
    cPtrDictionaryNode * nodePtr = dictionaryNodeForKey (inKey.string ()) ; 
    if (nodePtr == NULL) {
      result = GGS_unifiedTypeMapProxyList::constructor_emptyList () ;
    }else{
      result = macroPtr (nodePtr->mObject, cElement)->mListObject ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_descendantClassListMap::
reader_allKeys (C_CompilerEx & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringset result ;
  result.setPointer (_pointer ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringlist GGS_descendantClassListMap::
reader_keyList (C_CompilerEx & /* inLexique */
                COMMA_UNUSED_LOCATION_ARGS) const {

  GGS_stringlist result ;
  if (isBuilt ()) {
    result = GGS_stringlist::constructor_emptyList () ;
    cPtrDictionary * dictPtr = macroPtr (*this, cPtrDictionary)  ;
    cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
    const PMSInt32 objectCount = dictPtr->count () ;
    for (PMSInt32 i=0 ; i<objectCount ; i++) {
      const GGS_string key = nodeSortedArray [i].key () ;
      result.addAssign_operation (key) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap::cEnumerator::
cEnumerator (const GGS_descendantClassListMap & inListMap,
             const bool inAscending) :
cAbstractDictionaryEnumerator (inListMap, inAscending) {
}

//---------------------------------------------------------------------------*

const GGS_unifiedTypeMapProxyList & GGS_descendantClassListMap::cEnumerator::
_mList (LOCATION_ARGS) const {
  cPtrDictionary * dictPtr = macroPtr (mEnumeratedDictionary, cPtrDictionary)  ;
  MF_AssertThere (currentIndex () >= 0, "Access with negative index %d", currentIndex (), 0) ;
  MF_AssertThere (currentIndex () < dictPtr->count (), "Access with index %d >= count %d", currentIndex (), dictPtr->count ()) ;
  cPtrDictionaryNode * nodeSortedArray = dictPtr->nodeSortedArray () ;
  PM_C_Object listObject = nodeSortedArray [currentIndex ()].mObject ;
  cElement * objectPtr = macroPtr (listObject, cElement) ;
  return objectPtr->mListObject ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_descendantClassListMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_descendantClassListMap * p = NULL ;
    macroMyNew (p, GGS_descendantClassListMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_descendantClassListMap GGS_descendantClassListMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_descendantClassListMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_descendantClassListMap * p = dynamic_cast <const GGS_descendantClassListMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_descendantClassListMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_descendantClassListMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_descendantClassListMap ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             class map '@categoryMethodMapForGlobalCheckings'              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_categoryMethodMapForGlobalCheckings ("categoryMethodMapForGlobalCheckings", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_categoryMethodMapForGlobalCheckings::
elementOf_GGS_categoryMethodMapForGlobalCheckings (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_categoryMethodMapForGlobalCheckings & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_categoryMethodMapForGlobalCheckings::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_categoryMethodMapForGlobalCheckings::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_categoryMethodMapForGlobalCheckings::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_categoryMethodMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_categoryMethodMapForGlobalCheckings * info = (e_categoryMethodMapForGlobalCheckings *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_categoryMethodMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_categoryMethodMapForGlobalCheckings * info = (e_categoryMethodMapForGlobalCheckings *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_categoryMethodMapForGlobalCheckings GGS_categoryMethodMapForGlobalCheckings::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_categoryMethodMapForGlobalCheckings result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_categoryMethodMapForGlobalCheckings info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_categoryMethodMapForGlobalCheckings info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_categoryMethodMapForGlobalCheckings::
operator_isEqual (const GGS_categoryMethodMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_categoryMethodMapForGlobalCheckings::
operator_isNotEqual (const GGS_categoryMethodMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_categoryMethodMapForGlobalCheckings info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_categoryMethodMapForGlobalCheckings::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_categoryMethodMapForGlobalCheckings::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_categoryMethodMapForGlobalCheckings GGS_categoryMethodMapForGlobalCheckings::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_categoryMethodMapForGlobalCheckings & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_categoryMethodMapForGlobalCheckings result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_categoryMethodMapForGlobalCheckings GGS_categoryMethodMapForGlobalCheckings::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_categoryMethodMapForGlobalCheckings result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_categoryMethodMapForGlobalCheckings::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @categoryMethodMapForGlobalCheckings " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_categoryMethodMapForGlobalCheckings::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_categoryMethodMapForGlobalCheckings * p = NULL ;
    macroMyNew (p, GGS_categoryMethodMapForGlobalCheckings (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_categoryMethodMapForGlobalCheckings GGS_categoryMethodMapForGlobalCheckings::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_categoryMethodMapForGlobalCheckings result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_categoryMethodMapForGlobalCheckings * p = dynamic_cast <const GGS_categoryMethodMapForGlobalCheckings *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_categoryMethodMapForGlobalCheckings, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_categoryMethodMapForGlobalCheckings::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_categoryMethodMapForGlobalCheckings ;
}

//---------------------------------------------------------------------------*

GGS_categoryMethodMapForGlobalCheckings GGS_categoryMethodMapForGlobalCheckings::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_categoryMethodMapForGlobalCheckings result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             class map '@categoryReaderMapForGlobalCheckings'              *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_categoryReaderMapForGlobalCheckings ("categoryReaderMapForGlobalCheckings", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_categoryReaderMapForGlobalCheckings::
elementOf_GGS_categoryReaderMapForGlobalCheckings (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_categoryReaderMapForGlobalCheckings & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_categoryReaderMapForGlobalCheckings::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_categoryReaderMapForGlobalCheckings::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_categoryReaderMapForGlobalCheckings::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_categoryReaderMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_categoryReaderMapForGlobalCheckings * info = (e_categoryReaderMapForGlobalCheckings *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_categoryReaderMapForGlobalCheckings *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_categoryReaderMapForGlobalCheckings * info = (e_categoryReaderMapForGlobalCheckings *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_categoryReaderMapForGlobalCheckings GGS_categoryReaderMapForGlobalCheckings::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_categoryReaderMapForGlobalCheckings result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_categoryReaderMapForGlobalCheckings info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_categoryReaderMapForGlobalCheckings info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_categoryReaderMapForGlobalCheckings::
operator_isEqual (const GGS_categoryReaderMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_categoryReaderMapForGlobalCheckings::
operator_isNotEqual (const GGS_categoryReaderMapForGlobalCheckings & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_categoryReaderMapForGlobalCheckings info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_categoryReaderMapForGlobalCheckings::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_categoryReaderMapForGlobalCheckings::
modifier_insertKey (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_categoryReaderMapForGlobalCheckings GGS_categoryReaderMapForGlobalCheckings::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_categoryReaderMapForGlobalCheckings & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_categoryReaderMapForGlobalCheckings result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_categoryReaderMapForGlobalCheckings GGS_categoryReaderMapForGlobalCheckings::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_categoryReaderMapForGlobalCheckings result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_categoryReaderMapForGlobalCheckings::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @categoryReaderMapForGlobalCheckings " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_categoryReaderMapForGlobalCheckings::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_categoryReaderMapForGlobalCheckings * p = NULL ;
    macroMyNew (p, GGS_categoryReaderMapForGlobalCheckings (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_categoryReaderMapForGlobalCheckings GGS_categoryReaderMapForGlobalCheckings::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_categoryReaderMapForGlobalCheckings result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_categoryReaderMapForGlobalCheckings * p = dynamic_cast <const GGS_categoryReaderMapForGlobalCheckings *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_categoryReaderMapForGlobalCheckings, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_categoryReaderMapForGlobalCheckings::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_categoryReaderMapForGlobalCheckings ;
}

//---------------------------------------------------------------------------*

GGS_categoryReaderMapForGlobalCheckings GGS_categoryReaderMapForGlobalCheckings::constructor_mapWithKeyAndValue (C_CompilerEx & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_categoryReaderMapForGlobalCheckings result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "outputDirectory"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_outputDirectory (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inSourceFile COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_outputDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outOuputDirectory ;
  const GGS_bool cond_13112 = (var_cas_inSourceFile.ggs_string ().reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (251))).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_13112.isBuiltAndTrue ()) {
    var_cas_outOuputDirectory = var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () ;
    var_cas_outOuputDirectory.appendCString ("/GALGAS_OUTPUT") ;
  }else if (cond_13112.isBuiltAndFalse ()) {
    var_cas_outOuputDirectory = GGS_string ("GALGAS_OUTPUT") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_outputDirectory\n") ;
  #endif
  return var_cas_outOuputDirectory ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_outputDirectory (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_outputDirectory (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_outputDirectory [1] = {& kTypeDescriptor_GGS_lstring } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_outputDirectory ("outputDirectory",
                              functionForGenericCall_outputDirectory,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_outputDirectory) ;

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkCategoryMethodDefinitionForClass"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCategoryMethodDefinitionForClass (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractCategoryMethodName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_genericCategoryMethodListMap  var_cas_inOverridingCategoryMethodListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCategoryMethodDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (269)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_13709 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_13709 = NULL ;
    while (((operand_13709 = enumerator_13709.nextObject ()))) {
      macroValidPointer (operand_13709) ;
      const GGS_lstring  var_cas_descendantClassName = operand_13709->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
      GGS_lstringlist  var_cas_overridingMethods = var_cas_inOverridingCategoryMethodListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272)) COMMA_SOURCE_FILE_AT_LINE (272)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_13943 (var_cas_overridingMethods, true) ;
        const GGS_lstringlist::cElement * operand_13943 = NULL ;
        while (((operand_13943 = enumerator_13943.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_13943) ;
          var_cas_found = (var_cas_inAbstractCategoryMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (275))).operator_isEqual (operand_13943->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (275))) ;
        }
      }
      const GGS_bool cond_14988 = (var_cas_found).operator_not () ;
      if (cond_14988.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_14174_0 ;
        GGS_typeKindEnum automatic_var_14174_1 ;
        GGS_typedAttributeList  automatic_var_14174_2 ;
        GGS_attributeMap  automatic_var_14174_3 ;
        GGS_typedAttributeList  automatic_var_14174_4 ;
        GGS_constructorMap  automatic_var_14174_5 ;
        GGS_readerMap  automatic_var_14174_6 ;
        GGS_modifierMap  automatic_var_14174_7 ;
        GGS_instanceMethodMap  automatic_var_14174_8 ;
        GGS_classMethodMap  automatic_var_14174_9 ;
        GGS_enumerationDescriptorList  automatic_var_14174_10 ;
        GGS_uint  automatic_var_14174_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_14174_12 ;
        GGS_nativeAttributeList  automatic_var_14174_13 ;
        GGS_stringset  automatic_var_14174_14 ;
        GGS_lstringlist  automatic_var_14174_15 ;
        GGS_typedAttributeList  automatic_var_14174_16 ;
        GGS_mapSearchMethodListAST  automatic_var_14174_17 ;
        GGS_mapSearchMethodListAST  automatic_var_14174_18 ;
        GGS_withAccessorMap  automatic_var_14174_19 ;
        GGS_bool automatic_var_14174_20 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_14174_0, automatic_var_14174_1, automatic_var_14174_2, automatic_var_14174_3, automatic_var_14174_4, automatic_var_14174_5, automatic_var_14174_6, automatic_var_14174_7, automatic_var_14174_8, automatic_var_14174_9, automatic_var_14174_10, automatic_var_14174_11, automatic_var_14174_12, automatic_var_14174_13, automatic_var_14174_14, automatic_var_14174_15, automatic_var_14174_16, automatic_var_14174_17, automatic_var_14174_18, automatic_var_14174_19, automatic_var_14174_20 COMMA_SOURCE_FILE_AT_LINE (279)) ;
        }
        const GGS_bool cond_14670 = (var_cas_isConcrete).operator_not () ;
        if (cond_14670.isBuiltAndTrue ()) {
          ::routine_checkCategoryMethodDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (284)),  var_cas_inAbstractCategoryMethodName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingCategoryMethodListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (282)) ;
        }else if (cond_14670.isBuiltAndFalse ()) {
          var_cas_inAbstractCategoryMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract category method '")).operator_concat (var_cas_inAbstractCategoryMethodName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this method")) COMMA_SOURCE_FILE_AT_LINE (294)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCategoryMethodDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkCategoryReaderDefinitionForClass"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCategoryReaderDefinitionForClass (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inClassNameForErrorSignaling,
                                const GGS_string  var_cas_inClassName,
                                const GGS_lstring   var_cas_inAbstractCategoryReaderName,
                                const GGS_descendantClassListMap  var_cas_inDescendantClassListMap,
                                const GGS_genericCategoryMethodListMap  var_cas_inOverridingCategoryReaderListMap,
                                const GGS_unifiedTypeMap   var_cas_inUnifiedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkCategoryReaderDefinitionForClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_unifiedTypeMapProxyList  var_cas_descendantClasses = var_cas_inDescendantClassListMap.reader_listForKey (inLexique, var_cas_inClassName COMMA_SOURCE_FILE_AT_LINE (309)) ;
  {
    GGS_unifiedTypeMapProxyList::cEnumerator enumerator_15551 (var_cas_descendantClasses, true) ;
    const GGS_unifiedTypeMapProxyList::cElement * operand_15551 = NULL ;
    while (((operand_15551 = enumerator_15551.nextObject ()))) {
      macroValidPointer (operand_15551) ;
      GGS_lstring  var_cas_descendantClassName = operand_15551->mType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (311)) ;
      GGS_lstringlist  var_cas_overridingReaders = var_cas_inOverridingCategoryReaderListMap.reader_listForKey (inLexique, var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (312)) COMMA_SOURCE_FILE_AT_LINE (312)) ;
      GGS_bool var_cas_found = GGS_bool (false) ;
      {
        GGS_lstringlist::cEnumerator enumerator_15779 (var_cas_overridingReaders, true) ;
        const GGS_lstringlist::cElement * operand_15779 = NULL ;
        while (((operand_15779 = enumerator_15779.nextObject ()))
            && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
          macroValidPointer (operand_15779) ;
          var_cas_found = (var_cas_inAbstractCategoryReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (315))).operator_isEqual (operand_15779->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (315))) ;
        }
      }
      const GGS_bool cond_16824 = (var_cas_found).operator_not () ;
      if (cond_16824.isBuiltAndTrue ()) {
        GGS_bool var_cas_isConcrete ;
        GGS_unifiedTypeMapProxy  automatic_var_16010_0 ;
        GGS_typeKindEnum automatic_var_16010_1 ;
        GGS_typedAttributeList  automatic_var_16010_2 ;
        GGS_attributeMap  automatic_var_16010_3 ;
        GGS_typedAttributeList  automatic_var_16010_4 ;
        GGS_constructorMap  automatic_var_16010_5 ;
        GGS_readerMap  automatic_var_16010_6 ;
        GGS_modifierMap  automatic_var_16010_7 ;
        GGS_instanceMethodMap  automatic_var_16010_8 ;
        GGS_classMethodMap  automatic_var_16010_9 ;
        GGS_enumerationDescriptorList  automatic_var_16010_10 ;
        GGS_uint  automatic_var_16010_11 ;
        GGS_unifiedTypeMapProxyList  automatic_var_16010_12 ;
        GGS_nativeAttributeList  automatic_var_16010_13 ;
        GGS_stringset  automatic_var_16010_14 ;
        GGS_lstringlist  automatic_var_16010_15 ;
        GGS_typedAttributeList  automatic_var_16010_16 ;
        GGS_mapSearchMethodListAST  automatic_var_16010_17 ;
        GGS_mapSearchMethodListAST  automatic_var_16010_18 ;
        GGS_withAccessorMap  automatic_var_16010_19 ;
        GGS_bool automatic_var_16010_20 ;
        if (var_cas_inUnifiedTypeMap.isBuilt ()) {
          var_cas_inUnifiedTypeMap (HERE)->method_searchKey (inLexique, var_cas_descendantClassName, var_cas_isConcrete, automatic_var_16010_0, automatic_var_16010_1, automatic_var_16010_2, automatic_var_16010_3, automatic_var_16010_4, automatic_var_16010_5, automatic_var_16010_6, automatic_var_16010_7, automatic_var_16010_8, automatic_var_16010_9, automatic_var_16010_10, automatic_var_16010_11, automatic_var_16010_12, automatic_var_16010_13, automatic_var_16010_14, automatic_var_16010_15, automatic_var_16010_16, automatic_var_16010_17, automatic_var_16010_18, automatic_var_16010_19, automatic_var_16010_20 COMMA_SOURCE_FILE_AT_LINE (319)) ;
        }
        const GGS_bool cond_16506 = (var_cas_isConcrete).operator_not () ;
        if (cond_16506.isBuiltAndTrue ()) {
          ::routine_checkCategoryReaderDefinitionForClass (inLexique,  var_cas_inClassNameForErrorSignaling,  var_cas_descendantClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (324)),  var_cas_inAbstractCategoryReaderName,  var_cas_inDescendantClassListMap,  var_cas_inOverridingCategoryReaderListMap,  var_cas_inUnifiedTypeMap COMMA_SOURCE_FILE_AT_LINE (322)) ;
        }else if (cond_16506.isBuiltAndFalse ()) {
          var_cas_inAbstractCategoryReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("an abstract category reader '")).operator_concat (var_cas_inAbstractCategoryReaderName)).operator_concat (GGS_string ("' is defined for abstract class '@"))).operator_concat (var_cas_inClassNameForErrorSignaling)).operator_concat (GGS_string ("', but concrete descendant class '@"))).operator_concat (var_cas_descendantClassName)).operator_concat (GGS_string ("' does not implement this reader")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkCategoryReaderDefinitionForClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "performProjectGlobalCheckings"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_CompilerEx & inLexique,
                                const GGS_parsedComponentStruct  var_cas_inParsedComponentStruct,
                                const GGS_location   var_cas_inEndOfSourceFile
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performProjectGlobalCheckings at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationList COMMA_SOURCE_FILE_AT_LINE (347)) ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_17285 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (349)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_17285 = NULL ;
    while (((operand_17285 = enumerator_17285.nextObject ()))) {
      macroValidPointer (operand_17285) ;
      var_cas_semanticDeclarationList.dotAssign_operation (operand_17285->mInfo.mRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (350))) ;
    }
  }
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  GGS_string (""),  var_cas_semanticDeclarationList,  var_cas_inEndOfSourceFile,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (354)) ;
  GGS_descendantClassListMap var_cas_descendantClassListMap = GGS_descendantClassListMap::constructor_emptyMap () ;
  {
    GGS_unifiedTypeMap::cEnumerator enumerator_17792 (var_cas_semanticContext.mTypeMap, true) ;
    const GGS_unifiedTypeMap::cElement * operand_17792 = NULL ;
    while (((operand_17792 = enumerator_17792.nextObject ()))) {
      macroValidPointer (operand_17792) ;
      const GGS_bool cond_17996 = (operand_17792->mInfo.mSuperType.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (364))).operator_not () ;
      if (cond_17996.isBuiltAndTrue ()) {
        var_cas_descendantClassListMap.addAssign_operation (operand_17792->mInfo.mSuperType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (366)), GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_semanticContext.mTypeMap, operand_17792->mKey COMMA_SOURCE_FILE_AT_LINE (367))) ;
      }
    }
  }
  GGS_genericCategoryMethodListMap var_cas_abstractCategoryMethodListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_categoryMethodListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_overridingCategoryMethodListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_overridingAbstractCategoryMethodListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_abstractCategoryReaderListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_categoryReaderListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_overridingCategoryReaderListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  GGS_genericCategoryMethodListMap var_cas_overridingAbstractCategoryReaderListMap = GGS_genericCategoryMethodListMap::constructor_emptyMap () ;
  {
    GGS_parsedSemanticsComponentMap::cEnumerator enumerator_18670 (var_cas_inParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (380)), true) ;
    const GGS_parsedSemanticsComponentMap::cElement * operand_18670 = NULL ;
    while (((operand_18670 = enumerator_18670.nextObject ()))) {
      macroValidPointer (operand_18670) ;
      {
        GGS_semanticDeclarationListAST::cEnumerator enumerator_18740 (operand_18670->mInfo.mRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (381)), true) ;
        const GGS_semanticDeclarationListAST::cElement * operand_18740 = NULL ;
        while (((operand_18740 = enumerator_18740.nextObject ()))) {
          macroValidPointer (operand_18740) ;
          { typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps method = findCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps (operand_18740->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_18740->mSemanticDeclaration (HERE), var_cas_abstractCategoryMethodListMap, var_cas_categoryMethodListMap, var_cas_overridingCategoryMethodListMap, var_cas_overridingAbstractCategoryMethodListMap, var_cas_abstractCategoryReaderListMap, var_cas_categoryReaderListMap, var_cas_overridingCategoryReaderListMap, var_cas_overridingAbstractCategoryReaderListMap COMMA_SOURCE_FILE_AT_LINE (382)) ;
            }
          }
        }
      }
    }
  }
  const GGS_bool cond_23305 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (395))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_23305.isBuiltAndTrue ()) {
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_19382 (var_cas_abstractCategoryMethodListMap, true) ;
      while (enumerator_19382.hasCurrentObject ()) {
        GGS_categoryMethodMapForGlobalCheckings  var_cas_categoryMethodMap = GGS_categoryMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (398)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_19479 (enumerator_19382._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_19479 = NULL ;
          while (((operand_19479 = enumerator_19479.nextObject ()))) {
            macroValidPointer (operand_19479) ;
            var_cas_categoryMethodMap.modifier_insertKey (inLexique, operand_19479->mValue COMMA_SOURCE_FILE_AT_LINE (400)) ;
          }
        }
        enumerator_19382.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_19675 (var_cas_categoryMethodListMap, true) ;
      while (enumerator_19675.hasCurrentObject ()) {
        GGS_categoryMethodMapForGlobalCheckings  var_cas_categoryMethodMap = GGS_categoryMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_19772 (enumerator_19675._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_19772 = NULL ;
          while (((operand_19772 = enumerator_19772.nextObject ()))) {
            macroValidPointer (operand_19772) ;
            var_cas_categoryMethodMap.modifier_insertKey (inLexique, operand_19772->mValue COMMA_SOURCE_FILE_AT_LINE (407)) ;
          }
        }
        enumerator_19675.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_19984 (var_cas_overridingCategoryMethodListMap, true) ;
      while (enumerator_19984.hasCurrentObject ()) {
        GGS_categoryMethodMapForGlobalCheckings  var_cas_categoryMethodMap = GGS_categoryMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (412)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_20081 (enumerator_19984._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_20081 = NULL ;
          while (((operand_20081 = enumerator_20081.nextObject ()))) {
            macroValidPointer (operand_20081) ;
            var_cas_categoryMethodMap.modifier_insertKey (inLexique, operand_20081->mValue COMMA_SOURCE_FILE_AT_LINE (414)) ;
          }
        }
        enumerator_19984.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_20310 (var_cas_overridingAbstractCategoryMethodListMap, true) ;
      while (enumerator_20310.hasCurrentObject ()) {
        GGS_categoryMethodMapForGlobalCheckings  var_cas_categoryMethodMap = GGS_categoryMethodMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (419)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_20407 (enumerator_20310._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_20407 = NULL ;
          while (((operand_20407 = enumerator_20407.nextObject ()))) {
            macroValidPointer (operand_20407) ;
            var_cas_categoryMethodMap.modifier_insertKey (inLexique, operand_20407->mValue COMMA_SOURCE_FILE_AT_LINE (421)) ;
          }
        }
        enumerator_20310.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_20661 (var_cas_abstractCategoryMethodListMap, true) ;
      while (enumerator_20661.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_20684 (enumerator_20661._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_20684 = NULL ;
          while (((operand_20684 = enumerator_20684.nextObject ()))) {
            macroValidPointer (operand_20684) ;
            ::routine_checkCategoryMethodDefinitionForClass (inLexique,  enumerator_20661._key (HERE),  enumerator_20661._key (HERE),  operand_20684->mValue,  var_cas_descendantClassListMap,  var_cas_overridingCategoryMethodListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (427)) ;
          }
        }
        enumerator_20661.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_21114 (var_cas_overridingAbstractCategoryMethodListMap, true) ;
      while (enumerator_21114.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_21137 (enumerator_21114._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_21137 = NULL ;
          while (((operand_21137 = enumerator_21137.nextObject ()))) {
            macroValidPointer (operand_21137) ;
            ::routine_checkCategoryMethodDefinitionForClass (inLexique,  enumerator_21114._key (HERE),  enumerator_21114._key (HERE),  operand_21137->mValue,  var_cas_descendantClassListMap,  var_cas_overridingCategoryMethodListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (440)) ;
          }
        }
        enumerator_21114.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_21665 (var_cas_abstractCategoryReaderListMap, true) ;
      while (enumerator_21665.hasCurrentObject ()) {
        GGS_categoryReaderMapForGlobalCheckings  var_cas_CategoryReaderMap = GGS_categoryReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (455)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_21762 (enumerator_21665._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_21762 = NULL ;
          while (((operand_21762 = enumerator_21762.nextObject ()))) {
            macroValidPointer (operand_21762) ;
            var_cas_CategoryReaderMap.modifier_insertKey (inLexique, operand_21762->mValue COMMA_SOURCE_FILE_AT_LINE (457)) ;
          }
        }
        enumerator_21665.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_21958 (var_cas_categoryReaderListMap, true) ;
      while (enumerator_21958.hasCurrentObject ()) {
        GGS_categoryReaderMapForGlobalCheckings  var_cas_CategoryReaderMap = GGS_categoryReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (462)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_22055 (enumerator_21958._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_22055 = NULL ;
          while (((operand_22055 = enumerator_22055.nextObject ()))) {
            macroValidPointer (operand_22055) ;
            var_cas_CategoryReaderMap.modifier_insertKey (inLexique, operand_22055->mValue COMMA_SOURCE_FILE_AT_LINE (464)) ;
          }
        }
        enumerator_21958.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_22267 (var_cas_overridingCategoryReaderListMap, true) ;
      while (enumerator_22267.hasCurrentObject ()) {
        GGS_categoryReaderMapForGlobalCheckings  var_cas_CategoryReaderMap = GGS_categoryReaderMapForGlobalCheckings ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (469)) ;
        {
          GGS_lstringlist::cEnumerator enumerator_22364 (enumerator_22267._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_22364 = NULL ;
          while (((operand_22364 = enumerator_22364.nextObject ()))) {
            macroValidPointer (operand_22364) ;
            var_cas_CategoryReaderMap.modifier_insertKey (inLexique, operand_22364->mValue COMMA_SOURCE_FILE_AT_LINE (471)) ;
          }
        }
        enumerator_22267.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_22591 (var_cas_abstractCategoryReaderListMap, true) ;
      while (enumerator_22591.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_22614 (enumerator_22591._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_22614 = NULL ;
          while (((operand_22614 = enumerator_22614.nextObject ()))) {
            macroValidPointer (operand_22614) ;
            ::routine_checkCategoryReaderDefinitionForClass (inLexique,  enumerator_22591._key (HERE),  enumerator_22591._key (HERE),  operand_22614->mValue,  var_cas_descendantClassListMap,  var_cas_overridingCategoryReaderListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (477)) ;
          }
        }
        enumerator_22591.next () ;
      }
    }
    {
      GGS_genericCategoryMethodListMap::cEnumerator enumerator_23017 (var_cas_overridingAbstractCategoryReaderListMap, true) ;
      while (enumerator_23017.hasCurrentObject ()) {
        {
          GGS_lstringlist::cEnumerator enumerator_23040 (enumerator_23017._mList (HERE), true) ;
          const GGS_lstringlist::cElement * operand_23040 = NULL ;
          while (((operand_23040 = enumerator_23040.nextObject ()))) {
            macroValidPointer (operand_23040) ;
            ::routine_checkCategoryReaderDefinitionForClass (inLexique,  enumerator_23017._key (HERE),  enumerator_23017._key (HERE),  operand_23040->mValue,  var_cas_descendantClassListMap,  var_cas_overridingCategoryReaderListMap,  var_cas_semanticContext.mTypeMap COMMA_SOURCE_FILE_AT_LINE (490)) ;
          }
        }
        enumerator_23017.next () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performProjectGlobalCheckings\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_projectGlobalCheckings (void) {
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps (category_method__semanticDeclarationAST__buildCategoryMethodListMaps, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__abstractCategoryMethodAST__buildCategoryMethodListMaps, gClassInfoFor__abstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__categoryMethodAST__buildCategoryMethodListMaps, gClassInfoFor__categoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__overridingCategoryMethodAST__buildCategoryMethodListMaps, gClassInfoFor__overridingCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__overridingAbstractCategoryMethodAST__buildCategoryMethodListMaps, gClassInfoFor__overridingAbstractCategoryMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__abstractCategoryReaderAST__buildCategoryMethodListMaps, gClassInfoFor__abstractCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__categoryReaderAST__buildCategoryMethodListMaps, gClassInfoFor__categoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__overridingCategoryReaderAST__buildCategoryMethodListMaps, gClassInfoFor__overridingCategoryReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps ((typeCategoryMethod__semanticDeclarationAST__buildCategoryMethodListMaps) category_method__overridingAbstractCategoryReaderAST__buildCategoryMethodListMaps, gClassInfoFor__overridingAbstractCategoryReaderAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_projectGlobalCheckings (void) {
  gDispatchTableForMethod__semanticDeclarationAST__buildCategoryMethodListMaps.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_projectGlobalCheckings (prologueRoutineFor_projectGlobalCheckings, epilogueRoutineFor_projectGlobalCheckings) ;

//---------------------------------------------------------------------------*

