//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'predefinedLexicalActions.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 8th, 2009, at 19h42'0"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "predefinedLexicalActions.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "predefinedLexicalActions.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "buildLexicalRoutineMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalRoutineMap (C_Compiler & inLexique,
                                GGS_lexicalRoutineMap  & var_cas_outLexicalRoutineMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalRoutineMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalRoutineMap = GGS_lexicalRoutineMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lexicalRoutineFormalArgumentList  var_cas_mLexicalRoutineFormalArgumentList ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  GGS_stringlist  var_cas_mErrorMessageList ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("ioASCIICharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorNotHexDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (38)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("ioASCIICharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inErrorNotDecimalDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (51)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("ioString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoString"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (62)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_HERE), GGS_string ("ioDouble")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inConversionError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertStringToDouble"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (74)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("ioCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoCharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (85)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE), GGS_string ("ioNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (96)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE), GGS_string ("ioNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (107)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUIntToSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUInt64ToSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (144)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (157)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (170)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (183)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (196)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (209)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (222)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (235)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (248)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (261)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (274)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (287)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (299)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (311)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (324)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_HERE), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (337)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (350)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_HERE), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt64"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_HERE), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("ioUnicodeCharacter")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inUnassignedUnicodeValueError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUnsignedNumberToUnicodeChar"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("ioUnicodeCharacter")) ;
  var_cas_mErrorMessageList._addAssign_operation (GGS_string ("inUnassignedHTMLSequenceError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHTMLSequenceToUnicodeCharacter"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (387)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("inCodePointString")) ;
  var_cas_mLexicalRoutineFormalArgumentList._addAssign_operation (GGS_lexicalArgumentMode::constructor_lexicalInputOutputMode (inLexique COMMA_HERE), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_HERE), GGS_string ("ioString")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("codePointToUnicode"), GGS_location (inLexique) COMMA_HERE), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (398)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalRoutineMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "buildLexicalFunctionMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalFunctionMap (C_Compiler & inLexique,
                                GGS_lexicalFunctionMap  & var_cas_outLexicalFunctionMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalFunctionMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalFunctionMap = GGS_lexicalFunctionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalTypeList ;
  var_cas_lexicalTypeList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
  var_cas_lexicalTypeList._addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toLower"), GGS_location (inLexique) COMMA_HERE), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (415)) ;
  var_cas_lexicalTypeList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
  var_cas_lexicalTypeList._addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("inCharacter")) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toUpper"), GGS_location (inLexique) COMMA_HERE), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_HERE), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (424)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalFunctionMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "printPredefinedLexicalActions"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_printPredefinedLexicalActions (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_printPredefinedLexicalActions at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (439)) ;
  GGS_string var_cas_s ;
  var_cas_s = GGS_string ("") ;
  var_cas_s.appendCString ("**************** Prefined lexical routines  ****************\n") ;
  {
    GGS_lexicalRoutineMap::cEnumerator enumerator_24045 (var_cas_lexicalRoutineMap, true) ;
    const GGS_lexicalRoutineMap::cElement * operand_24045 = NULL ;
    while (((operand_24045 = enumerator_24045.nextObject ()))) {
      macroValidPointer (operand_24045) ;
      var_cas_s.dotAssign_operation (operand_24045->mKey.ggs_string ()) ;
      {
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_24109 (operand_24045->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_24109 = NULL ;
        while (((operand_24109 = enumerator_24109.nextObject ()))) {
          macroValidPointer (operand_24109) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_24109->mLexicalFormalArgumentMode.reader_lexicalFormalModeName (inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
          var_cas_s.dotAssign_operation (operand_24109->mLexicalFormalArgumentType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_24109->mArgumentNameForComment) ;
        }
      }
      {
        GGS_stringlist::cEnumerator enumerator_24309 (operand_24045->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_24309 = enumerator_24309.nextObject () ;
        if ((operand_24309 != NULL)) {
          var_cas_s.appendCString (" error") ;
          bool _foreach_loop_24309 ;
          do{
            macroValidPointer (operand_24309) ;
            var_cas_s.appendCString (" ") ;
            var_cas_s.dotAssign_operation (operand_24309->mValue) ;
            operand_24309 = enumerator_24309.nextObject () ;
            _foreach_loop_24309 = ((operand_24309 != NULL)) ;
            if (_foreach_loop_24309) {
              var_cas_s.appendCString (",") ;
            }
          }while (_foreach_loop_24309) ;
        }
      }
      var_cas_s.appendCString (" ;\n") ;
      if (((operand_24045->mInfo.mReplacementRoutineName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_s.appendCString ("Note: the '") ;
        var_cas_s.dotAssign_operation (operand_24045->mKey) ;
        var_cas_s.appendCString ("' routine is obsolete: use '") ;
        var_cas_s.dotAssign_operation (operand_24045->mInfo.mReplacementRoutineName) ;
        var_cas_s.appendCString ("' routine.\n") ;
      }
      var_cas_s.appendCString ("\n") ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (461)) ;
  var_cas_s.appendCString ("**************** Prefined lexical functions ****************\n") ;
  {
    GGS_lexicalFunctionMap::cEnumerator enumerator_24947 (var_cas_lexicalFunctionMap, true) ;
    const GGS_lexicalFunctionMap::cElement * operand_24947 = NULL ;
    while (((operand_24947 = enumerator_24947.nextObject ()))) {
      macroValidPointer (operand_24947) ;
      var_cas_s.dotAssign_operation (operand_24947->mKey.ggs_string ()) ;
      {
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_24994 (operand_24947->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_24994 = NULL ;
        while (((operand_24994 = enumerator_24994.nextObject ()))) {
          macroValidPointer (operand_24994) ;
          var_cas_s.appendCString (" \?") ;
          var_cas_s.dotAssign_operation (operand_24994->mLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (467))) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_24994->mArgumentNameForComment) ;
        }
      }
      var_cas_s.appendCString (" -> ") ;
      var_cas_s.dotAssign_operation (operand_24947->mInfo.mReturnedLexicalType.reader_lexicalTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (469))) ;
      var_cas_s.appendCString (" ;\n") ;
      if (((operand_24947->mInfo.mReplacementFunctionName).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_s.appendCString ("Note: the '") ;
        var_cas_s.dotAssign_operation (operand_24947->mKey) ;
        var_cas_s.appendCString ("' function is obsolete: use '") ;
        var_cas_s.dotAssign_operation (operand_24947->mInfo.mReplacementFunctionName) ;
        var_cas_s.appendCString ("' function.\n") ;
      }
      var_cas_s.appendCString ("\n") ;
    }
  }
  var_cas_s.appendCString ("************************************************************\n") ;
  inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (477)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_printPredefinedLexicalActions\n") ;
  #endif
}

//---------------------------------------------------------------------------*

