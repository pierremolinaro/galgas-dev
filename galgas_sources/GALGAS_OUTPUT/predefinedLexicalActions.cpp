//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'predefinedLexicalActions.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 1st, 2010, at 12h34'53"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "predefinedLexicalActions.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "predefinedLexicalActions.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "buildLexicalRoutineMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalRoutineMap (C_Compiler & inLexique,
                                GGS_lexicalRoutineMap  & var_cas_outLexicalRoutineMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalRoutineMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalRoutineMap = GGS_lexicalRoutineMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (30)) ;
  GGS_lexicalRoutineFormalArgumentList  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  GGS_stringlist  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (34)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (34)), GGS_string ("ioASCIICharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (35)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (35)), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inErrorNotHexDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (39)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (38)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (48)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (48)), GGS_string ("ioASCIICharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (49)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (49)), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inErrorCodeGreaterThan255")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inErrorNotDecimalDigitCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoASCIIcharacter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (53)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (62)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)), GGS_string ("ioString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (63)), GGS_string ("inCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoString"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (65)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (64)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (74)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_lexicalTypeEnum::constructor_lexicalType_double (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_string ("ioDouble")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inConversionError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertStringToDouble"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (78)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (77)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (87)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (87)), GGS_string ("ioCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (88)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (88)), GGS_string ("inCharacter")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterCharacterIntoCharacter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (90)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (89)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (99)), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (99)), GGS_string ("ioNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (102)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (101)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), GGS_string ("ioNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("negateSInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (114)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (124)), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (124)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUIntToSInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (127)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (136)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (136)), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (137)), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (137)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUInt64ToSInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (154)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (153)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (163)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (163)), GGS_string ("inDecimalDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterDigitIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (168)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (167)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (177)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (177)), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (182)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (181)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (191)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (191)), GGS_string ("inHexDigitCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (192)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (192)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterHexDigitIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (196)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (195)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (210)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (209)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (220)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (224)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (223)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (233)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (234)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (234)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (238)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (247)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (248)), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (248)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotDecimalDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertDecimalStringIntoSInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (252)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (251)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (261)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (261)), GGS_string ("inCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (262)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (262)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (266)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (265)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (275)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (275)), GGS_string ("inCharacter")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (276)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (276)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotBinDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterBinDigitIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (280)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (279)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (290)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (290)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (294)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (293)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (304)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (304)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotOctDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("enterOctDigitIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (308)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (307)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (317)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (317)), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (318)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (318)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (321)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (320)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (330)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (330)), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (331)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (331)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inResultTooLargeError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("multiplyUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (334)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (333)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (343)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (343)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (344)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (344)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (348)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (347)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (357)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (357)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (358)), GGS_lexicalTypeEnum::constructor_lexicalType_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (358)), GGS_string ("ioUnsignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoUInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (362)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (361)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (371)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (371)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (372)), GGS_lexicalTypeEnum::constructor_lexicalType_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (372)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (376)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (385)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (385)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (386)), GGS_lexicalTypeEnum::constructor_lexicalType_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (386)), GGS_string ("ioSignedNumber")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inNumberTooLargeError")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inCharacterIsNotHexDigitError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHexStringIntoSInt64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (390)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (389)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (399)), GGS_lexicalTypeEnum::constructor_lexicalType_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (399)), GGS_string ("inUnsignedNumber")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (400)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (400)), GGS_string ("ioUnicodeCharacter")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inUnassignedUnicodeValueError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertUnsignedNumberToUnicodeChar"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (403)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (402)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (412)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (412)), GGS_string ("inString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (413)), GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (413)), GGS_string ("ioUnicodeCharacter")) ;
  var_cas_mErrorMessageList.addAssign_operation (GGS_string ("inUnassignedHTMLSequenceError")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("convertHTMLSequenceToUnicodeCharacter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (416)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (415)) ;
  var_cas_mLexicalRoutineFormalArgumentList = GGS_lexicalRoutineFormalArgumentList ::constructor_emptyList () ;
  var_cas_mErrorMessageList = GGS_stringlist ::constructor_emptyList () ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (425)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425)), GGS_string ("inCodePointString")) ;
  var_cas_mLexicalRoutineFormalArgumentList.addAssign_operation (GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (426)), GGS_lexicalTypeEnum::constructor_lexicalType_string (inLexique COMMA_SOURCE_FILE_AT_LINE (426)), GGS_string ("ioString")) ;
  var_cas_outLexicalRoutineMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("codePointToUnicode"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (428)), var_cas_mLexicalRoutineFormalArgumentList, var_cas_mErrorMessageList, GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (427)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalRoutineMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "buildLexicalFunctionMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalFunctionMap (C_Compiler & inLexique,
                                GGS_lexicalFunctionMap  & var_cas_outLexicalFunctionMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalFunctionMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalFunctionMap = GGS_lexicalFunctionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (441)) ;
  GGS_lexicalFunctionFormalArgumentList  var_cas_lexicalTypeList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
  var_cas_lexicalTypeList.addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (444)), GGS_string ("inCharacter")) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toLower"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (446)), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (448)), GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (445)) ;
  var_cas_lexicalTypeList = GGS_lexicalFunctionFormalArgumentList ::constructor_emptyList () ;
  var_cas_lexicalTypeList.addAssign_operation (GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (454)), GGS_string ("inCharacter")) ;
  var_cas_outLexicalFunctionMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("toUpper"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (456)), var_cas_lexicalTypeList, GGS_lexicalTypeEnum::constructor_lexicalType_char (inLexique COMMA_SOURCE_FILE_AT_LINE (458)), GGS_string (""), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (455)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalFunctionMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "printPredefinedLexicalActions"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_printPredefinedLexicalActions (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_printPredefinedLexicalActions at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lexicalRoutineMap  var_cas_lexicalRoutineMap ;
  ::routine_buildLexicalRoutineMap (inLexique,  var_cas_lexicalRoutineMap COMMA_SOURCE_FILE_AT_LINE (471)) ;
  GGS_string var_cas_s = GGS_string ("") ;
  var_cas_s.appendCString ("**************** Prefined lexical routines  ****************\n") ;
  {
    GGS_lexicalRoutineMap::cEnumerator enumerator_25083 (var_cas_lexicalRoutineMap, true) ;
    const GGS_lexicalRoutineMap::cElement * operand_25083 = NULL ;
    while (((operand_25083 = enumerator_25083.nextObject ()))) {
      macroValidPointer (operand_25083) ;
      var_cas_s.dotAssign_operation (operand_25083->mKey.ggs_string ()) ;
      {
        GGS_lexicalRoutineFormalArgumentList::cEnumerator enumerator_25147 (operand_25083->mInfo.mLexicalRoutineFormalArgumentList, true) ;
        const GGS_lexicalRoutineFormalArgumentList::cElement * operand_25147 = NULL ;
        while (((operand_25147 = enumerator_25147.nextObject ()))) {
          macroValidPointer (operand_25147) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_25147->mLexicalFormalArgumentMode.reader_lexicalFormalModeName (inLexique COMMA_SOURCE_FILE_AT_LINE (478))) ;
          var_cas_s.appendCString ("@") ;
          var_cas_s.dotAssign_operation (operand_25147->mLexicalFormalArgumentType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (478))) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_25147->mArgumentNameForComment) ;
        }
      }
      {
        GGS_stringlist::cEnumerator enumerator_25357 (operand_25083->mInfo.mErrorMessageList, true) ;
        const GGS_stringlist::cElement * operand_25357 = enumerator_25357.nextObject () ;
        if ((operand_25357 != NULL)) {
          var_cas_s.appendCString (" error") ;
          bool _foreach_loop_25357 ;
          do{
            macroValidPointer (operand_25357) ;
            var_cas_s.appendCString (" ") ;
            var_cas_s.dotAssign_operation (operand_25357->mValue) ;
            operand_25357 = enumerator_25357.nextObject () ;
            _foreach_loop_25357 = ((operand_25357 != NULL)) ;
            if (_foreach_loop_25357) {
              var_cas_s.appendCString (",") ;
            }
          }while (_foreach_loop_25357) ;
        }
      }
      var_cas_s.appendCString (" ;\n") ;
      const GGS_bool cond_25629 = (operand_25083->mInfo.mReplacementRoutineName).operator_isNotEqual (GGS_string ("")) ;
      if (cond_25629.isBuiltAndTrue ()) {
        var_cas_s.appendCString ("Note: the '") ;
        var_cas_s.dotAssign_operation (operand_25083->mKey) ;
        var_cas_s.appendCString ("' routine is obsolete: use '") ;
        var_cas_s.dotAssign_operation (operand_25083->mInfo.mReplacementRoutineName) ;
        var_cas_s.appendCString ("' routine.\n") ;
      }
      var_cas_s.appendCString ("\n") ;
    }
  }
  GGS_lexicalFunctionMap  var_cas_lexicalFunctionMap ;
  ::routine_buildLexicalFunctionMap (inLexique,  var_cas_lexicalFunctionMap COMMA_SOURCE_FILE_AT_LINE (493)) ;
  var_cas_s.appendCString ("**************** Prefined lexical functions ****************\n") ;
  {
    GGS_lexicalFunctionMap::cEnumerator enumerator_25995 (var_cas_lexicalFunctionMap, true) ;
    const GGS_lexicalFunctionMap::cElement * operand_25995 = NULL ;
    while (((operand_25995 = enumerator_25995.nextObject ()))) {
      macroValidPointer (operand_25995) ;
      var_cas_s.dotAssign_operation (operand_25995->mKey.ggs_string ()) ;
      {
        GGS_lexicalFunctionFormalArgumentList::cEnumerator enumerator_26042 (operand_25995->mInfo.mLexicalTypeList, true) ;
        const GGS_lexicalFunctionFormalArgumentList::cElement * operand_26042 = NULL ;
        while (((operand_26042 = enumerator_26042.nextObject ()))) {
          macroValidPointer (operand_26042) ;
          var_cas_s.appendCString (" \?@") ;
          var_cas_s.dotAssign_operation (operand_26042->mLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (499))) ;
          var_cas_s.appendCString (" ") ;
          var_cas_s.dotAssign_operation (operand_26042->mArgumentNameForComment) ;
        }
      }
      var_cas_s.appendCString (" -> @") ;
      var_cas_s.dotAssign_operation (operand_25995->mInfo.mReturnedLexicalType.reader_lexicalTypeBaseName (inLexique COMMA_SOURCE_FILE_AT_LINE (501))) ;
      var_cas_s.appendCString (" ;\n") ;
      const GGS_bool cond_26386 = (operand_25995->mInfo.mReplacementFunctionName).operator_isNotEqual (GGS_string ("")) ;
      if (cond_26386.isBuiltAndTrue ()) {
        var_cas_s.appendCString ("Note: the '") ;
        var_cas_s.dotAssign_operation (operand_25995->mKey) ;
        var_cas_s.appendCString ("' function is obsolete: use '") ;
        var_cas_s.dotAssign_operation (operand_25995->mInfo.mReplacementFunctionName) ;
        var_cas_s.appendCString ("' function.\n") ;
      }
      var_cas_s.appendCString ("\n") ;
    }
  }
  var_cas_s.appendCString ("************************************************************\n") ;
  inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (509)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_printPredefinedLexicalActions\n") ;
  #endif
}

//---------------------------------------------------------------------------*

