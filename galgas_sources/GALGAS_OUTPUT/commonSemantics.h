//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'commonSemantics.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 6th, 2008, at 20h46'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef commonSemantics_DEFINED
#define commonSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_entity.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode ;
class GGS_formalArgumentPassingMode ;
class GGS_variableStateAutomaton ;
class GGS_localVariableStateAutomaton ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'actualParameterPassingMode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_parameterOut, enum_parameterOutIn, enum_parameterIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_actualParameterPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_actualParameterPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOut) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOutIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOutIn) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterIn) ;
  }

//--- Readers
  public : GGS_string reader_actualArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_actualParameterPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'formalArgumentPassingMode' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_formalArgumentPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_argumentIn, enum_argumentOut, enum_argumentInOut, enum_argumentConstantIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_formalArgumentPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_formalArgumentPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentIn) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentInOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentInOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentConstantIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentConstantIn) ;
  }

//--- Readers
  public : GGS_string reader_formalArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_formalArgumentPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for 'variableStateAutomaton' Enumeration               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableStateAutomaton {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_localVariableDeclared, enum_localVariableUsed, enum_localVariableDropped, enum_localConstantDeclared, enum_localConstantDefined, enum_localContantUsed, enum_inputFormalParameterDefined, enum_inputFormalParameterUsed, enum_inputFormalParameterDropped, enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterUsed} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_variableStateAutomaton (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_variableStateAutomaton (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_variableStateAutomaton  constructor_localVariableDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localVariableDeclared) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_localConstantDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localConstantDeclared) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_inputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_inputFormalParameterDefined) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_constantInputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_constantInputFormalParameterDefined) ;
  }

//--- Readers

//--- Modifiers
  public : void modifier_writeAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;

//--- Methods

//--- Operators
  public : GGS_variableStateAutomaton operator_endOfRepeatedBranch (C_Compiler & _inLexique,
           const GGS_variableStateAutomaton & inOperand,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_variableStateAutomaton inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for 'localVariableStateAutomaton' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_localVariableStateAutomaton {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_localVariableDeclared, enum_localVariableUsed, enum_localVariableDropped} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_localVariableStateAutomaton (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_localVariableStateAutomaton (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_localVariableStateAutomaton  constructor_localVariableDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_localVariableStateAutomaton (enum_localVariableDeclared) ;
  }

//--- Readers

//--- Modifiers
  public : void modifier_writeAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;

//--- Methods
  public : void method_checkFinalState (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) const ;

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_localVariableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_localVariableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_localVariableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_localVariableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_localVariableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_localVariableStateAutomaton inOperand) const ;
} ;

//---------------------------------------------------------------------------*

#endif
