//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'commonSemantics.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       april 4th, 2007, at 13h29'4"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef commonSemantics_DEFINED
#define commonSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_entity.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParametersPassingMode ;
class GGS_formalArgumentPassingMode ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Class for 'actualParametersPassingMode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParametersPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_parameterOut, enum_parameterOutIn, enum_parameterIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_actualParametersPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_actualParametersPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_actualParametersPassingMode constructor_parameterOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParametersPassingMode (enum_parameterOut) ;
  }
  public : static inline GGS_actualParametersPassingMode constructor_parameterOutIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParametersPassingMode (enum_parameterOutIn) ;
  }
  public : static inline GGS_actualParametersPassingMode constructor_parameterIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParametersPassingMode (enum_parameterIn) ;
  }

//--- Messages
  public : GGS_string reader_actualArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_actualParametersPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'formalArgumentPassingMode' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_formalArgumentPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_argumentIn, enum_argumentOut, enum_argumentInOut, enum_argumentConstantIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_formalArgumentPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_formalArgumentPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_formalArgumentPassingMode constructor_argumentIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentIn) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentInOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentInOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentConstantIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentConstantIn) ;
  }

//--- Messages
  public : GGS_string reader_formalArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_formalArgumentPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*

#endif
