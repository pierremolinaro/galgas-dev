//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'commonSemantics.h'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 6th, 2008, at 21h31'56"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef commonSemantics_DEFINED
#define commonSemantics_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_entity.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode ;
class GGS_formalArgumentPassingMode ;
class GGS_variableStateAutomaton ;
class GGS_variableMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'actualParameterPassingMode' Enumeration             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParameterPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_parameterOut, enum_parameterOutIn, enum_parameterIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_actualParameterPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_actualParameterPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOut) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterOutIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterOutIn) ;
  }
  public : static inline GGS_actualParameterPassingMode  constructor_parameterIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_actualParameterPassingMode (enum_parameterIn) ;
  }

//--- Readers
  public : GGS_string reader_actualArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_actualParameterPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_actualParameterPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for 'formalArgumentPassingMode' Enumeration              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_formalArgumentPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_argumentIn, enum_argumentOut, enum_argumentInOut, enum_argumentConstantIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_formalArgumentPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_formalArgumentPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentIn) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentInOut (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentInOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode  constructor_argumentConstantIn (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_formalArgumentPassingMode (enum_argumentConstantIn) ;
  }

//--- Readers
  public : GGS_string reader_formalArgumentMessage (C_Compiler & _inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_formalArgumentPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Class for 'variableStateAutomaton' Enumeration               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_variableStateAutomaton {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_localVariableDeclared, enum_localVariableUsed, enum_localVariableDropped, enum_localConstantDeclared, enum_localConstantDefined, enum_localContantUsed, enum_inputFormalParameterDefined, enum_inputFormalParameterUsed, enum_inputFormalParameterDropped, enum_constantInputFormalParameterDefined, enum_constantInputFormalParameterUsed} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_variableStateAutomaton (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_variableStateAutomaton (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 4 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_variableStateAutomaton  constructor_localVariableDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localVariableDeclared) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_localConstantDeclared (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_localConstantDeclared) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_inputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_inputFormalParameterDefined) ;
  }
  public : static inline GGS_variableStateAutomaton  constructor_constantInputFormalParameterDefined (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_variableStateAutomaton (enum_constantInputFormalParameterDefined) ;
  }

//--- Readers

//--- Modifiers
  public : void modifier_writeAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_readWriteAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;
  public : void modifier_dropAccess (C_Compiler & _inLexique,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) ;

//--- Methods

//--- Operators
  public : GGS_variableStateAutomaton operator_endOfRepeatedBranch (C_Compiler & _inLexique,
           const GGS_variableStateAutomaton & inOperand,
                                const GGS_location  
                                COMMA_LOCATION_ARGS) const ;

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_variableStateAutomaton inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_variableStateAutomaton inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Map '@variableMap'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_variableMap ;

class GGS_variableMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_variableMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_variableMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_variableMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_variableMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_variableMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_variableMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- 'insertListOfEntitiesLocalVariable' Insert Modifier
  public : void modifier_insertListOfEntitiesLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertSingleEntityLocalVariable' Insert Modifier
  public : void modifier_insertSingleEntityLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertEntityAttributeLocalVariable' Insert Modifier
  public : void modifier_insertEntityAttributeLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertInArgument' Insert Modifier
  public : void modifier_insertInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedInArgument' Insert Modifier
  public : void modifier_insertUnusedInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertConstInArgument' Insert Modifier
  public : void modifier_insertConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedConstInArgument' Insert Modifier
  public : void modifier_insertUsedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedConstInArgumentNoShadow' Insert Modifier
  public : void modifier_insertUsedConstInArgumentNoShadow (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedConstInArgument' Insert Modifier
  public : void modifier_insertUnusedConstInArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertLocalVariable' Insert Modifier
  public : void modifier_insertLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertOutArgument' Insert Modifier
  public : void modifier_insertOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertOutProperty' Insert Modifier
  public : void modifier_insertOutProperty (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertInOutArgument' Insert Modifier
  public : void modifier_insertInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUsedInOutArgument' Insert Modifier
  public : void modifier_insertUsedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'insertUnusedInOutArgument' Insert Modifier
  public : void modifier_insertUnusedInOutArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) ;
//--- 'searchForReadOnlyAccess' Search Method
  public : void method_searchForReadOnlyAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForDestructiveReadAccess' Search Method
  public : void method_searchForDestructiveReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForReadWriteAccess' Search Method
  public : void method_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- 'searchForWriteAccess' Search Method
  public : void method_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_variableMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_variableMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_variableMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_variableMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of map '@variableMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class e_variableMap {

} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_variableMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_variableMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_variableMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_variableMap * nextObject (void) const { return (elementOf_GGS_variableMap *) mNextItem ; }
  public : inline elementOf_GGS_variableMap * infObject (void) const { return (elementOf_GGS_variableMap *) mInfPtr ; }
  public : inline elementOf_GGS_variableMap * supObject (void) const { return (elementOf_GGS_variableMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_variableMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
