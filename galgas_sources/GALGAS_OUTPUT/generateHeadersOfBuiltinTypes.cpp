//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'generateHeadersOfBuiltinTypes.cpp'                  *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     january 13th, 2010, at 20h25'41"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "generateHeadersOfBuiltinTypes.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "generateHeadersOfBuiltinTypes.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of wrapper 'builtinTypeGenerationTemplate'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_builtinTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_builtinTypeGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_builtinTypeGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_builtinTypeGenerationTemplate_0,
  0,
  gWrapperAllDirectories_builtinTypeGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//     'header' template of 'builtinTypeGenerationTemplate' filewrapper      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_builtinTypeGenerationTemplate_header (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_TYPE) {
  C_String result ;
  const bool isBuilt = var_cas_TYPE.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_TYPE ;
    result << "_CLASS_DEFINED\n"
      "#define " ;
    result << var_cas_TYPE ;
    result << "_CLASS_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/GALGAS__root.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class GALGAS_string ;\n"
      "class GALGAS_uint ;\n"
      "class GALGAS_uint64 ;\n"
      "class GALGAS_sint ;\n"
      "class GALGAS_sint64 ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "extern const C_galgas_type_descriptor kTypeDescriptor_" ;
    result << var_cas_TYPE ;
    result << " ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "//                                                                           *\n"
      "//                     '" ;
    result << var_cas_TYPE ;
    result << "' class                                       *\n"
      "//                                                                           *\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "class " ;
    result << var_cas_TYPE ;
    result << " : public GALGAS__root {\n"
      "//--- Constructor\n"
      "  public : " ;
    result << var_cas_TYPE ;
    result << " (const bool inValue COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Method 'isBuiltAndTrue'\n"
      "  public : static inline bool isBuiltAndTrue (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand) {\n"
      "    return (inOperand != NULL) && inOperand->mValue ;\n"
      "  }\n"
      "\n"
      "//--- Method 'isBuiltAndFalse'\n"
      "  public : static inline bool isBuiltAndFalse (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand) {\n"
      "    return (inOperand != NULL) && ! inOperand->mValue ;\n"
      "  }\n"
      "\n"
      "//--- Assignment\n"
      "  public : static void assignment (" ;
    result << var_cas_TYPE ;
    result << " * & ioTarget, " ;
    result << var_cas_TYPE ;
    result << " * inSource) ;\n"
      "\n"
      "//--- Reader 'description'\n"
      "  public : virtual GALGAS_string * description (const PMSInt32 inIndentation COMMA_LOCATION_ARGS) const ;\n"
      "\n"
      "//--- Readers\n"
      "  public : static GALGAS_string * reader_cString (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                                  COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static GALGAS_string * reader_ocString (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                                   COMMA_LOCATION_ARGS)  ;\n"
      "\n"
      "  public : static GALGAS_uint * reader_uint (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                             COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static GALGAS_sint * reader_sint (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                             COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static GALGAS_uint64 * reader_uint64 (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                                 COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static GALGAS_sint64 * reader_sint64 (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                                 COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Method 'boolValue'\n"
      "  public : inline bool boolValue (void) const { return mValue ; }\n"
      "\n"
      "//--- Boolean operators\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_and (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                              const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                              COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_or (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                              const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                              COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_xor (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                              const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                              COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_not (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand\n"
      "                                              COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Comparison for sorted list\n"
      "  public : PMSInt32 compareForSortedList (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand) const ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_isEqual (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                  const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                  COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_isNotEqual (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                     const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                     COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_infOrEqual (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                     const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                     COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_supOrEqual (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                     const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                     COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_strictInf (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                    const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                    COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "  public : static " ;
    result << var_cas_TYPE ;
    result << " * operator_strictSup (const " ;
    result << var_cas_TYPE ;
    result << " * inOperand1,\n"
      "                                                    const " ;
    result << var_cas_TYPE ;
    result << " * inOperand2\n"
      "                                                    COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//--- Introspection\n"
      "  public : virtual const C_galgas_type_descriptor * typeDescriptor (void) const ;\n"
      "\n"
      "  public : static const " ;
    result << var_cas_TYPE ;
    result << " * castFromObject (C_Compiler & inLexique,\n"
      "                                                      const GALGAS_object * inObject,\n"
      "                                                      const GALGAS_location * inErrorLocation\n"
      "                                                      COMMA_LOCATION_ARGS) ;\n"
      "\n"
      "//----------- Private data members ----------------------------------\n"
      "  private : bool mValue ;\n"
      "} ;\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#endif\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "generateHeadersOfBuiltinTypes"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateHeadersOfBuiltinTypes (C_Compiler & inLexique,
                                const GGS_string  var_cas_inDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateHeadersOfBuiltinTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2593 = (var_cas_inDirectory).operator_isNotEqual (GGS_string ("")) ;
  if (cond_2593.isBuiltAndTrue ()) {
    const GGS_bool cond_2064 = (var_cas_inDirectory.reader_directoryExists ()).operator_not () ;
    if (cond_2064.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_inDirectory)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (38)) ;
    }else if (cond_2064.isBuiltAndFalse ()) {
      const GGS_typeMap  var_cas_builtinTypeMap = function_constructBuiltinTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
      inLexique.printMessage (C_String ("LOGGING builtinTypeMap: ") + var_cas_builtinTypeMap.reader_description ().string () + "\n" COMMA_SOURCE_FILE_AT_LINE (40)) ;
      {
        GGS_typeMap::cEnumerator enumerator_2188 (var_cas_builtinTypeMap, true) ;
        const GGS_typeMap::cElement * operand_2188 = NULL ;
        while (((operand_2188 = enumerator_2188.nextObject ()))) {
          macroValidPointer (operand_2188) ;
          const GGS_string var_cas_typeName = function_generatedTypeName (inLexique, operand_2188->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) COMMA_SOURCE_FILE_AT_LINE (42)) ;
          GGS_string::class_method_generateFile (inLexique, var_cas_inDirectory, (var_cas_typeName).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
            "\n"), template_filewrapper_builtinTypeGenerationTemplate_header (inLexique, var_cas_typeName), GGS_string ("\n"
            "\n"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (43)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateHeadersOfBuiltinTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*

