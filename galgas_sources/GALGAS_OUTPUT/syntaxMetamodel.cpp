//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'syntaxMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 21th, 2009, at 14h42'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "syntaxMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@syntaxInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxInstructionList::
elementOf_GGS_syntaxInstructionList (const GGS_syntaxInstruction & argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mInstruction (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxInstructionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxInstructionList * ptr = dynamic_cast <const elementOf_GGS_syntaxInstructionList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstruction._operator_isEqual (ptr->mInstruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxInstructionList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstruction.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@syntaxInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
_internalAppendValues (const GGS_syntaxInstruction & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
_internalPrependValues (const GGS_syntaxInstruction & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
_addAssign_operation (const GGS_syntaxInstruction & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
_operator_concat (const GGS_syntaxInstructionList & inOperand) const {
  GGS_syntaxInstructionList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
_dotAssign_operation (const GGS_syntaxInstructionList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_syntaxInstructionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_syntaxInstruction  p_0 = p->mInstruction ;
          _internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_syntaxInstruction & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mInstruction
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxInstructionList::
constructor_emptyList (void) {
  GGS_syntaxInstructionList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxInstructionList::
constructor_listWithValue (const GGS_syntaxInstruction & argument_0) {
  GGS_syntaxInstructionList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
internalSubListWithRange (GGS_syntaxInstructionList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mInstruction) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxInstructionList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@syntaxInstructionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
method_first (C_Compiler & inLexique,
              GGS_syntaxInstruction & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
method_last (C_Compiler & inLexique,
             GGS_syntaxInstruction & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_syntaxInstruction & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_popLast (C_Compiler & inLexique,
                GGS_syntaxInstruction & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstruction  GGS_syntaxInstructionList::
reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstruction  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstruction ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstruction  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstruction = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstruction  & GGS_syntaxInstructionList::cEnumerator::_mInstruction (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@nonTerminalLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonTerminalLabelList::
elementOf_GGS_nonTerminalLabelList (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mLabelName (argument_0),
mFormalParameters (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonTerminalLabelList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_nonTerminalLabelList * ptr = dynamic_cast <const elementOf_GGS_nonTerminalLabelList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mLabelName._operator_isEqual (ptr->mLabelName).boolValue ()
         && mFormalParameters._operator_isEqual (ptr->mFormalParameters).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonTerminalLabelList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameters.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@nonTerminalLabelList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList GGS_nonTerminalLabelList::
_operator_concat (const GGS_nonTerminalLabelList & inOperand) const {
  GGS_nonTerminalLabelList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
_dotAssign_operation (const GGS_nonTerminalLabelList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_nonTerminalLabelList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_formalParameterList  p_1 = p->mFormalParameters ;
          _internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameterList & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mLabelName,
                                ptr->mFormalParameters
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList  GGS_nonTerminalLabelList::
constructor_emptyList (void) {
  GGS_nonTerminalLabelList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList  GGS_nonTerminalLabelList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1) {
  GGS_nonTerminalLabelList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
internalSubListWithRange (GGS_nonTerminalLabelList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mLabelName, ptr->mFormalParameters) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList GGS_nonTerminalLabelList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList GGS_nonTerminalLabelList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonTerminalLabelList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@nonTerminalLabelList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_formalParameterList & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_formalParameterList & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_formalParameterList & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_formalParameterList & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonTerminalLabelList::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterList  GGS_nonTerminalLabelList::
reader_mFormalParametersAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalParameters ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelList::
modifier_setMFormalParametersAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalParameters = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_nonTerminalLabelList::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mLabelName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterList  & GGS_nonTerminalLabelList::cEnumerator::_mFormalParameters (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mFormalParameters ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@nonterminalDeclarationList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonterminalDeclarationList::
elementOf_GGS_nonterminalDeclarationList (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mNonterminalName (argument_0),
mLabels (argument_1),
mHasParseLabel (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonterminalDeclarationList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_nonterminalDeclarationList * ptr = dynamic_cast <const elementOf_GGS_nonterminalDeclarationList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName._operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabels._operator_isEqual (ptr->mLabels).boolValue ()
         && mHasParseLabel._operator_isEqual (ptr->mHasParseLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonterminalDeclarationList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNonterminalName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabels.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mHasParseLabel.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@nonterminalDeclarationList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_nonTerminalLabelList & argument_1,
                    const GGS_bool& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_nonTerminalLabelList & argument_1,
                    const GGS_bool& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList GGS_nonterminalDeclarationList::
_operator_concat (const GGS_nonterminalDeclarationList & inOperand) const {
  GGS_nonterminalDeclarationList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
_dotAssign_operation (const GGS_nonterminalDeclarationList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_nonterminalDeclarationList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mNonterminalName ;
          GGS_nonTerminalLabelList  p_1 = p->mLabels ;
          GGS_bool p_2 = p->mHasParseLabel ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_nonTerminalLabelList & argument_1,
                     const GGS_bool& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mNonterminalName,
                                ptr->mLabels,
                                ptr->mHasParseLabel
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList  GGS_nonterminalDeclarationList::
constructor_emptyList (void) {
  GGS_nonterminalDeclarationList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList  GGS_nonterminalDeclarationList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelList & argument_1,
                                const GGS_bool& argument_2) {
  GGS_nonterminalDeclarationList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
internalSubListWithRange (GGS_nonterminalDeclarationList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mNonterminalName, ptr->mLabels, ptr->mHasParseLabel) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList GGS_nonterminalDeclarationList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_nonterminalDeclarationList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList GGS_nonterminalDeclarationList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_nonterminalDeclarationList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonterminalDeclarationList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@nonterminalDeclarationList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_nonTerminalLabelList & _out_1,
              GGS_bool& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_nonTerminalLabelList & _out_1,
             GGS_bool& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_nonTerminalLabelList & _out_1,
                 GGS_bool& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_nonTerminalLabelList & _out_1,
                GGS_bool& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalDeclarationList::
reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNonterminalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList  GGS_nonterminalDeclarationList::
reader_mLabelsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabels ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalDeclarationList::
reader_mHasParseLabelAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mHasParseLabel ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNonterminalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_setMLabelsAtIndex (C_Compiler & inLexique,
                              const GGS_nonTerminalLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabels = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationList::
modifier_setMHasParseLabelAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mHasParseLabel = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_nonterminalDeclarationList::cEnumerator::_mNonterminalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mNonterminalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonTerminalLabelList  & GGS_nonterminalDeclarationList::cEnumerator::_mLabels (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mLabels ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonterminalDeclarationList::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mHasParseLabel ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@syntaxRuleLabelList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxRuleLabelList::
elementOf_GGS_syntaxRuleLabelList (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mLabelName (argument_0),
mFormalParameters (argument_1),
mSyntaxInstructionList (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxRuleLabelList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxRuleLabelList * ptr = dynamic_cast <const elementOf_GGS_syntaxRuleLabelList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mLabelName._operator_isEqual (ptr->mLabelName).boolValue ()
         && mFormalParameters._operator_isEqual (ptr->mFormalParameters).boolValue ()
         && mSyntaxInstructionList._operator_isEqual (ptr->mSyntaxInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxRuleLabelList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameters.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSyntaxInstructionList.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@syntaxRuleLabelList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterList & argument_1,
                    const GGS_syntaxInstructionList & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterList & argument_1,
                    const GGS_syntaxInstructionList & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList GGS_syntaxRuleLabelList::
_operator_concat (const GGS_syntaxRuleLabelList & inOperand) const {
  GGS_syntaxRuleLabelList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
_dotAssign_operation (const GGS_syntaxRuleLabelList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_syntaxRuleLabelList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_formalParameterList  p_1 = p->mFormalParameters ;
          GGS_syntaxInstructionList  p_2 = p->mSyntaxInstructionList ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameterList & argument_1,
                     const GGS_syntaxInstructionList & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mLabelName,
                                ptr->mFormalParameters,
                                ptr->mSyntaxInstructionList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList  GGS_syntaxRuleLabelList::
constructor_emptyList (void) {
  GGS_syntaxRuleLabelList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList  GGS_syntaxRuleLabelList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterList & argument_1,
                                const GGS_syntaxInstructionList & argument_2) {
  GGS_syntaxRuleLabelList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
internalSubListWithRange (GGS_syntaxRuleLabelList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mLabelName, ptr->mFormalParameters, ptr->mSyntaxInstructionList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList GGS_syntaxRuleLabelList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList GGS_syntaxRuleLabelList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxRuleLabelList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@syntaxRuleLabelList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_formalParameterList & _out_1,
              GGS_syntaxInstructionList & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _out_2 = ptr->mSyntaxInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_formalParameterList & _out_1,
             GGS_syntaxInstructionList & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _out_2 = ptr->mSyntaxInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_formalParameterList & _out_1,
                 GGS_syntaxInstructionList & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _out_2 = ptr->mSyntaxInstructionList ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_formalParameterList & _out_1,
                GGS_syntaxInstructionList & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalParameters ;
    _out_2 = ptr->mSyntaxInstructionList ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_syntaxRuleLabelList::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterList  GGS_syntaxRuleLabelList::
reader_mFormalParametersAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalParameters ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxRuleLabelList::
reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSyntaxInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_setMFormalParametersAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalParameters = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelList::
modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSyntaxInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_syntaxRuleLabelList::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mLabelName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterList  & GGS_syntaxRuleLabelList::cEnumerator::_mFormalParameters (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mFormalParameters ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstructionList  & GGS_syntaxRuleLabelList::cEnumerator::_mSyntaxInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mSyntaxInstructionList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@syntaxRuleList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxRuleList::
elementOf_GGS_syntaxRuleList (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mNonterminalName (argument_0),
mLabelList (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxRuleList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxRuleList * ptr = dynamic_cast <const elementOf_GGS_syntaxRuleList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName._operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabelList._operator_isEqual (ptr->mLabelList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxRuleList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNonterminalName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelList.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          List '@syntaxRuleList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_syntaxRuleLabelList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_syntaxRuleLabelList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList GGS_syntaxRuleList::
_operator_concat (const GGS_syntaxRuleList & inOperand) const {
  GGS_syntaxRuleList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
_dotAssign_operation (const GGS_syntaxRuleList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_syntaxRuleList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mNonterminalName ;
          GGS_syntaxRuleLabelList  p_1 = p->mLabelList ;
          _internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_syntaxRuleLabelList & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mNonterminalName,
                                ptr->mLabelList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList  GGS_syntaxRuleList::
constructor_emptyList (void) {
  GGS_syntaxRuleList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList  GGS_syntaxRuleList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelList & argument_1) {
  GGS_syntaxRuleList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
internalSubListWithRange (GGS_syntaxRuleList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mNonterminalName, ptr->mLabelList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList GGS_syntaxRuleList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList GGS_syntaxRuleList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxRuleList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@syntaxRuleList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_syntaxRuleLabelList & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_syntaxRuleLabelList & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_syntaxRuleLabelList & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_syntaxRuleLabelList & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_syntaxRuleList::
reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNonterminalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelList  GGS_syntaxRuleList::
reader_mLabelListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNonterminalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleList::
modifier_setMLabelListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxRuleLabelList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_syntaxRuleList::cEnumerator::_mNonterminalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mNonterminalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxRuleLabelList  & GGS_syntaxRuleList::cEnumerator::_mLabelList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mLabelList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'cPtr_nonterminalCallInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_nonterminalCallInstruction::
cPtr_nonterminalCallInstruction (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameterList & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mNonterminalName (argument_0),
mLabelName (argument_1),
mActualParameterList (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_nonterminalCallInstruction * GGS_nonterminalCallInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_nonterminalCallInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_nonterminalCallInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_nonterminalCallInstruction * ptr = dynamic_cast <const cPtr_nonterminalCallInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName._operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabelName._operator_isEqual (ptr->mLabelName).boolValue ()
         && mActualParameterList._operator_isEqual (ptr->mActualParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_nonterminalCallInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@nonterminalCallInstruction:"
           << mNonterminalName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mLabelName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mActualParameterList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_nonterminalCallInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_nonterminalCallInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_nonterminalCallInstruction (& typeid (cPtr_nonterminalCallInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_nonterminalCallInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__nonterminalCallInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_nonterminalCallInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_nonterminalCallInstruction (mNonterminalName, mLabelName, mActualParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction::
GGS_nonterminalCallInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction::
GGS_nonterminalCallInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_nonterminalCallInstruction GGS_nonterminalCallInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_nonterminalCallInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_nonterminalCallInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_nonterminalCallInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_nonterminalCallInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_nonterminalCallInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction GGS_nonterminalCallInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_actualParameterList & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_nonterminalCallInstruction result ;
  macroMyNew (result.mPointer, cPtr_nonterminalCallInstruction (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalCallInstruction::
reader_mNonterminalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mNonterminalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalCallInstruction::
reader_mLabelName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mLabelName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_nonterminalCallInstruction::
reader_mActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_nonterminalCallInstruction::actualTypeName (void) const {
  return "nonterminalCallInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__nonterminalCallInstruction ("nonterminalCallInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_terminalCheckInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_terminalCheckInstruction::
cPtr_terminalCheckInstruction (const GGS_lstring & argument_0,
                                const GGS_actualInputParameterList & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mTerminalName (argument_0),
mActualInputParameterList (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_terminalCheckInstruction * GGS_terminalCheckInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_terminalCheckInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_terminalCheckInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_terminalCheckInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_terminalCheckInstruction * ptr = dynamic_cast <const cPtr_terminalCheckInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mTerminalName._operator_isEqual (ptr->mTerminalName).boolValue ()
         && mActualInputParameterList._operator_isEqual (ptr->mActualInputParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_terminalCheckInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@terminalCheckInstruction:"
           << mTerminalName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mActualInputParameterList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_terminalCheckInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_terminalCheckInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_terminalCheckInstruction (& typeid (cPtr_terminalCheckInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_terminalCheckInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__terminalCheckInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_terminalCheckInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_terminalCheckInstruction (mTerminalName, mActualInputParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction::
GGS_terminalCheckInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction::
GGS_terminalCheckInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_terminalCheckInstruction GGS_terminalCheckInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_terminalCheckInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_terminalCheckInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_terminalCheckInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_terminalCheckInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_terminalCheckInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction GGS_terminalCheckInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_actualInputParameterList & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_terminalCheckInstruction result ;
  macroMyNew (result.mPointer, cPtr_terminalCheckInstruction (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_terminalCheckInstruction::
reader_mTerminalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_terminalCheckInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_terminalCheckInstruction *) mPointer)->mTerminalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualInputParameterList  GGS_terminalCheckInstruction::
reader_mActualInputParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualInputParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_terminalCheckInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_terminalCheckInstruction *) mPointer)->mActualInputParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_terminalCheckInstruction::actualTypeName (void) const {
  return "terminalCheckInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__terminalCheckInstruction ("terminalCheckInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@listOfSyntaxInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_listOfSyntaxInstructionList::
elementOf_GGS_listOfSyntaxInstructionList (const GGS_syntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mSyntaxInstructionList (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_listOfSyntaxInstructionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_listOfSyntaxInstructionList * ptr = dynamic_cast <const elementOf_GGS_listOfSyntaxInstructionList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mSyntaxInstructionList._operator_isEqual (ptr->mSyntaxInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_listOfSyntaxInstructionList::
appendForDescription (C_Compiler & inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSyntaxInstructionList.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@listOfSyntaxInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
_internalAppendValues (const GGS_syntaxInstructionList & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
_internalPrependValues (const GGS_syntaxInstructionList & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
_addAssign_operation (const GGS_syntaxInstructionList & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
_operator_concat (const GGS_listOfSyntaxInstructionList & inOperand) const {
  GGS_listOfSyntaxInstructionList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
_dotAssign_operation (const GGS_listOfSyntaxInstructionList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_listOfSyntaxInstructionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_syntaxInstructionList  p_0 = p->mSyntaxInstructionList ;
          _internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_syntaxInstructionList & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mSyntaxInstructionList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_listOfSyntaxInstructionList::
constructor_emptyList (void) {
  GGS_listOfSyntaxInstructionList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_listOfSyntaxInstructionList::
constructor_listWithValue (const GGS_syntaxInstructionList & argument_0) {
  GGS_listOfSyntaxInstructionList result ;
  result.alloc () ;
  result._addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
internalSubListWithRange (GGS_listOfSyntaxInstructionList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList._addAssign_operation (ptr->mSyntaxInstructionList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_listOfSyntaxInstructionList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@listOfSyntaxInstructionList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
method_first (C_Compiler & inLexique,
              GGS_syntaxInstructionList & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
method_last (C_Compiler & inLexique,
             GGS_syntaxInstructionList & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_syntaxInstructionList & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_popLast (C_Compiler & inLexique,
                GGS_syntaxInstructionList & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_listOfSyntaxInstructionList::
reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSyntaxInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSyntaxInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstructionList  & GGS_listOfSyntaxInstructionList::cEnumerator::_mSyntaxInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->mSyntaxInstructionList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_repeatInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_repeatInstruction::
cPtr_repeatInstruction (const GGS_syntaxInstructionList & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mRepeatedInstructionList (argument_0),
mRepeatBranchList (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_repeatInstruction * GGS_repeatInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_repeatInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_repeatInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_repeatInstruction * ptr = dynamic_cast <const cPtr_repeatInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mRepeatedInstructionList._operator_isEqual (ptr->mRepeatedInstructionList).boolValue ()
         && mRepeatBranchList._operator_isEqual (ptr->mRepeatBranchList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_repeatInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@repeatInstruction:"
           << mRepeatedInstructionList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mRepeatBranchList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_repeatInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_repeatInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_repeatInstruction (& typeid (cPtr_repeatInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_repeatInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__repeatInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_repeatInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_repeatInstruction (mRepeatedInstructionList, mRepeatBranchList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_repeatInstruction::
GGS_repeatInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_repeatInstruction::
GGS_repeatInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_repeatInstruction GGS_repeatInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_repeatInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_repeatInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_repeatInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_repeatInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_repeatInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_repeatInstruction GGS_repeatInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_syntaxInstructionList & argument_0,
                 const GGS_listOfSyntaxInstructionList & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_repeatInstruction result ;
  macroMyNew (result.mPointer, cPtr_repeatInstruction (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_repeatInstruction::
reader_mRepeatedInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_repeatInstruction::
reader_mRepeatBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mRepeatBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_repeatInstruction::actualTypeName (void) const {
  return "repeatInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__repeatInstruction ("repeatInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_selectInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_selectInstruction::
cPtr_selectInstruction (const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mSelectBranchList (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_selectInstruction * GGS_selectInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_selectInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_selectInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_selectInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_selectInstruction * ptr = dynamic_cast <const cPtr_selectInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mSelectBranchList._operator_isEqual (ptr->mSelectBranchList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_selectInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@selectInstruction:"
           << mSelectBranchList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_selectInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_selectInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_selectInstruction (& typeid (cPtr_selectInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_selectInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__selectInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_selectInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_selectInstruction (mSelectBranchList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_selectInstruction::
GGS_selectInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_selectInstruction::
GGS_selectInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_selectInstruction GGS_selectInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_selectInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_selectInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_selectInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_selectInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_selectInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_selectInstruction GGS_selectInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_selectInstruction result ;
  macroMyNew (result.mPointer, cPtr_selectInstruction (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_selectInstruction::
reader_mSelectBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_selectInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_selectInstruction *) mPointer)->mSelectBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_selectInstruction::actualTypeName (void) const {
  return "selectInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__selectInstruction ("selectInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_parseDoInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_parseDoInstruction::
cPtr_parseDoInstruction (const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mParseDoBranchList (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_parseDoInstruction * GGS_parseDoInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseDoInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_parseDoInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_parseDoInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_parseDoInstruction * ptr = dynamic_cast <const cPtr_parseDoInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mParseDoBranchList._operator_isEqual (ptr->mParseDoBranchList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_parseDoInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@parseDoInstruction:"
           << mParseDoBranchList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_parseDoInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_parseDoInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_parseDoInstruction (& typeid (cPtr_parseDoInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_parseDoInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__parseDoInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_parseDoInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_parseDoInstruction (mParseDoBranchList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_parseDoInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_parseDoInstruction::
GGS_parseDoInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_parseDoInstruction::
GGS_parseDoInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_parseDoInstruction GGS_parseDoInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_parseDoInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_parseDoInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_parseDoInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_parseDoInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_parseDoInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_parseDoInstruction GGS_parseDoInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_listOfSyntaxInstructionList & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_parseDoInstruction result ;
  macroMyNew (result.mPointer, cPtr_parseDoInstruction (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_parseDoInstruction::
reader_mParseDoBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseDoInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseDoInstruction *) mPointer)->mParseDoBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_parseDoInstruction::actualTypeName (void) const {
  return "parseDoInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__parseDoInstruction ("parseDoInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_blockInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_blockInstruction::
cPtr_blockInstruction (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualParameterList & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_actualParameterList & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstruction (THERE),
mReceiverVariable (argument_0),
mBlockMethodName (argument_1),
mPrologActualParameterList (argument_2),
mInstructionList (argument_3),
mEpilogActualParameterList (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_blockInstruction * GGS_blockInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_blockInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_blockInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_blockInstruction * ptr = dynamic_cast <const cPtr_blockInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mReceiverVariable._operator_isEqual (ptr->mReceiverVariable).boolValue ()
         && mBlockMethodName._operator_isEqual (ptr->mBlockMethodName).boolValue ()
         && mPrologActualParameterList._operator_isEqual (ptr->mPrologActualParameterList).boolValue ()
         && mInstructionList._operator_isEqual (ptr->mInstructionList).boolValue ()
         && mEpilogActualParameterList._operator_isEqual (ptr->mEpilogActualParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_blockInstruction::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@blockInstruction:"
           << mReceiverVariable.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mBlockMethodName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mPrologActualParameterList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mInstructionList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mEpilogActualParameterList.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_blockInstruction::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_blockInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_blockInstruction (& typeid (cPtr_blockInstruction), & typeid (cPtr_syntaxInstruction), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_blockInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__blockInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_blockInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_blockInstruction (mReceiverVariable, mBlockMethodName, mPrologActualParameterList, mInstructionList, mEpilogActualParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_blockInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_blockInstruction::
GGS_blockInstruction (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_blockInstruction::
GGS_blockInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_blockInstruction GGS_blockInstruction::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_blockInstruction _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_blockInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_blockInstruction) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_blockInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_blockInstruction),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_blockInstruction GGS_blockInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_actualParameterList & argument_2,
                 const GGS_syntaxInstructionList & argument_3,
                 const GGS_actualParameterList & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_blockInstruction result ;
  macroMyNew (result.mPointer, cPtr_blockInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_blockInstruction::
reader_mReceiverVariable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mReceiverVariable ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_blockInstruction::
reader_mBlockMethodName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mBlockMethodName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_blockInstruction::
reader_mPrologActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mPrologActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_blockInstruction::
reader_mInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_blockInstruction::
reader_mEpilogActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mEpilogActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_blockInstruction::actualTypeName (void) const {
  return "blockInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__blockInstruction ("blockInstruction", gClassInfoFor__syntaxInstruction) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_syntaxComponentRoot'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_syntaxComponentRoot::
cPtr_syntaxComponentRoot (const GGS_lstring & argument_0,
                                const GGS_nonterminalDeclarationList & argument_1,
                                const GGS_syntaxRuleList & argument_2,
                                const GGS_semanticDeclarationStruct& argument_3
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mSyntaxComponentName (argument_0),
mNonterminalDeclarationList (argument_1),
mRuleList (argument_2),
mSemanticDeclarations (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_syntaxComponentRoot * GGS_syntaxComponentRoot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_syntaxComponentRoot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_syntaxComponentRoot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_syntaxComponentRoot * ptr = dynamic_cast <const cPtr_syntaxComponentRoot *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mSyntaxComponentName._operator_isEqual (ptr->mSyntaxComponentName).boolValue ()
         && mNonterminalDeclarationList._operator_isEqual (ptr->mNonterminalDeclarationList).boolValue ()
         && mRuleList._operator_isEqual (ptr->mRuleList).boolValue ()
         && mSemanticDeclarations._operator_isEqual (ptr->mSemanticDeclarations).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_syntaxComponentRoot::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@syntaxComponentRoot:"
           << mSyntaxComponentName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mNonterminalDeclarationList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mRuleList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mSemanticDeclarations.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_syntaxComponentRoot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_syntaxComponentRoot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_syntaxComponentRoot (& typeid (cPtr_syntaxComponentRoot), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_syntaxComponentRoot::galgasRTTI (void) const {
  return & gClassInfoFor__syntaxComponentRoot ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_syntaxComponentRoot::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_syntaxComponentRoot (mSyntaxComponentName, mNonterminalDeclarationList, mRuleList, mSemanticDeclarations COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_syntaxComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_syntaxComponentRoot::
GGS_syntaxComponentRoot (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_syntaxComponentRoot::
GGS_syntaxComponentRoot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_syntaxComponentRoot GGS_syntaxComponentRoot::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_syntaxComponentRoot _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_syntaxComponentRoot *> (inPointer) != NULL)
      : (typeid (cPtr_syntaxComponentRoot) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_syntaxComponentRoot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_syntaxComponentRoot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxComponentRoot GGS_syntaxComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_nonterminalDeclarationList & argument_1,
                 const GGS_syntaxRuleList & argument_2,
                 const GGS_semanticDeclarationStruct& argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_syntaxComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_syntaxComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_syntaxComponentRoot::
reader_mSyntaxComponentName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxComponentRoot *) mPointer)->mSyntaxComponentName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationList  GGS_syntaxComponentRoot::
reader_mNonterminalDeclarationList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonterminalDeclarationList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxComponentRoot *) mPointer)->mNonterminalDeclarationList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleList  GGS_syntaxComponentRoot::
reader_mRuleList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxRuleList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxComponentRoot *) mPointer)->mRuleList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticDeclarationStruct GGS_syntaxComponentRoot::
reader_mSemanticDeclarations (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticDeclarationStruct  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_syntaxComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_syntaxComponentRoot *) mPointer)->mSemanticDeclarations ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_syntaxComponentRoot::actualTypeName (void) const {
  return "syntaxComponentRoot" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_syntaxComponentRoot::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__syntaxComponentRoot ("syntaxComponentRoot") ;

//---------------------------------------------------------------------------*

