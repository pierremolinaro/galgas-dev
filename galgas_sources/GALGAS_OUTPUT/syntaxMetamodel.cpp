//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'syntaxMetamodel.cpp'                         *
//             Generated by version GALGAS_BETA_VERSION [debug]              *
//                       june 2nd, 2010, at 11h58'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@syntaxInstructionList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxInstructionList::
elementOf_GGS_syntaxInstructionList (const GGS_syntaxInstructionAST & argument_0
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mInstruction (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxInstructionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxInstructionList * ptr = dynamic_cast <const elementOf_GGS_syntaxInstructionList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstruction.operator_isEqual (ptr->mInstruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxInstructionList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstruction.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@syntaxInstructionList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxInstructionList ("syntaxInstructionList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
internalAppendValues (const GGS_syntaxInstructionAST & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
internalPrependValues (const GGS_syntaxInstructionAST & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
addAssign_operation (const GGS_syntaxInstructionAST & argument_0) {
  if (isBuilt ()&& argument_0.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
operator_concat (const GGS_syntaxInstructionList & inOperand) const {
  GGS_syntaxInstructionList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
dotAssign_operation (const GGS_syntaxInstructionList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_syntaxInstructionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_syntaxInstructionAST  p_0 = p->mInstruction ;
          internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_syntaxInstructionAST & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mInstruction
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxInstructionList::
constructor_emptyList (void) {
  GGS_syntaxInstructionList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxInstructionList::
constructor_listWithValue (const GGS_syntaxInstructionAST & argument_0) {
  GGS_syntaxInstructionList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
internalSubListWithRange (GGS_syntaxInstructionList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mInstruction) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxInstructionList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@syntaxInstructionList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
method_first (C_Compiler & inLexique,
              GGS_syntaxInstructionAST & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
method_last (C_Compiler & inLexique,
             GGS_syntaxInstructionAST & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_syntaxInstructionAST & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_popLast (C_Compiler & inLexique,
                GGS_syntaxInstructionAST & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mInstruction ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionAST  GGS_syntaxInstructionList::
reader_mInstructionAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstruction ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxInstructionList::
modifier_setMInstructionAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstruction = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstructionAST  & GGS_syntaxInstructionList::cEnumerator::_mInstruction (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mInstruction ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_syntaxInstructionList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_syntaxInstructionList * p = NULL ;
    macroMyNew (p, GGS_syntaxInstructionList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList GGS_syntaxInstructionList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_syntaxInstructionList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_syntaxInstructionList * p = dynamic_cast <const GGS_syntaxInstructionList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_syntaxInstructionList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_syntaxInstructionList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_syntaxInstructionList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@nonTerminalLabelListAST'                 *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonTerminalLabelListAST::
elementOf_GGS_nonTerminalLabelListAST (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mLabelName (argument_0),
mFormalArgumentList (argument_1),
mEndOfArgumentLocation (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonTerminalLabelListAST::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_nonTerminalLabelListAST * ptr = dynamic_cast <const elementOf_GGS_nonTerminalLabelListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mLabelName.operator_isEqual (ptr->mLabelName).boolValue ()
         && mFormalArgumentList.operator_isEqual (ptr->mFormalArgumentList).boolValue ()
         && mEndOfArgumentLocation.operator_isEqual (ptr->mEndOfArgumentLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonTerminalLabelListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalArgumentList.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfArgumentLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@nonTerminalLabelListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonTerminalLabelListAST ("nonTerminalLabelListAST", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListAST & argument_1,
                    const GGS_location & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListAST & argument_1,
                    const GGS_location & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST GGS_nonTerminalLabelListAST::
operator_concat (const GGS_nonTerminalLabelListAST & inOperand) const {
  GGS_nonTerminalLabelListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
dotAssign_operation (const GGS_nonTerminalLabelListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_nonTerminalLabelListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_formalParameterListAST  p_1 = p->mFormalArgumentList ;
          GGS_location  p_2 = p->mEndOfArgumentLocation ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameterListAST & argument_1,
                     const GGS_location & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mLabelName,
                                ptr->mFormalArgumentList,
                                ptr->mEndOfArgumentLocation
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST  GGS_nonTerminalLabelListAST::
constructor_emptyList (void) {
  GGS_nonTerminalLabelListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST  GGS_nonTerminalLabelListAST::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2) {
  GGS_nonTerminalLabelListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
internalSubListWithRange (GGS_nonTerminalLabelListAST & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mLabelName, ptr->mFormalArgumentList, ptr->mEndOfArgumentLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST GGS_nonTerminalLabelListAST::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelListAST result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST GGS_nonTerminalLabelListAST::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelListAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonTerminalLabelListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@nonTerminalLabelListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_formalParameterListAST & _out_1,
              GGS_location & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArgumentList ;
    _out_2 = ptr->mEndOfArgumentLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_formalParameterListAST & _out_1,
             GGS_location & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArgumentList ;
    _out_2 = ptr->mEndOfArgumentLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_formalParameterListAST & _out_1,
                 GGS_location & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArgumentList ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_formalParameterListAST & _out_1,
                GGS_location & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArgumentList ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonTerminalLabelListAST::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterListAST  GGS_nonTerminalLabelListAST::
reader_mFormalArgumentListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterListAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalArgumentList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_nonTerminalLabelListAST::
reader_mEndOfArgumentLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfArgumentLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_setMFormalArgumentListAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalArgumentList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonTerminalLabelListAST::
modifier_setMEndOfArgumentLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfArgumentLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_nonTerminalLabelListAST::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabelName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterListAST  & GGS_nonTerminalLabelListAST::cEnumerator::_mFormalArgumentList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mFormalArgumentList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_nonTerminalLabelListAST::cEnumerator::_mEndOfArgumentLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOfArgumentLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_nonTerminalLabelListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_nonTerminalLabelListAST * p = NULL ;
    macroMyNew (p, GGS_nonTerminalLabelListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST GGS_nonTerminalLabelListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_nonTerminalLabelListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_nonTerminalLabelListAST * p = dynamic_cast <const GGS_nonTerminalLabelListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_nonTerminalLabelListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_nonTerminalLabelListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_nonTerminalLabelListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@nonterminalDeclarationListAST'              *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_nonterminalDeclarationListAST::
elementOf_GGS_nonterminalDeclarationListAST (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mNonterminalName (argument_0),
mLabels (argument_1),
mHasParseLabel (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_nonterminalDeclarationListAST::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_nonterminalDeclarationListAST * ptr = dynamic_cast <const elementOf_GGS_nonterminalDeclarationListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName.operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabels.operator_isEqual (ptr->mLabels).boolValue ()
         && mHasParseLabel.operator_isEqual (ptr->mHasParseLabel).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_nonterminalDeclarationListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNonterminalName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabels.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mHasParseLabel.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  List '@nonterminalDeclarationListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalDeclarationListAST ("nonterminalDeclarationListAST", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_nonTerminalLabelListAST & argument_1,
                    const GGS_bool& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_nonTerminalLabelListAST & argument_1,
                    const GGS_bool& argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST GGS_nonterminalDeclarationListAST::
operator_concat (const GGS_nonterminalDeclarationListAST & inOperand) const {
  GGS_nonterminalDeclarationListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
dotAssign_operation (const GGS_nonterminalDeclarationListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_nonterminalDeclarationListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mNonterminalName ;
          GGS_nonTerminalLabelListAST  p_1 = p->mLabels ;
          GGS_bool p_2 = p->mHasParseLabel ;
          internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_nonTerminalLabelListAST & argument_1,
                     const GGS_bool& argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mNonterminalName,
                                ptr->mLabels,
                                ptr->mHasParseLabel
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST  GGS_nonterminalDeclarationListAST::
constructor_emptyList (void) {
  GGS_nonterminalDeclarationListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST  GGS_nonterminalDeclarationListAST::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_nonTerminalLabelListAST & argument_1,
                                const GGS_bool& argument_2) {
  GGS_nonterminalDeclarationListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
internalSubListWithRange (GGS_nonterminalDeclarationListAST & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mNonterminalName, ptr->mLabels, ptr->mHasParseLabel) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST GGS_nonterminalDeclarationListAST::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_nonterminalDeclarationListAST result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST GGS_nonterminalDeclarationListAST::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_nonterminalDeclarationListAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_nonterminalDeclarationListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@nonterminalDeclarationListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_nonTerminalLabelListAST & _out_1,
              GGS_bool& _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_nonTerminalLabelListAST & _out_1,
             GGS_bool& _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_nonTerminalLabelListAST & _out_1,
                 GGS_bool& _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_nonTerminalLabelListAST & _out_1,
                GGS_bool& _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabels ;
    _out_2 = ptr->mHasParseLabel ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalDeclarationListAST::
reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNonterminalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST  GGS_nonterminalDeclarationListAST::
reader_mLabelsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_nonTerminalLabelListAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabels ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_nonterminalDeclarationListAST::
reader_mHasParseLabelAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mHasParseLabel ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNonterminalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_setMLabelsAtIndex (C_Compiler & inLexique,
                              const GGS_nonTerminalLabelListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabels = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_nonterminalDeclarationListAST::
modifier_setMHasParseLabelAtIndex (C_Compiler & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mHasParseLabel = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_nonterminalDeclarationListAST::cEnumerator::_mNonterminalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNonterminalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_nonTerminalLabelListAST  & GGS_nonterminalDeclarationListAST::cEnumerator::_mLabels (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabels ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_nonterminalDeclarationListAST::cEnumerator::_mHasParseLabel (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mHasParseLabel ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_nonterminalDeclarationListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_nonterminalDeclarationListAST * p = NULL ;
    macroMyNew (p, GGS_nonterminalDeclarationListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalDeclarationListAST GGS_nonterminalDeclarationListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_nonterminalDeclarationListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_nonterminalDeclarationListAST * p = dynamic_cast <const GGS_nonterminalDeclarationListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_nonterminalDeclarationListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_nonterminalDeclarationListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_nonterminalDeclarationListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Element of list '@syntaxRuleLabelListAST'                  *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxRuleLabelListAST::
elementOf_GGS_syntaxRuleLabelListAST (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mLabelName (argument_0),
mFormalArguments (argument_1),
mEndOfArgumentLocation (argument_2),
mSyntaxInstructionList (argument_3),
mEndOfInstructionList (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxRuleLabelListAST::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxRuleLabelListAST * ptr = dynamic_cast <const elementOf_GGS_syntaxRuleLabelListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mLabelName.operator_isEqual (ptr->mLabelName).boolValue ()
         && mFormalArguments.operator_isEqual (ptr->mFormalArguments).boolValue ()
         && mEndOfArgumentLocation.operator_isEqual (ptr->mEndOfArgumentLocation).boolValue ()
         && mSyntaxInstructionList.operator_isEqual (ptr->mSyntaxInstructionList).boolValue ()
         && mEndOfInstructionList.operator_isEqual (ptr->mEndOfInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxRuleLabelListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalArguments.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfArgumentLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSyntaxInstructionList.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfInstructionList.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@syntaxRuleLabelListAST'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleLabelListAST ("syntaxRuleLabelListAST", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListAST & argument_1,
                    const GGS_location & argument_2,
                    const GGS_syntaxInstructionList & argument_3,
                    const GGS_location & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_formalParameterListAST & argument_1,
                    const GGS_location & argument_2,
                    const GGS_syntaxInstructionList & argument_3,
                    const GGS_location & argument_4
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()&& argument_4.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST GGS_syntaxRuleLabelListAST::
operator_concat (const GGS_syntaxRuleLabelListAST & inOperand) const {
  GGS_syntaxRuleLabelListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
dotAssign_operation (const GGS_syntaxRuleLabelListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_syntaxRuleLabelListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_formalParameterListAST  p_1 = p->mFormalArguments ;
          GGS_location  p_2 = p->mEndOfArgumentLocation ;
          GGS_syntaxInstructionList  p_3 = p->mSyntaxInstructionList ;
          GGS_location  p_4 = p->mEndOfInstructionList ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_formalParameterListAST & argument_1,
                     const GGS_location & argument_2,
                     const GGS_syntaxInstructionList & argument_3,
                     const GGS_location & argument_4
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mLabelName,
                                ptr->mFormalArguments,
                                ptr->mEndOfArgumentLocation,
                                ptr->mSyntaxInstructionList,
                                ptr->mEndOfInstructionList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST  GGS_syntaxRuleLabelListAST::
constructor_emptyList (void) {
  GGS_syntaxRuleLabelListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST  GGS_syntaxRuleLabelListAST::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_formalParameterListAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_location & argument_4) {
  GGS_syntaxRuleLabelListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
internalSubListWithRange (GGS_syntaxRuleLabelListAST & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mLabelName, ptr->mFormalArguments, ptr->mEndOfArgumentLocation, ptr->mSyntaxInstructionList, ptr->mEndOfInstructionList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST GGS_syntaxRuleLabelListAST::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelListAST result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST GGS_syntaxRuleLabelListAST::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelListAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxRuleLabelListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@syntaxRuleLabelListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_formalParameterListAST & _out_1,
              GGS_location & _out_2,
              GGS_syntaxInstructionList & _out_3,
              GGS_location & _out_4
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArguments ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    _out_3 = ptr->mSyntaxInstructionList ;
    _out_4 = ptr->mEndOfInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_formalParameterListAST & _out_1,
             GGS_location & _out_2,
             GGS_syntaxInstructionList & _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArguments ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    _out_3 = ptr->mSyntaxInstructionList ;
    _out_4 = ptr->mEndOfInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_formalParameterListAST & _out_1,
                 GGS_location & _out_2,
                 GGS_syntaxInstructionList & _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArguments ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    _out_3 = ptr->mSyntaxInstructionList ;
    _out_4 = ptr->mEndOfInstructionList ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_formalParameterListAST & _out_1,
                GGS_location & _out_2,
                GGS_syntaxInstructionList & _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mLabelName ;
    _out_1 = ptr->mFormalArguments ;
    _out_2 = ptr->mEndOfArgumentLocation ;
    _out_3 = ptr->mSyntaxInstructionList ;
    _out_4 = ptr->mEndOfInstructionList ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_syntaxRuleLabelListAST::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterListAST  GGS_syntaxRuleLabelListAST::
reader_mFormalArgumentsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalParameterListAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalArguments ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_syntaxRuleLabelListAST::
reader_mEndOfArgumentLocationAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfArgumentLocation ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_syntaxRuleLabelListAST::
reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSyntaxInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_syntaxRuleLabelListAST::
reader_mEndOfInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_setMFormalArgumentsAtIndex (C_Compiler & inLexique,
                              const GGS_formalParameterListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalArguments = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_setMEndOfArgumentLocationAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfArgumentLocation = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSyntaxInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleLabelListAST::
modifier_setMEndOfInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_syntaxRuleLabelListAST::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabelName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterListAST  & GGS_syntaxRuleLabelListAST::cEnumerator::_mFormalArguments (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mFormalArguments ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_syntaxRuleLabelListAST::cEnumerator::_mEndOfArgumentLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOfArgumentLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstructionList  & GGS_syntaxRuleLabelListAST::cEnumerator::_mSyntaxInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSyntaxInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_syntaxRuleLabelListAST::cEnumerator::_mEndOfInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOfInstructionList ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_syntaxRuleLabelListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_syntaxRuleLabelListAST * p = NULL ;
    macroMyNew (p, GGS_syntaxRuleLabelListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST GGS_syntaxRuleLabelListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_syntaxRuleLabelListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_syntaxRuleLabelListAST * p = dynamic_cast <const GGS_syntaxRuleLabelListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_syntaxRuleLabelListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_syntaxRuleLabelListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_syntaxRuleLabelListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@syntaxRuleListAST'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_syntaxRuleListAST::
elementOf_GGS_syntaxRuleListAST (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mNonterminalName (argument_0),
mLabelList (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_syntaxRuleListAST::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_syntaxRuleListAST * ptr = dynamic_cast <const elementOf_GGS_syntaxRuleListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mNonterminalName.operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabelList.operator_isEqual (ptr->mLabelList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_syntaxRuleListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mNonterminalName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelList.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@syntaxRuleListAST'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxRuleListAST ("syntaxRuleListAST", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_syntaxRuleLabelListAST & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_syntaxRuleLabelListAST & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST GGS_syntaxRuleListAST::
operator_concat (const GGS_syntaxRuleListAST & inOperand) const {
  GGS_syntaxRuleListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
dotAssign_operation (const GGS_syntaxRuleListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_syntaxRuleListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mNonterminalName ;
          GGS_syntaxRuleLabelListAST  p_1 = p->mLabelList ;
          internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_syntaxRuleLabelListAST & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mNonterminalName,
                                ptr->mLabelList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST  GGS_syntaxRuleListAST::
constructor_emptyList (void) {
  GGS_syntaxRuleListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST  GGS_syntaxRuleListAST::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_syntaxRuleLabelListAST & argument_1) {
  GGS_syntaxRuleListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
internalSubListWithRange (GGS_syntaxRuleListAST & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mNonterminalName, ptr->mLabelList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST GGS_syntaxRuleListAST::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleListAST result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST GGS_syntaxRuleListAST::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleListAST result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxRuleListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@syntaxRuleListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
method_first (C_Compiler & inLexique,
              GGS_lstring & _out_0,
              GGS_syntaxRuleLabelListAST & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
method_last (C_Compiler & inLexique,
             GGS_lstring & _out_0,
             GGS_syntaxRuleLabelListAST & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_lstring & _out_0,
                 GGS_syntaxRuleLabelListAST & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
modifier_popLast (C_Compiler & inLexique,
                GGS_lstring & _out_0,
                GGS_syntaxRuleLabelListAST & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mNonterminalName ;
    _out_1 = ptr->mLabelList ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_syntaxRuleListAST::
reader_mNonterminalNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mNonterminalName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleLabelListAST  GGS_syntaxRuleListAST::
reader_mLabelListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxRuleLabelListAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
modifier_setMNonterminalNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mNonterminalName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_syntaxRuleListAST::
modifier_setMLabelListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxRuleLabelListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_syntaxRuleListAST::cEnumerator::_mNonterminalName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mNonterminalName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxRuleLabelListAST  & GGS_syntaxRuleListAST::cEnumerator::_mLabelList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mLabelList ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_syntaxRuleListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_syntaxRuleListAST * p = NULL ;
    macroMyNew (p, GGS_syntaxRuleListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxRuleListAST GGS_syntaxRuleListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_syntaxRuleListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_syntaxRuleListAST * p = dynamic_cast <const GGS_syntaxRuleListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_syntaxRuleListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_syntaxRuleListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_syntaxRuleListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'cPtr_nonterminalCallInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_nonterminalCallInstruction::
cPtr_nonterminalCallInstruction (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mNonterminalName (argument_1),
mLabelName (argument_2),
mActualParameterList (argument_3) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_nonterminalCallInstruction * GGS_nonterminalCallInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_nonterminalCallInstruction) ;
    return (cPtr_nonterminalCallInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_nonterminalCallInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_nonterminalCallInstruction * ptr = dynamic_cast <const cPtr_nonterminalCallInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mNonterminalName.operator_isEqual (ptr->mNonterminalName).boolValue ()
         && mLabelName.operator_isEqual (ptr->mLabelName).boolValue ()
         && mActualParameterList.operator_isEqual (ptr->mActualParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_nonterminalCallInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@nonterminalCallInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mNonterminalName.reader_description (inIndentation + 1)
           << mLabelName.reader_description (inIndentation + 1)
           << mActualParameterList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_nonterminalCallInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_nonterminalCallInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_nonterminalCallInstruction (& typeid (cPtr_nonterminalCallInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_nonterminalCallInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__nonterminalCallInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_nonterminalCallInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_nonterminalCallInstruction (mInstructionLocation, mNonterminalName, mLabelName, mActualParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_nonterminalCallInstruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_nonterminalCallInstruction ("nonterminalCallInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction::
GGS_nonterminalCallInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction::
GGS_nonterminalCallInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_nonterminalCallInstruction GGS_nonterminalCallInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_nonterminalCallInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_nonterminalCallInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_nonterminalCallInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_nonterminalCallInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_nonterminalCallInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction GGS_nonterminalCallInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_actualParameterListAST & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_nonterminalCallInstruction result ;
  macroMyNew (result.mPointer, cPtr_nonterminalCallInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalCallInstruction::
reader_mNonterminalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mNonterminalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_nonterminalCallInstruction::
reader_mLabelName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mLabelName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterListAST  GGS_nonterminalCallInstruction::
reader_mActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_nonterminalCallInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_nonterminalCallInstruction *) mPointer)->mActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_nonterminalCallInstruction::actualTypeName (void) const {
  return "nonterminalCallInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__nonterminalCallInstruction ("nonterminalCallInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_nonterminalCallInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_nonterminalCallInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_nonterminalCallInstruction * p = NULL ;
    macroMyNew (p, GGS_nonterminalCallInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonterminalCallInstruction GGS_nonterminalCallInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_nonterminalCallInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_nonterminalCallInstruction * p = dynamic_cast <const GGS_nonterminalCallInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_nonterminalCallInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_nonterminalCallInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_nonterminalCallInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'cPtr_terminalCheckInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_terminalCheckInstruction::
cPtr_terminalCheckInstruction (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_actualInputParameterListAST & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mTerminalName (argument_1),
mActualInputParameterList (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_terminalCheckInstruction * GGS_terminalCheckInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_terminalCheckInstruction) ;
    return (cPtr_terminalCheckInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_terminalCheckInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_terminalCheckInstruction * ptr = dynamic_cast <const cPtr_terminalCheckInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mTerminalName.operator_isEqual (ptr->mTerminalName).boolValue ()
         && mActualInputParameterList.operator_isEqual (ptr->mActualInputParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_terminalCheckInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@terminalCheckInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mTerminalName.reader_description (inIndentation + 1)
           << mActualInputParameterList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_terminalCheckInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_terminalCheckInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_terminalCheckInstruction (& typeid (cPtr_terminalCheckInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_terminalCheckInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__terminalCheckInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_terminalCheckInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_terminalCheckInstruction (mInstructionLocation, mTerminalName, mActualInputParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_terminalCheckInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_terminalCheckInstruction ("terminalCheckInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction::
GGS_terminalCheckInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction::
GGS_terminalCheckInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_terminalCheckInstruction GGS_terminalCheckInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_terminalCheckInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_terminalCheckInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_terminalCheckInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_terminalCheckInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_terminalCheckInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction GGS_terminalCheckInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_actualInputParameterListAST & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_terminalCheckInstruction result ;
  macroMyNew (result.mPointer, cPtr_terminalCheckInstruction (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_terminalCheckInstruction::
reader_mTerminalName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_terminalCheckInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_terminalCheckInstruction *) mPointer)->mTerminalName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualInputParameterListAST  GGS_terminalCheckInstruction::
reader_mActualInputParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualInputParameterListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_terminalCheckInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_terminalCheckInstruction *) mPointer)->mActualInputParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_terminalCheckInstruction::actualTypeName (void) const {
  return "terminalCheckInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__terminalCheckInstruction ("terminalCheckInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_terminalCheckInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_terminalCheckInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_terminalCheckInstruction * p = NULL ;
    macroMyNew (p, GGS_terminalCheckInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_terminalCheckInstruction GGS_terminalCheckInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_terminalCheckInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_terminalCheckInstruction * p = dynamic_cast <const GGS_terminalCheckInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_terminalCheckInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_terminalCheckInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_terminalCheckInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@listOfSyntaxInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_listOfSyntaxInstructionList::
elementOf_GGS_listOfSyntaxInstructionList (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mSyntaxInstructionList (argument_0),
mEndOf_instructions (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_listOfSyntaxInstructionList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_listOfSyntaxInstructionList * ptr = dynamic_cast <const elementOf_GGS_listOfSyntaxInstructionList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mSyntaxInstructionList.operator_isEqual (ptr->mSyntaxInstructionList).boolValue ()
         && mEndOf_instructions.operator_isEqual (ptr->mEndOf_instructions).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_listOfSyntaxInstructionList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSyntaxInstructionList.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOf_instructions.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@listOfSyntaxInstructionList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_listOfSyntaxInstructionList ("listOfSyntaxInstructionList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
internalAppendValues (const GGS_syntaxInstructionList & argument_0,
                    const GGS_location & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
internalPrependValues (const GGS_syntaxInstructionList & argument_0,
                    const GGS_location & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  macroRetainObject (newElement) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
addAssign_operation (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
operator_concat (const GGS_listOfSyntaxInstructionList & inOperand) const {
  GGS_listOfSyntaxInstructionList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
dotAssign_operation (const GGS_listOfSyntaxInstructionList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_listOfSyntaxInstructionList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_syntaxInstructionList  p_0 = p->mSyntaxInstructionList ;
          GGS_location  p_1 = p->mEndOf_instructions ;
          internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_syntaxInstructionList & argument_0,
                     const GGS_location & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mSyntaxInstructionList,
                                ptr->mEndOf_instructions
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_listOfSyntaxInstructionList::
constructor_emptyList (void) {
  GGS_listOfSyntaxInstructionList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_listOfSyntaxInstructionList::
constructor_listWithValue (const GGS_syntaxInstructionList & argument_0,
                                const GGS_location & argument_1) {
  GGS_listOfSyntaxInstructionList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
internalSubListWithRange (GGS_listOfSyntaxInstructionList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mSyntaxInstructionList, ptr->mEndOf_instructions) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_listOfSyntaxInstructionList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@listOfSyntaxInstructionList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
method_first (C_Compiler & inLexique,
              GGS_syntaxInstructionList & _out_0,
              GGS_location & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _out_1 = ptr->mEndOf_instructions ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
method_last (C_Compiler & inLexique,
             GGS_syntaxInstructionList & _out_0,
             GGS_location & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _out_1 = ptr->mEndOf_instructions ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_syntaxInstructionList & _out_0,
                 GGS_location & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _out_1 = ptr->mEndOf_instructions ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_popLast (C_Compiler & inLexique,
                GGS_syntaxInstructionList & _out_0,
                GGS_location & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSyntaxInstructionList ;
    _out_1 = ptr->mEndOf_instructions ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_listOfSyntaxInstructionList::
reader_mSyntaxInstructionListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_syntaxInstructionList  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSyntaxInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_listOfSyntaxInstructionList::
reader_mEndOf_instructionsAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOf_instructions ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_setMSyntaxInstructionListAtIndex (C_Compiler & inLexique,
                              const GGS_syntaxInstructionList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSyntaxInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_listOfSyntaxInstructionList::
modifier_setMEndOf_instructionsAtIndex (C_Compiler & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOf_instructions = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_syntaxInstructionList  & GGS_listOfSyntaxInstructionList::cEnumerator::_mSyntaxInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSyntaxInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_listOfSyntaxInstructionList::cEnumerator::_mEndOf_instructions (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOf_instructions ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_listOfSyntaxInstructionList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_listOfSyntaxInstructionList * p = NULL ;
    macroMyNew (p, GGS_listOfSyntaxInstructionList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList GGS_listOfSyntaxInstructionList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_listOfSyntaxInstructionList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_listOfSyntaxInstructionList * p = dynamic_cast <const GGS_listOfSyntaxInstructionList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_listOfSyntaxInstructionList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_listOfSyntaxInstructionList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_listOfSyntaxInstructionList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_repeatInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_repeatInstruction::
cPtr_repeatInstruction (const GGS_location & argument_0,
                                const GGS_syntaxInstructionList & argument_1,
                                const GGS_location & argument_2,
                                const GGS_listOfSyntaxInstructionList & argument_3,
                                const GGS_location & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mRepeatedInstructionList (argument_1),
mEndOf_repeated_instructions_branch (argument_2),
mRepeatBranchList (argument_3),
mEndOf_repeat_instruction (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_repeatInstruction * GGS_repeatInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_repeatInstruction) ;
    return (cPtr_repeatInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_repeatInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_repeatInstruction * ptr = dynamic_cast <const cPtr_repeatInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mRepeatedInstructionList.operator_isEqual (ptr->mRepeatedInstructionList).boolValue ()
         && mEndOf_repeated_instructions_branch.operator_isEqual (ptr->mEndOf_repeated_instructions_branch).boolValue ()
         && mRepeatBranchList.operator_isEqual (ptr->mRepeatBranchList).boolValue ()
         && mEndOf_repeat_instruction.operator_isEqual (ptr->mEndOf_repeat_instruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_repeatInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@repeatInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mRepeatedInstructionList.reader_description (inIndentation + 1)
           << mEndOf_repeated_instructions_branch.reader_description (inIndentation + 1)
           << mRepeatBranchList.reader_description (inIndentation + 1)
           << mEndOf_repeat_instruction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_repeatInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_repeatInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_repeatInstruction (& typeid (cPtr_repeatInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_repeatInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__repeatInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_repeatInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_repeatInstruction (mInstructionLocation, mRepeatedInstructionList, mEndOf_repeated_instructions_branch, mRepeatBranchList, mEndOf_repeat_instruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_repeatInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_repeatInstruction ("repeatInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_repeatInstruction::
GGS_repeatInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_repeatInstruction::
GGS_repeatInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_repeatInstruction GGS_repeatInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_repeatInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_repeatInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_repeatInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_repeatInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_repeatInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_repeatInstruction GGS_repeatInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_syntaxInstructionList & argument_1,
                 const GGS_location & argument_2,
                 const GGS_listOfSyntaxInstructionList & argument_3,
                 const GGS_location & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_repeatInstruction result ;
  macroMyNew (result.mPointer, cPtr_repeatInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_repeatInstruction::
reader_mRepeatedInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mRepeatedInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_repeatInstruction::
reader_mEndOf_repeated_instructions_branch (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mEndOf_repeated_instructions_branch ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_repeatInstruction::
reader_mRepeatBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mRepeatBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_repeatInstruction::
reader_mEndOf_repeat_instruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_repeatInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_repeatInstruction *) mPointer)->mEndOf_repeat_instruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_repeatInstruction::actualTypeName (void) const {
  return "repeatInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__repeatInstruction ("repeatInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_repeatInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_repeatInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_repeatInstruction * p = NULL ;
    macroMyNew (p, GGS_repeatInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_repeatInstruction GGS_repeatInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_repeatInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_repeatInstruction * p = dynamic_cast <const GGS_repeatInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_repeatInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_repeatInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_repeatInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_selectInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_selectInstruction::
cPtr_selectInstruction (const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mSelectBranchList (argument_1),
mEndOf_select_instruction (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_selectInstruction * GGS_selectInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_selectInstruction) ;
    return (cPtr_selectInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_selectInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_selectInstruction * ptr = dynamic_cast <const cPtr_selectInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mSelectBranchList.operator_isEqual (ptr->mSelectBranchList).boolValue ()
         && mEndOf_select_instruction.operator_isEqual (ptr->mEndOf_select_instruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_selectInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@selectInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mSelectBranchList.reader_description (inIndentation + 1)
           << mEndOf_select_instruction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_selectInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_selectInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_selectInstruction (& typeid (cPtr_selectInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_selectInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__selectInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_selectInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_selectInstruction (mInstructionLocation, mSelectBranchList, mEndOf_select_instruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_selectInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_selectInstruction ("selectInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_selectInstruction::
GGS_selectInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_selectInstruction::
GGS_selectInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_selectInstruction GGS_selectInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_selectInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_selectInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_selectInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_selectInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_selectInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_selectInstruction GGS_selectInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_listOfSyntaxInstructionList & argument_1,
                 const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_selectInstruction result ;
  macroMyNew (result.mPointer, cPtr_selectInstruction (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_selectInstruction::
reader_mSelectBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_selectInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_selectInstruction *) mPointer)->mSelectBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_selectInstruction::
reader_mEndOf_select_instruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_selectInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_selectInstruction *) mPointer)->mEndOf_select_instruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_selectInstruction::actualTypeName (void) const {
  return "selectInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__selectInstruction ("selectInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_selectInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_selectInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_selectInstruction * p = NULL ;
    macroMyNew (p, GGS_selectInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_selectInstruction GGS_selectInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_selectInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_selectInstruction * p = dynamic_cast <const GGS_selectInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_selectInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_selectInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_selectInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_parseDoInstruction'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_parseDoInstruction::
cPtr_parseDoInstruction (const GGS_location & argument_0,
                                const GGS_listOfSyntaxInstructionList & argument_1,
                                const GGS_location & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mParseDoBranchList (argument_1),
mEndOfParseDoInstruction (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_parseDoInstruction * GGS_parseDoInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_parseDoInstruction) ;
    return (cPtr_parseDoInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_parseDoInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_parseDoInstruction * ptr = dynamic_cast <const cPtr_parseDoInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mParseDoBranchList.operator_isEqual (ptr->mParseDoBranchList).boolValue ()
         && mEndOfParseDoInstruction.operator_isEqual (ptr->mEndOfParseDoInstruction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_parseDoInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@parseDoInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mParseDoBranchList.reader_description (inIndentation + 1)
           << mEndOfParseDoInstruction.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_parseDoInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_parseDoInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_parseDoInstruction (& typeid (cPtr_parseDoInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_parseDoInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__parseDoInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_parseDoInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_parseDoInstruction (mInstructionLocation, mParseDoBranchList, mEndOfParseDoInstruction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_parseDoInstruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseDoInstruction ("parseDoInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_parseDoInstruction::
GGS_parseDoInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_parseDoInstruction::
GGS_parseDoInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_parseDoInstruction GGS_parseDoInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_parseDoInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_parseDoInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_parseDoInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_parseDoInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_parseDoInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseDoInstruction GGS_parseDoInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_listOfSyntaxInstructionList & argument_1,
                 const GGS_location & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_parseDoInstruction result ;
  macroMyNew (result.mPointer, cPtr_parseDoInstruction (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_listOfSyntaxInstructionList  GGS_parseDoInstruction::
reader_mParseDoBranchList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_listOfSyntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseDoInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseDoInstruction *) mPointer)->mParseDoBranchList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseDoInstruction::
reader_mEndOfParseDoInstruction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseDoInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseDoInstruction *) mPointer)->mEndOfParseDoInstruction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_parseDoInstruction::actualTypeName (void) const {
  return "parseDoInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__parseDoInstruction ("parseDoInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_parseDoInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_parseDoInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_parseDoInstruction * p = NULL ;
    macroMyNew (p, GGS_parseDoInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseDoInstruction GGS_parseDoInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_parseDoInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_parseDoInstruction * p = dynamic_cast <const GGS_parseDoInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_parseDoInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_parseDoInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_parseDoInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_parseLoopInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_parseLoopInstruction::
cPtr_parseLoopInstruction (const GGS_location & argument_0,
                                const GGS_semanticExpressionAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_semanticExpressionAST & argument_3,
                                const GGS_location & argument_4,
                                const GGS_syntaxInstructionList & argument_5,
                                const GGS_location & argument_6
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mVariantExpression (argument_1),
mEndOfVariantExpression (argument_2),
mWhileExpression (argument_3),
mEndOfWhileExpression (argument_4),
mDoInstructionList (argument_5),
mEndOfInstructionList (argument_6) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_parseLoopInstruction * GGS_parseLoopInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_parseLoopInstruction) ;
    return (cPtr_parseLoopInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_parseLoopInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_parseLoopInstruction * ptr = dynamic_cast <const cPtr_parseLoopInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mVariantExpression.operator_isEqual (ptr->mVariantExpression).boolValue ()
         && mEndOfVariantExpression.operator_isEqual (ptr->mEndOfVariantExpression).boolValue ()
         && mWhileExpression.operator_isEqual (ptr->mWhileExpression).boolValue ()
         && mEndOfWhileExpression.operator_isEqual (ptr->mEndOfWhileExpression).boolValue ()
         && mDoInstructionList.operator_isEqual (ptr->mDoInstructionList).boolValue ()
         && mEndOfInstructionList.operator_isEqual (ptr->mEndOfInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_parseLoopInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@parseLoopInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mVariantExpression.reader_description (inIndentation + 1)
           << mEndOfVariantExpression.reader_description (inIndentation + 1)
           << mWhileExpression.reader_description (inIndentation + 1)
           << mEndOfWhileExpression.reader_description (inIndentation + 1)
           << mDoInstructionList.reader_description (inIndentation + 1)
           << mEndOfInstructionList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_parseLoopInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_parseLoopInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_parseLoopInstruction (& typeid (cPtr_parseLoopInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_parseLoopInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__parseLoopInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_parseLoopInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_parseLoopInstruction (mInstructionLocation, mVariantExpression, mEndOfVariantExpression, mWhileExpression, mEndOfWhileExpression, mDoInstructionList, mEndOfInstructionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseLoopInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseLoopInstruction ("parseLoopInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_parseLoopInstruction::
GGS_parseLoopInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_parseLoopInstruction::
GGS_parseLoopInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_parseLoopInstruction GGS_parseLoopInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_parseLoopInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_parseLoopInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_parseLoopInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_parseLoopInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_parseLoopInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseLoopInstruction GGS_parseLoopInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_semanticExpressionAST & argument_1,
                 const GGS_location & argument_2,
                 const GGS_semanticExpressionAST & argument_3,
                 const GGS_location & argument_4,
                 const GGS_syntaxInstructionList & argument_5,
                 const GGS_location & argument_6
                                COMMA_LOCATION_ARGS) {
  GGS_parseLoopInstruction result ;
  macroMyNew (result.mPointer, cPtr_parseLoopInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticExpressionAST  GGS_parseLoopInstruction::
reader_mVariantExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticExpressionAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mVariantExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseLoopInstruction::
reader_mEndOfVariantExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mEndOfVariantExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticExpressionAST  GGS_parseLoopInstruction::
reader_mWhileExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticExpressionAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mWhileExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseLoopInstruction::
reader_mEndOfWhileExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mEndOfWhileExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_parseLoopInstruction::
reader_mDoInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mDoInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseLoopInstruction::
reader_mEndOfInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseLoopInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseLoopInstruction *) mPointer)->mEndOfInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_parseLoopInstruction::actualTypeName (void) const {
  return "parseLoopInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__parseLoopInstruction ("parseLoopInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_parseLoopInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_parseLoopInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_parseLoopInstruction * p = NULL ;
    macroMyNew (p, GGS_parseLoopInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseLoopInstruction GGS_parseLoopInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_parseLoopInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_parseLoopInstruction * p = dynamic_cast <const GGS_parseLoopInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_parseLoopInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_parseLoopInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_parseLoopInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_parseWhenInstruction'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_parseWhenInstruction::
cPtr_parseWhenInstruction (const GGS_location & argument_0,
                                const GGS_semanticExpressionAST & argument_1,
                                const GGS_location & argument_2,
                                const GGS_syntaxInstructionList & argument_3,
                                const GGS_syntaxInstructionList & argument_4,
                                const GGS_location & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mWhenExpression (argument_1),
mEndOfWhenExpression (argument_2),
mWhenInstructionList (argument_3),
mElseInstructionList (argument_4),
mEndOfElseInstructionList (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_parseWhenInstruction * GGS_parseWhenInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_parseWhenInstruction) ;
    return (cPtr_parseWhenInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_parseWhenInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_parseWhenInstruction * ptr = dynamic_cast <const cPtr_parseWhenInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mWhenExpression.operator_isEqual (ptr->mWhenExpression).boolValue ()
         && mEndOfWhenExpression.operator_isEqual (ptr->mEndOfWhenExpression).boolValue ()
         && mWhenInstructionList.operator_isEqual (ptr->mWhenInstructionList).boolValue ()
         && mElseInstructionList.operator_isEqual (ptr->mElseInstructionList).boolValue ()
         && mEndOfElseInstructionList.operator_isEqual (ptr->mEndOfElseInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_parseWhenInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@parseWhenInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mWhenExpression.reader_description (inIndentation + 1)
           << mEndOfWhenExpression.reader_description (inIndentation + 1)
           << mWhenInstructionList.reader_description (inIndentation + 1)
           << mElseInstructionList.reader_description (inIndentation + 1)
           << mEndOfElseInstructionList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_parseWhenInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_parseWhenInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_parseWhenInstruction (& typeid (cPtr_parseWhenInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_parseWhenInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__parseWhenInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_parseWhenInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_parseWhenInstruction (mInstructionLocation, mWhenExpression, mEndOfWhenExpression, mWhenInstructionList, mElseInstructionList, mEndOfElseInstructionList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_parseWhenInstruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_parseWhenInstruction ("parseWhenInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_parseWhenInstruction::
GGS_parseWhenInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_parseWhenInstruction::
GGS_parseWhenInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_parseWhenInstruction GGS_parseWhenInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_parseWhenInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_parseWhenInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_parseWhenInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_parseWhenInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_parseWhenInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseWhenInstruction GGS_parseWhenInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_semanticExpressionAST & argument_1,
                 const GGS_location & argument_2,
                 const GGS_syntaxInstructionList & argument_3,
                 const GGS_syntaxInstructionList & argument_4,
                 const GGS_location & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_parseWhenInstruction result ;
  macroMyNew (result.mPointer, cPtr_parseWhenInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticExpressionAST  GGS_parseWhenInstruction::
reader_mWhenExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticExpressionAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseWhenInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseWhenInstruction *) mPointer)->mWhenExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseWhenInstruction::
reader_mEndOfWhenExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseWhenInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseWhenInstruction *) mPointer)->mEndOfWhenExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_parseWhenInstruction::
reader_mWhenInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseWhenInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseWhenInstruction *) mPointer)->mWhenInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_parseWhenInstruction::
reader_mElseInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseWhenInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseWhenInstruction *) mPointer)->mElseInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_parseWhenInstruction::
reader_mEndOfElseInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_parseWhenInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_parseWhenInstruction *) mPointer)->mEndOfElseInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_parseWhenInstruction::actualTypeName (void) const {
  return "parseWhenInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__parseWhenInstruction ("parseWhenInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_parseWhenInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_parseWhenInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_parseWhenInstruction * p = NULL ;
    macroMyNew (p, GGS_parseWhenInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_parseWhenInstruction GGS_parseWhenInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_parseWhenInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_parseWhenInstruction * p = dynamic_cast <const GGS_parseWhenInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_parseWhenInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_parseWhenInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_parseWhenInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_blockInstruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_blockInstruction::
cPtr_blockInstruction (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_actualParameterListAST & argument_3,
                                const GGS_syntaxInstructionList & argument_4,
                                const GGS_actualParameterListAST & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_syntaxInstructionAST (argument_0 COMMA_THERE),
mReceiverVariable (argument_1),
mBlockMethodName (argument_2),
mPrologActualParameterList (argument_3),
mInstructionList (argument_4),
mEpilogActualParameterList (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_blockInstruction * GGS_blockInstruction::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_blockInstruction) ;
    return (cPtr_blockInstruction *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_blockInstruction::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_blockInstruction * ptr = dynamic_cast <const cPtr_blockInstruction *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mInstructionLocation.operator_isEqual (ptr->mInstructionLocation).boolValue ()
         && mReceiverVariable.operator_isEqual (ptr->mReceiverVariable).boolValue ()
         && mBlockMethodName.operator_isEqual (ptr->mBlockMethodName).boolValue ()
         && mPrologActualParameterList.operator_isEqual (ptr->mPrologActualParameterList).boolValue ()
         && mInstructionList.operator_isEqual (ptr->mInstructionList).boolValue ()
         && mEpilogActualParameterList.operator_isEqual (ptr->mEpilogActualParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_blockInstruction::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@blockInstruction:"
           << mInstructionLocation.reader_description (inIndentation + 1)
           << mReceiverVariable.reader_description (inIndentation + 1)
           << mBlockMethodName.reader_description (inIndentation + 1)
           << mPrologActualParameterList.reader_description (inIndentation + 1)
           << mInstructionList.reader_description (inIndentation + 1)
           << mEpilogActualParameterList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_blockInstruction::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_blockInstruction::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_blockInstruction (& typeid (cPtr_blockInstruction), & typeid (cPtr_syntaxInstructionAST), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_blockInstruction::galgasRTTI (void) const {
  return & gClassInfoFor__blockInstruction ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_blockInstruction::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_blockInstruction (mInstructionLocation, mReceiverVariable, mBlockMethodName, mPrologActualParameterList, mInstructionList, mEpilogActualParameterList COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_blockInstruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_blockInstruction ("blockInstruction", true, & kTypeDescriptor_GGS_syntaxInstructionAST) ;

//---------------------------------------------------------------------------*

GGS_blockInstruction::
GGS_blockInstruction (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_blockInstruction::
GGS_blockInstruction (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_blockInstruction GGS_blockInstruction::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_blockInstruction result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_blockInstruction *> (inPointer) != NULL)
      : (typeid (cPtr_blockInstruction) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_blockInstruction (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_blockInstruction),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_blockInstruction GGS_blockInstruction::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_actualParameterListAST & argument_3,
                 const GGS_syntaxInstructionList & argument_4,
                 const GGS_actualParameterListAST & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_blockInstruction result ;
  macroMyNew (result.mPointer, cPtr_blockInstruction (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  macroRetainObject (result.mPointer) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_blockInstruction::
reader_mReceiverVariable (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mReceiverVariable ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_blockInstruction::
reader_mBlockMethodName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mBlockMethodName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterListAST  GGS_blockInstruction::
reader_mPrologActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mPrologActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxInstructionList  GGS_blockInstruction::
reader_mInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_syntaxInstructionList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterListAST  GGS_blockInstruction::
reader_mEpilogActualParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_blockInstruction *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_blockInstruction *) mPointer)->mEpilogActualParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_blockInstruction::actualTypeName (void) const {
  return "blockInstruction" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformationEX gClassInfoFor__blockInstruction ("blockInstruction", gClassInfoFor__syntaxInstructionAST, & kTypeDescriptor_GGS_blockInstruction) ;

//---------------------------------------------------------------------------*

GGS_object GGS_blockInstruction::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_blockInstruction * p = NULL ;
    macroMyNew (p, GGS_blockInstruction (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_blockInstruction GGS_blockInstruction::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_blockInstruction result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_blockInstruction * p = dynamic_cast <const GGS_blockInstruction *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_blockInstruction, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_blockInstruction::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_blockInstruction ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of 'syntaxComponentAST' struct                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_syntaxComponentAST ("syntaxComponentAST", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_syntaxComponentAST::GGS_syntaxComponentAST (void) :
mSyntaxComponentName (),
mImportedLexiqueFilePath (),
mImportedComponentFileNameList (),
mNonterminalDeclarationList (),
mRuleList (),
mSemanticDeclarations (),
mEndOfSourceFile () {
}

//---------------------------------------------------------------------------*

GGS_syntaxComponentAST::~GGS_syntaxComponentAST (void) {
}

//---------------------------------------------------------------------------*

void GGS_syntaxComponentAST::drop (void) {
  mSyntaxComponentName.drop () ;
  mImportedLexiqueFilePath.drop () ;
  mImportedComponentFileNameList.drop () ;
  mNonterminalDeclarationList.drop () ;
  mRuleList.drop () ;
  mSemanticDeclarations.drop () ;
  mEndOfSourceFile.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_syntaxComponentAST::isBuilt (void) const {
  return mSyntaxComponentName.isBuilt ()
    && mImportedLexiqueFilePath.isBuilt ()
    && mImportedComponentFileNameList.isBuilt ()
    && mNonterminalDeclarationList.isBuilt ()
    && mRuleList.isBuilt ()
    && mSemanticDeclarations.isBuilt ()
    && mEndOfSourceFile.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_syntaxComponentAST::
operator_isEqual (const GGS_syntaxComponentAST & inOperand) const {
  return mSyntaxComponentName.operator_isEqual (inOperand.mSyntaxComponentName)
    .operator_and (mImportedLexiqueFilePath.operator_isEqual (inOperand.mImportedLexiqueFilePath))
    .operator_and (mImportedComponentFileNameList.operator_isEqual (inOperand.mImportedComponentFileNameList))
    .operator_and (mNonterminalDeclarationList.operator_isEqual (inOperand.mNonterminalDeclarationList))
    .operator_and (mRuleList.operator_isEqual (inOperand.mRuleList))
    .operator_and (mSemanticDeclarations.operator_isEqual (inOperand.mSemanticDeclarations))
    .operator_and (mEndOfSourceFile.operator_isEqual (inOperand.mEndOfSourceFile)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_syntaxComponentAST::
operator_isNotEqual (const GGS_syntaxComponentAST & inOperand) const {
  return mSyntaxComponentName.operator_isNotEqual (inOperand.mSyntaxComponentName)
    .operator_or (mImportedLexiqueFilePath.operator_isNotEqual (inOperand.mImportedLexiqueFilePath))
    .operator_or (mImportedComponentFileNameList.operator_isNotEqual (inOperand.mImportedComponentFileNameList))
    .operator_or (mNonterminalDeclarationList.operator_isNotEqual (inOperand.mNonterminalDeclarationList))
    .operator_or (mRuleList.operator_isNotEqual (inOperand.mRuleList))
    .operator_or (mSemanticDeclarations.operator_isNotEqual (inOperand.mSemanticDeclarations))
    .operator_or (mEndOfSourceFile.operator_isNotEqual (inOperand.mEndOfSourceFile)) ;
}

//---------------------------------------------------------------------------*

GGS_syntaxComponentAST GGS_syntaxComponentAST::
constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_nonterminalDeclarationListAST & argument_3,
                 const GGS_syntaxRuleListAST & argument_4,
                 const GGS_semanticDeclarationStructAST& argument_5,
                 const GGS_location & argument_6) {
  GGS_syntaxComponentAST result ;
  result.mSyntaxComponentName = argument_0 ;
  result.mImportedLexiqueFilePath = argument_1 ;
  result.mImportedComponentFileNameList = argument_2 ;
  result.mNonterminalDeclarationList = argument_3 ;
  result.mRuleList = argument_4 ;
  result.mSemanticDeclarations = argument_5 ;
  result.mEndOfSourceFile = argument_6 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_syntaxComponentAST::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @syntaxComponentAST" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSyntaxComponentName " ;
    _s << mSyntaxComponentName.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mImportedLexiqueFilePath " ;
    _s << mImportedLexiqueFilePath.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mImportedComponentFileNameList " ;
    _s << mImportedComponentFileNameList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mNonterminalDeclarationList " ;
    _s << mNonterminalDeclarationList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRuleList " ;
    _s << mRuleList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSemanticDeclarations " ;
    _s << mSemanticDeclarations.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEndOfSourceFile " ;
    _s << mEndOfSourceFile.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_syntaxComponentAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_syntaxComponentAST * p = NULL ;
    macroMyNew (p, GGS_syntaxComponentAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_syntaxComponentAST GGS_syntaxComponentAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_syntaxComponentAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_syntaxComponentAST * p = dynamic_cast <const GGS_syntaxComponentAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_syntaxComponentAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_syntaxComponentAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_syntaxComponentAST ;
}

//---------------------------------------------------------------------------*

