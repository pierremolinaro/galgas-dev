//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsConstructors.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 10th, 2010, at 16h39'59"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsConstructors.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsConstructors.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "enterConstructorWithoutArgument"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterConstructorWithoutArgument (C_Compiler & inLexique,
                                GGS_constructorMap  & var_cas_ioConstructorMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inConstructorName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterConstructorWithoutArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (33)) ;
  var_cas_ioConstructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inConstructorName, GGS_location (inLexique) COMMA_HERE), GGS_unifiedTypeMapIndexList ::constructor_emptyList (), var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (34)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterConstructorWithoutArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "enterConstructorWithArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterConstructorWithArgument (C_Compiler & inLexique,
                                GGS_constructorMap  & var_cas_ioConstructorMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inConstructorName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterConstructorWithArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (55)) ;
  var_cas_ioConstructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inConstructorName, GGS_location (inLexique) COMMA_HERE), GGS_unifiedTypeMapIndexList ::constructor_listWithValue (var_cas_t), var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (56)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterConstructorWithArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "enterConstructorWith2Arguments"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterConstructorWith2Arguments (C_Compiler & inLexique,
                                GGS_constructorMap  & var_cas_ioConstructorMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inConstructorName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inArgument2TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterConstructorWith2Arguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (76)) ;
  GGS_unifiedTypeMapIndexList  var_cas_argumentTypeList = GGS_unifiedTypeMapIndexList ::constructor_emptyList () ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (79)) ;
  var_cas_argumentTypeList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument2TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (81)) ;
  var_cas_argumentTypeList.addAssign_operation (var_cas_t) ;
  var_cas_ioConstructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inConstructorName, GGS_location (inLexique) COMMA_HERE), var_cas_argumentTypeList, var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (83)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterConstructorWith2Arguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "enterConstructorWith3Arguments"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterConstructorWith3Arguments (C_Compiler & inLexique,
                                GGS_constructorMap  & var_cas_ioConstructorMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inConstructorName,
                                const GGS_string  var_cas_inArgument1TypeName,
                                const GGS_string  var_cas_inArgument2TypeName,
                                const GGS_string  var_cas_inArgument3TypeName,
                                const GGS_string  var_cas_inReturnedTypeName,
                                const GGS_bool  var_cas_inHasLexiqueAndLocationArguments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterConstructorWith3Arguments at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_returnedTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inReturnedTypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (104)) ;
  GGS_unifiedTypeMapIndex  var_cas_t ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument1TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (106)) ;
  GGS_unifiedTypeMapIndexList  var_cas_argumentTypeList = GGS_unifiedTypeMapIndexList ::constructor_emptyList () ;
  var_cas_argumentTypeList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument2TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (109)) ;
  var_cas_argumentTypeList.addAssign_operation (var_cas_t) ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inArgument3TypeName, GGS_location (inLexique) COMMA_HERE), var_cas_ioUnifiedTypeMap, var_cas_t COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_argumentTypeList.addAssign_operation (var_cas_t) ;
  var_cas_ioConstructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inConstructorName, GGS_location (inLexique) COMMA_HERE), var_cas_argumentTypeList, var_cas_inHasLexiqueAndLocationArguments, var_cas_returnedTypeIndex COMMA_SOURCE_FILE_AT_LINE (113)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterConstructorWith3Arguments\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_string"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_string (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_string at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithVersionString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (128)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithSourceFilePath"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (129)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithCurrentDirectory"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (130)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithMainFirstArgument"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (131)) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithContentsOfFile"),  GGS_string ("char"),  GGS_string ("uint"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (132)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithContentsOfFile"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (133)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithCurrentDateTime"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (134)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithEnvironmentVariable"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (135)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("stringWithEnvironmentVariableOrEmpty"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (136)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("CppLineComment"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (137)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("CppTitleComment"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (138)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("CppString"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (139)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("CppChar"),  GGS_string ("char"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (140)) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("componentsJoinedByString"),  GGS_string ("stringlist"),  GGS_string ("string"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (141)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_string\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_char"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_char (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_char at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("replacementCharacter"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (151)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("unicodeCharacterWithUnsigned"),  GGS_string ("uint"),  GGS_string ("char"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (152)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_char\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_uint"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_uint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_uint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("max"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (162)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("errorCount"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (163)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("warningCount"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (164)) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("valueWithMask"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (165)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_uint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_sint"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_sint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_sint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("max"),  GGS_string ("sint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (175)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("min"),  GGS_string ("sint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (176)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_sint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_uint64"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_uint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_uint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("max"),  GGS_string ("uint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (186)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64MaskWithCompressedBitString"),  GGS_string ("string"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (187)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64BaseValueWithCompressedBitString"),  GGS_string ("string"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (188)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("uint64WithBitString"),  GGS_string ("string"),  GGS_string ("uint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (189)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_uint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_sint64"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_sint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_sint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("max"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (199)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("min"),  GGS_string ("sint64"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (200)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_sint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_lstring"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_lstring (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_lstring at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("string"),  GGS_string ("location"),  GGS_string ("lstring"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (210)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("retrieveAndResetTemplateString"),  GGS_string ("lstring"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (211)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_lstring\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_lchar"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_lchar (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_lchar at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("char"),  GGS_string ("location"),  GGS_string ("lchar"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (221)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_lchar\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_lbool"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_lbool (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_lbool at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("bool"),  GGS_string ("location"),  GGS_string ("lbool"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (231)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_lbool\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_luint"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_luint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_luint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("uint"),  GGS_string ("location"),  GGS_string ("luint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (241)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_luint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_lsint"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_lsint (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_lsint at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("sint"),  GGS_string ("location"),  GGS_string ("lsint"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (251)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_lsint\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_luint64"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_luint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_luint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("uint64"),  GGS_string ("location"),  GGS_string ("luint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (261)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_luint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_lsint64"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_lsint64 (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_lsint64 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("sint64"),  GGS_string ("location"),  GGS_string ("lsint64"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (271)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_lsint64\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_ldouble"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_ldouble (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_ldouble at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWith2Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("new"),  GGS_string ("double"),  GGS_string ("location"),  GGS_string ("ldouble"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (281)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_ldouble\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "constructorMapFor_stringset"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_stringset (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_stringset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("emptySet"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (291)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("setWithString"),  GGS_string ("string"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (292)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_stringset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "constructorMapFor_binaryset"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_binaryset (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_binaryset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithBit"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (302)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("emptyBinarySet"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (303)) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("fullBinarySet"),  GGS_string ("binaryset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (304)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithPredicateString"),  GGS_string ("string"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (305)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithNotEqualComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithEqualComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (307)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithStrictLowerComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (308)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithStrictGreaterComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (309)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithLowerOrEqualComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (310)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithGreaterOrEqualComparison"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (311)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithEqualToConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (312)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithNotEqualToConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (313)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithStrictLowerThanConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (314)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithStrictGreaterThanConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (315)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithLowerOrEqualToConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (316)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithGreaterOrEqualToConstant"),  GGS_string ("uint"),  GGS_string ("uint"),  GGS_string ("uint64"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (317)) ;
  ::routine_enterConstructorWith3Arguments (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("binarySetWithITE"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_string ("binaryset"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (318)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_binaryset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_type (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("typeList"),  GGS_string ("typelist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (328)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_data"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_data (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_data at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("emptyData"),  GGS_string ("data"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (338)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_data\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_function"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_function (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_function at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("functionList"),  GGS_string ("functionlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("functionWithName"),  GGS_string ("string"),  GGS_string ("function"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (349)) ;
  ::routine_enterConstructorWithArgument (inLexique,  var_cas_outMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("isFunctionDefined"),  GGS_string ("string"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (350)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_function\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_class"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_class (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_class at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_class\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_listmap"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_listmap (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_listmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_listmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructorMapFor_struct"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_struct (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_struct at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_struct\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "constructorMapFor_sortedlist"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_sortedlist (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_sortedlist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_sortedlist\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_map"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_map (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_map at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_map\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "constructorMapFor_mapindex"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_mapindex (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_mapindex at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_mapindex\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "constructorMapFor_enum"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructorMapFor_enum (C_Compiler & inLexique,
                                GGS_unifiedTypeMap  & /* var_cas_ioUnifiedTypeMap */,
                                GGS_constructorMap  & var_cas_outMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructorMapFor_enum at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructorMapFor_enum\n") ;
  #endif
}

//---------------------------------------------------------------------------*

