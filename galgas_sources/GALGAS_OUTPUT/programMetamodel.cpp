//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'programMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 3rd, 2008, at 21h53'5"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "programMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "programMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("programMetamodel", 2) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_programMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of list '@programRule'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_programRule::
cPtr_programRule (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_semanticInstructions & argument_3
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mSourceFileExtension (argument_0),
mSourceFileHelp (argument_1),
mSourceFileVariableName (argument_2),
mInstructionList (argument_3) {
}

//---------------------------------------------------------------------------*

bool cPtr_programRule::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_programRule * _p = dynamic_cast <const cPtr_programRule *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mSourceFileExtension._operator_isEqual (_p->mSourceFileExtension).boolValue ()
         && mSourceFileHelp._operator_isEqual (_p->mSourceFileHelp).boolValue ()
         && mSourceFileVariableName._operator_isEqual (_p->mSourceFileVariableName).boolValue ()
         && mInstructionList._operator_isEqual (_p->mInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_programRule::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @programRule" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileExtension.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileHelp.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileVariableName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_programRule::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_programRule::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_programRule::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_programRule::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "programRule" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_programRule * cPtr_programRule::
_cloneObject (void) const {
  cPtr_programRule * _p = NULL ;
  macroMyNew (_p, cPtr_programRule (mSourceFileExtension, mSourceFileHelp, mSourceFileVariableName, mInstructionList COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@_list_programRule'                          *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_semanticInstructions & argument_3) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_semanticInstructions & argument_3) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_programRule::
_addAssign_operation (const GGS_programRule & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_programRule GGS__list_programRule::
_operator_concat (const GGS__list_programRule & inOperand) const {
  GGS__list_programRule result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_programRule::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_programRule & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mSourceFileExtension,
                                _p->mSourceFileHelp,
                                _p->mSourceFileVariableName,
                                _p->mInstructionList) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_programRule  GGS__list_programRule::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_programRule result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_programRule  GGS__list_programRule::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_programRule & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_programRule result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_programRule::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_programRule", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
_addModel (const GGS_programRule & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
method_first (C_Compiler & _inLexique,
              GGS_programRule & outElement
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programRule::constructor_new (_inLexique,
       _p->mSourceFileExtension,
       _p->mSourceFileHelp,
       _p->mSourceFileVariableName,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
method_last (C_Compiler & _inLexique,
             GGS_programRule & outElement
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programRule::constructor_new (_inLexique,
       _p->mSourceFileExtension,
       _p->mSourceFileHelp,
       _p->mSourceFileVariableName,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_programRule & outElement
                   COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programRule::constructor_new (_inLexique,
       _p->mSourceFileExtension,
       _p->mSourceFileHelp,
       _p->mSourceFileVariableName,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programRule::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_programRule & outElement
                  COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programRule::constructor_new (_inLexique,
       _p->mSourceFileExtension,
       _p->mSourceFileHelp,
       _p->mSourceFileVariableName,
       _p->mInstructionList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS entity '@programRule'                        *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_programRule GGS_programRule::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_semanticInstructions & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_programRule result ;
  macroMyNew (result.mPointer, cPtr_programRule (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRule::
reader_mSourceFileExtension (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programRule *) mPointer)->mSourceFileExtension ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRule::
reader_mSourceFileHelp (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programRule *) mPointer)->mSourceFileHelp ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRule::
reader_mSourceFileVariableName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programRule *) mPointer)->mSourceFileVariableName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructions  GGS_programRule::
reader_mInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticInstructions   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programRule *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programRule *) mPointer)->mInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_programRule::actualTypeName (void) const {
 return "programRule" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_programRule * GGS_programRule::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_programRule *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@programComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_programComponentRoot::
cPtr_programComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_semanticInstructions & argument_2,
                                const GGS_semanticInstructions & argument_3,
                                const GGS__list_programRule & argument_4,
                                const GGS__list_semanticDeclaration & argument_5
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mProgramName (argument_0),
mVersionString (argument_1),
mPrologueInstructionList (argument_2),
mEpilogueInstructionList (argument_3),
mProgramRules (argument_4),
mSemanticDeclarations (argument_5) {
}

//---------------------------------------------------------------------------*

bool cPtr_programComponentRoot::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_programComponentRoot * _p = dynamic_cast <const cPtr_programComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mProgramName._operator_isEqual (_p->mProgramName).boolValue ()
         && mVersionString._operator_isEqual (_p->mVersionString).boolValue ()
         && mPrologueInstructionList._operator_isEqual (_p->mPrologueInstructionList).boolValue ()
         && mEpilogueInstructionList._operator_isEqual (_p->mEpilogueInstructionList).boolValue ()
         && mProgramRules._operator_isEqual (_p->mProgramRules).boolValue ()
         && mSemanticDeclarations._operator_isEqual (_p->mSemanticDeclarations).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_programComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @programComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mProgramName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mVersionString.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mPrologueInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEpilogueInstructionList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mProgramRules.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSemanticDeclarations.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_programComponentRoot::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_programComponentRoot::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_programComponentRoot::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_programComponentRoot::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "programComponentRoot" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_programComponentRoot * cPtr_programComponentRoot::
_cloneObject (void) const {
  cPtr_programComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_programComponentRoot (mProgramName, mVersionString, mPrologueInstructionList, mEpilogueInstructionList, mProgramRules, mSemanticDeclarations COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@_list_programComponentRoot'                     *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_semanticInstructions & argument_2,
                    const GGS_semanticInstructions & argument_3,
                    const GGS__list_programRule & argument_4,
                    const GGS__list_semanticDeclaration & argument_5) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_semanticInstructions & argument_2,
                    const GGS_semanticInstructions & argument_3,
                    const GGS__list_programRule & argument_4,
                    const GGS__list_semanticDeclaration & argument_5) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_programComponentRoot::
_addAssign_operation (const GGS_programComponentRoot & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_programComponentRoot GGS__list_programComponentRoot::
_operator_concat (const GGS__list_programComponentRoot & inOperand) const {
  GGS__list_programComponentRoot result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_programComponentRoot::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_programComponentRoot & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mProgramName,
                                _p->mVersionString,
                                _p->mPrologueInstructionList,
                                _p->mEpilogueInstructionList,
                                _p->mProgramRules,
                                _p->mSemanticDeclarations) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_programComponentRoot  GGS__list_programComponentRoot::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_programComponentRoot result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_programComponentRoot  GGS__list_programComponentRoot::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_programComponentRoot & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_programComponentRoot result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_programComponentRoot::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_programComponentRoot", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
_addModel (const GGS_programComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
method_first (C_Compiler & _inLexique,
              GGS_programComponentRoot & outElement
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programComponentRoot::constructor_new (_inLexique,
       _p->mProgramName,
       _p->mVersionString,
       _p->mPrologueInstructionList,
       _p->mEpilogueInstructionList,
       _p->mProgramRules,
       _p->mSemanticDeclarations) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
method_last (C_Compiler & _inLexique,
             GGS_programComponentRoot & outElement
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programComponentRoot::constructor_new (_inLexique,
       _p->mProgramName,
       _p->mVersionString,
       _p->mPrologueInstructionList,
       _p->mEpilogueInstructionList,
       _p->mProgramRules,
       _p->mSemanticDeclarations) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_programComponentRoot & outElement
                   COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programComponentRoot::constructor_new (_inLexique,
       _p->mProgramName,
       _p->mVersionString,
       _p->mPrologueInstructionList,
       _p->mEpilogueInstructionList,
       _p->mProgramRules,
       _p->mSemanticDeclarations) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_programComponentRoot::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_programComponentRoot & outElement
                  COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_programComponentRoot::constructor_new (_inLexique,
       _p->mProgramName,
       _p->mVersionString,
       _p->mPrologueInstructionList,
       _p->mEpilogueInstructionList,
       _p->mProgramRules,
       _p->mSemanticDeclarations) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@programComponentRoot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_programComponentRoot GGS_programComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_semanticInstructions & argument_2,
                 const GGS_semanticInstructions & argument_3,
                 const GGS__list_programRule & argument_4,
                 const GGS__list_semanticDeclaration & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_programComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_programComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programComponentRoot::
reader_mProgramName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mProgramName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programComponentRoot::
reader_mVersionString (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mVersionString ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructions  GGS_programComponentRoot::
reader_mPrologueInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticInstructions   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mPrologueInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructions  GGS_programComponentRoot::
reader_mEpilogueInstructionList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticInstructions   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mEpilogueInstructionList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_programRule  GGS_programComponentRoot::
reader_mProgramRules (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_programRule   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mProgramRules ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_semanticDeclaration  GGS_programComponentRoot::
reader_mSemanticDeclarations (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_semanticDeclaration   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_programComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_programComponentRoot *) mPointer)->mSemanticDeclarations ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_programComponentRoot::actualTypeName (void) const {
 return "programComponentRoot" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_programComponentRoot * GGS_programComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_programComponentRoot *) mPointer ;
  }
#endif

