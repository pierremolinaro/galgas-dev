//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'programMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 26th, 2010, at 17h51'12"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "programMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "programMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@programRuleList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_programRuleList::
elementOf_GGS_programRuleList (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionListAST & argument_4,
                                const GGS_location & argument_5
                                COMMA_LOCATION_ARGS) :
AC_GGS_list::cListElement (THERE),
mSourceFileExtension (argument_0),
mSourceFileHelp (argument_1),
mSourceFileVariableName (argument_2),
mSourceFileVariableNameIsUnused (argument_3),
mInstructionList (argument_4),
mEndOfInstructionList (argument_5) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_programRuleList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_programRuleList * ptr = dynamic_cast <const elementOf_GGS_programRuleList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mSourceFileExtension.operator_isEqual (ptr->mSourceFileExtension).boolValue ()
         && mSourceFileHelp.operator_isEqual (ptr->mSourceFileHelp).boolValue ()
         && mSourceFileVariableName.operator_isEqual (ptr->mSourceFileVariableName).boolValue ()
         && mSourceFileVariableNameIsUnused.operator_isEqual (ptr->mSourceFileVariableNameIsUnused).boolValue ()
         && mInstructionList.operator_isEqual (ptr->mInstructionList).boolValue ()
         && mEndOfInstructionList.operator_isEqual (ptr->mEndOfInstructionList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_programRuleList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileExtension.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileHelp.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileVariableName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSourceFileVariableNameIsUnused.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInstructionList.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mEndOfInstructionList.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@programRuleList'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_programRuleList ("programRuleList", false, NULL) ;

//---------------------------------------------------------------------------*

void GGS_programRuleList::
internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3,
                    const GGS_semanticInstructionListAST & argument_4,
                    const GGS_location & argument_5
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_THERE)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3,
                    const GGS_semanticInstructionListAST & argument_4,
                    const GGS_location & argument_5
                    COMMA_LOCATION_ARGS) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_THERE)) ;
  internalPrependItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionListAST & argument_4,
                                const GGS_location & argument_5) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()&& argument_3.isBuilt ()&& argument_4.isBuilt ()&& argument_5.isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_programRuleList GGS_programRuleList::
operator_concat (const GGS_programRuleList & inOperand) const {
  GGS_programRuleList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
dotAssign_operation (const GGS_programRuleList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_programRuleList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mSourceFileExtension ;
          GGS_lstring  p_1 = p->mSourceFileHelp ;
          GGS_lstring  p_2 = p->mSourceFileVariableName ;
          GGS_bool p_3 = p->mSourceFileVariableNameIsUnused ;
          GGS_semanticInstructionListAST  p_4 = p->mInstructionList ;
          GGS_location  p_5 = p->mEndOfInstructionList ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4, p_5 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_prependValue (C_CompilerEx & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstring & argument_2,
                     const GGS_bool& argument_3,
                     const GGS_semanticInstructionListAST & argument_4,
                     const GGS_location & argument_5
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    insulateList () ;
    internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mSourceFileExtension,
                                ptr->mSourceFileHelp,
                                ptr->mSourceFileVariableName,
                                ptr->mSourceFileVariableNameIsUnused,
                                ptr->mInstructionList,
                                ptr->mEndOfInstructionList
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_programRuleList  GGS_programRuleList::
constructor_emptyList (void) {
  GGS_programRuleList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_programRuleList  GGS_programRuleList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3,
                                const GGS_semanticInstructionListAST & argument_4,
                                const GGS_location & argument_5) {
  GGS_programRuleList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4, argument_5) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
internalSubListWithRange (GGS_programRuleList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mSourceFileExtension, ptr->mSourceFileHelp, ptr->mSourceFileVariableName, ptr->mSourceFileVariableNameIsUnused, ptr->mInstructionList, ptr->mEndOfInstructionList) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_programRuleList GGS_programRuleList::
reader_subListWithRange (C_CompilerEx & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_programRuleList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_programRuleList GGS_programRuleList::
reader_subListFromIndex (C_CompilerEx & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_programRuleList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_programRuleList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@programRuleList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
method_first (C_CompilerEx & inLexique,
              GGS_lstring & _out_0,
              GGS_lstring & _out_1,
              GGS_lstring & _out_2,
              GGS_bool& _out_3,
              GGS_semanticInstructionListAST & _out_4,
              GGS_location & _out_5
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSourceFileExtension ;
    _out_1 = ptr->mSourceFileHelp ;
    _out_2 = ptr->mSourceFileVariableName ;
    _out_3 = ptr->mSourceFileVariableNameIsUnused ;
    _out_4 = ptr->mInstructionList ;
    _out_5 = ptr->mEndOfInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
method_last (C_CompilerEx & inLexique,
             GGS_lstring & _out_0,
             GGS_lstring & _out_1,
             GGS_lstring & _out_2,
             GGS_bool& _out_3,
             GGS_semanticInstructionListAST & _out_4,
             GGS_location & _out_5
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSourceFileExtension ;
    _out_1 = ptr->mSourceFileHelp ;
    _out_2 = ptr->mSourceFileVariableName ;
    _out_3 = ptr->mSourceFileVariableNameIsUnused ;
    _out_4 = ptr->mInstructionList ;
    _out_5 = ptr->mEndOfInstructionList ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_popFirst (C_CompilerEx & inLexique,
                 GGS_lstring & _out_0,
                 GGS_lstring & _out_1,
                 GGS_lstring & _out_2,
                 GGS_bool& _out_3,
                 GGS_semanticInstructionListAST & _out_4,
                 GGS_location & _out_5
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSourceFileExtension ;
    _out_1 = ptr->mSourceFileHelp ;
    _out_2 = ptr->mSourceFileVariableName ;
    _out_3 = ptr->mSourceFileVariableNameIsUnused ;
    _out_4 = ptr->mInstructionList ;
    _out_5 = ptr->mEndOfInstructionList ;
    insulateList () ;
    internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_popLast (C_CompilerEx & inLexique,
                GGS_lstring & _out_0,
                GGS_lstring & _out_1,
                GGS_lstring & _out_2,
                GGS_bool& _out_3,
                GGS_semanticInstructionListAST & _out_4,
                GGS_location & _out_5
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mSourceFileExtension ;
    _out_1 = ptr->mSourceFileHelp ;
    _out_2 = ptr->mSourceFileVariableName ;
    _out_3 = ptr->mSourceFileVariableNameIsUnused ;
    _out_4 = ptr->mInstructionList ;
    _out_5 = ptr->mEndOfInstructionList ;
    insulateList () ;
    internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
    _out_5.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRuleList::
reader_mSourceFileExtensionAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSourceFileExtension ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRuleList::
reader_mSourceFileHelpAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSourceFileHelp ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_programRuleList::
reader_mSourceFileVariableNameAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSourceFileVariableName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_programRuleList::
reader_mSourceFileVariableNameIsUnusedAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mSourceFileVariableNameIsUnused ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticInstructionListAST  GGS_programRuleList::
reader_mInstructionListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_semanticInstructionListAST  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_programRuleList::
reader_mEndOfInstructionListAtIndex (C_CompilerEx & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_location  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mEndOfInstructionList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMSourceFileExtensionAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSourceFileExtension = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMSourceFileHelpAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSourceFileHelp = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMSourceFileVariableNameAtIndex (C_CompilerEx & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSourceFileVariableName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMSourceFileVariableNameIsUnusedAtIndex (C_CompilerEx & inLexique,
                              const GGS_bool & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mSourceFileVariableNameIsUnused = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMInstructionListAtIndex (C_CompilerEx & inLexique,
                              const GGS_semanticInstructionListAST  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_programRuleList::
modifier_setMEndOfInstructionListAtIndex (C_CompilerEx & inLexique,
                              const GGS_location  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mEndOfInstructionList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_programRuleList::cEnumerator::_mSourceFileExtension (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSourceFileExtension ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_programRuleList::cEnumerator::_mSourceFileHelp (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSourceFileHelp ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_programRuleList::cEnumerator::_mSourceFileVariableName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSourceFileVariableName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_bool & GGS_programRuleList::cEnumerator::_mSourceFileVariableNameIsUnused (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSourceFileVariableNameIsUnused ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_semanticInstructionListAST  & GGS_programRuleList::cEnumerator::_mInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mInstructionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_programRuleList::cEnumerator::_mEndOfInstructionList (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mEndOfInstructionList ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_programRuleList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_programRuleList * p = NULL ;
    macroMyNew (p, GGS_programRuleList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_programRuleList GGS_programRuleList::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_programRuleList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_programRuleList * p = dynamic_cast <const GGS_programRuleList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_programRuleList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_programRuleList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_programRuleList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of 'programComponentAST' struct               *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_programComponentAST ("programComponentAST", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_programComponentAST::GGS_programComponentAST (void) :
mProgramComponentName (),
mVersionString (),
mImportedComponentFileNameList (),
mPrologueInstructionList (),
mEndOfPrologue (),
mEpilogueInstructionList (),
mEndOfEpilogue (),
mProgramRules (),
mSemanticDeclarationList (),
mEndOfSourceFile () {
}

//---------------------------------------------------------------------------*

GGS_programComponentAST::~GGS_programComponentAST (void) {
}

//---------------------------------------------------------------------------*

void GGS_programComponentAST::drop (void) {
  mProgramComponentName.drop () ;
  mVersionString.drop () ;
  mImportedComponentFileNameList.drop () ;
  mPrologueInstructionList.drop () ;
  mEndOfPrologue.drop () ;
  mEpilogueInstructionList.drop () ;
  mEndOfEpilogue.drop () ;
  mProgramRules.drop () ;
  mSemanticDeclarationList.drop () ;
  mEndOfSourceFile.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_programComponentAST::isBuilt (void) const {
  return mProgramComponentName.isBuilt ()
    && mVersionString.isBuilt ()
    && mImportedComponentFileNameList.isBuilt ()
    && mPrologueInstructionList.isBuilt ()
    && mEndOfPrologue.isBuilt ()
    && mEpilogueInstructionList.isBuilt ()
    && mEndOfEpilogue.isBuilt ()
    && mProgramRules.isBuilt ()
    && mSemanticDeclarationList.isBuilt ()
    && mEndOfSourceFile.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_programComponentAST::
operator_isEqual (const GGS_programComponentAST & inOperand) const {
  return mProgramComponentName.operator_isEqual (inOperand.mProgramComponentName)
    .operator_and (mVersionString.operator_isEqual (inOperand.mVersionString))
    .operator_and (mImportedComponentFileNameList.operator_isEqual (inOperand.mImportedComponentFileNameList))
    .operator_and (mPrologueInstructionList.operator_isEqual (inOperand.mPrologueInstructionList))
    .operator_and (mEndOfPrologue.operator_isEqual (inOperand.mEndOfPrologue))
    .operator_and (mEpilogueInstructionList.operator_isEqual (inOperand.mEpilogueInstructionList))
    .operator_and (mEndOfEpilogue.operator_isEqual (inOperand.mEndOfEpilogue))
    .operator_and (mProgramRules.operator_isEqual (inOperand.mProgramRules))
    .operator_and (mSemanticDeclarationList.operator_isEqual (inOperand.mSemanticDeclarationList))
    .operator_and (mEndOfSourceFile.operator_isEqual (inOperand.mEndOfSourceFile)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_programComponentAST::
operator_isNotEqual (const GGS_programComponentAST & inOperand) const {
  return mProgramComponentName.operator_isNotEqual (inOperand.mProgramComponentName)
    .operator_or (mVersionString.operator_isNotEqual (inOperand.mVersionString))
    .operator_or (mImportedComponentFileNameList.operator_isNotEqual (inOperand.mImportedComponentFileNameList))
    .operator_or (mPrologueInstructionList.operator_isNotEqual (inOperand.mPrologueInstructionList))
    .operator_or (mEndOfPrologue.operator_isNotEqual (inOperand.mEndOfPrologue))
    .operator_or (mEpilogueInstructionList.operator_isNotEqual (inOperand.mEpilogueInstructionList))
    .operator_or (mEndOfEpilogue.operator_isNotEqual (inOperand.mEndOfEpilogue))
    .operator_or (mProgramRules.operator_isNotEqual (inOperand.mProgramRules))
    .operator_or (mSemanticDeclarationList.operator_isNotEqual (inOperand.mSemanticDeclarationList))
    .operator_or (mEndOfSourceFile.operator_isNotEqual (inOperand.mEndOfSourceFile)) ;
}

//---------------------------------------------------------------------------*

GGS_programComponentAST GGS_programComponentAST::
constructor_new (const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_semanticInstructionListAST & argument_3,
                 const GGS_location & argument_4,
                 const GGS_semanticInstructionListAST & argument_5,
                 const GGS_location & argument_6,
                 const GGS_programRuleList & argument_7,
                 const GGS_semanticDeclarationListAST & argument_8,
                 const GGS_location & argument_9) {
  GGS_programComponentAST result ;
  result.mProgramComponentName = argument_0 ;
  result.mVersionString = argument_1 ;
  result.mImportedComponentFileNameList = argument_2 ;
  result.mPrologueInstructionList = argument_3 ;
  result.mEndOfPrologue = argument_4 ;
  result.mEpilogueInstructionList = argument_5 ;
  result.mEndOfEpilogue = argument_6 ;
  result.mProgramRules = argument_7 ;
  result.mSemanticDeclarationList = argument_8 ;
  result.mEndOfSourceFile = argument_9 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_programComponentAST::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @programComponentAST" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mProgramComponentName " ;
    _s << mProgramComponentName.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mVersionString " ;
    _s << mVersionString.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mImportedComponentFileNameList " ;
    _s << mImportedComponentFileNameList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mPrologueInstructionList " ;
    _s << mPrologueInstructionList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEndOfPrologue " ;
    _s << mEndOfPrologue.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEpilogueInstructionList " ;
    _s << mEpilogueInstructionList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEndOfEpilogue " ;
    _s << mEndOfEpilogue.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mProgramRules " ;
    _s << mProgramRules.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSemanticDeclarationList " ;
    _s << mSemanticDeclarationList.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mEndOfSourceFile " ;
    _s << mEndOfSourceFile.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_programComponentAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_programComponentAST * p = NULL ;
    macroMyNew (p, GGS_programComponentAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_programComponentAST GGS_programComponentAST::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_programComponentAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_programComponentAST * p = dynamic_cast <const GGS_programComponentAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_programComponentAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_programComponentAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_programComponentAST ;
}

//---------------------------------------------------------------------------*

