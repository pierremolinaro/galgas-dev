//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'syntaxCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 20th, 2010, at 22h38'37"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'syntaxFileGenerationTemplate'          *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_syntaxFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_syntaxFileGenerationTemplate_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_syntaxFileGenerationTemplate (
  "",
  0,
  gWrapperAllFiles_syntaxFileGenerationTemplate_0,
  0,
  gWrapperAllDirectories_syntaxFileGenerationTemplate_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'syntaxFileHeader' template of 'syntaxFileGenerationTemplate' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_syntaxFileGenerationTemplate_syntaxFileHeader (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_COMPONENT_NAME,
                                const GGS_lstringlist & var_cas_IMPORTED_COMPONENT_LIST,
                                const GGS_lstringlist & var_cas_TYPE_PREDECLARATION_LIST) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt ()
    && var_cas_IMPORTED_COMPONENT_LIST.isBuilt ()
    && var_cas_TYPE_PREDECLARATION_LIST.isBuilt () ;
  if (isBuilt) {
    result << "#ifndef " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "#define " ;
    result << var_cas_COMPONENT_NAME ;
    result << "_ENTITIES_DEFINED\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"galgas2/predefined-types.h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_321 (var_cas_IMPORTED_COMPONENT_LIST, true) ;
    const GGS_lstringlist::cElement * operand_321 = NULL ;
    while (((operand_321 = enumerator_321.nextObject ()))) {
      macroValidPointer (operand_321) ;
      result << "#include \"" ;
      result << operand_321->mValue.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
      result << ".h\"\n" ;
    }
    result << "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n" ;
    GGS_lstringlist::cEnumerator enumerator_537 (var_cas_TYPE_PREDECLARATION_LIST, true) ;
    const GGS_lstringlist::cElement * operand_537 = NULL ;
    while (((operand_537 = enumerator_537.nextObject ()))) {
      macroValidPointer (operand_537) ;
      result << "class GALGAS_" ;
      result << operand_537->mValue.ggs_string ().reader_identifierRepresentation () ;
      result << " ;\n" ;
    }
    result << "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'syntaxFileImplementation' template of 'syntaxFileGenerationTemplate' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_syntaxFileGenerationTemplate_syntaxFileImplementation (C_Compiler & /* inLexique */,
                                const GGS_string& var_cas_COMPONENT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_COMPONENT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#include \"version_libpm.h\"\n"
      "#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER\n"
      "  #error \"This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm\"\n"
      "#endif\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#include \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".h\"\n"
      "\n"
      "//---------------------------------------------------------------------------*\n"
      "\n"
      "#ifndef DO_NOT_GENERATE_CHECKINGS\n"
      "  #define SOURCE_FILE_AT_LINE(line) \"" ;
    result << var_cas_COMPONENT_NAME ;
    result << ".gSyntax\", line\n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)\n"
      "#else\n"
      "  #define SOURCE_FILE_AT_LINE(line) \n"
      "  #define COMMA_SOURCE_FILE_AT_LINE(line) \n"
      "#endif\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileSyntaxComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSyntaxComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSyntaxComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_syntaxComponentAST var_cas_syntaxComponentRoot ;
  const GGS_bool cond_2925 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (55)).reader_hasKey (var_cas_basename) ;
  if (cond_2925.isBuiltAndTrue ()) {
    const GGS_parsedSyntaxComponentMap  temp_2881 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
    if (temp_2881.isBuilt ()) {
      temp_2881 (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (56)) ;
    }
  }else if (cond_2925.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_syntaxComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (58)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (59)) ;
  }
  const GGS_lstring  var_cas_componentName = var_cas_syntaxComponentRoot.reader_mSyntaxComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
  const GGS_bool cond_3462 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (63))).operator_isNotEqual (var_cas_basename) ;
  if (cond_3462.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (65)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (67)) ;
  }
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = var_cas_syntaxComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (70)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (71))) ;
  GGS_lstringlist  var_cas_optionComponentFileNameList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_grammarComponentASTList  var_cas_grammarComponentASTList = GGS_grammarComponentASTList ::constructor_emptyList () ;
  ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentFileNameList,  var_cas_grammarComponentASTList,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_syntaxComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationListWithPredefinedTypes = var_cas_semanticDeclarationList ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes COMMA_SOURCE_FILE_AT_LINE (85)) ;
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes,  var_cas_syntaxComponentRoot.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (88)) ;
  ::routine_buildOptionComponentMapForSemanticAnalysis (inLexique,  var_cas_optionComponentFileNameList,  var_cas_ioParsedComponentStruct,  var_cas_semanticContext.mOptionComponentMapForSemanticAnalysis COMMA_SOURCE_FILE_AT_LINE (94)) ;
  ::routine_buildGrammarComponentMapForSemanticAnalysis (inLexique,  var_cas_grammarComponentASTList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (100)) ;
  GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
  ::routine_performSemanticAnalysis (inLexique,  var_cas_syntaxComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (107)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (107)),  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (106)) ;
  const GGS_bool cond_5858 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (112))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_5858.isBuiltAndTrue ()) {
    GGS_string var_cas_headerString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileHeader (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), var_cas_syntaxComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), var_cas_semanticContext.mTypeMap.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (116))) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_5560 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_5560 = NULL ;
      while (((operand_5560 = enumerator_5560.nextObject ()))) {
        macroValidPointer (operand_5560) ;
        var_cas_headerString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_5560->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_5560->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (119)))) ;
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_headerString, GGS_string ("\n"
      "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  }
  const GGS_bool cond_6525 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (132))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_6525.isBuiltAndTrue ()) {
    GGS_string var_cas_implementationString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileImplementation (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_6125 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_6125 = NULL ;
      while (((operand_6125 = enumerator_6125.nextObject ()))) {
        macroValidPointer (operand_6125) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_6125->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_6125->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (137)))) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_6125->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_6125->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (138)))) ;
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_implementationString, GGS_string ("\n"
      "\n"), GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSyntaxComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

