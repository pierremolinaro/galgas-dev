//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            File 'syntaxCompilation.cpp'                                             *
//                                             Generated by version 3.0.0                                              *
//                                          october 15th, 2014, at 13h38'11"                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"
#include "lexiqueLL1grammar.h"
#include "galgas_cli_options.h"
#include "templateGrammar.h"
#include "semanticsSLRgrammar.h"
#include "syntaxCompilation.h"


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'compileSyntaxComponentFromAST'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_compileSyntaxComponentFromAST (const GALGAS_lstring constinArgument_inSourceFile,
                                            const GALGAS_string constinArgument_inOutputDirectory,
                                            const GALGAS_galgas_33_SyntaxComponentListAST_2D_element constinArgument_inSyntaxComponentRoot,
                                            GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE ("syntaxCompilation.gSemantics", 35)).reader_stringByDeletingPathExtension (SOURCE_FILE ("syntaxCompilation.gSemantics", 35)) ;
  GALGAS_lstring var_componentName = constinArgument_inSyntaxComponentRoot.reader_mSyntaxComponentName (SOURCE_FILE ("syntaxCompilation.gSemantics", 37)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 38)).objectCompare (var_basename)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (var_componentName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticWarning (location_1, GALGAS_string ("GALGAS checks the component name ('").operator_concat (var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 40))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 40)).operator_concat (GALGAS_string ("') against the source file base name ('")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 40)).operator_concat (var_basename  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 41)).operator_concat (GALGAS_string ("'): they should be identical")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 41))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 39)) ;
  }
  GALGAS_semanticDeclarationListAST var_semanticDeclarationList = constinArgument_inSyntaxComponentRoot.reader_mSemanticDeclarationList (SOURCE_FILE ("syntaxCompilation.gSemantics", 45)) ;
  GALGAS_stringset var_parsedFileSet = GALGAS_stringset::constructor_setWithString (constinArgument_inSourceFile.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 46)) COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 46)) ;
  GALGAS_lstringlist var_optionComponentFileNameList = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 47)) ;
  GALGAS_grammarComponentASTList var_grammarComponentASTList = GALGAS_grammarComponentASTList::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 48)) ;
  GALGAS_stringlist var_headerIncludeList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 49)) ;
  GALGAS_stringlist var_implementationIncludeList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 50)) ;
  {
  routine_recursivelyImportSemanticComponentAndCheckNoCircularityInImportSemantics (constinArgument_inSourceFile, ioArgument_ioParsedComponentStruct, var_optionComponentFileNameList, var_grammarComponentASTList, var_semanticDeclarationList, var_parsedFileSet, var_headerIncludeList, var_implementationIncludeList, constinArgument_inSyntaxComponentRoot.reader_mImportedComponentFileNameList (SOURCE_FILE ("syntaxCompilation.gSemantics", 60)), constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("syntaxCompilation.gSemantics", 61)), inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 51)) ;
  }
  GALGAS_semanticDeclarationListAST var_semanticDeclarationListWithPredefinedTypes = var_semanticDeclarationList ;
  {
  routine_appendPredefinedTypesASTs (var_semanticDeclarationListWithPredefinedTypes, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 65)) ;
  }
  GALGAS_semanticContext var_semanticContext ;
  {
  routine_buildSemanticContext (var_semanticDeclarationListWithPredefinedTypes, var_semanticContext, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 67)) ;
  }
  {
  routine_buildGrammarComponentMapForSemanticAnalysis (var_grammarComponentASTList, var_semanticContext, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 72)) ;
  }
  {
  routine_buildOptionComponentMapForSemanticAnalysis (var_optionComponentFileNameList, ioArgument_ioParsedComponentStruct, var_semanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 77)) ;
  }
  GALGAS_lexiqueComponentMapForSemanticAnalysis var_lexiqueMap ;
  {
  routine_buildLexiqueComponentMapForSemanticAnalysis (ioArgument_ioParsedComponentStruct, var_lexiqueMap, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 83)) ;
  }
  var_semanticContext.mAttribute_mLexiqueComponentMapForSemanticAnalysis = var_lexiqueMap ;
  GALGAS_lstring var_lexiqueFilePath = GALGAS_lstring::constructor_new (constinArgument_inSyntaxComponentRoot.reader_mImportedLexiqueFilePath (SOURCE_FILE ("syntaxCompilation.gSemantics", 90)).mAttribute_string.reader_absolutePathFromPath (constinArgument_inSourceFile.mAttribute_string.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("syntaxCompilation.gSemantics", 90)) COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 90)), constinArgument_inSyntaxComponentRoot.reader_mImportedLexiqueFilePath (SOURCE_FILE ("syntaxCompilation.gSemantics", 91)).reader_location (SOURCE_FILE ("syntaxCompilation.gSemantics", 91))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 89)) ;
  GALGAS_galgas_33_LexiqueComponentListAST_2D_element var_lexiqueComponentRoot ;
  {
  routine_parseLexiqueComponent (var_lexiqueFilePath, ioArgument_ioParsedComponentStruct, var_lexiqueComponentRoot, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 94)) ;
  }
  GALGAS_terminalMap var_terminalMap ;
  {
  routine_buildTerminalMap (var_lexiqueComponentRoot, var_terminalMap, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 101)) ;
  }
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 103)) ;
  cEnumerator_indexingListAST enumerator_5059 (var_lexiqueComponentRoot.reader_mIndexingListAST (SOURCE_FILE ("syntaxCompilation.gSemantics", 104)), kEnumeration_up) ;
  while (enumerator_5059.hasCurrentObject ()) {
    var_indexNameSet.addAssign_operation (enumerator_5059.current_mIndexName (HERE).reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 105))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 105)) ;
    enumerator_5059.gotoNextObject () ;
  }
  GALGAS_bool var_hasIndexing = var_lexiqueComponentRoot.reader_mIndexingDirectory (SOURCE_FILE ("syntaxCompilation.gSemantics", 107)).mAttribute_location.reader_isNowhere (SOURCE_FILE ("syntaxCompilation.gSemantics", 107)).operator_not (SOURCE_FILE ("syntaxCompilation.gSemantics", 107)) ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("syntaxCompilation.gSemantics", 109)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_string var_lexiqueName = constinArgument_inSyntaxComponentRoot.reader_mImportedLexiqueFilePath (SOURCE_FILE ("syntaxCompilation.gSemantics", 110)).mAttribute_string.reader_lastPathComponent (SOURCE_FILE ("syntaxCompilation.gSemantics", 110)).reader_stringByDeletingPathExtension (SOURCE_FILE ("syntaxCompilation.gSemantics", 110)) ;
    GALGAS_semanticDeclarationSortedListForGeneration var_decoratedDeclarationListForGeneration ;
    GALGAS_predefinedTypes var_predefinedTypes = function_buildPredefinedTypes (var_semanticContext, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 112)) ;
    GALGAS_syntaxDeclarationForGeneration var_syntaxDeclarationForGeneration ;
    {
    routine_semanticAnalysisOfSyntaxComponent (constinArgument_inSyntaxComponentRoot.reader_mNonterminalDeclarationList (SOURCE_FILE ("syntaxCompilation.gSemantics", 115)), constinArgument_inSyntaxComponentRoot.reader_mRuleList (SOURCE_FILE ("syntaxCompilation.gSemantics", 116)), var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 117)), var_lexiqueName, var_semanticContext, var_predefinedTypes, var_terminalMap, var_indexNameSet, var_hasIndexing, constinArgument_inSyntaxComponentRoot.mAttribute_mHasTranslateFeature, var_syntaxDeclarationForGeneration, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 114)) ;
    }
    {
    routine_performSemanticAnalysis (constinArgument_inOutputDirectory, constinArgument_inSyntaxComponentRoot.reader_mSemanticDeclarationList (SOURCE_FILE ("syntaxCompilation.gSemantics", 130)), var_semanticContext, var_decoratedDeclarationListForGeneration, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 128)) ;
    }
    var_decoratedDeclarationListForGeneration.addAssign_operation (GALGAS_string ("syntax"), var_syntaxDeclarationForGeneration, GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 134)) ;
    const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("syntaxCompilation.gSemantics", 140)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_string var_headerString = GALGAS_string (filewrapperTemplate_syntaxFileGenerationTemplate_syntaxFileHeader (inCompiler, var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 142)), var_lexiqueName, var_headerIncludeList COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 141))) ;
      cEnumerator_semanticDeclarationSortedListForGeneration enumerator_6706 (var_decoratedDeclarationListForGeneration, kEnumeration_up) ;
      while (enumerator_6706.hasCurrentObject ()) {
        GALGAS_stringset var_unusedInclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 147)) ;
        GALGAS_string var_code ;
        callCategoryMethod_appendDeclaration_31_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_6706.current_mDeclaration (HERE).ptr (), var_unusedInclusionSet, var_code, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 148)) ;
        var_headerString.dotAssign_operation (var_code  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 149)) ;
        enumerator_6706.gotoNextObject () ;
      }
      cEnumerator_semanticDeclarationSortedListForGeneration enumerator_6950 (var_decoratedDeclarationListForGeneration, kEnumeration_up) ;
      while (enumerator_6950.hasCurrentObject ()) {
        GALGAS_stringset var_inclusionSet_32_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 152)) ;
        GALGAS_string var_headerString_32_ ;
        callCategoryMethod_appendDeclaration_32_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_6950.current_mDeclaration (HERE).ptr (), GALGAS_bool (false), constinArgument_inOutputDirectory, var_inclusionSet_32_, var_headerString_32_, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 153)) ;
        var_headerString.dotAssign_operation (var_headerString_32_  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 154)) ;
        enumerator_6950.gotoNextObject () ;
      }
      {
      GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 158)).operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 158)), GALGAS_string ("//"), GALGAS_string ("\n"
        "\n"), var_headerString, GALGAS_string ("\n"
        "\n"), GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 156)) ;
      }
      const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("syntaxCompilation.gSemantics", 166)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_4) {
        GALGAS_string var_implementationString = GALGAS_string (filewrapperTemplate_syntaxFileGenerationTemplate_syntaxFileImplementation (inCompiler, var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 168)), var_implementationIncludeList COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 167))) ;
        cEnumerator_semanticDeclarationSortedListForGeneration enumerator_7736 (var_decoratedDeclarationListForGeneration, kEnumeration_up) ;
        while (enumerator_7736.hasCurrentObject ()) {
          var_implementationString.dotAssign_operation (callCategoryReader_appendTypeGenericImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_7736.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 172))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 172)) ;
          GALGAS_stringset var_unusedInclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 173)) ;
          GALGAS_string var_code ;
          callCategoryMethod_appendSpecificImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_7736.current_mDeclaration (HERE).ptr (), GALGAS_unifiedTypeMap::constructor_emptyMap (SOURCE_FILE ("syntaxCompilation.gSemantics", 174)), var_unusedInclusionSet, var_code, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 174)) ;
          var_implementationString.dotAssign_operation (var_code  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 175)) ;
          enumerator_7736.gotoNextObject () ;
        }
        {
        GALGAS_string::class_method_generateFileWithPattern (constinArgument_inOutputDirectory, var_componentName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 253)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 253)), GALGAS_string ("//"), GALGAS_string ("\n"
          "\n"), var_implementationString, GALGAS_string ("\n"
          "\n"), GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 251)) ;
        }
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Routine 'compileSyntaxComponentFromSourceFile'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_compileSyntaxComponentFromSourceFile (const GALGAS_lstring constinArgument_inSourceFile,
                                                   const GALGAS_string constinArgument_inOutputDirectory,
                                                   GALGAS_parsedComponentStruct & ioArgument_ioParsedComponentStruct,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_basename = constinArgument_inSourceFile.mAttribute_string.reader_lastPathComponent (SOURCE_FILE ("syntaxCompilation.gSemantics", 273)).reader_stringByDeletingPathExtension (SOURCE_FILE ("syntaxCompilation.gSemantics", 273)) ;
  GALGAS_lstring var_basenameKey = GALGAS_lstring::constructor_new (var_basename, inCompiler->here ()  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 274)) ;
  GALGAS_galgas_33_SyntaxComponentListAST_2D_element var_syntaxComponentRoot ;
  const enumGalgasBool test_0 = ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE ("syntaxCompilation.gSemantics", 276)).reader_hasKey (var_basename COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 276)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_lstring joker_12940 ; // Joker input parameter
    ioArgument_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (SOURCE_FILE ("syntaxCompilation.gSemantics", 277)).method_searchKey (var_basenameKey, joker_12940, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 277)) ;
  }else if (kBoolFalse == test_0) {
    var_syntaxComponentRoot.drop () ;
    C_String syntaxDirectedTranslationResult_13001 ;
    cGrammar_syntaxSLRgrammar::_performSourceFileParsing_ (inCompiler, syntaxDirectedTranslationResult_13001, constinArgument_inSourceFile, var_syntaxComponentRoot  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 279)) ;
    {
    ioArgument_ioParsedComponentStruct.mAttribute_mParsedSyntaxComponentMap.modifier_insertKey (var_basenameKey, constinArgument_inSourceFile, var_syntaxComponentRoot, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 280)) ;
    }
  }
  {
  routine_compileSyntaxComponentFromAST (constinArgument_inSourceFile, constinArgument_inOutputDirectory, var_syntaxComponentRoot, ioArgument_ioParsedComponentStruct, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 283)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'groupSyntaxComponentsGalgas3'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_groupSyntaxComponentsGalgas_33_ (const GALGAS_galgas_33_SyntaxComponentListAST constinArgument_inAllSyntaxComponents,
                                              GALGAS_semanticDeclarationListAST & ioArgument_ioDeclarationList,
                                              C_Compiler * inCompiler
                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset var_syntaxComponentNames = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 302)) ;
  cEnumerator_galgas_33_SyntaxComponentListAST enumerator_14010 (constinArgument_inAllSyntaxComponents, kEnumeration_up) ;
  while (enumerator_14010.hasCurrentObject ()) {
    var_syntaxComponentNames.addAssign_operation (enumerator_14010.current (HERE).mAttribute_mSyntaxComponentName.mAttribute_string  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 304)) ;
    enumerator_14010.gotoNextObject () ;
  }
  GALGAS_galgas_33_SyntaxComponentListAST var_allGroupedSyntaxComponents = GALGAS_galgas_33_SyntaxComponentListAST::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 306)) ;
  cEnumerator_stringset enumerator_14214 (var_syntaxComponentNames, kEnumeration_up) ;
  while (enumerator_14214.hasCurrentObject ()) {
    GALGAS_lstring var_componentName = GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("syntaxCompilation.gSemantics", 308)) ;
    GALGAS_lstring var_importedLexiqueName = GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("syntaxCompilation.gSemantics", 309)) ;
    GALGAS_nonterminalDeclarationListAST var_nonterminalDeclarationList = GALGAS_nonterminalDeclarationListAST::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 310)) ;
    GALGAS_syntaxRuleListAST var_ruleList = GALGAS_syntaxRuleListAST::constructor_emptyList (SOURCE_FILE ("syntaxCompilation.gSemantics", 311)) ;
    GALGAS_bool var_hasTranslateFeature = GALGAS_bool (false) ;
    cEnumerator_galgas_33_SyntaxComponentListAST enumerator_14522 (constinArgument_inAllSyntaxComponents, kEnumeration_up) ;
    while (enumerator_14522.hasCurrentObject ()) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, enumerator_14522.current (HERE).mAttribute_mSyntaxComponentName.mAttribute_string.objectCompare (enumerator_14214.current_key (HERE))).boolEnum () ;
      if (kBoolTrue == test_0) {
        var_componentName = enumerator_14522.current (HERE).mAttribute_mSyntaxComponentName ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_importedLexiqueName.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_1) {
          var_importedLexiqueName = enumerator_14522.current (HERE).mAttribute_mImportedLexiqueFilePath ;
        }else if (kBoolFalse == test_1) {
          const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, enumerator_14522.current (HERE).mAttribute_mImportedLexiqueFilePath.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).operator_and (GALGAS_bool (kIsNotEqual, var_importedLexiqueName.mAttribute_string.objectCompare (enumerator_14522.current (HERE).mAttribute_mImportedLexiqueFilePath.mAttribute_string)) COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 318)).boolEnum () ;
          if (kBoolTrue == test_2) {
            GALGAS_location location_3 (enumerator_14522.current (HERE).mAttribute_mImportedLexiqueFilePath.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_3, GALGAS_string ("lexique name is different from that previously declared ('").operator_concat (var_importedLexiqueName.reader_string (SOURCE_FILE ("syntaxCompilation.gSemantics", 319))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 319)).operator_concat (GALGAS_string ("')")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 319))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 319)) ;
            GALGAS_location location_4 (var_importedLexiqueName.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, GALGAS_string ("previously declaration is here")  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 320)) ;
          }
        }
        var_nonterminalDeclarationList.dotAssign_operation (enumerator_14522.current (HERE).mAttribute_mNonterminalDeclarationList  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 322)) ;
        var_ruleList.dotAssign_operation (enumerator_14522.current (HERE).mAttribute_mRuleList  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 323)) ;
        const enumGalgasBool test_5 = enumerator_14522.current (HERE).mAttribute_mHasTranslateFeature.boolEnum () ;
        if (kBoolTrue == test_5) {
          var_hasTranslateFeature = GALGAS_bool (true) ;
        }
      }
      enumerator_14522.gotoNextObject () ;
    }
    ioArgument_ioDeclarationList.addAssign_operation (GALGAS_galgas_33_SyntaxComponentAST::constructor_new (GALGAS_bool (false), var_componentName, var_importedLexiqueName, var_nonterminalDeclarationList, var_ruleList, var_hasTranslateFeature  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 329))  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 329)) ;
    enumerator_14214.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'compileSyntaxComponentGalgas3'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_compileSyntaxComponentGalgas_33_ (const GALGAS_galgas_33_SyntaxComponentListAST_2D_element constinArgument_inSyntaxComponentRoot,
                                               const GALGAS_semanticContext constinArgument_inSemanticContext,
                                               GALGAS_parsedSyntaxComponentMap & ioArgument_ioParsedSyntaxComponentMap,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_componentName = constinArgument_inSyntaxComponentRoot.mAttribute_mSyntaxComponentName.mAttribute_string ;
  GALGAS_terminalMap var_terminalMap ;
  GALGAS_indexingListAST var_indexingListAST ;
  GALGAS_lstring var_indexingDirectory ;
  constinArgument_inSemanticContext.mAttribute_mLexiqueComponentMapForSemanticAnalysis.method_searchKey (constinArgument_inSyntaxComponentRoot.mAttribute_mImportedLexiqueFilePath, var_terminalMap, var_indexingListAST, var_indexingDirectory, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 408)) ;
  GALGAS_stringset var_indexNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("syntaxCompilation.gSemantics", 415)) ;
  cEnumerator_indexingListAST enumerator_19137 (var_indexingListAST, kEnumeration_up) ;
  while (enumerator_19137.hasCurrentObject ()) {
    var_indexNameSet.addAssign_operation (enumerator_19137.current_mIndexName (HERE).mAttribute_string  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 417)) ;
    enumerator_19137.gotoNextObject () ;
  }
  GALGAS_bool var_hasIndexing = var_indexingDirectory.mAttribute_location.reader_isNowhere (SOURCE_FILE ("syntaxCompilation.gSemantics", 419)).operator_not (SOURCE_FILE ("syntaxCompilation.gSemantics", 419)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("syntaxCompilation.gSemantics", 421)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_string var_lexiqueName = constinArgument_inSyntaxComponentRoot.mAttribute_mImportedLexiqueFilePath.mAttribute_string ;
    GALGAS_predefinedTypes var_predefinedTypes = function_buildPredefinedTypes (constinArgument_inSemanticContext, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 423)) ;
    {
    GALGAS_syntaxDeclarationForGeneration joker_19886 ; // Joker input parameter
    routine_semanticAnalysisOfSyntaxComponent (constinArgument_inSyntaxComponentRoot.mAttribute_mNonterminalDeclarationList, constinArgument_inSyntaxComponentRoot.mAttribute_mRuleList, var_componentName, var_lexiqueName, constinArgument_inSemanticContext, var_predefinedTypes, var_terminalMap, var_indexNameSet, var_hasIndexing, constinArgument_inSyntaxComponentRoot.mAttribute_mHasTranslateFeature, joker_19886, inCompiler  COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 424)) ;
    }
    {
    ioArgument_ioParsedSyntaxComponentMap.modifier_insertKey (constinArgument_inSyntaxComponentRoot.mAttribute_mSyntaxComponentName, constinArgument_inSyntaxComponentRoot.mAttribute_mSyntaxComponentName, constinArgument_inSyntaxComponentRoot, inCompiler COMMA_SOURCE_FILE ("syntaxCompilation.gSemantics", 438)) ;
    }
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


