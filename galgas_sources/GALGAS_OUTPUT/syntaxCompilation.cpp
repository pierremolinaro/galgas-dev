//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'syntaxCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 21th, 2010, at 16h51'50"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileSyntaxComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSyntaxComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSyntaxComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (34)) ;
  GGS_syntaxComponentAST var_cas_syntaxComponentRoot ;
  const GGS_bool cond_2208 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_hasKey (var_cas_basename) ;
  if (cond_2208.isBuiltAndTrue ()) {
    const GGS_parsedSyntaxComponentMap  temp_2164 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
    if (temp_2164.isBuilt ()) {
      temp_2164 (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (37)) ;
    }
  }else if (cond_2208.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_syntaxComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (39)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (40)) ;
  }
  const GGS_lstring  var_cas_componentName = var_cas_syntaxComponentRoot.reader_mSyntaxComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
  const GGS_bool cond_2745 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))).operator_isNotEqual (var_cas_basename) ;
  if (cond_2745.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (46)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (48)) ;
  }
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = var_cas_syntaxComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
  GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (52))) ;
  GGS_lstringlist  var_cas_optionComponentFileNameList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_grammarComponentASTList  var_cas_grammarComponentASTList = GGS_grammarComponentASTList ::constructor_emptyList () ;
  ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentFileNameList,  var_cas_grammarComponentASTList,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_syntaxComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (61)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationListWithPredefinedTypes = var_cas_semanticDeclarationList ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes,  var_cas_syntaxComponentRoot.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (71)),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (69)) ;
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (75)) ;
  GGS_syntaxDeclarationForGeneration  var_cas_syntaxDeclarationForGeneration ;
  ::routine_buildContextFromRuleHeadersAndNonterminalDeclarations (inLexique,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  var_cas_syntaxComponentRoot.reader_mImportedLexiqueFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ().reader_identifierRepresentation (),  var_cas_semanticContext,  var_cas_predefinedTypes,  var_cas_syntaxDeclarationForGeneration COMMA_SOURCE_FILE_AT_LINE (77)) ;
  ::routine_buildOptionComponentMapForSemanticAnalysis (inLexique,  var_cas_optionComponentFileNameList,  var_cas_ioParsedComponentStruct,  var_cas_semanticContext.mOptionComponentMapForSemanticAnalysis COMMA_SOURCE_FILE_AT_LINE (87)) ;
  ::routine_buildGrammarComponentMapForSemanticAnalysis (inLexique,  var_cas_grammarComponentASTList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (93)) ;
  GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
  ::routine_performSemanticAnalysis (inLexique,  var_cas_syntaxComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (100)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (100)),  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (99)) ;
  var_cas_decoratedDeclarationListForGeneration.addAssign_operation (var_cas_syntaxDeclarationForGeneration) ;
  const GGS_bool cond_5835 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (106))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_5835.isBuiltAndTrue ()) {
    GGS_string var_cas_headerString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileHeader (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), var_cas_syntaxComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), var_cas_semanticContext.mTypeMap.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (110))) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_5537 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_5537 = NULL ;
      while (((operand_5537 = enumerator_5537.nextObject ()))) {
        macroValidPointer (operand_5537) ;
        var_cas_headerString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_5537->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_5537->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (113)))) ;
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (117))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_headerString, GGS_string ("\n"
      "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  }
  const GGS_bool cond_6502 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (126))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_6502.isBuiltAndTrue ()) {
    GGS_string var_cas_implementationString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileImplementation (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_6102 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_6102 = NULL ;
      while (((operand_6102 = enumerator_6102.nextObject ()))) {
        macroValidPointer (operand_6102) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_6102->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_6102->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (131)))) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_6102->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_6102->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (132)))) ;
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_implementationString, GGS_string ("\n"
      "\n"), GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSyntaxComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

