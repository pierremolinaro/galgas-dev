//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'syntaxCompilation.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 22th, 2010, at 20h52'17"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "syntaxCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "syntaxCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "syntaxSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "buildTerminalMap"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildTerminalMap (C_Compiler & inLexique,
                                const GGS_lexiqueComponentAST   var_cas_inLexiqueComponentRoot,
                                GGS_terminalMap  & var_cas_outTerminalMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildTerminalMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_lexicalTypeMap  var_cas_lexicalTypeMap = function_buildLexicalTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (37)) ;
  GGS_lexicalAttributeMap  var_cas_lexicalAttributeMap = GGS_lexicalAttributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (38)) ;
  ::routine_buildLexicalAttributeMap (inLexique,  var_cas_lexicalTypeMap,  var_cas_inLexiqueComponentRoot.reader_mLexicalAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (41)),  var_cas_lexicalAttributeMap COMMA_SOURCE_FILE_AT_LINE (39)) ;
  var_cas_outTerminalMap = GGS_terminalMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) ;
  {
    GGS_terminalDeclarationListAST::cEnumerator enumerator_2569 (var_cas_inLexiqueComponentRoot.reader_mTerminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (46)), true) ;
    const GGS_terminalDeclarationListAST::cElement * operand_2569 = NULL ;
    while (((operand_2569 = enumerator_2569.nextObject ()))) {
      macroValidPointer (operand_2569) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_2708 (operand_2569->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_2708 = NULL ;
        while (((operand_2708 = enumerator_2708.nextObject ()))) {
          macroValidPointer (operand_2708) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          if (var_cas_lexicalAttributeMap.isBuilt ()) {
            var_cas_lexicalAttributeMap (HERE)->method_searchKey (inLexique, operand_2708->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_2708->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (51)), var_cas_attributeLexicalType) ;
        }
      }
      var_cas_outTerminalMap.modifier_insertKey (inLexique, operand_2569->mName, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (53)) ;
    }
  }
  {
    GGS_lexicalListDeclarationListAST::cEnumerator enumerator_3005 (var_cas_inLexiqueComponentRoot.reader_mLexicalListDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (56)), true) ;
    const GGS_lexicalListDeclarationListAST::cElement * operand_3005 = NULL ;
    while (((operand_3005 = enumerator_3005.nextObject ()))) {
      macroValidPointer (operand_3005) ;
      GGS_lexicalSentValueList  var_cas_argumentTypeList = GGS_lexicalSentValueList ::constructor_emptyList () ;
      {
        GGS_lstringlist::cEnumerator enumerator_3147 (operand_3005->mSentAttributeList, true) ;
        const GGS_lstringlist::cElement * operand_3147 = NULL ;
        while (((operand_3147 = enumerator_3147.nextObject ()))) {
          macroValidPointer (operand_3147) ;
          GGS_lexicalTypeEnum var_cas_attributeLexicalType ;
          if (var_cas_lexicalAttributeMap.isBuilt ()) {
            var_cas_lexicalAttributeMap (HERE)->method_searchKey (inLexique, operand_3147->mValue, var_cas_attributeLexicalType COMMA_SOURCE_FILE_AT_LINE (60)) ;
          }
          var_cas_argumentTypeList.addAssign_operation (operand_3147->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (61)), var_cas_attributeLexicalType) ;
        }
      }
      {
        GGS_lexicalListEntryListAST::cEnumerator enumerator_3374 (operand_3005->mEntryList, true) ;
        const GGS_lexicalListEntryListAST::cElement * operand_3374 = NULL ;
        while (((operand_3374 = enumerator_3374.nextObject ()))) {
          macroValidPointer (operand_3374) ;
          var_cas_outTerminalMap.modifier_insertKey (inLexique, operand_3374->mTerminalSpelling, var_cas_argumentTypeList COMMA_SOURCE_FILE_AT_LINE (64)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildTerminalMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "compileSyntaxComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSyntaxComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  var_cas_inOutputDirectory,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSyntaxComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (82)) ;
  GGS_syntaxComponentAST var_cas_syntaxComponentRoot ;
  const GGS_bool cond_4439 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_hasKey (var_cas_basename) ;
  if (cond_4439.isBuiltAndTrue ()) {
    const GGS_parsedSyntaxComponentMap  temp_4395 = var_cas_ioParsedComponentStruct.reader_mParsedSyntaxComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
    if (temp_4395.isBuilt ()) {
      temp_4395 (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (85)) ;
    }
  }else if (cond_4439.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_syntaxSLRgrammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_syntaxComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedSyntaxComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_syntaxComponentRoot COMMA_SOURCE_FILE_AT_LINE (88)) ;
  }
  const GGS_lstring  var_cas_componentName = var_cas_syntaxComponentRoot.reader_mSyntaxComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
  const GGS_bool cond_4976 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isNotEqual (var_cas_basename) ;
  if (cond_4976.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = var_cas_syntaxComponentRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
  GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (100))) ;
  GGS_lstringlist  var_cas_optionComponentFileNameList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_grammarComponentASTList  var_cas_grammarComponentASTList = GGS_grammarComponentASTList ::constructor_emptyList () ;
  GGS_stringlist  var_cas_headerIncludeList = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_implementationIncludeList = GGS_stringlist ::constructor_emptyList () ;
  ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_optionComponentFileNameList,  var_cas_grammarComponentASTList,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_headerIncludeList,  var_cas_implementationIncludeList,  var_cas_syntaxComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (113)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (105)) ;
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationListWithPredefinedTypes = var_cas_semanticDeclarationList ;
  ::routine_appendPredefinedTypesASTs (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes COMMA_SOURCE_FILE_AT_LINE (118)) ;
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationListWithPredefinedTypes,  var_cas_syntaxComponentRoot.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (123)),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (121)) ;
  ::routine_buildGrammarComponentMapForSemanticAnalysis (inLexique,  var_cas_grammarComponentASTList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (127)) ;
  ::routine_buildOptionComponentMapForSemanticAnalysis (inLexique,  var_cas_optionComponentFileNameList,  var_cas_ioParsedComponentStruct,  var_cas_semanticContext.mOptionComponentMapForSemanticAnalysis COMMA_SOURCE_FILE_AT_LINE (132)) ;
  const GGS_lstring  var_cas_lexiqueFilePath = GGS_lstring ::constructor_new (inLexique, var_cas_syntaxComponentRoot.reader_mImportedLexiqueFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (139)).ggs_string ().reader_absolutePathFromPath (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ()), var_cas_syntaxComponentRoot.reader_mImportedLexiqueFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (140)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (138)) ;
  GGS_lexiqueComponentAST  var_cas_lexiqueComponentRoot ;
  ::routine_parseLexiqueComponent (inLexique,  var_cas_lexiqueFilePath,  var_cas_ioParsedComponentStruct,  var_cas_lexiqueComponentRoot COMMA_SOURCE_FILE_AT_LINE (143)) ;
  GGS_terminalMap  var_cas_terminalMap ;
  ::routine_buildTerminalMap (inLexique,  var_cas_lexiqueComponentRoot,  var_cas_terminalMap COMMA_SOURCE_FILE_AT_LINE (150)) ;
  const GGS_predefinedTypes var_cas_predefinedTypes = function_buildPredefinedTypes (inLexique, var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (152)) ;
  GGS_syntaxDeclarationForGeneration  var_cas_syntaxDeclarationForGeneration ;
  const GGS_string var_cas_lexiqueName = var_cas_syntaxComponentRoot.reader_mImportedLexiqueFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  ::routine_semanticAnalysisOfSyntaxComponent (inLexique,  var_cas_syntaxComponentRoot.reader_mNonterminalDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (156)),  var_cas_syntaxComponentRoot.reader_mRuleList (inLexique COMMA_SOURCE_FILE_AT_LINE (157)),  var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (158)),  var_cas_lexiqueName.reader_identifierRepresentation (),  var_cas_semanticContext,  var_cas_predefinedTypes,  var_cas_terminalMap,  var_cas_syntaxDeclarationForGeneration COMMA_SOURCE_FILE_AT_LINE (155)) ;
  GGS_semanticDeclarationListForGeneration  var_cas_decoratedDeclarationListForGeneration ;
  ::routine_performSemanticAnalysis (inLexique,  var_cas_syntaxComponentRoot.reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (168)),  var_cas_semanticContext,  var_cas_decoratedDeclarationListForGeneration COMMA_SOURCE_FILE_AT_LINE (167)) ;
  var_cas_decoratedDeclarationListForGeneration.addAssign_operation (var_cas_syntaxDeclarationForGeneration) ;
  const GGS_bool cond_8862 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (174))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_8862.isBuiltAndTrue ()) {
    GGS_string var_cas_headerString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileHeader (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176)), var_cas_lexiqueName, var_cas_headerIncludeList, var_cas_semanticContext.mTypeMap.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_8420 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_8420 = NULL ;
      while (((operand_8420 = enumerator_8420.nextObject ()))) {
        macroValidPointer (operand_8420) ;
        var_cas_headerString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendAutoPointerClassDeclaration (operand_8420->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_8420->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (182)))) ;
      }
    }
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_8564 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_8564 = NULL ;
      while (((operand_8564 = enumerator_8564.nextObject ()))) {
        macroValidPointer (operand_8564) ;
        var_cas_headerString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendDeclaration (operand_8564->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_8564->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (185)))) ;
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))).operator_concat (GGS_string (".h")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_headerString, GGS_string ("\n"
      "\n"), GGS_string ("#endif\n") COMMA_SOURCE_FILE_AT_LINE (187)) ;
  }
  const GGS_bool cond_11377 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (198))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_11377.isBuiltAndTrue ()) {
    GGS_string var_cas_implementationString = template_filewrapper_syntaxFileGenerationTemplate_syntaxFileImplementation (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200)), var_cas_implementationIncludeList) ;
    {
      GGS_semanticDeclarationListForGeneration::cEnumerator enumerator_9162 (var_cas_decoratedDeclarationListForGeneration, true) ;
      const GGS_semanticDeclarationListForGeneration::cElement * operand_9162 = NULL ;
      while (((operand_9162 = enumerator_9162.nextObject ()))) {
        macroValidPointer (operand_9162) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendAutoPointerClassImplementation (operand_9162->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_9162->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (204)))) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendTypeGenericImplementation (operand_9162->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_9162->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (205)))) ;
        var_cas_implementationString.dotAssign_operation ((findCategoryReader__semanticDeclarationForGeneration__appendSpecificImplementation (operand_9162->mDeclaration (HERE)->galgasRTTI ()) (inLexique, operand_9162->mDeclaration.getPtr () COMMA_SOURCE_FILE_AT_LINE (206)))) ;
      }
    }
    const GGS_string var_cas_lexiqueCppName = (GGS_string ("C_Lexique_")).operator_concat (var_cas_syntaxComponentRoot.reader_mImportedLexiqueFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (209)).ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ().reader_identifierRepresentation ()) ;
    {
      GGS_ruleDeclarationList::cEnumerator enumerator_9619 (var_cas_syntaxDeclarationForGeneration.reader_mRuleDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (210)), true) ;
      const GGS_ruleDeclarationList::cElement * operand_9619 = NULL ;
      while (((operand_9619 = enumerator_9619.nextObject ()))) {
        macroValidPointer (operand_9619) ;
        {
          GGS_ruleLabelImplementationList::cEnumerator enumerator_9713 (operand_9619->mLabelImplementationList, true) ;
          const GGS_ruleLabelImplementationList::cElement * operand_9713 = NULL ;
          while (((operand_9713 = enumerator_9713.nextObject ()))) {
            macroValidPointer (operand_9713) ;
            const GGS_string var_cas_ruleName = (((((((((GGS_string ("cParser_")).operator_concat (var_cas_componentName.ggs_string ().reader_identifierRepresentation ())).operator_concat (GGS_string ("::rule_"))).operator_concat (var_cas_componentName.ggs_string ().reader_identifierRepresentation ())).operator_concat (GGS_string ("_"))).operator_concat (operand_9619->mNonterminalName.reader_identifierRepresentation ())).operator_concat (GGS_string ("_i"))).operator_concat (operand_9619->mRuleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215)))).operator_concat (GGS_string ("_"))).operator_concat (operand_9713->mLabelName.ggs_string ().reader_identifierRepresentation ()) ;
            var_cas_implementationString.dotAssign_operation (function_generateProcedure (inLexique, var_cas_ruleName, operand_9713->mSignatureForGeneration, operand_9713->mInstructionListForGeneration, GGS_bool (false), var_cas_lexiqueCppName, GGS_bool (false), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (216))) ;
          }
        }
        const GGS_bool cond_11130 = operand_9619->mHasParseLabel ;
        if (cond_11130.isBuiltAndTrue ()) {
          GGS_semanticInstructionListForGeneration  var_cas_instructionList ;
          GGS_lstring  automatic_var_10508_0 ;
          GGS_formalParameterListForGeneration  automatic_var_10508_1 ;
          GGS_formalParameterSignature  automatic_var_10508_2 ;
          GGS_location  automatic_var_10508_3 ;
          if (operand_9619->mLabelImplementationList.isBuilt ()) {
            operand_9619->mLabelImplementationList (HERE)->method_first (inLexique, automatic_var_10508_0, automatic_var_10508_1, automatic_var_10508_2, automatic_var_10508_3, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (228)) ;
          }
          const GGS_string var_cas_ruleName = ((((((((GGS_string ("cParser_")).operator_concat (var_cas_componentName.ggs_string ().reader_identifierRepresentation ())).operator_concat (GGS_string ("::rule_"))).operator_concat (var_cas_componentName.ggs_string ().reader_identifierRepresentation ())).operator_concat (GGS_string ("_"))).operator_concat (operand_9619->mNonterminalName.reader_identifierRepresentation ())).operator_concat (GGS_string ("_i"))).operator_concat (operand_9619->mRuleIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (232)))).operator_concat (GGS_string ("_parse")) ;
          var_cas_implementationString.dotAssign_operation (function_generateProcedure (inLexique, var_cas_ruleName, GGS_formalParameterListForGeneration ::constructor_emptyList (), function_syntaxSignatureOfInstructionList (inLexique, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (236)), GGS_bool (false), var_cas_lexiqueCppName, GGS_bool (false), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (233))) ;
        }
      }
    }
    GGS_string::class_method_generateFile (inLexique, var_cas_inOutputDirectory, (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))).operator_concat (GGS_string (".cpp")), GGS_string ("//"), GGS_string ("\n"
      "\n"), var_cas_implementationString, GGS_string ("\n"
      "\n"), GGS_string ("\n") COMMA_SOURCE_FILE_AT_LINE (244)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSyntaxComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

