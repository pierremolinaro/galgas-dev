//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'domain_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 12th, 2009, at 21h24'49"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "domain_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "domain_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'domain_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void domain_parser::
pr_domain_declaration_domain_parser_66_25_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer) {
  GGS_stringset  var_cas_propertyNameSet = GGS_stringset ::constructor_emptySet () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_domain) COMMA_HERE) ;
  GGS_lstring  var_cas_domainTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_domainTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_domainAttributeMap  var_cas_attributeMap = GGS_domainAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_domainModifierMap  var_cas_domainModifierMap = GGS_domainModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_domainModifierAttributeList = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_domainModifierAttributeList.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
  GGS_domainRelationMap  var_cas_relationMap = GGS_domainRelationMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_domain_parser_0 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeTypeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          if (((var_cas_attributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))).operator_isNotEqual (GGS_string ("string"))).isBuiltAndTrue ()) {
            var_cas_attributeTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the '@string' is supported here") COMMA_SOURCE_FILE_AT_LINE (89)) ;
          }
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_propertyNameSet.reader_hasKey (inLexique, var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92))).isBuiltAndTrue ()) {
            var_cas_attributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the domain has already a property named '")).operator_concat (var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (94)) ;
          }else{
            var_cas_propertyNameSet.addAssign_operation (var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
            var_cas_attributeMap.modifier_insertKey (inLexique, var_cas_attributeName COMMA_SOURCE_FILE_AT_LINE (96)) ;
            GGS_lstring  var_cas_addModifierName = GGS_lstring ::constructor_new (inLexique, (GGS_string ("addTo")).operator_concat (var_cas_attributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (97))), var_cas_attributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) COMMA_HERE) ;
            var_cas_domainModifierMap.modifier_insertKey (inLexique, var_cas_addModifierName, var_cas_domainModifierAttributeList COMMA_SOURCE_FILE_AT_LINE (98)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_relationTypeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_relationTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_relationModifierAttributeList = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_stringlist  var_cas_domains = GGS_stringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_1 = true ;
            while (syntaxRepeat_1) {
                GGS_lstring  var_cas_attributeName ;
                inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                const GGS_domainAttributeMap  temp_5155 = var_cas_attributeMap ;
                if (temp_5155.isBuilt ()) {
                  temp_5155 (HERE)->method_searchKey (inLexique, var_cas_attributeName COMMA_SOURCE_FILE_AT_LINE (110)) ;
                }
                var_cas_domains.addAssign_operation (var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
                var_cas_relationModifierAttributeList.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              switch (select_repeat_domain_parser_1 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_1 = false ;
                  break ;
              }
            }
          }
          if ((var_cas_propertyNameSet.reader_hasKey (inLexique, var_cas_relationTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) COMMA_SOURCE_FILE_AT_LINE (119))).isBuiltAndTrue ()) {
            var_cas_relationTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the domain has already a property named '")).operator_concat (var_cas_relationTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (121)) ;
          }else{
            var_cas_propertyNameSet.addAssign_operation (var_cas_relationTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122))) ;
            GGS_lstring  var_cas_addModifierName = GGS_lstring ::constructor_new (inLexique, (GGS_string ("addTo")).operator_concat (var_cas_relationTypeName.ggs_string ().reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (123))), var_cas_relationTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_HERE) ;
            var_cas_domainModifierMap.modifier_insertKey (inLexique, var_cas_addModifierName, var_cas_relationModifierAttributeList COMMA_SOURCE_FILE_AT_LINE (124)) ;
            var_cas_relationMap.modifier_insertKey (inLexique, var_cas_relationTypeName, var_cas_domains COMMA_SOURCE_FILE_AT_LINE (125)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_AC_galgasType  var_cas_t = GGS_typeGalgasDomainType ::constructor_new (inLexique, var_cas_domainTypeName, var_cas_attributeMap, var_cas_domainModifierMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_domainTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (132)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_typeEntityToGenerate  var_cas_def = GGS_C_domainToImplement ::constructor_new (inLexique, var_cas_domainTypeName, var_cas_attributeMap, var_cas_relationMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void domain_parser::
pr_domain_declaration_domain_parser_66_25_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_domain) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_domain_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
          { bool syntaxRepeat_1 = true ;
            while (syntaxRepeat_1) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              switch (select_repeat_domain_parser_1 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_1 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void domain_parser::
pr_semantics_declaration_domain_parser_145_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  nt_domain_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer) ;
}

//---------------------------------------------------------------------------*

void domain_parser::
pr_semantics_declaration_domain_parser_145_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
  nt_domain_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer) ;
}

//---------------------------------------------------------------------------*

void domain_parser::
pr_semantics_declaration_domain_parser_145_28_parse (galgas_scanner & inLexique) {
  nt_domain_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*

