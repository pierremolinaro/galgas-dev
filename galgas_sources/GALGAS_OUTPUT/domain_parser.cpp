//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'domain_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       may 17th, 2007, at 18h5'49"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "domain_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "domain_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//#define DEBUG_TRACE_ENABLED

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'domain_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void domain_parser::
domain_parser::
pr_domain_declaration_domain_parser_65_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<domain_declaration>", NULL, "") ;
  #endif
  GGS_stringset  var_cas_propertyNameSet ;
  var_cas_propertyNameSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$domain$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_domain) COMMA_HERE) ;
  GGS_lstring  var_cas_domainTypeName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_domainTypeName) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$type_name$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("${$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B) COMMA_HERE) ;
  GGS_domainAttributeMap  var_cas_attributeMap ;
  var_cas_attributeMap = GGS_domainAttributeMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_domainModifierMap  var_cas_domainModifierMap ;
  var_cas_domainModifierMap = GGS_domainModifierMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_domainModifierAttributeList ;
  var_cas_domainModifierAttributeList = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_domainModifierAttributeList._addAssign_operation (GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE), GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE)) ;
  GGS_domainRelationMap  var_cas_relationMap ;
  var_cas_relationMap = GGS_domainRelationMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_domain_parser_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeTypeName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$type_name$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          if (((var_cas_attributeTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)))._operator_isNotEqual (GGS_string (true, "string"))).isBuiltAndTrue ()) {
            var_cas_attributeTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "only the '@string' is supported here") COMMA_SOURCE_FILE_AT_LINE (88)) ;
          }
          GGS_lstring  var_cas_attributeName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_propertyNameSet.reader_hasKey (_inLexique, var_cas_attributeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)) COMMA_SOURCE_FILE_AT_LINE (91))).isBuiltAndTrue ()) {
            var_cas_attributeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the domain has already a property named '"))._operator_concat (var_cas_attributeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (92))))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (93)) ;
          }else{
            var_cas_propertyNameSet._addAssign_operation (var_cas_attributeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
            var_cas_attributeMap.modifier_insertKey (_inLexique, var_cas_attributeName COMMA_SOURCE_FILE_AT_LINE (95)) ;
            GGS_lstring  var_cas_addModifierName ;
            var_cas_addModifierName = GGS_lstring::constructor_new (_inLexique, (GGS_string (true, "addTo"))._operator_concat (var_cas_attributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter (_inLexique COMMA_SOURCE_FILE_AT_LINE (96))), var_cas_attributeName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)) COMMA_HERE) ;
            var_cas_domainModifierMap.modifier_insertKey (_inLexique, var_cas_addModifierName, var_cas_domainModifierAttributeList COMMA_SOURCE_FILE_AT_LINE (97)) ;
          }
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$;$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_relationTypeName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_relationTypeName) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$[$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_relationModifierAttributeList ;
          var_cas_relationModifierAttributeList = GGS_L_EXsignature::constructor_emptyList (_inLexique COMMA_HERE) ;
          GGS_stringlist  var_cas_domains ;
          var_cas_domains = GGS_stringlist::constructor_emptyList (_inLexique COMMA_HERE) ;
          { bool syntaxRepeat = true ;
            while (syntaxRepeat) {
                GGS_lstring  var_cas_attributeName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
                #ifdef DEBUG_TRACE_ENABLED
                  { C_String message_ (" ?") ;
                    message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                    _inLexique.didParseTerminal ("$identifier$", message_) ;
                  }
                #endif
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                if (var_cas_attributeMap._isBuilt ()) {
                  var_cas_attributeMap (HERE)->method_searchKey (_inLexique, var_cas_attributeName COMMA_SOURCE_FILE_AT_LINE (109)) ;
                }
                var_cas_domains._addAssign_operation (var_cas_attributeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (110))) ;
                var_cas_relationModifierAttributeList._addAssign_operation (GGS_typeGalgas_string::constructor_new (_inLexique COMMA_HERE), GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE)) ;
              switch (select_repeat_domain_parser_1 (_inLexique)) {
                case 2 : {
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ ;
                      _inLexique.didParseTerminal ("$,$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat = false ;
                  break ;
              }
            }
          }
          if ((var_cas_propertyNameSet.reader_hasKey (_inLexique, var_cas_relationTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118))).isBuiltAndTrue ()) {
            var_cas_relationTypeName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "the domain has already a property named '"))._operator_concat (var_cas_relationTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (119))))._operator_concat (GGS_string (true, "'")) COMMA_SOURCE_FILE_AT_LINE (120)) ;
          }else{
            var_cas_propertyNameSet._addAssign_operation (var_cas_relationTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (121))) ;
            GGS_lstring  var_cas_addModifierName ;
            var_cas_addModifierName = GGS_lstring::constructor_new (_inLexique, (GGS_string (true, "addTo"))._operator_concat (var_cas_relationTypeName.ggs_string ().reader_stringByCapitalizingFirstCharacter (_inLexique COMMA_SOURCE_FILE_AT_LINE (122))), var_cas_relationTypeName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (122)) COMMA_HERE) ;
            var_cas_domainModifierMap.modifier_insertKey (_inLexique, var_cas_addModifierName, var_cas_relationModifierAttributeList COMMA_SOURCE_FILE_AT_LINE (123)) ;
            var_cas_relationMap.modifier_insertKey (_inLexique, var_cas_relationTypeName, var_cas_domains COMMA_SOURCE_FILE_AT_LINE (124)) ;
          }
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$]$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$;$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  GGS_AC_galgasType  var_cas_t ;
  var_cas_t = GGS_typeGalgasDomainType::constructor_new (_inLexique, var_cas_domainTypeName, var_cas_attributeMap, var_cas_domainModifierMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  var_cas_theEntity = GGS_typeEntiteType::constructor_new (_inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (_inLexique, var_cas_domainTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (131)) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$}$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D) COMMA_HERE) ;
  GGS_typeEntityToGenerate  var_cas_def ;
  var_cas_def = GGS_C_domainToImplement::constructor_new (_inLexique, var_cas_domainTypeName, var_cas_attributeMap, var_cas_relationMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer._addAssign_operation (var_cas_def) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void domain_parser::
pr_domain_declaration_domain_parser_65_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<domain_declaration>", NULL, "") ;
  #endif
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$domain$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_domain) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ (" ?") ;
      message_ << ' ' << _inLexique._attributeValue_tokenString () ;
      _inLexique.didParseTerminal ("$type_name$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("${$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_domain_parser_0 (_inLexique)) {
        case 2 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$type_name$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$;$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ (" ?") ;
              message_ << ' ' << _inLexique._attributeValue_tokenString () ;
              _inLexique.didParseTerminal ("$identifier$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$[$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B) COMMA_HERE) ;
          { bool syntaxRepeat = true ;
            while (syntaxRepeat) {
                #ifdef DEBUG_TRACE_ENABLED
                  { C_String message_ (" ?") ;
                    message_ << ' ' << _inLexique._attributeValue_tokenString () ;
                    _inLexique.didParseTerminal ("$identifier$", message_) ;
                  }
                #endif
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              switch (select_repeat_domain_parser_1 (_inLexique)) {
                case 2 : {
                  #ifdef DEBUG_TRACE_ENABLED
                    { C_String message_ ;
                      _inLexique.didParseTerminal ("$,$", message_) ;
                    }
                  #endif
                  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat = false ;
                  break ;
              }
            }
          }
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$]$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D) COMMA_HERE) ;
          #ifdef DEBUG_TRACE_ENABLED
            { C_String message_ ;
              _inLexique.didParseTerminal ("$;$", message_) ;
            }
          #endif
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    { C_String message_ ;
      _inLexique.didParseTerminal ("$}$", message_) ;
    }
  #endif
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void domain_parser::
domain_parser::
pr_semantics_declaration_domain_parser_144_6_ (galgas_scanner & _inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_ioOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<semantics_declaration>", NULL, "") ;
  #endif
  nt_domain_declaration_ (_inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void domain_parser::
domain_parser::
pr_semantics_declaration_domain_parser_144_6_importSemantics (galgas_scanner & _inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                const GGS_M_treewalkingComponents  /* var_cas_inTreewalkingComponentMap */) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<semantics_declaration>", "importSemantics", "") ;
  #endif
  GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList::constructor_emptyList (_inLexique COMMA_HERE) ;
  nt_domain_declaration_ (_inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

void domain_parser::
pr_semantics_declaration_domain_parser_144_6_parse (galgas_scanner & _inLexique) {
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.enterProduction ("<semantics_declaration>", NULL, "") ;
  #endif
  nt_domain_declaration_parse (_inLexique) ;
  #ifdef DEBUG_TRACE_ENABLED
    _inLexique.exitProduction () ;
  #endif
}

//---------------------------------------------------------------------------*

