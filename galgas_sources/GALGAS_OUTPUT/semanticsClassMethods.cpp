//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsClassMethods.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 19th, 2010, at 11h38'9"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsClassMethods.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsClassMethods.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "enterClassMethodWithStringInputArgument"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterClassMethodWithStringInputArgument (C_Compiler & inLexique,
                                GGS_classMethodMap  & var_cas_ioClassMethodMap,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                const GGS_string  var_cas_inClassMethodName,
                                const GGS_bool  var_cas_inHasCompilerArgument COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterClassMethodWithStringInputArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapIndex  var_cas_argumentTypeIndex ;
  GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (33)), var_cas_ioUnifiedTypeMap, var_cas_argumentTypeIndex COMMA_SOURCE_FILE_AT_LINE (33)) ;
  GGS_formalParameterSignature  var_cas_argList = GGS_formalParameterSignature ::constructor_emptyList () ;
  var_cas_argList.addAssign_operation (var_cas_argumentTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (35))) ;
  var_cas_ioClassMethodMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_inClassMethodName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (37)), var_cas_argList, var_cas_inHasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (36)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterClassMethodWithStringInputArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@stringPredefinedTypeAST.getClassMethodMap'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__stringPredefinedTypeAST__getClassMethodMap (C_Compiler & inLexique,
                                const cPtr_stringPredefinedTypeAST * operand_2384,
                                GGS_unifiedTypeMap  & var_cas_ioUnifiedTypeMap,
                                GGS_classMethodMap  & var_cas_outClassMethodMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2384 != NULL) {
    var_cas_outClassMethodMap = GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
    ::routine_enterClassMethodWithStringInputArgument (inLexique,  var_cas_outClassMethodMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("deleteFile"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (50)) ;
    ::routine_enterClassMethodWithStringInputArgument (inLexique,  var_cas_outClassMethodMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("deleteFileIfExists"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (51)) ;
    ::routine_enterClassMethodWithStringInputArgument (inLexique,  var_cas_outClassMethodMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("removeEmptyDirectory"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (52)) ;
    ::routine_enterClassMethodWithStringInputArgument (inLexique,  var_cas_outClassMethodMap,  var_cas_ioUnifiedTypeMap,  GGS_string ("removeDirectoryRecursively"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (53)) ;
    GGS_unifiedTypeMapIndex  var_cas_stringType ;
    GGS_unifiedTypeMapIndex::class_method_makeRegularIndex (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (55)), var_cas_ioUnifiedTypeMap, var_cas_stringType COMMA_SOURCE_FILE_AT_LINE (55)) ;
    GGS_formalParameterSignature  var_cas_argList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (57))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (58))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (59))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (61))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
    var_cas_argList.addAssign_operation (var_cas_stringType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (63))) ;
    var_cas_outClassMethodMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("generateFile"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (65)), var_cas_argList, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (64)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsClassMethods (void) {
  enterCategoryMethod__predefinedTypeAST__getClassMethodMap ((typeCategoryMethod__predefinedTypeAST__getClassMethodMap) category_method__stringPredefinedTypeAST__getClassMethodMap, gClassInfoFor__stringPredefinedTypeAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticsClassMethods (prologueRoutineFor_semanticsClassMethods, NULL) ;

//---------------------------------------------------------------------------*

