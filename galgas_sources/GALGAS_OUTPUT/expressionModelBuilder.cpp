//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'expressionModelBuilder.cpp'                      *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       may 16th, 2007, at 17h24'47"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "expressionModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expressionModelBuilder.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_semanticExpression expressionModelBuilder::
expressionModelBuilder::
pr_expression_expressionModelBuilder_56_6_ (galgas_scanner & _inLexique) {
  GGS_semanticExpression  var_cas_expression ;
  var_cas_expression = nt_concatenation_term_ (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_expressionModelBuilder_0 (_inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_expression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          var_cas_rightOperand = nt_concatenation_term_ (_inLexique) ;
          var_cas_expression = GGS_concatExpression::constructor_new (_inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  return var_cas_expression ;
}

//---------------------------------------------------------------------------*

