//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'expressionModelBuilder.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 26th, 2009, at 16h41'50"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "expressionModelBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "expressionModelBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_expression_expressionModelBuilder_55_17_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_concatenation_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_expressionModelBuilder_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_concatenation_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_concatExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_concatenation_term_expressionModelBuilder_74_25_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_relation_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_expressionModelBuilder_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_relation_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_orExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5E_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_relation_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_xorExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_relation_term_expressionModelBuilder_100_20_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_relation_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_expressionModelBuilder_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__26_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_relation_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_andExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_relation_factor_expressionModelBuilder_119_22_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_simple_expression_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_expressionModelBuilder_3 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_equalExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3D_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_notEqualExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3D_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_lowerOrEqualExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_greaterOrEqualExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 6 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_strictGreaterExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 7 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_simple_expression_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_strictLowerExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_simple_expression_expressionModelBuilder_173_24_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_expressionModelBuilder_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_leftShiftExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_rightShiftExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_addExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_subExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_term_expressionModelBuilder_213_11_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  nt_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_expressionModelBuilder_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_multiplicationExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2F_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_divisionExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mod) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_semanticExpression  var_cas_rightOperand ;
          nt_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_moduloExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_246_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_unaryMinusExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_259_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_lstring  var_cas_identifier ;
  inLexique.assignFromAttribute_tokenString (var_cas_identifier) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_outExpression = GGS_varInExpression ::constructor_new (inLexique, var_cas_identifier COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_271_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_self) COMMA_HERE) ;
  var_cas_outExpression = GGS_selfInExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_284_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  switch (select_expressionModelBuilder_6 (inLexique)) {
    case 1 : {
      nt_expression_ (inLexique, var_cas_outExpression) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
      GGS_semanticExpression  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
      GGS_bool var_cas_useKindOfClass ;
      switch (select_expressionModelBuilder_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
          var_cas_useKindOfClass = GGS_bool (true) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
          var_cas_useKindOfClass = GGS_bool (false) ;
          } break ;
        default :
          break ;
      }
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_semanticExpression  var_cas_errorLocationExpression ;
      nt_expression_ (inLexique, var_cas_errorLocationExpression) ;
      var_cas_outExpression = GGS_castInExpression ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_useKindOfClass, var_cas_typeName, var_cas_errorLocationExpression COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_323_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_not) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_notExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_336_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_ (inLexique, var_cas_outExpression) ;
  var_cas_outExpression = GGS_negateExpression ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_349_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_trueExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_360_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_falseExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_371_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376))) ;
      switch (select_expressionModelBuilder_8 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_literalStringExpression ::constructor_new (inLexique, var_cas_literalStringList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_388_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_400_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_412_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_424_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_436_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalCharExpression ::constructor_new (inLexique, var_cas_literalChar COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_448_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_460_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_here) COMMA_HERE) ;
  var_cas_outExpression = GGS_hereExpression ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_471_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  GGS_semanticExpression  var_cas_ifExpression ;
  nt_expression_ (inLexique, var_cas_ifExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
  GGS_semanticExpression  var_cas_thenExpression ;
  nt_expression_ (inLexique, var_cas_thenExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_semanticExpression  var_cas_elseExpression ;
  nt_expression_ (inLexique, var_cas_elseExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  var_cas_outExpression = GGS_ifExpression ::constructor_new (inLexique, var_cas_ifExpression, var_cas_thenExpression, var_cas_elseExpression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_499_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  switch (select_expressionModelBuilder_9 (inLexique)) {
    case 1 : {
      GGS_semanticExpression  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      GGS_lstring  var_cas_readerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_outExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_readerCallExpression ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_readerName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      inLexique.assignFromAttribute_tokenString (var_cas_className) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_outExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_constructorExpression ::constructor_new (inLexique, var_cas_className, var_cas_constructorName, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
      switch (select_expressionModelBuilder_10 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_optionExpression ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("generic_galgas_cli_options"), GGS_location (inLexique) COMMA_HERE), var_cas_optionName, var_cas_readerName COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_optionExpression ::constructor_new (inLexique, var_cas_optionComponentName, var_cas_optionName, var_cas_readerName COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_expressionModelBuilder_11 (inLexique)) {
        case 1 : {
          var_cas_outExpression = GGS_filewrapperObjectInstanciationInExpression ::constructor_new (inLexique, var_cas_filewrapperName COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          switch (select_expressionModelBuilder_12 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_filePath ;
              inLexique.assignFromAttribute_tokenString (var_cas_filePath) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              var_cas_outExpression = GGS_filewrapperInExpression ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_filePath COMMA_HERE) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_filewrapperTemplateName ;
              inLexique.assignFromAttribute_tokenString (var_cas_filewrapperTemplateName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_outExpressionList  var_cas_expressionList ;
              nt_output_expression_list_ (inLexique, var_cas_expressionList) ;
              var_cas_outExpression = GGS_filewrapperTemplateInExpression ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_filewrapperTemplateName, var_cas_expressionList COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_583_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_outExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList) ;
  var_cas_outExpression = GGS_functionCallExpression ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_factor_expressionModelBuilder_603_13_ (galgas_scanner & inLexique,
                                GGS_semanticExpression  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__60_) COMMA_HERE) ;
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  var_cas_outExpression = GGS_literalTypeInExpression ::constructor_new (inLexique, var_cas_typeName COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void expressionModelBuilder::
pr_output_expression_list_expressionModelBuilder_617_29_ (galgas_scanner & inLexique,
                                GGS_outExpressionList  &var_cas_outExpressionList) {
  GGS_semanticExpressionList  var_cas_expressionList = GGS_semanticExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_13 = true ;
    while (syntaxRepeat_13) {
      switch (select_expressionModelBuilder_13 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_expression ;
          nt_expression_ (inLexique, var_cas_expression) ;
          var_cas_expressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_13 = false ;
          break ;
      }
    }
  }
  var_cas_outExpressionList = GGS_outExpressionList ::constructor_new (inLexique, var_cas_expressionList, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

