//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'mda_galgas_routines.h'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 1st, 2009, at 11h9'52"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef mda_galgas_routines_DEFINED
#define mda_galgas_routines_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "grammarMetamodel.h"
#include "instructionMetamodel.h"
#include "lexiqueSemantics.h"
#include "optionMetamodel.h"
#include "optionSemantics.h"
#include "programMetamodel.h"
#include "projectMetamodel.h"
#include "semanticsCompilation.h"
#include "semanticsMetamodel.h"
#include "semanticsSemantics.h"
#include "semantics_semantics.h"
#include "syntaxMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_targetFileListMap ;
class GGS_sourceFileMap ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        Function 'outputDirectory'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_outputDirectory (C_Compiler &,
                                const GGS_lstring   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                Routine 'checkCategoryDefinitionForClass'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkCategoryDefinitionForClass (C_Compiler &,
                                const GGS_string ,
                                const GGS_string ,
                                const GGS_lstring  ,
                                const GGS_descendantClassListMap ,
                                const GGS_overridingCategoryMethodListMap  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Routine 'performProjectGlobalCheckings'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performProjectGlobalCheckings (C_Compiler &,
                                const GGS_parsedComponentStruct ,
                                const GGS_location   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Map list '@targetFileListMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_targetFileListMap : public AC_galgas_listmap {
//--- Node class
  public : class cElement : public cPtrListMapObject {
 //--- List attribute
    public : GGS_stringlist mListObject ;
 //--- Constructor
    public : cElement (LOCATION_ARGS) ;
 //--- Description
    public : virtual C_String
    _description (C_Compiler & inLexique,
                  const sint32 inIndentation
                  COMMA_LOCATION_ARGS) const ;
    public : virtual cPtrObject * _clone (LOCATION_ARGS) ;
    public : virtual bool isEqual (const cPtrListMapObject * inOperand) const ;
  } ;

//--- 'emptyMap' constructor
  public : static GGS_targetFileListMap
  constructor_emptyMap (void) ;

//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_targetFileListMap inOperand) ; //Don't pass 'inOperand' by reference !

//--- Handling '.' GALGAS operator
  public : GGS_targetFileListMap _operator_concat (const GGS_targetFileListMap & inOperand) const ;

//--- Handle '+=' operator
  public : void
  _addAssign_operation (const GGS_string & inKey,
                        const GGS_string& inAttribute0) ;

//--- For 'description' reader
  protected : virtual const char * _typeNameForDescriptionReader (void) const ;

//--- Reader 'allKeys'
  public : GGS_stringset
  reader_allKeys (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'keyList'
  public : GGS_stringlist
  reader_keyList (C_Compiler & inLexique
                  COMMA_LOCATION_ARGS) const ;

//--- Reader 'listForKey'
  public : GGS_stringlist
  reader_listForKey (C_Compiler & inLexique,
                     const GGS_string & inKey
                     COMMA_LOCATION_ARGS) const ;

//--- Enumerator
  public : class cEnumerator : public cAbstractDictionaryEnumerator {
  //--- Contructor
    public : cEnumerator (const GGS_targetFileListMap & inListMap,
                          const bool inAscending) ;
  //--- Associated object accessor
    public : const GGS_stringlist & _object (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           Map '@sourceFileMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_sourceFileMap ;

class GGS_sourceFileMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_sourceFileMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_sourceFileMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_sourceFileMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_sourceFileMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_sourceFileMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_sourceFileMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kInsertMessage_insertKey [] ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_string&  inParameter0,
                                const GGS_sourceFileKind&  inParameter1 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_searchKey [] ;

//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_string  & outParameter0,
                                GGS_sourceFileKind  & outParameter1 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_string& inParameter0,
                                   const GGS_sourceFileKind& inParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_string& outParameter0,
                                   GGS_sourceFileKind& outParameter1,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_sourceFileMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_sourceFileMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_sourceFileMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_sourceFileMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_sourceFileMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_string  & _mFullPath (LOCATION_ARGS) const ;
    public : /* const */ GGS_sourceFileKind  & _mSourceKind (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of map '@sourceFileMap'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class e_sourceFileMap {
  public : GGS_string mFullPath ;
  public : GGS_sourceFileKind mSourceKind ;

  public : e_sourceFileMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_sourceFileMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_sourceFileMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_sourceFileMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_sourceFileMap * nextObject (void) const { return (elementOf_GGS_sourceFileMap *) mNextItem ; }
  public : inline elementOf_GGS_sourceFileMap * infObject (void) const { return (elementOf_GGS_sourceFileMap *) mInfPtr ; }
  public : inline elementOf_GGS_sourceFileMap * supObject (void) const { return (elementOf_GGS_sourceFileMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_sourceFileMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Declarations for 'fileListTemplateFileWrapper' wrapper           *
//                                                                           *
//---------------------------------------------------------------------------*

extern const char * gWrapperFileContent_0_fileListTemplateFileWrapper ;
extern const cDirectoryWrapper gWrapperDirectory_0_fileListTemplateFileWrapper ;

//---------------------------------------------------------------------------*
//                                                                           *
// 'fileListTemplate' template of 'fileListTemplateFileWrapper' filewrapper  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_fileListTemplateFileWrapper_fileListTemplate (const GGS_string& var_cas_HAND_CODED_SOURCES_SUB_DIRS,
                                const GGS_string& var_cas_GALGAS_SOURCE_LIST,
                                const GGS_string& var_cas_HAND_CODED_SOURCE_LIST) ;

//---------------------------------------------------------------------------*

#endif
