//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'scanner_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 29th, 2008, at 19h27'56"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "scanner_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "scanner_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildLexicalTypeMap"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalTypeMap (C_Compiler & _inLexique,
                                GGS_lexicalTypeMap  & var_cas_outLexicalTypeMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalTypeMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalTypeMap = GGS_lexicalTypeMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "lstring"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_lstring::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (224)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "lchar"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_lchar::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (226)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "luint"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_luint::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (228)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "lsint"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_lsint::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (230)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "luint64"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_luint64::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (232)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "lsint64"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_lsint64::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (234)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "lbool"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_lbool::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "ldouble"), GGS_location (_inLexique) COMMA_HERE), GGS_typeGalgas_ldouble::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (238)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalTypeMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  GGS_bool var_cas_isTemplate ;
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      var_cas_isTemplate = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      var_cas_isTemplate = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolsMapForUse ;
  var_cas_terminalSymbolsMapForUse = GGS_M_terminalSymbolsMapForUse::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeLexicalAttributesMap  var_cas_table_attributs ;
  var_cas_table_attributs = GGS_typeLexicalAttributesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableDefinitionTerminaux  var_cas_table_des_terminaux ;
  var_cas_table_des_terminaux = GGS_typeTableDefinitionTerminaux::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableMessagesErreurs  var_cas_table_messages ;
  var_cas_table_messages = GGS_typeTableMessagesErreurs::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableTablesDeMotsReserves  var_cas_table_tables_mots_reserves ;
  var_cas_table_tables_mots_reserves = GGS_typeTableTablesDeMotsReserves::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTestsEtInstructions  var_cas_lexicalRulesList ;
  var_cas_lexicalRulesList = GGS_typeListeTestsEtInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_usedErrorMessageSet ;
  var_cas_usedErrorMessageSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_tokensInListMap  var_cas_tokensInListMap ;
  var_cas_tokensInListMap = GGS_tokensInListMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_templateDelimiterMap  var_cas_templateDelimiterMap ;
  var_cas_templateDelimiterMap = GGS_templateDelimiterMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  ::routine_buildLexicalTypeMap (_inLexique,  var_cas_lexicalTypeMap COMMA_SOURCE_FILE_AT_LINE (279)) ;
  GGS_M_styles  var_cas_stylesMap ;
  var_cas_stylesMap = GGS_M_styles::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStyleName ;
  var_cas_defaultStyleName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "Default style"), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStringIdentifier ;
  var_cas_defaultStringIdentifier = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_stylesMap.modifier_insertKey (_inLexique, var_cas_defaultStringIdentifier, var_cas_defaultStyleName COMMA_SOURCE_FILE_AT_LINE (286)) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_ (_inLexique, var_cas_stylesMap) ;
          } break ;
        case 3 : {
          nt_template_declaration_ (_inLexique, var_cas_isTemplate, var_cas_templateDelimiterMap) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_ (_inLexique, var_cas_table_des_terminaux, var_cas_table_attributs, var_cas_terminalSymbolsMapForUse, var_cas_lexicalTypeMap, var_cas_stylesMap) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_ (_inLexique, var_cas_table_tables_mots_reserves, var_cas_table_attributs, var_cas_table_des_terminaux, var_cas_terminalSymbolsMapForUse, var_cas_stylesMap, var_cas_tokensInListMap) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_ (_inLexique, var_cas_table_messages) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_ (_inLexique, var_cas_lexicalRulesList, var_cas_table_des_terminaux, var_cas_table_messages, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_usedErrorMessageSet) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_typeTableMessagesErreurs::cEnumerator enumerator_11452 (var_cas_table_messages, true) ;
  const GGS_typeTableMessagesErreurs::cElement * operand_11452 = NULL ;
  while (((operand_11452 = (GGS_typeTableMessagesErreurs::cElement *) enumerator_11452.nextObject ()))) {
    macroValidPointer (operand_11452) ;
    if (((var_cas_usedErrorMessageSet.reader_hasKey (_inLexique, operand_11452->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (333)))._operator_not ()).isBuiltAndTrue ()) {
      operand_11452->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "this error message is not used") COMMA_SOURCE_FILE_AT_LINE (334)) ;
    }
  }
  enumerator_11452.reset () ;
  var_cas_ioLexiqueMapForUse.modifier_insertKey (_inLexique, var_cas_lexiqueName, var_cas_terminalSymbolsMapForUse COMMA_SOURCE_FILE_AT_LINE (338)) ;
  if (((var_cas_isTemplate)._operator_and ((var_cas_templateDelimiterMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)))._operator_isEqual (GGS_uint (true, 0U)))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "a template lexique should define at least one template") COMMA_SOURCE_FILE_AT_LINE (341)) ;
  }
  if (var_cas_isTemplate._isBuilt () &&
      var_cas_templateDelimiterMap._isBuilt () &&
      var_cas_lexiqueName._isBuilt () &&
      var_cas_table_attributs._isBuilt () &&
      var_cas_table_des_terminaux._isBuilt () &&
      var_cas_table_tables_mots_reserves._isBuilt () &&
      var_cas_lexicalRulesList._isBuilt () &&
      var_cas_table_messages._isBuilt () &&
      var_cas_stylesMap._isBuilt () &&
      var_cas_usedErrorMessageSet._isBuilt () &&
      var_cas_tokensInListMap._isBuilt ()) {
    ::routine_generate_scanner (_inLexique,  var_cas_isTemplate,  var_cas_templateDelimiterMap,  var_cas_lexiqueName,  var_cas_table_attributs,  var_cas_table_des_terminaux,  var_cas_table_tables_mots_reserves,  var_cas_lexicalRulesList,  var_cas_table_messages,  var_cas_stylesMap,  var_cas_usedErrorMessageSet,  var_cas_tokensInListMap COMMA_SOURCE_FILE_AT_LINE (342)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolsMapForUse ;
  var_cas_terminalSymbolsMapForUse = GGS_M_terminalSymbolsMapForUse::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeLexicalAttributesMap  var_cas_table_attributs ;
  var_cas_table_attributs = GGS_typeLexicalAttributesMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableDefinitionTerminaux  var_cas_table_des_terminaux ;
  var_cas_table_des_terminaux = GGS_typeTableDefinitionTerminaux::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableMessagesErreurs  var_cas_table_messages ;
  var_cas_table_messages = GGS_typeTableMessagesErreurs::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeTableTablesDeMotsReserves  var_cas_table_tables_mots_reserves ;
  var_cas_table_tables_mots_reserves = GGS_typeTableTablesDeMotsReserves::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_typeListeTestsEtInstructions  var_cas_lexicalRulesList ;
  var_cas_lexicalRulesList = GGS_typeListeTestsEtInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_tokensInListMap  var_cas_tokensInListMap ;
  var_cas_tokensInListMap = GGS_tokensInListMap::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lexicalTypeMap  var_cas_lexicalTypeMap ;
  ::routine_buildLexicalTypeMap (_inLexique,  var_cas_lexicalTypeMap COMMA_SOURCE_FILE_AT_LINE (376)) ;
  GGS_M_styles  var_cas_stylesMap ;
  var_cas_stylesMap = GGS_M_styles::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStyleName ;
  var_cas_defaultStyleName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, "Default style"), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStringIdentifier ;
  var_cas_defaultStringIdentifier = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_stylesMap.modifier_insertKey (_inLexique, var_cas_defaultStringIdentifier, var_cas_defaultStyleName COMMA_SOURCE_FILE_AT_LINE (382)) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_ (_inLexique, var_cas_stylesMap) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (_inLexique) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_ (_inLexique, var_cas_table_des_terminaux, var_cas_table_attributs, var_cas_terminalSymbolsMapForUse, var_cas_lexicalTypeMap, var_cas_stylesMap) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_ (_inLexique, var_cas_table_tables_mots_reserves, var_cas_table_attributs, var_cas_table_des_terminaux, var_cas_terminalSymbolsMapForUse, var_cas_stylesMap, var_cas_tokensInListMap) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_parse (_inLexique) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  var_cas_ioLexiqueMapForUse.modifier_insertKey (_inLexique, var_cas_lexiqueName, var_cas_terminalSymbolsMapForUse COMMA_SOURCE_FILE_AT_LINE (413)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (_inLexique) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_parse (_inLexique) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_parse (_inLexique) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_parse (_inLexique) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (_inLexique) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_parse (_inLexique) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_parse (_inLexique) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_parse (_inLexique) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (_inLexique) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_parse (_inLexique) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_parse (_inLexique) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_parse (_inLexique) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_galgas_component_scanner_parser_245_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  switch (select_scanner_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (_inLexique)) {
        case 2 : {
          nt_style_declaration_parse (_inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (_inLexique) ;
          } break ;
        case 4 : {
          nt_attribute_or_terminal_symbol_declaration_parse (_inLexique) ;
          } break ;
        case 5 : {
          nt_key_words_list_declaration_parse (_inLexique) ;
          } break ;
        case 6 : {
          nt_lexical_error_message_declaration_parse (_inLexique) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'style_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_style_declaration_scanner_parser_549_4_ (galgas_scanner & _inLexique,
                                GGS_M_styles  &var_cas_ioStylesMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        GGS_lstring  var_cas_styleMap ;
        _inLexique._assignFromAttribute_tokenString (var_cas_styleMap) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
        GGS_lstring  var_cas_title ;
        _inLexique._assignFromAttribute_tokenString (var_cas_title) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        var_cas_ioStylesMap.modifier_insertKey (_inLexique, var_cas_styleMap, var_cas_title COMMA_SOURCE_FILE_AT_LINE (559)) ;
      switch (select_repeat_scanner_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_style_declaration_scanner_parser_549_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_template_declaration_scanner_parser_569_4_ (galgas_scanner & _inLexique,
                                const GGS_bool var_cas_inIsTemplate,
                                GGS_templateDelimiterMap  &var_cas_ioTemplateDelimiterMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  if (((var_cas_inIsTemplate)._operator_not ()).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the lexique should be declared as template lexique") COMMA_SOURCE_FILE_AT_LINE (576)) ;
  }
  GGS_lstring  var_cas_startString ;
  _inLexique._assignFromAttribute_tokenString (var_cas_startString) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
  GGS_lstring  var_cas_endString ;
  _inLexique._assignFromAttribute_tokenString (var_cas_endString) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  var_cas_ioTemplateDelimiterMap.modifier_insertKey (_inLexique, var_cas_startString, var_cas_endString COMMA_SOURCE_FILE_AT_LINE (584)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_template_declaration_scanner_parser_569_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_2E_2E) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'attribute_or_terminal_symbol_declaration'*
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_attribute_or_terminal_symbol_declaration_scanner_parser_591_4_ (galgas_scanner & _inLexique,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                GGS_lexicalTypeMap  &var_cas_inLexicalTypeMap,
                                const GGS_M_styles  var_cas_ioStylesMap) {
  switch (select_scanner_parser_3 (_inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_typeName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_attributeType ;
      const GGS_lexicalTypeMap  _temp_18499 = var_cas_inLexicalTypeMap ;
      if (_temp_18499._isBuilt ()) {
        _temp_18499 (HERE)->method_searchKey (_inLexique, var_cas_typeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (603)) ;
      }
      GGS_lstring  var_cas_attributeName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_table_des_attributs.modifier_insertKey (_inLexique, var_cas_attributeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (606)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_nomTerminal ;
      _inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
      var_cas_attributeList = GGS_typeListeAttributsSemantiques::constructor_emptyList (_inLexique COMMA_HERE) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
          switch (select_repeat_scanner_parser_4 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
              GGS_lstring  var_cas_idf ;
              _inLexique._assignFromAttribute_tokenString (var_cas_idf) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_AC_galgasType  var_cas_t ;
              const GGS_typeLexicalAttributesMap  _temp_18951 = var_cas_table_des_attributs ;
              if (_temp_18951._isBuilt ()) {
                _temp_18951 (HERE)->method_searchKey (_inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (618)) ;
              }
              var_cas_attributeList._addAssign_operation (var_cas_t, var_cas_idf) ;
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_errorMessage ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (_inLexique, var_cas_nomTerminal, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (625)) ;
      GGS_lstring  var_cas_styleName ;
      switch (select_scanner_parser_5 (_inLexique)) {
        case 1 : {
          var_cas_styleName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_styleName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_luint  var_cas_styleIndex ;
      GGS_lstring  automatic_var_0 ;
      const GGS_M_styles  _temp_19404 = var_cas_ioStylesMap ;
      if (_temp_19404._isBuilt ()) {
        _temp_19404 (HERE)->method_searchKeyGetID (_inLexique, var_cas_styleName, var_cas_styleIndex, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (635)) ;
      }
      GGS_string var_cas_errorMessageString ;
      var_cas_errorMessageString = var_cas_errorMessage.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (636)) ;
      var_cas_table_des_terminaux.modifier_insertKey (_inLexique, var_cas_nomTerminal, var_cas_errorMessageString, var_cas_attributeList, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (637)) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_attribute_or_terminal_symbol_declaration_scanner_parser_591_4_parse (galgas_scanner & _inLexique) {
  switch (select_scanner_parser_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
          switch (select_repeat_scanner_parser_4 (_inLexique)) {
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      switch (select_scanner_parser_5 (_inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'key_words_list_declaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_key_words_list_declaration_scanner_parser_646_4_ (galgas_scanner & _inLexique,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                const GGS_M_styles  var_cas_ioStylesMap,
                                GGS_tokensInListMap  &var_cas_ioTokensInListMap) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_entriesMap ;
  var_cas_entriesMap = GGS_typeTableMotsReserves::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
  var_cas_attributeList = GGS_typeListeAttributsSemantiques::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_scanner_parser_6 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_lstring  var_cas_idf ;
          _inLexique._assignFromAttribute_tokenString (var_cas_idf) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_t ;
          const GGS_typeLexicalAttributesMap  _temp_20502 = var_cas_table_des_attributs ;
          if (_temp_20502._isBuilt ()) {
            _temp_20502 (HERE)->method_searchKey (_inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (667)) ;
          }
          var_cas_attributeList._addAssign_operation (var_cas_t, var_cas_idf) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  _inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  if (var_cas_errorMessage._isBuilt ()) {
    ::routine_check_K_escapeCharacters (_inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (674)) ;
  }
  GGS_lstring  var_cas_styleName ;
  switch (select_scanner_parser_7 (_inLexique)) {
    case 1 : {
      var_cas_styleName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_styleName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_luint  var_cas_styleIndex ;
  GGS_lstring  automatic_var_1 ;
  const GGS_M_styles  _temp_20908 = var_cas_ioStylesMap ;
  if (_temp_20908._isBuilt ()) {
    _temp_20908 (HERE)->method_searchKeyGetID (_inLexique, var_cas_styleName, var_cas_styleIndex, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (685)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        GGS_lstring  var_cas_listEntry ;
        _inLexique._assignFromAttribute_tokenString (var_cas_listEntry) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        GGS_lstring  var_cas_terminalSymbolName ;
        switch (select_scanner_parser_9 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            var_cas_terminalSymbolName = var_cas_listEntry ;
            } break ;
          default :
            break ;
        }
        var_cas_ioTokensInListMap.modifier_insertKey (_inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (700)) ;
        GGS_string var_cas_specificErrorMessageString ;
        var_cas_specificErrorMessageString = var_cas_errorMessage.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (702)).reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "%K"), var_cas_terminalSymbolName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (702)) COMMA_SOURCE_FILE_AT_LINE (702)) ;
        var_cas_table_des_terminaux.modifier_insertKey (_inLexique, var_cas_terminalSymbolName, var_cas_specificErrorMessageString, var_cas_attributeList, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (704)) ;
        var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (_inLexique, var_cas_terminalSymbolName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (710)) ;
        var_cas_entriesMap.modifier_insertKey (_inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (712)) ;
      switch (select_repeat_scanner_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_table_tables_mots_reserves.modifier_insertKey (_inLexique, var_cas_listName, var_cas_entriesMap COMMA_SOURCE_FILE_AT_LINE (716)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_key_words_list_declaration_scanner_parser_646_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_scanner_parser_6 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_scanner_parser_7 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
        switch (select_scanner_parser_9 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_scanner_parser_8 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_error_message_declaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_error_message_declaration_scanner_parser_724_4_ (galgas_scanner & _inLexique,
                                GGS_typeTableMessagesErreurs  &var_cas_table_messages) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_lstring  var_cas_nom ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nom) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  _inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  var_cas_table_messages.modifier_insertKey (_inLexique, var_cas_nom, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (733)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_message_declaration_scanner_parser_724_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'while_branches_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_while_branches_list_scanner_parser_739_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_liste_tests_et_instructions,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  var_cas_liste_tests_et_instructions = GGS_typeListeTestsEtInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        GGS_typeListeConditionsLexicales  var_cas_lcl ;
        GGS_tListeInstructionsLexicales  var_cas_li ;
        switch (select_scanner_parser_11 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
            var_cas_lcl = GGS_typeListeConditionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
            GGS_lstring  var_cas_ch ;
            _inLexique._assignFromAttribute_tokenString (var_cas_ch) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
            GGS_lstring  var_cas_errorMessageName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_luint  var_cas_errorMessageIndex ;
            GGS_lstring  automatic_var_2 ;
            const GGS_typeTableMessagesErreurs  _temp_23369 = var_cas_table_des_messages_erreur ;
            if (_temp_23369._isBuilt ()) {
              _temp_23369 (HERE)->method_searchKeyGetID (_inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (761)) ;
            }
            var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (762))) ;
            var_cas_lcl._addAssign_operation (GGS_typeConditionNonChaine::constructor_new (_inLexique, var_cas_ch, var_cas_errorMessageIndex COMMA_HERE)) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_lexical_instructions_list_ (_inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap::constructor_emptyMap (_inLexique COMMA_HERE), GGS_bool (true, false)) ;
            } break ;
          case 2 : {
            nt_lexical_test_expression_ (_inLexique, var_cas_lcl) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_lexical_instructions_list_ (_inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap::constructor_emptyMap (_inLexique COMMA_HERE), GGS_bool (true, false)) ;
            } break ;
          default :
            break ;
        }
        var_cas_liste_tests_et_instructions._addAssign_operation (var_cas_lcl, var_cas_li) ;
      switch (select_repeat_scanner_parser_10 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_while_branches_list_scanner_parser_739_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        switch (select_scanner_parser_11 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_lexical_instructions_list_parse (_inLexique) ;
            } break ;
          case 2 : {
            nt_lexical_test_expression_parse (_inLexique) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
            nt_lexical_instructions_list_parse (_inLexique) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_scanner_parser_10 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_test_expression'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_test_expression_scanner_parser_797_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeConditionsLexicales  &var_cas_liste_test) {
  var_cas_liste_test = GGS_typeListeConditionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_typeConditionLexicale  var_cas_c ;
        nt_lexical_test_term_ (_inLexique, var_cas_c) ;
        var_cas_liste_test._addAssign_operation (var_cas_c) ;
      switch (select_repeat_scanner_parser_12 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_expression_scanner_parser_797_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        nt_lexical_test_term_parse (_inLexique) ;
      switch (select_repeat_scanner_parser_12 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_test_term_scanner_parser_812_4_ (galgas_scanner & _inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lstring  var_cas_ch ;
  _inLexique._assignFromAttribute_tokenString (var_cas_ch) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  var_cas_tt = GGS_typeConditionChaine::constructor_new (_inLexique, var_cas_ch COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_812_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_test_term_scanner_parser_822_4_ (galgas_scanner & _inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lchar  var_cas_c ;
  _inLexique._assignFromAttribute_charValue (var_cas_c) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  nt_up_boundary_ (_inLexique, var_cas_c, var_cas_tt) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_822_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  nt_up_boundary_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'up_boundary'               *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_up_boundary_scanner_parser_832_4_ (galgas_scanner & _inLexique,
                                GGS_lchar  var_cas_th,
                                GGS_typeConditionLexicale  &var_cas_ts) {
  switch (select_scanner_parser_13 (_inLexique)) {
    case 1 : {
      var_cas_ts = GGS_typeConditionCaractere::constructor_new (_inLexique, var_cas_th COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      GGS_lchar  var_cas_bs ;
      _inLexique._assignFromAttribute_charValue (var_cas_bs) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
      var_cas_ts = GGS_typeConditionIntervalle::constructor_new (_inLexique, var_cas_th, var_cas_bs COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_up_boundary_scanner_parser_832_4_parse (galgas_scanner & _inLexique) {
  switch (select_scanner_parser_13 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_rule_scanner_parser_848_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_ioLexicalRulesList,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  GGS_typeListeConditionsLexicales  var_cas_lcl ;
  nt_lexical_test_expression_ (_inLexique, var_cas_lcl) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_tListeInstructionsLexicales  var_cas_li ;
  nt_lexical_instructions_list_ (_inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap::constructor_emptyMap (_inLexique COMMA_HERE), GGS_bool (true, true)) ;
  var_cas_ioLexicalRulesList._addAssign_operation (var_cas_lcl, var_cas_li) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_848_4_parse (galgas_scanner & _inLexique) {
  nt_lexical_test_expression_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_lexical_instructions_list_parse (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_rule_scanner_parser_877_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_ioLexicalRulesList,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_keyWordsMap ;
  const GGS_typeTableTablesDeMotsReserves  _temp_26775 = var_cas_table_tables_mots_reserves ;
  if (_temp_26775._isBuilt ()) {
    _temp_26775 (HERE)->method_searchKey (_inLexique, var_cas_listName, var_cas_keyWordsMap COMMA_SOURCE_FILE_AT_LINE (891)) ;
  }
  if (var_cas_keyWordsMap._isBuilt () &&
      var_cas_ioLexicalRulesList._isBuilt ()) {
    ::routine_buildLexicalRulesFromList (_inLexique,  var_cas_keyWordsMap,  var_cas_ioLexicalRulesList COMMA_SOURCE_FILE_AT_LINE (891)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_877_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_instructions_list_scanner_parser_898_4_ (galgas_scanner & _inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_li,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  GGS_tagMap  var_cas_tagMap ;
  var_cas_tagMap = GGS_tagMap::constructor_mapWithMapToOverride (_inLexique, var_cas_inTagMap COMMA_HERE) ;
  var_cas_li = GGS_tListeInstructionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_scanner_parser_14 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_nom_routine_externe ;
          _inLexique._assignFromAttribute_tokenString (var_cas_nom_routine_externe) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
          nt_lexical_parameters_non_empty_list_ (_inLexique, var_cas_lare, var_cas_table_attributs) ;
          GGS_typeListeMessagesErreur  var_cas_lme ;
          var_cas_lme = GGS_typeListeMessagesErreur::constructor_emptyList (_inLexique COMMA_HERE) ;
          nt_lexical_error_messages_list_ (_inLexique, var_cas_lme, var_cas_table_des_messages_erreur, var_cas_ioUsedErrorMessageSet) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionActionExterne::constructor_new (_inLexique, var_cas_nom_routine_externe, var_cas_lare, var_cas_lme COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          GGS_typeListeTestsEtInstructions  var_cas_list_branches_si ;
          nt_lexical_when_branches_list_ (_inLexique, var_cas_list_branches_si, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          GGS_tListeInstructionsLexicales  var_cas_liste_instructions_sinon ;
          nt_lexical_default_branch_ (_inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionSiLexical::constructor_new (_inLexique, var_cas_list_branches_si, var_cas_liste_instructions_sinon COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          GGS_tListeInstructionsLexicales  var_cas_lii ;
          nt_lexical_instructions_list_ (_inLexique, var_cas_lii, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap::constructor_emptyMap (_inLexique COMMA_HERE), GGS_bool (true, false)) ;
          GGS_typeListeTestsEtInstructions  var_cas_ltq ;
          nt_while_branches_list_ (_inLexique, var_cas_ltq, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          var_cas_li._addAssign_operation (GGS_typeInstructionRepetitionLexicale::constructor_new (_inLexique, var_cas_lii, var_cas_ltq COMMA_HERE)) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
          GGS_lstring  var_cas_tagIdentifier ;
          _inLexique._assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_tagMap.modifier_insertKey (_inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (985)) ;
          var_cas_li._addAssign_operation (GGS_typeLexicalTagInstruction::constructor_new (_inLexique, var_cas_tagIdentifier COMMA_HERE)) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          var_cas_li._addAssign_operation (GGS_typeLexicalLogInstruction::constructor_new (_inLexique COMMA_HERE)) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal)._operator_not ()).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the rewind instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (995)) ;
          }
          GGS_lstring  var_cas_tagIdentifier ;
          _inLexique._assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          const GGS_tagMap  _temp_29933 = var_cas_tagMap ;
          if (_temp_29933._isBuilt ()) {
            _temp_29933 (HERE)->method_searchKey (_inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (999)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          GGS_lstring  var_cas_nomTerminal ;
          _inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          GGS_string automatic_var_3 ;
          GGS_typeListeAttributsSemantiques  automatic_var_4 ;
          GGS_luint  automatic_var_5 ;
          const GGS_typeTableDefinitionTerminaux  _temp_30056 = var_cas_table_des_terminaux ;
          if (_temp_30056._isBuilt ()) {
            _temp_30056 (HERE)->method_searchKey (_inLexique, var_cas_nomTerminal, automatic_var_3, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (1003)) ;
          }
          var_cas_li._addAssign_operation (GGS_typeLexicalRewindAndSendInstruction::constructor_new (_inLexique, var_cas_tagIdentifier, var_cas_nomTerminal COMMA_HERE)) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal)._operator_not ()).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the drop instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1009)) ;
          }
          GGS_lstring  var_cas_nomTerminal ;
          _inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          GGS_string automatic_var_6 ;
          GGS_typeListeAttributsSemantiques  automatic_var_7 ;
          GGS_luint  automatic_var_8 ;
          const GGS_typeTableDefinitionTerminaux  _temp_30432 = var_cas_table_des_terminaux ;
          if (_temp_30432._isBuilt ()) {
            _temp_30432 (HERE)->method_searchKey (_inLexique, var_cas_nomTerminal, automatic_var_6, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1014)) ;
          }
          var_cas_li._addAssign_operation (GGS_typeLexicalDropInstruction::constructor_new (_inLexique, var_cas_nomTerminal COMMA_HERE)) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal)._operator_not ()).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the send instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1019)) ;
          }
          GGS_typeInstructionLexicale  var_cas_e ;
          nt_lexical_send_instruction_ (_inLexique, var_cas_e, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 10 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
          GGS_lstring  var_cas_errorMessageName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_errorMessageIndex ;
          GGS_lstring  automatic_var_9 ;
          const GGS_typeTableMessagesErreurs  _temp_31090 = var_cas_table_des_messages_erreur ;
          if (_temp_31090._isBuilt ()) {
            _temp_31090 (HERE)->method_searchKeyGetID (_inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }
          var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1038))) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionErreurLexicale::constructor_new (_inLexique, var_cas_errorMessageIndex COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_instructions_list_scanner_parser_898_4_parse (galgas_scanner & _inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_scanner_parser_14 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_lexical_parameters_non_empty_list_parse (_inLexique) ;
          nt_lexical_error_messages_list_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          nt_lexical_when_branches_list_parse (_inLexique) ;
          nt_lexical_default_branch_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          nt_lexical_instructions_list_parse (_inLexique) ;
          nt_while_branches_list_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 6 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 8 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          nt_lexical_send_instruction_parse (_inLexique) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 10 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1047_4_ (galgas_scanner & /* _inLexique */,
                                GGS_typeListeMessagesErreur  &/* var_cas_lme */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1047_4_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1056_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeMessagesErreur  &var_cas_lme,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  { bool syntaxRepeat_15 = true ;
    while (syntaxRepeat_15) {
        GGS_lstring  var_cas_errorMessageName ;
        _inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_errorMessageIndex ;
        GGS_lstring  automatic_var_10 ;
        const GGS_typeTableMessagesErreurs  _temp_32003 = var_cas_table_des_messages_erreur ;
        if (_temp_32003._isBuilt ()) {
          _temp_32003 (HERE)->method_searchKeyGetID (_inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1066)) ;
        }
        var_cas_lme._addAssign_operation (var_cas_errorMessageIndex) ;
        var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1068))) ;
      switch (select_repeat_scanner_parser_15 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_15 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1056_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  { bool syntaxRepeat_15 = true ;
    while (syntaxRepeat_15) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_15 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_15 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_parameters_non_empty_list'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_parameters_non_empty_list_scanner_parser_1076_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeArgumentsRoutExterne  &var_cas_laf,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  var_cas_laf = GGS_typeListeArgumentsRoutExterne::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_16 = true ;
    while (syntaxRepeat_16) {
        GGS_typeArgumentRoutineExterne  var_cas_a ;
        nt_lexical_parameter_ (_inLexique, var_cas_a, var_cas_table_attributs) ;
        var_cas_laf._addAssign_operation (var_cas_a) ;
      switch (select_repeat_scanner_parser_16 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_16 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameters_non_empty_list_scanner_parser_1076_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28) COMMA_HERE) ;
  { bool syntaxRepeat_16 = true ;
    while (syntaxRepeat_16) {
        nt_lexical_parameter_parse (_inLexique) ;
      switch (select_repeat_scanner_parser_16 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_16 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_parameter_scanner_parser_1094_4_ (galgas_scanner & _inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractereCourant::constructor_new (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1094_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_parameter_scanner_parser_1104_4_ (galgas_scanner & _inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_lchar  var_cas_c ;
  _inLexique._assignFromAttribute_charValue (var_cas_c) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractere::constructor_new (_inLexique, var_cas_c COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1104_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fchar) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_parameter_scanner_parser_1115_4_ (galgas_scanner & _inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_luint  var_cas_n ;
  _inLexique._assignFromAttribute_uint32value (var_cas_n) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentEntier::constructor_new (_inLexique, var_cas_n COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1115_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_parameter_scanner_parser_1126_4_ (galgas_scanner & _inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  GGS_lstring  var_cas_nom ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nom) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_scanner_parser_17 (_inLexique)) {
    case 1 : {
      GGS_AC_galgasType  var_cas_t ;
      const GGS_typeLexicalAttributesMap  _temp_33797 = var_cas_table_attributs ;
      if (_temp_33797._isBuilt ()) {
        _temp_33797 (HERE)->method_searchKey (_inLexique, var_cas_nom, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1134)) ;
      }
      var_cas_a = GGS_typeArgumentAttribut::constructor_new (_inLexique, var_cas_nom, var_cas_t COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
      nt_lexical_parameters_non_empty_list_ (_inLexique, var_cas_lare, var_cas_table_attributs) ;
      var_cas_a = GGS_typeArgumentRoutine::constructor_new (_inLexique, var_cas_nom, var_cas_lare COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1126_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_scanner_parser_17 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      nt_lexical_parameters_non_empty_list_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_when_branches_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_when_branches_list_scanner_parser_1145_4_ (galgas_scanner & _inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_lbs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  var_cas_lbs = GGS_typeListeTestsEtInstructions::constructor_emptyList (_inLexique COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
        GGS_typeListeConditionsLexicales  var_cas_lcl ;
        nt_lexical_test_expression_ (_inLexique, var_cas_lcl) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
        GGS_tListeInstructionsLexicales  var_cas_li ;
        nt_lexical_instructions_list_ (_inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
        var_cas_lbs._addAssign_operation (var_cas_lcl, var_cas_li) ;
      switch (select_repeat_scanner_parser_18 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_when_branches_list_scanner_parser_1145_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
        nt_lexical_test_expression_parse (_inLexique) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
        nt_lexical_instructions_list_parse (_inLexique) ;
      switch (select_repeat_scanner_parser_18 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_default_branch_scanner_parser_1180_4_ (galgas_scanner & _inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */,
                                const GGS_tagMap  /* var_cas_inTagMap */,
                                const GGS_bool /* var_cas_inCanSendTerminal */) {
  var_cas_liste_instructions_sinon = GGS_tListeInstructionsLexicales::constructor_emptyList (_inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1180_4_parse (galgas_scanner & /* _inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_default_branch_scanner_parser_1195_4_ (galgas_scanner & _inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
  nt_lexical_instructions_list_ (_inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1195_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
  nt_lexical_instructions_list_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_send_instruction_scanner_parser_1220_4_ (galgas_scanner & _inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_string automatic_var_11 ;
  GGS_typeListeAttributsSemantiques  automatic_var_12 ;
  GGS_luint  automatic_var_13 ;
  const GGS_typeTableDefinitionTerminaux  _temp_36846 = var_cas_table_des_terminaux ;
  if (_temp_36846._isBuilt ()) {
    _temp_36846 (HERE)->method_searchKey (_inLexique, var_cas_nomTerminal, automatic_var_11, automatic_var_12, automatic_var_13 COMMA_SOURCE_FILE_AT_LINE (1230)) ;
  }
  var_cas_instruction = GGS_typeInstructionEmettreSimple::constructor_new (_inLexique, var_cas_nomTerminal COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1220_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_send_instruction_scanner_parser_1236_4_ (galgas_scanner & _inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
  GGS_typeListeRecherche  var_cas_lr ;
  var_cas_lr = GGS_typeListeRecherche::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
        GGS_lstring  var_cas_nomAttribut ;
        _inLexique._assignFromAttribute_tokenString (var_cas_nomAttribut) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_AC_galgasType  var_cas_natureAttribut ;
        const GGS_typeLexicalAttributesMap  _temp_37555 = var_cas_table_attributs ;
        if (_temp_37555._isBuilt ()) {
          _temp_37555 (HERE)->method_searchKey (_inLexique, var_cas_nomAttribut, var_cas_natureAttribut COMMA_SOURCE_FILE_AT_LINE (1250)) ;
        }
        GGS_typeGalgas_lstring  var_cas_lgs ;
        var_cas_lgs = GGS_typeGalgas_lstring::_castFrom (_inLexique, var_cas_natureAttribut.getPtr (), true, var_cas_nomAttribut COMMA_SOURCE_FILE_AT_LINE (1251)) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
        GGS_lstring  var_cas_listName ;
        _inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeTableMotsReserves  automatic_var_14 ;
        const GGS_typeTableTablesDeMotsReserves  _temp_37797 = var_cas_table_tables_mots_reserves ;
        if (_temp_37797._isBuilt ()) {
          _temp_37797 (HERE)->method_searchKey (_inLexique, var_cas_listName, automatic_var_14 COMMA_SOURCE_FILE_AT_LINE (1255)) ;
        }
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
        var_cas_lr._addAssign_operation (var_cas_nomAttribut, var_cas_listName) ;
      switch (select_repeat_scanner_parser_19 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
  GGS_typeEmissionParDefaut  var_cas_ee ;
  nt_lexical_send_or_error_ (_inLexique, var_cas_ee, var_cas_table_des_messages_erreur, var_cas_table_des_terminaux, var_cas_ioUsedErrorMessageSet) ;
  var_cas_instruction = GGS_typeInstructionEmettre::constructor_new (_inLexique, var_cas_lr, var_cas_ee COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1236_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_19 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
  nt_lexical_send_or_error_parse (_inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_send_or_error_scanner_parser_1273_4_ (galgas_scanner & _inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &/* var_cas_tableMessagesErreurs */,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  _inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_string automatic_var_15 ;
  GGS_typeListeAttributsSemantiques  automatic_var_16 ;
  GGS_luint  automatic_var_17 ;
  const GGS_typeTableDefinitionTerminaux  _temp_38513 = var_cas_table_des_terminaux ;
  if (_temp_38513._isBuilt ()) {
    _temp_38513 (HERE)->method_searchKey (_inLexique, var_cas_nomTerminal, automatic_var_15, automatic_var_16, automatic_var_17 COMMA_SOURCE_FILE_AT_LINE (1281)) ;
  }
  var_cas_emissionParDefaut = GGS_typeEmissionTerminalParDefaut::constructor_new (_inLexique, var_cas_nomTerminal COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1273_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
scanner_parser::
pr_lexical_send_or_error_scanner_parser_1287_4_ (galgas_scanner & _inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &var_cas_tableMessagesErreurs,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessageName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_errorMessageIndex ;
  GGS_lstring  automatic_var_18 ;
  const GGS_typeTableMessagesErreurs  _temp_39060 = var_cas_tableMessagesErreurs ;
  if (_temp_39060._isBuilt ()) {
    _temp_39060 (HERE)->method_searchKeyGetID (_inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_18 COMMA_SOURCE_FILE_AT_LINE (1297)) ;
  }
  var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1298))) ;
  var_cas_emissionParDefaut = GGS_typeEmissionErreurParDefaut::constructor_new (_inLexique, var_cas_errorMessageIndex COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1287_4_parse (galgas_scanner & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

