//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'scanner_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 10th, 2009, at 15h18'11"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "scanner_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "scanner_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildLexicalTypeMap"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalTypeMap (C_Compiler & inLexique,
                                GGS_EXLexicalTypeMap  & var_cas_outLexicalTypeMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalTypeMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalTypeMap = GGS_EXLexicalTypeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (223)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_lchar ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (225)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (227)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_lsint ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (229)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_luint64 ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (231)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_lsint64 ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (233)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_lbool ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (235)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_typeGalgas_ldouble ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalTypeMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  GGS_bool var_cas_isTemplate ;
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      var_cas_isTemplate = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      var_cas_isTemplate = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  inLexique._assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_basename ;
  var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
  if (((var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (264))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_lexiqueName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (268)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolsMapForUse ;
  var_cas_terminalSymbolsMapForUse = GGS_M_terminalSymbolsMapForUse ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeLexicalAttributesMap  var_cas_table_attributs ;
  var_cas_table_attributs = GGS_typeLexicalAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableDefinitionTerminaux  var_cas_table_des_terminaux ;
  var_cas_table_des_terminaux = GGS_typeTableDefinitionTerminaux ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMessagesErreurs  var_cas_table_messages ;
  var_cas_table_messages = GGS_typeTableMessagesErreurs ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableTablesDeMotsReserves  var_cas_table_tables_mots_reserves ;
  var_cas_table_tables_mots_reserves = GGS_typeTableTablesDeMotsReserves ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTestsEtInstructions  var_cas_lexicalRulesList ;
  var_cas_lexicalRulesList = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  GGS_stringset  var_cas_usedErrorMessageSet ;
  var_cas_usedErrorMessageSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tokensInListMap  var_cas_tokensInListMap ;
  var_cas_tokensInListMap = GGS_tokensInListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_templateDelimiterMap  var_cas_templateDelimiterMap ;
  var_cas_templateDelimiterMap = GGS_templateDelimiterMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_templateReplacementMap  var_cas_templateReplacementMap ;
  var_cas_templateReplacementMap = GGS_templateReplacementMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_EXLexicalTypeMap  var_cas_lexicalTypeMap ;
  ::routine_buildLexicalTypeMap (inLexique,  var_cas_lexicalTypeMap COMMA_SOURCE_FILE_AT_LINE (284)) ;
  GGS_M_styles  var_cas_stylesMap ;
  var_cas_stylesMap = GGS_M_styles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStringIdentifier ;
  var_cas_defaultStringIdentifier = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_stylesMap.modifier_insertKey (inLexique, var_cas_defaultStringIdentifier COMMA_SOURCE_FILE_AT_LINE (289)) ;
  GGS_styleList  var_cas_styleList ;
  var_cas_styleList = GGS_styleList ::constructor_emptyList () ;
  var_cas_styleList._addAssign_operation (GGS_string (""), GGS_string ("Default style")) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_ (inLexique, var_cas_stylesMap, var_cas_styleList) ;
          } break ;
        case 3 : {
          nt_template_declaration_ (inLexique, var_cas_isTemplate, var_cas_templateDelimiterMap) ;
          } break ;
        case 4 : {
          nt_replace_declaration_ (inLexique, var_cas_isTemplate, var_cas_templateReplacementMap) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_ (inLexique, var_cas_table_des_terminaux, var_cas_table_attributs, var_cas_terminalSymbolsMapForUse, var_cas_lexicalTypeMap, var_cas_stylesMap, var_cas_isTemplate) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_ (inLexique, var_cas_table_tables_mots_reserves, var_cas_table_attributs, var_cas_table_des_terminaux, var_cas_terminalSymbolsMapForUse, var_cas_stylesMap, var_cas_tokensInListMap, var_cas_isTemplate) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_ (inLexique, var_cas_table_messages) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_ (inLexique, var_cas_lexicalRulesList, var_cas_table_des_terminaux, var_cas_table_messages, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_usedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  {
    GGS_typeTableMessagesErreurs::cEnumerator enumerator_11767 (var_cas_table_messages, true) ;
    const GGS_typeTableMessagesErreurs::cElement * operand_11767 = NULL ;
    while (((operand_11767 = enumerator_11767.nextObject ()))) {
      macroValidPointer (operand_11767) ;
      if (((var_cas_usedErrorMessageSet.reader_hasKey (inLexique, operand_11767->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345)) COMMA_SOURCE_FILE_AT_LINE (345))).operator_not ()).isBuiltAndTrue ()) {
        operand_11767->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("this error message is not used") COMMA_SOURCE_FILE_AT_LINE (346)) ;
      }
    }
  }
  var_cas_ioLexiqueMapForUse.modifier_insertKey (inLexique, var_cas_lexiqueName, var_cas_terminalSymbolsMapForUse COMMA_SOURCE_FILE_AT_LINE (350)) ;
  if (((var_cas_isTemplate).operator_and ((var_cas_templateDelimiterMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (352))).operator_isEqual (GGS_uint (0U)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a template lexique should define at least one template") COMMA_SOURCE_FILE_AT_LINE (354)) ;
  }
  if (var_cas_isTemplate.isBuilt () &&
      var_cas_templateDelimiterMap.isBuilt () &&
      var_cas_templateReplacementMap.isBuilt () &&
      var_cas_lexiqueName.isBuilt () &&
      var_cas_table_attributs.isBuilt () &&
      var_cas_table_des_terminaux.isBuilt () &&
      var_cas_table_tables_mots_reserves.isBuilt () &&
      var_cas_lexicalRulesList.isBuilt () &&
      var_cas_table_messages.isBuilt () &&
      var_cas_styleList.isBuilt () &&
      var_cas_usedErrorMessageSet.isBuilt () &&
      var_cas_tokensInListMap.isBuilt ()) {
    ::routine_generate_scanner (inLexique,  var_cas_isTemplate,  var_cas_templateDelimiterMap,  var_cas_templateReplacementMap,  var_cas_lexiqueName,  var_cas_table_attributs,  var_cas_table_des_terminaux,  var_cas_table_tables_mots_reserves,  var_cas_lexicalRulesList,  var_cas_table_messages,  var_cas_styleList,  var_cas_usedErrorMessageSet,  var_cas_tokensInListMap COMMA_SOURCE_FILE_AT_LINE (356)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_replace_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  inLexique._assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolsMapForUse ;
  var_cas_terminalSymbolsMapForUse = GGS_M_terminalSymbolsMapForUse ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeLexicalAttributesMap  var_cas_table_attributs ;
  var_cas_table_attributs = GGS_typeLexicalAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableDefinitionTerminaux  var_cas_table_des_terminaux ;
  var_cas_table_des_terminaux = GGS_typeTableDefinitionTerminaux ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMessagesErreurs  var_cas_table_messages ;
  var_cas_table_messages = GGS_typeTableMessagesErreurs ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableTablesDeMotsReserves  var_cas_table_tables_mots_reserves ;
  var_cas_table_tables_mots_reserves = GGS_typeTableTablesDeMotsReserves ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTestsEtInstructions  var_cas_lexicalRulesList ;
  var_cas_lexicalRulesList = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  GGS_tokensInListMap  var_cas_tokensInListMap ;
  var_cas_tokensInListMap = GGS_tokensInListMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_EXLexicalTypeMap  var_cas_lexicalTypeMap ;
  ::routine_buildLexicalTypeMap (inLexique,  var_cas_lexicalTypeMap COMMA_SOURCE_FILE_AT_LINE (390)) ;
  GGS_M_styles  var_cas_stylesMap ;
  var_cas_stylesMap = GGS_M_styles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_defaultStringIdentifier ;
  var_cas_defaultStringIdentifier = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_stylesMap.modifier_insertKey (inLexique, var_cas_defaultStringIdentifier COMMA_SOURCE_FILE_AT_LINE (394)) ;
  GGS_styleList  var_cas_styleList ;
  var_cas_styleList = GGS_styleList ::constructor_emptyList () ;
  var_cas_styleList._addAssign_operation (GGS_string (""), GGS_string ("Default style")) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_ (inLexique, var_cas_stylesMap, var_cas_styleList) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_replace_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_ (inLexique, var_cas_table_des_terminaux, var_cas_table_attributs, var_cas_terminalSymbolsMapForUse, var_cas_lexicalTypeMap, var_cas_stylesMap, GGS_bool (true)) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_ (inLexique, var_cas_table_tables_mots_reserves, var_cas_table_attributs, var_cas_table_des_terminaux, var_cas_terminalSymbolsMapForUse, var_cas_stylesMap, var_cas_tokensInListMap, GGS_bool (true)) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  var_cas_ioLexiqueMapForUse.modifier_insertKey (inLexique, var_cas_lexiqueName, var_cas_terminalSymbolsMapForUse COMMA_SOURCE_FILE_AT_LINE (431)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_replace_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_replace_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_galgas_component_scanner_parser_244_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_scanner_parser_1 (inLexique)) {
        case 2 : {
          nt_style_declaration_parse (inLexique) ;
          } break ;
        case 3 : {
          nt_template_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_replace_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_attribute_or_terminal_symbol_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_key_words_list_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_lexical_error_message_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
          nt_lexical_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'style_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_style_declaration_scanner_parser_570_24_ (galgas_scanner & inLexique,
                                GGS_M_styles  &var_cas_ioStylesMap,
                                GGS_styleList  &var_cas_ioStyleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        GGS_lstring  var_cas_styleName ;
        inLexique._assignFromAttribute_tokenString (var_cas_styleName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        GGS_lstring  var_cas_title ;
        inLexique._assignFromAttribute_tokenString (var_cas_title) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_ioStylesMap.modifier_insertKey (inLexique, var_cas_styleName COMMA_SOURCE_FILE_AT_LINE (581)) ;
        var_cas_ioStyleList._addAssign_operation (var_cas_styleName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (582)), var_cas_title.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (582))) ;
      switch (select_repeat_scanner_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_style_declaration_scanner_parser_570_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_template_declaration_scanner_parser_592_27_ (galgas_scanner & inLexique,
                                const GGS_bool var_cas_inIsTemplate,
                                GGS_templateDelimiterMap  &var_cas_ioTemplateDelimiterMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  if (((var_cas_inIsTemplate).operator_not ()).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the lexique should be declared as template lexique") COMMA_SOURCE_FILE_AT_LINE (600)) ;
  }
  GGS_lstring  var_cas_startString ;
  inLexique._assignFromAttribute_tokenString (var_cas_startString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  GGS_bool var_cas_preservesStartDelimiter ;
  switch (select_scanner_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
      GGS_lstring  var_cas_name ;
      inLexique._assignFromAttribute_tokenString (var_cas_name) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      if (((var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (607))).operator_isNotEqual (GGS_string ("preserved"))).isBuiltAndTrue ()) {
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' tag is allowed here") COMMA_SOURCE_FILE_AT_LINE (609)) ;
      }
      var_cas_preservesStartDelimiter = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_preservesStartDelimiter = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_endString ;
  inLexique._assignFromAttribute_tokenString (var_cas_endString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioTemplateDelimiterMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_preservesStartDelimiter, var_cas_endString COMMA_SOURCE_FILE_AT_LINE (618)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_template_declaration_scanner_parser_592_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'replace_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_replace_declaration_scanner_parser_625_26_ (galgas_scanner & inLexique,
                                const GGS_bool var_cas_inIsTemplate,
                                GGS_templateReplacementMap  &var_cas_ioTemplateReplacementMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_replace) COMMA_HERE) ;
  if (((var_cas_inIsTemplate).operator_not ()).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the lexique should be declared as template lexique") COMMA_SOURCE_FILE_AT_LINE (633)) ;
  }
  GGS_lstring  var_cas_startString ;
  inLexique._assignFromAttribute_tokenString (var_cas_startString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_endString ;
      inLexique._assignFromAttribute_tokenString (var_cas_endString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_replacementFunction ;
      inLexique._assignFromAttribute_tokenString (var_cas_replacementFunction) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_ioTemplateReplacementMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_endString, var_cas_replacementFunction COMMA_SOURCE_FILE_AT_LINE (640)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      GGS_lstring  var_cas_endString ;
      inLexique._assignFromAttribute_tokenString (var_cas_endString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      var_cas_ioTemplateReplacementMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_endString, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (644)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_replace_declaration_scanner_parser_625_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_replace) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'attribute_or_terminal_symbol_declaration'*
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_attribute_or_terminal_symbol_declaration_scanner_parser_653_47_ (galgas_scanner & inLexique,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                const GGS_EXLexicalTypeMap  var_cas_inLexicalTypeMap,
                                const GGS_M_styles  var_cas_ioStylesMap,
                                const GGS_bool var_cas_inIsTemplate) {
  switch (select_scanner_parser_5 (inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_typeName ;
      inLexique._assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_attributeType ;
      const GGS_EXLexicalTypeMap  _temp_20227 = var_cas_inLexicalTypeMap ;
      if (_temp_20227.isBuilt ()) {
        _temp_20227 (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (666)) ;
      }
      GGS_lstring  var_cas_attributeName ;
      inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_table_des_attributs.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (669)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_nomTerminal ;
      inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
      var_cas_attributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
          switch (select_repeat_scanner_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
              GGS_lstring  var_cas_idf ;
              inLexique._assignFromAttribute_tokenString (var_cas_idf) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_AC_galgasType  var_cas_t ;
              const GGS_typeLexicalAttributesMap  _temp_20679 = var_cas_table_des_attributs ;
              if (_temp_20679.isBuilt ()) {
                _temp_20679 (HERE)->method_searchKey (inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (681)) ;
              }
              var_cas_attributeList._addAssign_operation (var_cas_t, var_cas_idf) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_errorMessage ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
      inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (inLexique, var_cas_nomTerminal, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (688)) ;
      GGS_lstring  var_cas_styleName ;
      switch (select_scanner_parser_7 (inLexique)) {
        case 1 : {
          var_cas_styleName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
          inLexique._assignFromAttribute_tokenString (var_cas_styleName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_luint  var_cas_styleIndex ;
      const GGS_M_styles  _temp_21137 = var_cas_ioStylesMap ;
      if (_temp_21137.isBuilt ()) {
        _temp_21137 (HERE)->method_searchKeyGetID (inLexique, var_cas_styleName, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (698)) ;
      }
      GGS_string var_cas_errorMessageString ;
      var_cas_errorMessageString = var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)) ;
      GGS_bool var_cas_isTemplateEndMark ;
      switch (select_scanner_parser_8 (inLexique)) {
        case 1 : {
          var_cas_isTemplateEndMark = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          if (((var_cas_inIsTemplate).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for using this construct, the lexique should have been declared as a template lexique") COMMA_SOURCE_FILE_AT_LINE (707)) ;
          }
          GGS_lstring  var_cas_mark ;
          inLexique._assignFromAttribute_tokenString (var_cas_mark) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_mark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (709))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
            var_cas_mark.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'templateEndMark' is allowed here") COMMA_SOURCE_FILE_AT_LINE (711)) ;
          }
          var_cas_isTemplateEndMark = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      var_cas_table_des_terminaux.modifier_insertKey (inLexique, var_cas_nomTerminal, var_cas_errorMessageString, var_cas_attributeList, var_cas_styleIndex, var_cas_isTemplateEndMark COMMA_SOURCE_FILE_AT_LINE (714)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_attribute_or_terminal_symbol_declaration_scanner_parser_653_47_parse (galgas_scanner & inLexique) {
  switch (select_scanner_parser_5 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
          switch (select_repeat_scanner_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_scanner_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      switch (select_scanner_parser_8 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'key_words_list_declaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_key_words_list_declaration_scanner_parser_723_33_ (galgas_scanner & inLexique,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                const GGS_M_styles  var_cas_ioStylesMap,
                                GGS_tokensInListMap  &var_cas_ioTokensInListMap,
                                const GGS_bool var_cas_inIsTemplate) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_entriesMap ;
  var_cas_entriesMap = GGS_typeTableMotsReserves ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
  var_cas_attributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_repeat_scanner_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_lstring  var_cas_idf ;
          inLexique._assignFromAttribute_tokenString (var_cas_idf) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_t ;
          const GGS_typeLexicalAttributesMap  _temp_22766 = var_cas_table_des_attributs ;
          if (_temp_22766.isBuilt ()) {
            _temp_22766 (HERE)->method_searchKey (inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (745)) ;
          }
          var_cas_attributeList._addAssign_operation (var_cas_t, var_cas_idf) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  if (var_cas_errorMessage.isBuilt ()) {
    ::routine_check_K_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (753)) ;
  }
  GGS_lstring  var_cas_styleName ;
  switch (select_scanner_parser_10 (inLexique)) {
    case 1 : {
      var_cas_styleName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
      inLexique._assignFromAttribute_tokenString (var_cas_styleName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_luint  var_cas_styleIndex ;
  const GGS_M_styles  _temp_23177 = var_cas_ioStylesMap ;
  if (_temp_23177.isBuilt ()) {
    _temp_23177 (HERE)->method_searchKeyGetID (inLexique, var_cas_styleName, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (763)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
        GGS_lstring  var_cas_listEntry ;
        inLexique._assignFromAttribute_tokenString (var_cas_listEntry) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        GGS_lstring  var_cas_terminalSymbolName ;
        switch (select_scanner_parser_12 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
            inLexique._assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            var_cas_terminalSymbolName = var_cas_listEntry ;
            } break ;
          default :
            break ;
        }
        GGS_bool var_cas_isTemplateEndMark ;
        switch (select_scanner_parser_13 (inLexique)) {
          case 1 : {
            var_cas_isTemplateEndMark = GGS_bool (false) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
            if (((var_cas_inIsTemplate).operator_not ()).isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for using this construct, the lexique should have been declared as a template lexique") COMMA_SOURCE_FILE_AT_LINE (785)) ;
            }
            GGS_lstring  var_cas_mark ;
            inLexique._assignFromAttribute_tokenString (var_cas_mark) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            if (((var_cas_mark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (787))).operator_isNotEqual (GGS_string ("templateEndMark"))).isBuiltAndTrue ()) {
              var_cas_mark.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'templateEndMark' is allowed here") COMMA_SOURCE_FILE_AT_LINE (789)) ;
            }
            var_cas_isTemplateEndMark = GGS_bool (true) ;
            } break ;
          default :
            break ;
        }
        var_cas_ioTokensInListMap.modifier_insertKey (inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (793)) ;
        GGS_string var_cas_specificErrorMessageString ;
        var_cas_specificErrorMessageString = var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (795)).reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), var_cas_terminalSymbolName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (795)) COMMA_SOURCE_FILE_AT_LINE (795)) ;
        var_cas_table_des_terminaux.modifier_insertKey (inLexique, var_cas_terminalSymbolName, var_cas_specificErrorMessageString, var_cas_attributeList, var_cas_styleIndex, var_cas_isTemplateEndMark COMMA_SOURCE_FILE_AT_LINE (797)) ;
        var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (inLexique, var_cas_terminalSymbolName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (804)) ;
        var_cas_entriesMap.modifier_insertKey (inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (806)) ;
      switch (select_repeat_scanner_parser_11 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  var_cas_table_tables_mots_reserves.modifier_insertKey (inLexique, var_cas_listName, var_cas_entriesMap COMMA_SOURCE_FILE_AT_LINE (810)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_key_words_list_declaration_scanner_parser_723_33_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_repeat_scanner_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_style) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        switch (select_scanner_parser_12 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
        switch (select_scanner_parser_13 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_scanner_parser_11 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_error_message_declaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_message_declaration_scanner_parser_818_40_ (galgas_scanner & inLexique,
                                GGS_typeTableMessagesErreurs  &var_cas_table_messages) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_lstring  var_cas_nom ;
  inLexique._assignFromAttribute_tokenString (var_cas_nom) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique._assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  var_cas_table_messages.modifier_insertKey (inLexique, var_cas_nom, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (827)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_message_declaration_scanner_parser_818_40_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'while_branches_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_while_branches_list_scanner_parser_833_26_ (galgas_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_liste_tests_et_instructions,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  var_cas_liste_tests_et_instructions = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
        switch (select_scanner_parser_15 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E_) COMMA_HERE) ;
            GGS_typeListeConditionsLexicales  var_cas_lcl ;
            var_cas_lcl = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
            GGS_lstringlist  var_cas_stringList ;
            var_cas_stringList = GGS_lstringlist ::constructor_emptyList () ;
            { bool syntaxRepeat_16 = true ;
              while (syntaxRepeat_16) {
                  GGS_lstring  var_cas_ch ;
                  inLexique._assignFromAttribute_tokenString (var_cas_ch) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  var_cas_stringList._addAssign_operation (var_cas_ch) ;
                switch (select_repeat_scanner_parser_16 (inLexique)) {
                  case 2 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                    } break ;
                  default :
                    syntaxRepeat_16 = false ;
                    break ;
                }
              }
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
            GGS_lstring  var_cas_errorMessageName ;
            inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_luint  var_cas_errorMessageIndex ;
            GGS_lstring  automatic_var_0 ;
            const GGS_typeTableMessagesErreurs  _temp_26199 = var_cas_table_des_messages_erreur ;
            if (_temp_26199.isBuilt ()) {
              _temp_26199 (HERE)->method_searchKeyGetID (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (859)) ;
            }
            var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (860))) ;
            var_cas_lcl._addAssign_operation (GGS_typeConditionNonChaine ::constructor_new (inLexique, var_cas_stringList, var_cas_errorMessageIndex COMMA_HERE)) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            GGS_tListeInstructionsLexicales  var_cas_li ;
            nt_lexical_instructions_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_bool (false)) ;
            var_cas_liste_tests_et_instructions._addAssign_operation (var_cas_lcl, var_cas_li) ;
            } break ;
          case 2 : {
            GGS_typeListeConditionsLexicales  var_cas_lcl ;
            var_cas_lcl = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
            nt_lexical_test_expression_ (inLexique, var_cas_lcl) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            GGS_tListeInstructionsLexicales  var_cas_li ;
            nt_lexical_instructions_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_bool (false)) ;
            var_cas_liste_tests_et_instructions._addAssign_operation (var_cas_lcl, var_cas_li) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_scanner_parser_14 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_while_branches_list_scanner_parser_833_26_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
        switch (select_scanner_parser_15 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7E_) COMMA_HERE) ;
            { bool syntaxRepeat_16 = true ;
              while (syntaxRepeat_16) {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                switch (select_repeat_scanner_parser_16 (inLexique)) {
                  case 2 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                    } break ;
                  default :
                    syntaxRepeat_16 = false ;
                    break ;
                }
              }
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            nt_lexical_instructions_list_parse (inLexique) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
            nt_lexical_test_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
            nt_lexical_instructions_list_parse (inLexique) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_scanner_parser_14 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_test_expression'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_expression_scanner_parser_899_30_ (galgas_scanner & inLexique,
                                GGS_typeListeConditionsLexicales  &var_cas_liste_test) {
  var_cas_liste_test = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        GGS_typeConditionLexicale  var_cas_c ;
        nt_lexical_test_term_ (inLexique, var_cas_c) ;
        var_cas_liste_test._addAssign_operation (var_cas_c) ;
      switch (select_repeat_scanner_parser_17 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_expression_scanner_parser_899_30_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        nt_lexical_test_term_parse (inLexique) ;
      switch (select_repeat_scanner_parser_17 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_914_24_ (galgas_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lstring  var_cas_unicodeCharSetName ;
  inLexique._assignFromAttribute_tokenString (var_cas_unicodeCharSetName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  var_cas_tt = GGS_typeUnicodeCharSet ::constructor_new (inLexique, var_cas_unicodeCharSetName COMMA_HERE) ;
  GGS_stringset  var_cas_availableCharSet ;
  var_cas_availableCharSet = GGS_stringset ::constructor_emptySet () ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeLetter")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeMark")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeNumber")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeDecimalDigit")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeASCIIHexDigit")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeSeparator")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeCommand")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodePunctuation")) ;
  var_cas_availableCharSet._addAssign_operation (GGS_string ("isUnicodeSymbol")) ;
  if (((var_cas_availableCharSet.reader_hasKey (inLexique, var_cas_unicodeCharSetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (930)) COMMA_SOURCE_FILE_AT_LINE (930))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_unicodeCharSetName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown Unicode character set") COMMA_SOURCE_FILE_AT_LINE (932)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_914_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_937_24_ (galgas_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lstring  var_cas_ch ;
  inLexique._assignFromAttribute_tokenString (var_cas_ch) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  var_cas_tt = GGS_typeConditionChaine ::constructor_new (inLexique, var_cas_ch COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_937_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_947_24_ (galgas_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lchar  var_cas_c ;
  inLexique._assignFromAttribute_charValue (var_cas_c) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
  switch (select_scanner_parser_18 (inLexique)) {
    case 1 : {
      var_cas_tt = GGS_typeConditionCaractere ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      GGS_lchar  var_cas_bs ;
      inLexique._assignFromAttribute_charValue (var_cas_bs) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
      var_cas_tt = GGS_typeConditionIntervalle ::constructor_new (inLexique, var_cas_c, var_cas_bs COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_test_term_scanner_parser_947_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
  switch (select_scanner_parser_18 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_964_19_ (galgas_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_ioLexicalRulesList,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  GGS_typeListeConditionsLexicales  var_cas_lcl ;
  nt_lexical_test_expression_ (inLexique, var_cas_lcl) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_tListeInstructionsLexicales  var_cas_li ;
  nt_lexical_instructions_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_bool (true)) ;
  var_cas_ioLexicalRulesList._addAssign_operation (var_cas_lcl, var_cas_li) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_964_19_parse (galgas_scanner & inLexique) {
  nt_lexical_test_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_lexical_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rule) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_993_19_ (galgas_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_ioLexicalRulesList,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_keyWordsMap ;
  const GGS_typeTableTablesDeMotsReserves  _temp_30477 = var_cas_table_tables_mots_reserves ;
  if (_temp_30477.isBuilt ()) {
    _temp_30477 (HERE)->method_searchKey (inLexique, var_cas_listName, var_cas_keyWordsMap COMMA_SOURCE_FILE_AT_LINE (1007)) ;
  }
  if (var_cas_keyWordsMap.isBuilt () &&
      var_cas_ioLexicalRulesList.isBuilt ()) {
    ::routine_buildLexicalRulesFromList (inLexique,  var_cas_keyWordsMap,  var_cas_ioLexicalRulesList COMMA_SOURCE_FILE_AT_LINE (1009)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_rule_scanner_parser_993_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_instructions_list_scanner_parser_1014_32_ (galgas_scanner & inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_li,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  GGS_tagMap  var_cas_tagMap ;
  var_cas_tagMap = GGS_tagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_inTagMap COMMA_HERE) ;
  var_cas_li = GGS_tListeInstructionsLexicales ::constructor_emptyList () ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_repeat_scanner_parser_19 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_nom_routine_externe ;
          inLexique._assignFromAttribute_tokenString (var_cas_nom_routine_externe) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
          nt_lexical_parameters_non_empty_list_ (inLexique, var_cas_lare, var_cas_table_attributs) ;
          GGS_typeListeMessagesErreur  var_cas_lme ;
          var_cas_lme = GGS_typeListeMessagesErreur ::constructor_emptyList () ;
          nt_lexical_error_messages_list_ (inLexique, var_cas_lme, var_cas_table_des_messages_erreur, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionActionExterne ::constructor_new (inLexique, var_cas_nom_routine_externe, var_cas_lare, var_cas_lme COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          GGS_typeListeTestsEtInstructions  var_cas_list_branches_si ;
          nt_lexical_when_branches_list_ (inLexique, var_cas_list_branches_si, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          GGS_tListeInstructionsLexicales  var_cas_liste_instructions_sinon ;
          nt_lexical_default_branch_ (inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionSiLexical ::constructor_new (inLexique, var_cas_list_branches_si, var_cas_liste_instructions_sinon COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          GGS_tListeInstructionsLexicales  var_cas_lii ;
          nt_lexical_instructions_list_ (inLexique, var_cas_lii, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_bool (false)) ;
          GGS_typeListeTestsEtInstructions  var_cas_ltq ;
          nt_while_branches_list_ (inLexique, var_cas_ltq, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_li._addAssign_operation (GGS_typeInstructionRepetitionLexicale ::constructor_new (inLexique, var_cas_lii, var_cas_ltq COMMA_HERE)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
          GGS_lstring  var_cas_tagIdentifier ;
          inLexique._assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_tagMap.modifier_insertKey (inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (1101)) ;
          var_cas_li._addAssign_operation (GGS_typeLexicalTagInstruction ::constructor_new (inLexique, var_cas_tagIdentifier COMMA_HERE)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_li._addAssign_operation (GGS_typeLexicalLogInstruction ::constructor_new (inLexique COMMA_HERE)) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the rewind instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1112)) ;
          }
          GGS_lstring  var_cas_tagIdentifier ;
          inLexique._assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          const GGS_tagMap  _temp_33635 = var_cas_tagMap ;
          if (_temp_33635.isBuilt ()) {
            _temp_33635 (HERE)->method_searchKey (inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (1115)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          GGS_lstring  var_cas_nomTerminal ;
          inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          GGS_string automatic_var_1 ;
          GGS_typeListeAttributsSemantiques  automatic_var_2 ;
          GGS_luint  automatic_var_3 ;
          GGS_bool automatic_var_4 ;
          const GGS_typeTableDefinitionTerminaux  _temp_33758 = var_cas_table_des_terminaux ;
          if (_temp_33758.isBuilt ()) {
            _temp_33758 (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (1119)) ;
          }
          var_cas_li._addAssign_operation (GGS_typeLexicalRewindAndSendInstruction ::constructor_new (inLexique, var_cas_tagIdentifier, var_cas_nomTerminal COMMA_HERE)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the drop instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1126)) ;
          }
          GGS_lstring  var_cas_nomTerminal ;
          inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_string automatic_var_5 ;
          GGS_typeListeAttributsSemantiques  automatic_var_6 ;
          GGS_luint  automatic_var_7 ;
          GGS_bool automatic_var_8 ;
          const GGS_typeTableDefinitionTerminaux  _temp_34137 = var_cas_table_des_terminaux ;
          if (_temp_34137.isBuilt ()) {
            _temp_34137 (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_5, automatic_var_6, automatic_var_7, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          }
          var_cas_li._addAssign_operation (GGS_typeLexicalDropInstruction ::constructor_new (inLexique, var_cas_nomTerminal COMMA_HERE)) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          if (((var_cas_inCanSendTerminal).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the send instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1136)) ;
          }
          GGS_typeInstructionLexicale  var_cas_e ;
          nt_lexical_send_instruction_ (inLexique, var_cas_e, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
          GGS_lstring  var_cas_errorMessageName ;
          inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_errorMessageIndex ;
          GGS_lstring  automatic_var_9 ;
          const GGS_typeTableMessagesErreurs  _temp_34803 = var_cas_table_des_messages_erreur ;
          if (_temp_34803.isBuilt ()) {
            _temp_34803 (HERE)->method_searchKeyGetID (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1153)) ;
          }
          var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1154))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionErreurLexicale ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
          GGS_lstring  var_cas_errorMessageName ;
          inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_luint  var_cas_errorMessageIndex ;
          GGS_lstring  automatic_var_10 ;
          const GGS_typeTableMessagesErreurs  _temp_35191 = var_cas_table_des_messages_erreur ;
          if (_temp_35191.isBuilt ()) {
            _temp_35191 (HERE)->method_searchKeyGetID (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1163)) ;
          }
          var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1164))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionLexicalWarning ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_HERE) ;
          var_cas_li._addAssign_operation (var_cas_e) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_instructions_list_scanner_parser_1014_32_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_repeat_scanner_parser_19 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_lexical_parameters_non_empty_list_parse (inLexique) ;
          nt_lexical_error_messages_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          nt_lexical_when_branches_list_parse (inLexique) ;
          nt_lexical_default_branch_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_select) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          nt_lexical_instructions_list_parse (inLexique) ;
          nt_while_branches_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_repeat) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_tag) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_rewind) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
          nt_lexical_send_instruction_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1173_34_ (galgas_scanner & /* inLexique */,
                                GGS_typeListeMessagesErreur  &/* var_cas_lme */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1173_34_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1182_34_ (galgas_scanner & inLexique,
                                GGS_typeListeMessagesErreur  &var_cas_lme,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
        GGS_lstring  var_cas_errorMessageName ;
        inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_luint  var_cas_errorMessageIndex ;
        GGS_lstring  automatic_var_11 ;
        const GGS_typeTableMessagesErreurs  _temp_36104 = var_cas_table_des_messages_erreur ;
        if (_temp_36104.isBuilt ()) {
          _temp_36104 (HERE)->method_searchKeyGetID (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_11 COMMA_SOURCE_FILE_AT_LINE (1192)) ;
        }
        var_cas_lme._addAssign_operation (var_cas_errorMessageIndex) ;
        var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1194))) ;
      switch (select_repeat_scanner_parser_20 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_error_messages_list_scanner_parser_1182_34_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_20 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_parameters_non_empty_list'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameters_non_empty_list_scanner_parser_1202_40_ (galgas_scanner & inLexique,
                                GGS_typeListeArgumentsRoutExterne  &var_cas_laf,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  var_cas_laf = GGS_typeListeArgumentsRoutExterne ::constructor_emptyList () ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_repeat_scanner_parser_21 (inLexique)) {
        case 2 : {
          switch (select_scanner_parser_22 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_typeArgumentRoutineExterne  var_cas_a ;
          nt_lexical_parameter_ (inLexique, var_cas_a, var_cas_table_attributs) ;
          var_cas_laf._addAssign_operation (var_cas_a) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameters_non_empty_list_scanner_parser_1202_40_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_repeat_scanner_parser_21 (inLexique)) {
        case 2 : {
          switch (select_scanner_parser_22 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_lexical_parameter_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1222_24_ (galgas_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractereCourant ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1222_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1232_24_ (galgas_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_lchar  var_cas_c ;
  inLexique._assignFromAttribute_charValue (var_cas_c) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractere ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1232_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_char) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1243_24_ (galgas_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_luint  var_cas_n ;
  inLexique._assignFromAttribute_uint32value (var_cas_n) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentEntier ::constructor_new (inLexique, var_cas_n COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1243_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1254_24_ (galgas_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  GGS_lstring  var_cas_nom ;
  inLexique._assignFromAttribute_tokenString (var_cas_nom) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_scanner_parser_23 (inLexique)) {
    case 1 : {
      GGS_AC_galgasType  var_cas_t ;
      const GGS_typeLexicalAttributesMap  _temp_37927 = var_cas_table_attributs ;
      if (_temp_37927.isBuilt ()) {
        _temp_37927 (HERE)->method_searchKey (inLexique, var_cas_nom, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      }
      var_cas_a = GGS_typeArgumentAttribut ::constructor_new (inLexique, var_cas_nom, var_cas_t COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      nt_lexical_parameters_non_empty_list_ (inLexique, var_cas_lare, var_cas_table_attributs) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      var_cas_a = GGS_typeArgumentRoutine ::constructor_new (inLexique, var_cas_nom, var_cas_lare COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_parameter_scanner_parser_1254_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_scanner_parser_23 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      nt_lexical_parameters_non_empty_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_when_branches_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_when_branches_list_scanner_parser_1275_33_ (galgas_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_lbs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  var_cas_lbs = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        GGS_typeListeConditionsLexicales  var_cas_lcl ;
        nt_lexical_test_expression_ (inLexique, var_cas_lcl) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        GGS_tListeInstructionsLexicales  var_cas_li ;
        nt_lexical_instructions_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
        var_cas_lbs._addAssign_operation (var_cas_lcl, var_cas_li) ;
      switch (select_repeat_scanner_parser_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_when_branches_list_scanner_parser_1275_33_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        nt_lexical_test_expression_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        nt_lexical_instructions_list_parse (inLexique) ;
      switch (select_repeat_scanner_parser_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1310_29_ (galgas_scanner & /* inLexique */,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */,
                                const GGS_tagMap  /* var_cas_inTagMap */,
                                const GGS_bool /* var_cas_inCanSendTerminal */) {
  var_cas_liste_instructions_sinon = GGS_tListeInstructionsLexicales ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1310_29_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1325_29_ (galgas_scanner & inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
  nt_lexical_instructions_list_ (inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_default_branch_scanner_parser_1325_29_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
  nt_lexical_instructions_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1350_31_ (galgas_scanner & inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_string automatic_var_12 ;
  GGS_typeListeAttributsSemantiques  automatic_var_13 ;
  GGS_luint  automatic_var_14 ;
  GGS_bool automatic_var_15 ;
  const GGS_typeTableDefinitionTerminaux  _temp_40996 = var_cas_table_des_terminaux ;
  if (_temp_40996.isBuilt ()) {
    _temp_40996 (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_12, automatic_var_13, automatic_var_14, automatic_var_15 COMMA_SOURCE_FILE_AT_LINE (1360)) ;
  }
  var_cas_instruction = GGS_typeInstructionEmettreSimple ::constructor_new (inLexique, var_cas_nomTerminal COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1350_31_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1366_31_ (galgas_scanner & inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
  GGS_typeListeRecherche  var_cas_lr ;
  var_cas_lr = GGS_typeListeRecherche ::constructor_emptyList () ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        GGS_lstring  var_cas_nomAttribut ;
        inLexique._assignFromAttribute_tokenString (var_cas_nomAttribut) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_AC_galgasType  var_cas_natureAttribut ;
        const GGS_typeLexicalAttributesMap  _temp_41708 = var_cas_table_attributs ;
        if (_temp_41708.isBuilt ()) {
          _temp_41708 (HERE)->method_searchKey (inLexique, var_cas_nomAttribut, var_cas_natureAttribut COMMA_SOURCE_FILE_AT_LINE (1380)) ;
        }
        GGS_typeGalgas_lstring  var_cas_lgs ;
        var_cas_lgs = GGS_typeGalgas_lstring::castFrom (inLexique, var_cas_natureAttribut.getPtr (), true, var_cas_nomAttribut COMMA_SOURCE_FILE_AT_LINE (1381)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
        GGS_lstring  var_cas_listName ;
        inLexique._assignFromAttribute_tokenString (var_cas_listName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeTableMotsReserves  automatic_var_16 ;
        const GGS_typeTableTablesDeMotsReserves  _temp_41950 = var_cas_table_tables_mots_reserves ;
        if (_temp_41950.isBuilt ()) {
          _temp_41950 (HERE)->method_searchKey (inLexique, var_cas_listName, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (1385)) ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
        var_cas_lr._addAssign_operation (var_cas_nomAttribut, var_cas_listName) ;
      switch (select_repeat_scanner_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  GGS_typeEmissionParDefaut  var_cas_ee ;
  nt_lexical_send_or_error_ (inLexique, var_cas_ee, var_cas_table_des_messages_erreur, var_cas_table_des_terminaux, var_cas_ioUsedErrorMessageSet) ;
  var_cas_instruction = GGS_typeInstructionEmettre ::constructor_new (inLexique, var_cas_lr, var_cas_ee COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_instruction_scanner_parser_1366_31_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      switch (select_repeat_scanner_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  nt_lexical_send_or_error_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1403_28_ (galgas_scanner & inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &/* var_cas_tableMessagesErreurs */,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  inLexique._assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
  GGS_string automatic_var_17 ;
  GGS_typeListeAttributsSemantiques  automatic_var_18 ;
  GGS_luint  automatic_var_19 ;
  GGS_bool automatic_var_20 ;
  const GGS_typeTableDefinitionTerminaux  _temp_42666 = var_cas_table_des_terminaux ;
  if (_temp_42666.isBuilt ()) {
    _temp_42666 (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_17, automatic_var_18, automatic_var_19, automatic_var_20 COMMA_SOURCE_FILE_AT_LINE (1411)) ;
  }
  var_cas_emissionParDefaut = GGS_typeEmissionTerminalParDefaut ::constructor_new (inLexique, var_cas_nomTerminal COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1403_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1417_28_ (galgas_scanner & inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &var_cas_tableMessagesErreurs,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessageName ;
  inLexique._assignFromAttribute_tokenString (var_cas_errorMessageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_luint  var_cas_errorMessageIndex ;
  GGS_lstring  automatic_var_21 ;
  const GGS_typeTableMessagesErreurs  _temp_43221 = var_cas_tableMessagesErreurs ;
  if (_temp_43221.isBuilt ()) {
    _temp_43221 (HERE)->method_searchKeyGetID (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_21 COMMA_SOURCE_FILE_AT_LINE (1427)) ;
  }
  var_cas_ioUsedErrorMessageSet._addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428))) ;
  var_cas_emissionParDefaut = GGS_typeEmissionErreurParDefaut ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::
pr_lexical_send_or_error_scanner_parser_1417_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

