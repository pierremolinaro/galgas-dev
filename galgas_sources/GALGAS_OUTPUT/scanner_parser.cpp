//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'scanner_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 7th, 2010, at 15h42'21"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "scanner_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "scanner_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildLexicalTypeMap"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildLexicalTypeMap (C_Compiler & inLexique,
                                GGS_EXLexicalTypeMap  & var_cas_outLexicalTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildLexicalTypeMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outLexicalTypeMap = GGS_EXLexicalTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (207)), GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) COMMA_SOURCE_FILE_AT_LINE (207)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (209)), GGS_typeGalgas_lchar ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (209)) COMMA_SOURCE_FILE_AT_LINE (209)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (211)), GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) COMMA_SOURCE_FILE_AT_LINE (211)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (213)), GGS_typeGalgas_lsint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) COMMA_SOURCE_FILE_AT_LINE (213)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (215)), GGS_typeGalgas_luint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) COMMA_SOURCE_FILE_AT_LINE (215)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (217)), GGS_typeGalgas_lsint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (219)), GGS_typeGalgas_lbool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (219)) COMMA_SOURCE_FILE_AT_LINE (219)) ;
  var_cas_outLexicalTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (221)), GGS_typeGalgas_ldouble ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) COMMA_SOURCE_FILE_AT_LINE (221)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildLexicalTypeMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  inLexique.assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_lexiqueName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("in GALGAS 1.9.0 and later, extension of lexique component file should be '.gLexique'") COMMA_SOURCE_FILE_AT_LINE (245)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_importGrammarForSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_importLexique (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  inLexique.assignFromAttribute_tokenString (var_cas_lexiqueName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolsMapForUse = GGS_M_terminalSymbolsMapForUse ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (280)) ;
  GGS_typeLexicalAttributesMap  var_cas_table_attributs = GGS_typeLexicalAttributesMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ;
  GGS_typeTableDefinitionTerminaux  var_cas_table_des_terminaux = GGS_typeTableDefinitionTerminaux ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
  GGS_typeTableMessagesErreurs  var_cas_table_messages = GGS_typeTableMessagesErreurs ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (283)) ;
  GGS_typeTableTablesDeMotsReserves  var_cas_table_tables_mots_reserves = GGS_typeTableTablesDeMotsReserves ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (284)) ;
  GGS_typeListeTestsEtInstructions  var_cas_lexicalRulesList = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  GGS_tokensInListMap  var_cas_tokensInListMap = GGS_tokensInListMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) ;
  GGS_EXLexicalTypeMap  var_cas_lexicalTypeMap ;
  ::routine_buildLexicalTypeMap (inLexique,  var_cas_lexicalTypeMap COMMA_SOURCE_FILE_AT_LINE (289)) ;
  GGS_M_styles  var_cas_stylesMap = GGS_M_styles ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (291)) ;
  GGS_lstring  var_cas_defaultStringIdentifier = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (292)) ;
  var_cas_stylesMap.modifier_insertKey (inLexique, var_cas_defaultStringIdentifier, var_cas_stylesMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (293)) ;
  GGS_styleList  var_cas_styleList = GGS_styleList ::constructor_emptyList () ;
  var_cas_styleList.addAssign_operation (GGS_string (""), GGS_string ("Default style")) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_ (inLexique, var_cas_stylesMap, var_cas_styleList) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_ (inLexique, var_cas_table_des_terminaux, var_cas_table_attributs, var_cas_terminalSymbolsMapForUse, var_cas_lexicalTypeMap, var_cas_stylesMap, GGS_bool (true)) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_ (inLexique, var_cas_table_tables_mots_reserves, var_cas_table_attributs, var_cas_table_des_terminaux, var_cas_terminalSymbolsMapForUse, var_cas_stylesMap, var_cas_tokensInListMap, GGS_bool (true)) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  var_cas_ioLexiqueMapForUse.modifier_insertKey (inLexique, var_cas_lexiqueName, var_cas_terminalSymbolsMapForUse COMMA_SOURCE_FILE_AT_LINE (332)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_importOptions (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_importSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_galgas_5F_component_i0_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  switch (select_scanner_5F_parser_0 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_scanner_5F_parser_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique) ;
          } break ;
        case 3 : {
          nt_style_5F_declaration_parse (inLexique) ;
          } break ;
        case 4 : {
          nt_template_5F_declaration_parse (inLexique) ;
          } break ;
        case 5 : {
          nt_replace_5F_declaration_parse (inLexique) ;
          } break ;
        case 6 : {
          nt_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_parse (inLexique) ;
          } break ;
        case 7 : {
          nt_key_5F_words_5F_list_5F_declaration_parse (inLexique) ;
          } break ;
        case 8 : {
          nt_lexical_5F_error_5F_message_5F_declaration_parse (inLexique) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          nt_lexical_5F_rule_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'style_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_style_5F_declaration_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_styles  &var_cas_ioStylesMap,
                                GGS_styleList  &var_cas_ioStyleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        GGS_lstring  var_cas_styleName ;
        inLexique.assignFromAttribute_tokenString (var_cas_styleName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
        GGS_lstring  var_cas_title ;
        inLexique.assignFromAttribute_tokenString (var_cas_title) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        var_cas_ioStylesMap.modifier_insertKey (inLexique, var_cas_styleName, var_cas_ioStylesMap.reader_count () COMMA_SOURCE_FILE_AT_LINE (490)) ;
        var_cas_ioStyleList.addAssign_operation (var_cas_styleName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491)), var_cas_title.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491))) ;
      switch (select_scanner_5F_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_style_5F_declaration_i1_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      switch (select_scanner_5F_parser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_template_5F_declaration_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_bool var_cas_inIsTemplate,
                                GGS_templateDelimiterMap  &var_cas_ioTemplateDelimiterMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
  const GGS_bool cond_15056 = (var_cas_inIsTemplate).operator_not () ;
  if (cond_15056.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the lexique should be declared as template lexique") COMMA_SOURCE_FILE_AT_LINE (509)) ;
  }
  GGS_lstring  var_cas_startString ;
  inLexique.assignFromAttribute_tokenString (var_cas_startString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_bool var_cas_preservesStartDelimiter ;
  switch (select_scanner_5F_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      GGS_lstring  var_cas_name ;
      inLexique.assignFromAttribute_tokenString (var_cas_name) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      const GGS_bool cond_15327 = (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (516))).operator_isNotEqual (GGS_string ("preserved")) ;
      if (cond_15327.isBuiltAndTrue ()) {
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'preserved' tag is allowed here") COMMA_SOURCE_FILE_AT_LINE (518)) ;
      }
      var_cas_preservesStartDelimiter = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_preservesStartDelimiter = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_endString ;
  inLexique.assignFromAttribute_tokenString (var_cas_endString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioTemplateDelimiterMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_preservesStartDelimiter, var_cas_endString COMMA_SOURCE_FILE_AT_LINE (527)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_template_5F_declaration_i2_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_5F_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'replace_declaration'           *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_replace_5F_declaration_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_bool var_cas_inIsTemplate,
                                GGS_templateReplacementMap  &var_cas_ioTemplateReplacementMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_replace) COMMA_HERE) ;
  const GGS_bool cond_16090 = (var_cas_inIsTemplate).operator_not () ;
  if (cond_16090.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the lexique should be declared as template lexique") COMMA_SOURCE_FILE_AT_LINE (542)) ;
  }
  GGS_lstring  var_cas_startString ;
  inLexique.assignFromAttribute_tokenString (var_cas_startString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_5F_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_endString ;
      inLexique.assignFromAttribute_tokenString (var_cas_endString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_replacementFunction ;
      inLexique.assignFromAttribute_tokenString (var_cas_replacementFunction) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_ioTemplateReplacementMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_endString, var_cas_replacementFunction COMMA_SOURCE_FILE_AT_LINE (549)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      GGS_lstring  var_cas_endString ;
      inLexique.assignFromAttribute_tokenString (var_cas_endString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      var_cas_ioTemplateReplacementMap.modifier_insertKey (inLexique, var_cas_startString, var_cas_endString, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (553)) COMMA_SOURCE_FILE_AT_LINE (553)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_replace_5F_declaration_i3_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_replace) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_5F_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'attribute_or_terminal_symbol_declaration'*
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                const GGS_EXLexicalTypeMap  var_cas_inLexicalTypeMap,
                                const GGS_M_styles  var_cas_ioStylesMap,
                                const GGS_bool var_cas_inIsTemplate) {
  switch (select_scanner_5F_parser_5 (inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_attributeType ;
      if (var_cas_inLexicalTypeMap.isBuilt ()) {
        var_cas_inLexicalTypeMap (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (575)) ;
      }
      GGS_lstring  var_cas_attributeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_table_des_attributs.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_attributeType COMMA_SOURCE_FILE_AT_LINE (578)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_nomTerminal ;
      inLexique.assignFromAttribute_tokenString (var_cas_nomTerminal) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_attributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
          switch (select_scanner_5F_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
              GGS_lstring  var_cas_idf ;
              inLexique.assignFromAttribute_tokenString (var_cas_idf) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_AC_galgasType  var_cas_t ;
              if (var_cas_table_des_attributs.isBuilt ()) {
                var_cas_table_des_attributs (HERE)->method_searchKey (inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (590)) ;
              }
              var_cas_attributeList.addAssign_operation (var_cas_t, var_cas_idf) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_errorMessage ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (inLexique, var_cas_nomTerminal, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (597)) ;
      GGS_lstring  var_cas_styleName ;
      switch (select_scanner_5F_parser_7 (inLexique)) {
        case 1 : {
          var_cas_styleName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (601)) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_styleName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      GGS_uint  var_cas_styleIndex ;
      if (var_cas_ioStylesMap.isBuilt ()) {
        var_cas_ioStylesMap (HERE)->method_searchKey (inLexique, var_cas_styleName, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (607)) ;
      }
      GGS_string var_cas_errorMessageString = var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) ;
      GGS_bool var_cas_isTemplateEndMark ;
      switch (select_scanner_5F_parser_8 (inLexique)) {
        case 1 : {
          var_cas_isTemplateEndMark = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
          const GGS_bool cond_18476 = (var_cas_inIsTemplate).operator_not () ;
          if (cond_18476.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for using this construct, the lexique should have been declared as a template lexique") COMMA_SOURCE_FILE_AT_LINE (616)) ;
          }
          GGS_lstring  var_cas_mark ;
          inLexique.assignFromAttribute_tokenString (var_cas_mark) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          const GGS_bool cond_18640 = (var_cas_mark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (618))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
          if (cond_18640.isBuiltAndTrue ()) {
            var_cas_mark.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'templateEndMark' is allowed here") COMMA_SOURCE_FILE_AT_LINE (620)) ;
          }
          var_cas_isTemplateEndMark = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      var_cas_table_des_terminaux.modifier_insertKey (inLexique, var_cas_nomTerminal, var_cas_errorMessageString, var_cas_attributeList, var_cas_styleIndex, var_cas_isTemplateEndMark COMMA_SOURCE_FILE_AT_LINE (623)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_attribute_5F_or_5F_terminal_5F_symbol_5F_declaration_i4_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  switch (select_scanner_5F_parser_5 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
          switch (select_scanner_5F_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      switch (select_scanner_5F_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      switch (select_scanner_5F_parser_8 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'key_words_list_declaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_key_5F_words_5F_list_5F_declaration_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_typeLexicalAttributesMap  &var_cas_table_des_attributs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_M_terminalSymbolsMapForUse  &var_cas_ioTerminalSymbolsMapForUse,
                                const GGS_M_styles  var_cas_ioStylesMap,
                                GGS_tokensInListMap  &var_cas_ioTokensInListMap,
                                const GGS_bool var_cas_inIsTemplate) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_entriesMap = GGS_typeTableMotsReserves ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) ;
  GGS_lstring  var_cas_listName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_scanner_5F_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_lstring  var_cas_idf ;
          inLexique.assignFromAttribute_tokenString (var_cas_idf) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_t ;
          if (var_cas_table_des_attributs.isBuilt ()) {
            var_cas_table_des_attributs (HERE)->method_searchKey (inLexique, var_cas_idf, var_cas_t COMMA_SOURCE_FILE_AT_LINE (654)) ;
          }
          var_cas_attributeList.addAssign_operation (var_cas_t, var_cas_idf) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  if (var_cas_errorMessage.isBuilt ()) {
    ::routine_check_K_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (662)) ;
  }
  GGS_lstring  var_cas_styleName ;
  switch (select_scanner_5F_parser_10 (inLexique)) {
    case 1 : {
      var_cas_styleName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (666)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_styleName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_uint  var_cas_styleIndex ;
  if (var_cas_ioStylesMap.isBuilt ()) {
    var_cas_ioStylesMap (HERE)->method_searchKey (inLexique, var_cas_styleName, var_cas_styleIndex COMMA_SOURCE_FILE_AT_LINE (672)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
        GGS_lstring  var_cas_listEntry ;
        inLexique.assignFromAttribute_tokenString (var_cas_listEntry) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        GGS_lstring  var_cas_terminalSymbolName ;
        switch (select_scanner_5F_parser_12 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
            inLexique.assignFromAttribute_tokenString (var_cas_terminalSymbolName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            var_cas_terminalSymbolName = var_cas_listEntry ;
            } break ;
          default :
            break ;
        }
        GGS_bool var_cas_isTemplateEndMark ;
        switch (select_scanner_5F_parser_13 (inLexique)) {
          case 1 : {
            var_cas_isTemplateEndMark = GGS_bool (false) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
            const GGS_bool cond_20735 = (var_cas_inIsTemplate).operator_not () ;
            if (cond_20735.isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for using this construct, the lexique should have been declared as a template lexique") COMMA_SOURCE_FILE_AT_LINE (694)) ;
            }
            GGS_lstring  var_cas_mark ;
            inLexique.assignFromAttribute_tokenString (var_cas_mark) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            const GGS_bool cond_20895 = (var_cas_mark.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (696))).operator_isNotEqual (GGS_string ("templateEndMark")) ;
            if (cond_20895.isBuiltAndTrue ()) {
              var_cas_mark.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'templateEndMark' is allowed here") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            }
            var_cas_isTemplateEndMark = GGS_bool (true) ;
            } break ;
          default :
            break ;
        }
        var_cas_ioTokensInListMap.modifier_insertKey (inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (702)) ;
        GGS_string var_cas_specificErrorMessageString = var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (704)).reader_stringByReplacingStringByString (inLexique, GGS_string ("%K"), var_cas_terminalSymbolName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (704)) COMMA_SOURCE_FILE_AT_LINE (704)) ;
        var_cas_table_des_terminaux.modifier_insertKey (inLexique, var_cas_terminalSymbolName, var_cas_specificErrorMessageString, var_cas_attributeList, var_cas_styleIndex, var_cas_isTemplateEndMark COMMA_SOURCE_FILE_AT_LINE (706)) ;
        var_cas_ioTerminalSymbolsMapForUse.modifier_insertKey (inLexique, var_cas_terminalSymbolName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (713)) ;
        var_cas_entriesMap.modifier_insertKey (inLexique, var_cas_listEntry, var_cas_terminalSymbolName COMMA_SOURCE_FILE_AT_LINE (715)) ;
      switch (select_scanner_5F_parser_11 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  var_cas_table_tables_mots_reserves.modifier_insertKey (inLexique, var_cas_listName, var_cas_entriesMap COMMA_SOURCE_FILE_AT_LINE (719)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_key_5F_words_5F_list_5F_declaration_i5_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_scanner_5F_parser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  switch (select_scanner_5F_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
        switch (select_scanner_5F_parser_12 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
        switch (select_scanner_5F_parser_13 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_scanner_5F_parser_11 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_error_message_declaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_message_5F_declaration_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeTableMessagesErreurs  &var_cas_table_messages) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_nom ;
  inLexique.assignFromAttribute_tokenString (var_cas_nom) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  var_cas_table_messages.modifier_insertKey (inLexique, var_cas_nom, var_cas_table_messages.reader_count (), var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (736)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_message_5F_declaration_i6_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'while_branches_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_while_5F_branches_5F_list_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_liste_tests_et_instructions,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  var_cas_liste_tests_et_instructions = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
        switch (select_scanner_5F_parser_15 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
            GGS_typeListeConditionsLexicales  var_cas_lcl = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
            GGS_lstringlist  var_cas_stringList = GGS_lstringlist ::constructor_emptyList () ;
            { bool syntaxRepeat_16 = true ;
              while (syntaxRepeat_16) {
                  GGS_lstring  var_cas_ch ;
                  inLexique.assignFromAttribute_tokenString (var_cas_ch) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                  var_cas_stringList.addAssign_operation (var_cas_ch) ;
                switch (select_scanner_5F_parser_16 (inLexique)) {
                  case 2 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                    } break ;
                  default :
                    syntaxRepeat_16 = false ;
                    break ;
                }
              }
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
            GGS_lstring  var_cas_errorMessageName ;
            inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            GGS_uint  var_cas_errorMessageIndex ;
            GGS_lstring  automatic_var_23230_0 ;
            if (var_cas_table_des_messages_erreur.isBuilt ()) {
              var_cas_table_des_messages_erreur (HERE)->method_searchKey (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_23230_0 COMMA_SOURCE_FILE_AT_LINE (768)) ;
            }
            var_cas_ioUsedErrorMessageSet.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (769))) ;
            var_cas_lcl.addAssign_operation (GGS_typeConditionNonChaine ::constructor_new (inLexique, var_cas_stringList, var_cas_errorMessageIndex COMMA_SOURCE_FILE_AT_LINE (770))) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            GGS_tListeInstructionsLexicales  var_cas_li ;
            nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (780)), GGS_bool (false)) ;
            var_cas_liste_tests_et_instructions.addAssign_operation (var_cas_lcl, var_cas_li) ;
            } break ;
          case 2 : {
            GGS_typeListeConditionsLexicales  var_cas_lcl = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
            nt_lexical_5F_test_5F_expression_ (inLexique, var_cas_lcl) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            GGS_tListeInstructionsLexicales  var_cas_li ;
            nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (797)), GGS_bool (false)) ;
            var_cas_liste_tests_et_instructions.addAssign_operation (var_cas_lcl, var_cas_li) ;
            } break ;
          default :
            break ;
        }
      switch (select_scanner_5F_parser_14 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_while_5F_branches_5F_list_i7_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
        switch (select_scanner_5F_parser_15 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
            { bool syntaxRepeat_16 = true ;
              while (syntaxRepeat_16) {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                switch (select_scanner_5F_parser_16 (inLexique)) {
                  case 2 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                    } break ;
                  default :
                    syntaxRepeat_16 = false ;
                    break ;
                }
              }
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
            nt_lexical_5F_test_5F_expression_parse (inLexique) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
            } break ;
          default :
            break ;
        }
      switch (select_scanner_5F_parser_14 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_test_expression'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_expression_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeConditionsLexicales  &var_cas_liste_test) {
  var_cas_liste_test = GGS_typeListeConditionsLexicales ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        GGS_typeConditionLexicale  var_cas_c ;
        nt_lexical_5F_test_5F_term_ (inLexique, var_cas_c) ;
        var_cas_liste_test.addAssign_operation (var_cas_c) ;
      switch (select_scanner_5F_parser_17 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_expression_i8_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        nt_lexical_5F_test_5F_term_parse (inLexique) ;
      switch (select_scanner_5F_parser_17 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lstring  var_cas_unicodeCharSetName ;
  inLexique.assignFromAttribute_tokenString (var_cas_unicodeCharSetName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_tt = GGS_typeUnicodeCharSet ::constructor_new (inLexique, var_cas_unicodeCharSetName COMMA_SOURCE_FILE_AT_LINE (827)) ;
  GGS_stringset  var_cas_availableCharSet = GGS_stringset ::constructor_emptySet () ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeLetter")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeMark")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeNumber")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeDecimalDigit")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeASCIIHexDigit")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeSeparator")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeCommand")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodePunctuation")) ;
  var_cas_availableCharSet.addAssign_operation (GGS_string ("isUnicodeSymbol")) ;
  const GGS_bool cond_25435 = (var_cas_availableCharSet.reader_hasKey (var_cas_unicodeCharSetName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (839)))).operator_not () ;
  if (cond_25435.isBuiltAndTrue ()) {
    var_cas_unicodeCharSetName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown Unicode character set") COMMA_SOURCE_FILE_AT_LINE (841)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i9_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lstring  var_cas_ch ;
  inLexique.assignFromAttribute_tokenString (var_cas_ch) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  var_cas_tt = GGS_typeConditionChaine ::constructor_new (inLexique, var_cas_ch COMMA_SOURCE_FILE_AT_LINE (851)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i10_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_test_term'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeConditionLexicale  &var_cas_tt) {
  GGS_lchar  var_cas_c ;
  inLexique.assignFromAttribute_charValue (var_cas_c) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  switch (select_scanner_5F_parser_18 (inLexique)) {
    case 1 : {
      var_cas_tt = GGS_typeConditionCaractere ::constructor_new (inLexique, var_cas_c COMMA_SOURCE_FILE_AT_LINE (862)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      GGS_lchar  var_cas_bs ;
      inLexique.assignFromAttribute_charValue (var_cas_bs) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
      var_cas_tt = GGS_typeConditionIntervalle ::constructor_new (inLexique, var_cas_c, var_cas_bs COMMA_SOURCE_FILE_AT_LINE (867)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_test_5F_term_i11_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  switch (select_scanner_5F_parser_18 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_rule_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_ioLexicalRulesList,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  GGS_typeListeConditionsLexicales  var_cas_lcl ;
  nt_lexical_5F_test_5F_expression_ (inLexique, var_cas_lcl) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_tListeInstructionsLexicales  var_cas_li ;
  nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (892)), GGS_bool (true)) ;
  var_cas_ioLexicalRulesList.addAssign_operation (var_cas_lcl, var_cas_li) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_rule_i12_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  nt_lexical_5F_test_5F_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_rule'              *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_rule_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &/* var_cas_ioLexicalRulesList */,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_typeTableMotsReserves  var_cas_keyWordsMap ;
  if (var_cas_table_tables_mots_reserves.isBuilt ()) {
    var_cas_table_tables_mots_reserves (HERE)->method_searchKey (inLexique, var_cas_listName, var_cas_keyWordsMap COMMA_SOURCE_FILE_AT_LINE (916)) ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_rule_i13_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_instructions_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_instructions_5F_list_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_li,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  GGS_tagMap  var_cas_tagMap = GGS_tagMap ::constructor_mapWithMapToOverride (inLexique, var_cas_inTagMap COMMA_SOURCE_FILE_AT_LINE (933)) ;
  var_cas_li = GGS_tListeInstructionsLexicales ::constructor_emptyList () ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_scanner_5F_parser_19 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_nom_routine_externe ;
          inLexique.assignFromAttribute_tokenString (var_cas_nom_routine_externe) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
          nt_lexical_5F_parameters_5F_non_5F_empty_5F_list_ (inLexique, var_cas_lare, var_cas_table_attributs) ;
          GGS_typeListeMessagesErreur  var_cas_lme = GGS_typeListeMessagesErreur ::constructor_emptyList () ;
          nt_lexical_5F_error_5F_messages_5F_list_ (inLexique, var_cas_lme, var_cas_table_des_messages_erreur, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e = GGS_typeInstructionActionExterne ::constructor_new (inLexique, var_cas_nom_routine_externe, var_cas_lare, var_cas_lme COMMA_SOURCE_FILE_AT_LINE (948)) ;
          var_cas_li.addAssign_operation (var_cas_e) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
          GGS_typeListeTestsEtInstructions  var_cas_list_branches_si ;
          nt_lexical_5F_when_5F_branches_5F_list_ (inLexique, var_cas_list_branches_si, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          GGS_tListeInstructionsLexicales  var_cas_liste_instructions_sinon ;
          nt_lexical_5F_default_5F_branch_ (inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_tagMap, var_cas_inCanSendTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e ;
          var_cas_e = GGS_typeInstructionSiLexical ::constructor_new (inLexique, var_cas_list_branches_si, var_cas_liste_instructions_sinon COMMA_SOURCE_FILE_AT_LINE (978)) ;
          var_cas_li.addAssign_operation (var_cas_e) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
          GGS_tListeInstructionsLexicales  var_cas_lii ;
          nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_lii, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, GGS_tagMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (990)), GGS_bool (false)) ;
          GGS_typeListeTestsEtInstructions  var_cas_ltq ;
          nt_while_5F_branches_5F_list_ (inLexique, var_cas_ltq, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_li.addAssign_operation (GGS_typeInstructionRepetitionLexicale ::constructor_new (inLexique, var_cas_lii, var_cas_ltq COMMA_SOURCE_FILE_AT_LINE (1005))) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
          GGS_lstring  var_cas_tagIdentifier ;
          inLexique.assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_tagMap.modifier_insertKey (inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (1010)) ;
          var_cas_li.addAssign_operation (GGS_typeLexicalTagInstruction ::constructor_new (inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (1011))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_log) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_li.addAssign_operation (GGS_typeLexicalLogInstruction ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1016))) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
          const GGS_bool cond_30543 = (var_cas_inCanSendTerminal).operator_not () ;
          if (cond_30543.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the rewind instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1021)) ;
          }
          GGS_lstring  var_cas_tagIdentifier ;
          inLexique.assignFromAttribute_tokenString (var_cas_tagIdentifier) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          if (var_cas_tagMap.isBuilt ()) {
            var_cas_tagMap (HERE)->method_searchKey (inLexique, var_cas_tagIdentifier COMMA_SOURCE_FILE_AT_LINE (1024)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
          GGS_lstring  var_cas_nomTerminal ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
          GGS_string automatic_var_30782_0 ;
          GGS_typeListeAttributsSemantiques  automatic_var_30782_1 ;
          GGS_uint  automatic_var_30782_2 ;
          GGS_bool automatic_var_30782_3 ;
          if (var_cas_table_des_terminaux.isBuilt ()) {
            var_cas_table_des_terminaux (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_30782_0, automatic_var_30782_1, automatic_var_30782_2, automatic_var_30782_3 COMMA_SOURCE_FILE_AT_LINE (1028)) ;
          }
          var_cas_li.addAssign_operation (GGS_typeLexicalRewindAndSendInstruction ::constructor_new (inLexique, var_cas_tagIdentifier, var_cas_nomTerminal COMMA_SOURCE_FILE_AT_LINE (1029))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_drop) COMMA_HERE) ;
          const GGS_bool cond_31028 = (var_cas_inCanSendTerminal).operator_not () ;
          if (cond_31028.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the drop instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1035)) ;
          }
          GGS_lstring  var_cas_nomTerminal ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomTerminal) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          GGS_string automatic_var_31161_0 ;
          GGS_typeListeAttributsSemantiques  automatic_var_31161_1 ;
          GGS_uint  automatic_var_31161_2 ;
          GGS_bool automatic_var_31161_3 ;
          if (var_cas_table_des_terminaux.isBuilt ()) {
            var_cas_table_des_terminaux (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_31161_0, automatic_var_31161_1, automatic_var_31161_2, automatic_var_31161_3 COMMA_SOURCE_FILE_AT_LINE (1039)) ;
          }
          var_cas_li.addAssign_operation (GGS_typeLexicalDropInstruction ::constructor_new (inLexique, var_cas_nomTerminal COMMA_SOURCE_FILE_AT_LINE (1040))) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
          const GGS_bool cond_31373 = (var_cas_inCanSendTerminal).operator_not () ;
          if (cond_31373.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the send instruction cannot be used within a repeat instruction") COMMA_SOURCE_FILE_AT_LINE (1045)) ;
          }
          GGS_typeInstructionLexicale  var_cas_e ;
          nt_lexical_5F_send_5F_instruction_ (inLexique, var_cas_e, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          var_cas_li.addAssign_operation (var_cas_e) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          GGS_lstring  var_cas_errorMessageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_uint  var_cas_errorMessageIndex ;
          GGS_lstring  automatic_var_31836_0 ;
          if (var_cas_table_des_messages_erreur.isBuilt ()) {
            var_cas_table_des_messages_erreur (HERE)->method_searchKey (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_31836_0 COMMA_SOURCE_FILE_AT_LINE (1062)) ;
          }
          var_cas_ioUsedErrorMessageSet.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1063))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e = GGS_typeInstructionErreurLexicale ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_SOURCE_FILE_AT_LINE (1065)) ;
          var_cas_li.addAssign_operation (var_cas_e) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
          GGS_lstring  var_cas_errorMessageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_uint  var_cas_errorMessageIndex ;
          GGS_lstring  automatic_var_32218_0 ;
          if (var_cas_table_des_messages_erreur.isBuilt ()) {
            var_cas_table_des_messages_erreur (HERE)->method_searchKey (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_32218_0 COMMA_SOURCE_FILE_AT_LINE (1072)) ;
          }
          var_cas_ioUsedErrorMessageSet.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          GGS_typeInstructionLexicale  var_cas_e = GGS_typeInstructionLexicalWarning ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_SOURCE_FILE_AT_LINE (1075)) ;
          var_cas_li.addAssign_operation (var_cas_e) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_instructions_5F_list_i14_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_scanner_5F_parser_19 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          nt_lexical_5F_parameters_5F_non_5F_empty_5F_list_parse (inLexique) ;
          nt_lexical_5F_error_5F_messages_5F_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
          nt_lexical_5F_when_5F_branches_5F_list_parse (inLexique) ;
          nt_lexical_5F_default_5F_branch_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
          nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
          nt_while_5F_branches_5F_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_log) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_drop) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
          nt_lexical_5F_send_5F_instruction_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 10 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 11 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_messages_5F_list_i15_ (C_Lexique_galgas_5F_scanner & /* inLexique */,
                                GGS_typeListeMessagesErreur  &/* var_cas_lme */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_messages_5F_list_i15_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_error_messages_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_messages_5F_list_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeMessagesErreur  &var_cas_lme,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
        GGS_lstring  var_cas_errorMessageName ;
        inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        GGS_uint  var_cas_errorMessageIndex ;
        GGS_lstring  automatic_var_33125_0 ;
        if (var_cas_table_des_messages_erreur.isBuilt ()) {
          var_cas_table_des_messages_erreur (HERE)->method_searchKey (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_33125_0 COMMA_SOURCE_FILE_AT_LINE (1101)) ;
        }
        var_cas_lme.addAssign_operation (var_cas_errorMessageIndex) ;
        var_cas_ioUsedErrorMessageSet.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1103))) ;
      switch (select_scanner_5F_parser_20 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_error_5F_messages_5F_list_i16_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  { bool syntaxRepeat_20 = true ;
    while (syntaxRepeat_20) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      switch (select_scanner_5F_parser_20 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_20 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_parameters_non_empty_list'    *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameters_5F_non_5F_empty_5F_list_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeArgumentsRoutExterne  &var_cas_laf,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  var_cas_laf = GGS_typeListeArgumentsRoutExterne ::constructor_emptyList () ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_scanner_5F_parser_21 (inLexique)) {
        case 2 : {
          switch (select_scanner_5F_parser_22 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_typeArgumentRoutineExterne  var_cas_a ;
          nt_lexical_5F_parameter_ (inLexique, var_cas_a, var_cas_table_attributs) ;
          var_cas_laf.addAssign_operation (var_cas_a) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameters_5F_non_5F_empty_5F_list_i17_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_scanner_5F_parser_21 (inLexique)) {
        case 2 : {
          switch (select_scanner_5F_parser_22 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_lexical_5F_parameter_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractereCourant ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i18_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_lchar  var_cas_c ;
  inLexique.assignFromAttribute_charValue (var_cas_c) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentCaractere ::constructor_new (inLexique, var_cas_c COMMA_SOURCE_FILE_AT_LINE (1147)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i19_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */) {
  GGS_luint  var_cas_n ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_n) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_a = GGS_typeArgumentEntier ::constructor_new (inLexique, var_cas_n COMMA_SOURCE_FILE_AT_LINE (1158)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i20_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeArgumentRoutineExterne  &var_cas_a,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs) {
  GGS_lstring  var_cas_nom ;
  inLexique.assignFromAttribute_tokenString (var_cas_nom) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_scanner_5F_parser_23 (inLexique)) {
    case 1 : {
      GGS_AC_galgasType  var_cas_t ;
      if (var_cas_table_attributs.isBuilt ()) {
        var_cas_table_attributs (HERE)->method_searchKey (inLexique, var_cas_nom, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      }
      var_cas_a = GGS_typeArgumentAttribut ::constructor_new (inLexique, var_cas_nom, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      } break ;
    case 2 : {
      GGS_typeListeArgumentsRoutExterne  var_cas_lare ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
      nt_lexical_5F_parameters_5F_non_5F_empty_5F_list_ (inLexique, var_cas_lare, var_cas_table_attributs) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
      var_cas_a = GGS_typeArgumentRoutine ::constructor_new (inLexique, var_cas_nom, var_cas_lare COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_parameter_i21_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_scanner_5F_parser_23 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
      nt_lexical_5F_parameters_5F_non_5F_empty_5F_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'lexical_when_branches_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_when_5F_branches_5F_list_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeListeTestsEtInstructions  &var_cas_lbs,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  var_cas_lbs = GGS_typeListeTestsEtInstructions ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        GGS_typeListeConditionsLexicales  var_cas_lcl ;
        nt_lexical_5F_test_5F_expression_ (inLexique, var_cas_lcl) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
        GGS_tListeInstructionsLexicales  var_cas_li ;
        nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_li, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
        var_cas_lbs.addAssign_operation (var_cas_lcl, var_cas_li) ;
      switch (select_scanner_5F_parser_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_when_5F_branches_5F_list_i22_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        nt_lexical_5F_test_5F_expression_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
        nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
      switch (select_scanner_5F_parser_24 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_default_5F_branch_i23_ (C_Lexique_galgas_5F_scanner & /* inLexique */,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */,
                                const GGS_tagMap  /* var_cas_inTagMap */,
                                const GGS_bool /* var_cas_inCanSendTerminal */) {
  var_cas_liste_instructions_sinon = GGS_tListeInstructionsLexicales ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_default_5F_branch_i23_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_default_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_default_5F_branch_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_tListeInstructionsLexicales  &var_cas_liste_instructions_sinon,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet,
                                const GGS_tagMap  var_cas_inTagMap,
                                const GGS_bool var_cas_inCanSendTerminal) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
  nt_lexical_5F_instructions_5F_list_ (inLexique, var_cas_liste_instructions_sinon, var_cas_table_des_terminaux, var_cas_table_des_messages_erreur, var_cas_table_attributs, var_cas_table_tables_mots_reserves, var_cas_ioUsedErrorMessageSet, var_cas_inTagMap, var_cas_inCanSendTerminal) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_default_5F_branch_i24_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
  nt_lexical_5F_instructions_5F_list_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_instruction_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &/* var_cas_table_des_messages_erreur */,
                                GGS_typeLexicalAttributesMap  &/* var_cas_table_attributs */,
                                GGS_typeTableTablesDeMotsReserves  &/* var_cas_table_tables_mots_reserves */,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_string automatic_var_38002_0 ;
  GGS_typeListeAttributsSemantiques  automatic_var_38002_1 ;
  GGS_uint  automatic_var_38002_2 ;
  GGS_bool automatic_var_38002_3 ;
  if (var_cas_table_des_terminaux.isBuilt ()) {
    var_cas_table_des_terminaux (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_38002_0, automatic_var_38002_1, automatic_var_38002_2, automatic_var_38002_3 COMMA_SOURCE_FILE_AT_LINE (1269)) ;
  }
  var_cas_instruction = GGS_typeInstructionEmettreSimple ::constructor_new (inLexique, var_cas_nomTerminal COMMA_SOURCE_FILE_AT_LINE (1270)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_instruction_i25_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_instruction_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeInstructionLexicale  &var_cas_instruction,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_typeTableMessagesErreurs  &var_cas_table_des_messages_erreur,
                                GGS_typeLexicalAttributesMap  &var_cas_table_attributs,
                                GGS_typeTableTablesDeMotsReserves  &var_cas_table_tables_mots_reserves,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
  GGS_typeListeRecherche  var_cas_lr = GGS_typeListeRecherche ::constructor_emptyList () ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        GGS_lstring  var_cas_nomAttribut ;
        inLexique.assignFromAttribute_tokenString (var_cas_nomAttribut) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        GGS_AC_galgasType  var_cas_natureAttribut ;
        if (var_cas_table_attributs.isBuilt ()) {
          var_cas_table_attributs (HERE)->method_searchKey (inLexique, var_cas_nomAttribut, var_cas_natureAttribut COMMA_SOURCE_FILE_AT_LINE (1289)) ;
        }
        GGS_typeGalgas_lstring  var_cas_lgs = GGS_typeGalgas_lstring::castFrom (inLexique, var_cas_natureAttribut.getPtr (), true, var_cas_nomAttribut COMMA_SOURCE_FILE_AT_LINE (1290)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
        GGS_lstring  var_cas_listName ;
        inLexique.assignFromAttribute_tokenString (var_cas_listName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        GGS_typeTableMotsReserves  automatic_var_38944_0 ;
        if (var_cas_table_tables_mots_reserves.isBuilt ()) {
          var_cas_table_tables_mots_reserves (HERE)->method_searchKey (inLexique, var_cas_listName, automatic_var_38944_0 COMMA_SOURCE_FILE_AT_LINE (1294)) ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
        var_cas_lr.addAssign_operation (var_cas_nomAttribut, var_cas_listName) ;
      switch (select_scanner_5F_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  GGS_typeEmissionParDefaut  var_cas_ee ;
  nt_lexical_5F_send_5F_or_5F_error_ (inLexique, var_cas_ee, var_cas_table_des_messages_erreur, var_cas_table_des_terminaux, var_cas_ioUsedErrorMessageSet) ;
  var_cas_instruction = GGS_typeInstructionEmettre ::constructor_new (inLexique, var_cas_lr, var_cas_ee COMMA_SOURCE_FILE_AT_LINE (1307)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_instruction_i26_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
      switch (select_scanner_5F_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  nt_lexical_5F_send_5F_or_5F_error_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_or_5F_error_i27_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &/* var_cas_tableMessagesErreurs */,
                                GGS_typeTableDefinitionTerminaux  &var_cas_table_des_terminaux,
                                GGS_stringset  &/* var_cas_ioUsedErrorMessageSet */) {
  GGS_lstring  var_cas_nomTerminal ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomTerminal) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_string automatic_var_39672_0 ;
  GGS_typeListeAttributsSemantiques  automatic_var_39672_1 ;
  GGS_uint  automatic_var_39672_2 ;
  GGS_bool automatic_var_39672_3 ;
  if (var_cas_table_des_terminaux.isBuilt ()) {
    var_cas_table_des_terminaux (HERE)->method_searchKey (inLexique, var_cas_nomTerminal, automatic_var_39672_0, automatic_var_39672_1, automatic_var_39672_2, automatic_var_39672_3 COMMA_SOURCE_FILE_AT_LINE (1320)) ;
  }
  var_cas_emissionParDefaut = GGS_typeEmissionTerminalParDefaut ::constructor_new (inLexique, var_cas_nomTerminal COMMA_SOURCE_FILE_AT_LINE (1321)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_or_5F_error_i27_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_send_or_error'          *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_or_5F_error_i28_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_typeEmissionParDefaut  &var_cas_emissionParDefaut,
                                GGS_typeTableMessagesErreurs  &var_cas_tableMessagesErreurs,
                                GGS_typeTableDefinitionTerminaux  &/* var_cas_table_des_terminaux */,
                                GGS_stringset  &var_cas_ioUsedErrorMessageSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_uint  var_cas_errorMessageIndex ;
  GGS_lstring  automatic_var_40236_0 ;
  if (var_cas_tableMessagesErreurs.isBuilt ()) {
    var_cas_tableMessagesErreurs (HERE)->method_searchKey (inLexique, var_cas_errorMessageName, var_cas_errorMessageIndex, automatic_var_40236_0 COMMA_SOURCE_FILE_AT_LINE (1336)) ;
  }
  var_cas_ioUsedErrorMessageSet.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1337))) ;
  var_cas_emissionParDefaut = GGS_typeEmissionErreurParDefaut ::constructor_new (inLexique, var_cas_errorMessageIndex COMMA_SOURCE_FILE_AT_LINE (1338)) ;
}

//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_lexical_5F_send_5F_or_5F_error_i28_parse (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'extern_routine_or_function_declaration' *
//                                                                           *
//---------------------------------------------------------------------------*

void scanner_parser::rule_scanner_5F_parser_extern_5F_routine_5F_or_5F_function_5F_declaration_i29_ (C_Lexique_galgas_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_extern) COMMA_HERE) ;
  switch (select_scanner_5F_parser_26 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      { bool syntaxRepeat_27 = true ;
        while (syntaxRepeat_27) {
          switch (select_scanner_5F_parser_27 (inLexique)) {
            case 2 : {
              switch (select_scanner_5F_parser_28 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F__21_) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_27 = false ;
              break ;
          }
        }
      }
      switch (select_scanner_5F_parser_29 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          { bool syntaxRepeat_30 = true ;
            while (syntaxRepeat_30) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              switch (select_scanner_5F_parser_30 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_30 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      { bool syntaxRepeat_31 = true ;
        while (syntaxRepeat_31) {
          switch (select_scanner_5F_parser_31 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_31 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

