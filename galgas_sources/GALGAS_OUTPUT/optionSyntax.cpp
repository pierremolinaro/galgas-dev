//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'optionSyntax.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 15th, 2010, at 12h3'57"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "optionSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "optionSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'option_component_start_symbol'      *
//                                                                           *
//---------------------------------------------------------------------------*

void optionSyntax::rule_optionSyntax_option_5F_component_5F_start_5F_symbol_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_optionComponentAST  &var_cas_outOptionComponentRoot) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
  GGS_lstring  var_cas_mOptionComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mOptionComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_commandLineOptionListAST  var_cas_mOptions = GGS_commandLineOptionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_optionSyntax_0 (inLexique)) {
        case 2 : {
          nt_option_ (inLexique, var_cas_mOptions) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outOptionComponentRoot = GGS_optionComponentAST ::constructor_new (inLexique, var_cas_mOptionComponentName, var_cas_mOptions COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'option'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void optionSyntax::rule_optionSyntax_option_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_commandLineOptionListAST  &var_cas_ioCommandLineOptionList) {
  GGS_lstring  var_cas_mOptionTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mOptionTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mOptionInternalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mOptionInternalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lchar  var_cas_mOptionInvocationLetter ;
  inLexique.assignFromAttribute_charValue (var_cas_mOptionInvocationLetter) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
  GGS_lstring  var_cas_mOptionInvocationString ;
  inLexique.assignFromAttribute_tokenString (var_cas_mOptionInvocationString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_mOptionComment ;
  inLexique.assignFromAttribute_tokenString (var_cas_mOptionComment) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_defaultValue = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_optionDefaultValueEnumAST var_cas_optionDefaultValueKind ;
  switch (select_optionSyntax_1 (inLexique)) {
    case 1 : {
      var_cas_optionDefaultValueKind = GGS_optionDefaultValueEnumAST::constructor_noDefaultValue (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
      switch (select_optionSyntax_2 (inLexique)) {
        case 1 : {
          inLexique.assignFromAttribute_tokenString (var_cas_defaultValue) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          var_cas_optionDefaultValueKind = GGS_optionDefaultValueEnumAST::constructor_stringDefaultValue (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_luint  var_cas_v ;
          inLexique.assignFromAttribute_uint_33__32_value (var_cas_v) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
          var_cas_defaultValue.modifier_setString (inLexique, var_cas_v.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (76)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)) ;
          var_cas_optionDefaultValueKind = GGS_optionDefaultValueEnumAST::constructor_unsignedDefaultValue (inLexique COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioCommandLineOptionList.addAssign_operation (var_cas_mOptionTypeName, var_cas_mOptionInternalName, var_cas_mOptionInvocationLetter, var_cas_mOptionInvocationString, var_cas_mOptionComment, var_cas_defaultValue, var_cas_optionDefaultValueKind) ;
}

//---------------------------------------------------------------------------*

