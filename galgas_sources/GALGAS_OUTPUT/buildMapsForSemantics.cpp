//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'buildMapsForSemantics.cpp'                      *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      june 24th, 2007, at 14h54'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//#define TRACE_TREE_WALKING

//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "buildMapsForSemantics.h"
#include "commonSemantics.h"
#include "mda_galgas_LL1_routines.h"
#include "semanticsSLRgrammar.h"
#include "semanticsSemantics.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "buildMapsForSemantics.gTreewalking", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Treewalking routine prototype declaration                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_semanticsComponentRoot (C_Compiler & _inLexique,
                                const cPtr_semanticsComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) ;

static void
_treewalking_routine_semanticDeclaration (C_Compiler & _inLexique,
                                const cPtr_semanticDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_routineDeclaration (C_Compiler & _inLexique,
                                const cPtr_routineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_externRoutineDeclaration (C_Compiler & _inLexique,
                                const cPtr_externRoutineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_classDeclaration (C_Compiler & _inLexique,
                                const cPtr_classDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_formalParameter (C_Compiler & _inLexique,
                                const cPtr_formalParameter * _currentObject,
                                GGS_signature  & var_cas_ioMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_formalParameters (C_Compiler & _inLexique,
                                const cPtr_formalParameters * _currentObject,
                                GGS_signature  & var_cas_outMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_abstractMethodDefinition (C_Compiler & _inLexique,
                                const cPtr_abstractMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_overridenMethodDefinition (C_Compiler & _inLexique,
                                const cPtr_overridenMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_methodDefinition (C_Compiler & _inLexique,
                                const cPtr_methodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_enumDeclaration (C_Compiler & _inLexique,
                                const cPtr_enumDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_mapDeclaration (C_Compiler & _inLexique,
                                const cPtr_mapDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_listDeclaration (C_Compiler & _inLexique,
                                const cPtr_listDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_attributeInCollection (C_Compiler & _inLexique,
                                const cPtr_attributeInCollection * _currentObject,
                                GGS_attributeList  & var_cas_ioAttributeList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

static void
_treewalking_routine_sortedListSortDescriptor (C_Compiler & _inLexique,
                                const cPtr_sortedListSortDescriptor * _currentObject,
                                GGS_sortDescriptorList  & var_cas_ioSortDescriptorList) ;

static void
_treewalking_routine_sortedListDeclaration (C_Compiler & _inLexique,
                                const cPtr_sortedListDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

static void
_treewalking_routine_mapindexDeclaration (C_Compiler & _inLexique,
                                const cPtr_mapindexDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Treewalking routine type declaration                    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void
_treewalking_routine_semanticsComponentRoot_type (C_Compiler & _inLexique,
                                const cPtr_semanticsComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) ;

typedef void
_treewalking_routine_semanticDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_semanticDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_routineDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_routineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_externRoutineDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_externRoutineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_classDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_classDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_formalParameter_type (C_Compiler & _inLexique,
                                const cPtr_formalParameter * _currentObject,
                                GGS_signature  & var_cas_ioMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_formalParameters_type (C_Compiler & _inLexique,
                                const cPtr_formalParameters * _currentObject,
                                GGS_signature  & var_cas_outMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_abstractMethodDefinition_type (C_Compiler & _inLexique,
                                const cPtr_abstractMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_overridenMethodDefinition_type (C_Compiler & _inLexique,
                                const cPtr_overridenMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_methodDefinition_type (C_Compiler & _inLexique,
                                const cPtr_methodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_enumDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_enumDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_mapDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_mapDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_listDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_listDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_attributeInCollection_type (C_Compiler & _inLexique,
                                const cPtr_attributeInCollection * _currentObject,
                                GGS_attributeList  & var_cas_ioAttributeList,
                                GGS_typeMap  & var_cas_ioTypeMap) ;

typedef void
_treewalking_routine_sortedListSortDescriptor_type (C_Compiler & _inLexique,
                                const cPtr_sortedListSortDescriptor * _currentObject,
                                GGS_sortDescriptorList  & var_cas_ioSortDescriptorList) ;

typedef void
_treewalking_routine_sortedListDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_sortedListDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

typedef void
_treewalking_routine_mapindexDeclaration_type (C_Compiler & _inLexique,
                                const cPtr_mapindexDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_ioTypeList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Dispatcher tables                              *
//                                                                           *
//---------------------------------------------------------------------------*


static const uint32 _kSize_instructionMetamodel = 3 ;

static const CTreewalkingVirtualMethod _kDispatcherFor_instructionMetamodel [_kSize_instructionMetamodel] = {
  {3, (void *) _treewalking_routine_semanticDeclaration}, // @semanticDeclaration, defined in 'instructionMetamodel' metamodel
  {4, (void *) _treewalking_routine_routineDeclaration}, // @routineDeclaration, defined in 'instructionMetamodel' metamodel
  {5, (void *) _treewalking_routine_externRoutineDeclaration}, // @externRoutineDeclaration, defined in 'instructionMetamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static const uint32 _kSize_parameterArgumentMetamodel = 2 ;

static const CTreewalkingVirtualMethod _kDispatcherFor_parameterArgumentMetamodel [_kSize_parameterArgumentMetamodel] = {
  {0, (void *) _treewalking_routine_formalParameters}, // @formalParameters, defined in 'parameterArgumentMetamodel' metamodel
  {1, (void *) _treewalking_routine_formalParameter}, // @formalParameter, defined in 'parameterArgumentMetamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static const uint32 _kSize_semanticsMetamodel = 12 ;

static const CTreewalkingVirtualMethod _kDispatcherFor_semanticsMetamodel [_kSize_semanticsMetamodel] = {
  {0, (void *) _treewalking_routine_semanticsComponentRoot}, // @semanticsComponentRoot, defined in 'semanticsMetamodel' metamodel
  {1, (void *) _treewalking_routine_attributeInCollection}, // @attributeInCollection, defined in 'semanticsMetamodel' metamodel
  {10, (void *) _treewalking_routine_listDeclaration}, // @listDeclaration, defined in 'semanticsMetamodel' metamodel
  {11, (void *) _treewalking_routine_sortedListSortDescriptor}, // @sortedListSortDescriptor, defined in 'semanticsMetamodel' metamodel
  {12, (void *) _treewalking_routine_sortedListDeclaration}, // @sortedListDeclaration, defined in 'semanticsMetamodel' metamodel
  {13, (void *) _treewalking_routine_enumDeclaration}, // @enumDeclaration, defined in 'semanticsMetamodel' metamodel
  {2, (void *) _treewalking_routine_mapDeclaration}, // @mapDeclaration, defined in 'semanticsMetamodel' metamodel
  {4, (void *) _treewalking_routine_mapindexDeclaration}, // @mapindexDeclaration, defined in 'semanticsMetamodel' metamodel
  {5, (void *) _treewalking_routine_classDeclaration}, // @classDeclaration, defined in 'semanticsMetamodel' metamodel
  {6, (void *) _treewalking_routine_abstractMethodDefinition}, // @abstractMethodDefinition, defined in 'semanticsMetamodel' metamodel
  {7, (void *) _treewalking_routine_overridenMethodDefinition}, // @overridenMethodDefinition, defined in 'semanticsMetamodel' metamodel
  {8, (void *) _treewalking_routine_methodDefinition}, // @methodDefinition, defined in 'semanticsMetamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static C_TreewalkingDispacher _gDispatcherTree ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'semanticsComponentRoot' treewalking routine implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_semanticsComponentRoot (C_Compiler & _inLexique,
                                const cPtr_semanticsComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @semanticsComponentRoot\n") ; fflush (stdout) ;
  #endif
  const GGS_stringset _var_2130 = _currentObject->mImportedSemanticsComponentSet ;
  const GGS_stringset::element_type * operand_2130 = _var_2130.firstObject () ;
  while ((operand_2130 != NULL)) {
    macroValidPointer (operand_2130) ;
    if (((var_cas_ioImportedComponentSet.reader_hasKey (_inLexique, operand_2130->mKey COMMA_SOURCE_FILE_AT_LINE (39)))._operator_not ()).isBuiltAndTrue ()) {
      if (((operand_2130->mKey)._operator_isNotEqual (_currentObject->mSemanticsComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (40)))).isBuiltAndTrue ()) {
        GGS_lstring  var_cas_sourceFilePath ;
        var_cas_sourceFilePath = GGS_lstring::constructor_new (_inLexique, (((var_cas_inSourceFileDirectory)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_2130->mKey))._operator_concat (GGS_string (true, ".gSemantics")), var_cas_inErrorLocation COMMA_HERE) ;
        GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
        GGS_location  var_cas_endOfSourceFile ;
        GGS_typeList  var_cas_unusedTypeList ;
          var_cas_semanticsComponentRoot = semanticsSLRgrammar::_performParsing (_inLexique,
                                        var_cas_sourceFilePath,
                                        var_cas_endOfSourceFile
                                        COMMA_SOURCE_FILE_AT_LINE (48)) ;
        _walk_throught_buildMapsForSemantics (_inLexique, var_cas_semanticsComponentRoot, var_cas_inSourceFileDirectory, var_cas_inErrorLocation, var_cas_ioImportedComponentSet, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_unusedTypeList) ;
      }
      var_cas_ioImportedComponentSet._addAssign_operation (operand_2130->mKey) ;
    }
    operand_2130 = operand_2130->nextObject () ;
  }
  if ((var_cas_ioImportedComponentSet.reader_hasKey (_inLexique, _currentObject->mSemanticsComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)) COMMA_SOURCE_FILE_AT_LINE (62))).isBuiltAndTrue ()) {
    _currentObject->mSemanticsComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this component is involved in a circularity in 'extends' definitions") COMMA_SOURCE_FILE_AT_LINE (65)) ;
    var_cas_outTypeList._drop_operation () ;
  }else{
    var_cas_outTypeList = GGS_typeList::constructor_emptyList (_inLexique COMMA_HERE) ;
    macroValidPointer (_currentObject) ;
    { GGS__list_semanticDeclaration::element_type * _ptr = _currentObject->mSemanticDeclarationList.firstObject () ;
      while (_ptr != NULL) {
        _treewalking_routine_semanticDeclaration_type * _f = (_treewalking_routine_semanticDeclaration_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
        (* _f) (_inLexique, _ptr, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_outTypeList) ;
        _ptr = _ptr->nextObject () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         'semanticDeclaration' treewalking routine implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_semanticDeclaration (C_Compiler &,
                                const cPtr_semanticDeclaration * /* _currentObject */,
                                GGS_typeMap  & /* var_cas_ioTypeMap */,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @semanticDeclaration\n") ; fflush (stdout) ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         'routineDeclaration' treewalking routine implementation           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_routineDeclaration (C_Compiler & _inLexique,
                                const cPtr_routineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @routineDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_signature  var_cas_methodSignature ;
  { _treewalking_routine_formalParameters_type * _f = (_treewalking_routine_formalParameters_type *) _gDispatcherTree.entry (_currentObject->mFormalParameters.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _currentObject->mFormalParameters.getPtr (), var_cas_methodSignature, var_cas_ioTypeMap) ;
  }
  var_cas_ioRoutineMap.modifier_insertKey (_inLexique, _currentObject->mRoutineName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (93)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'externRoutineDeclaration' treewalking routine implementation        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_externRoutineDeclaration (C_Compiler & _inLexique,
                                const cPtr_externRoutineDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @externRoutineDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_signature  var_cas_methodSignature ;
  { _treewalking_routine_formalParameters_type * _f = (_treewalking_routine_formalParameters_type *) _gDispatcherTree.entry (_currentObject->mFormalParameters.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _currentObject->mFormalParameters.getPtr (), var_cas_methodSignature, var_cas_ioTypeMap) ;
  }
  var_cas_ioRoutineMap.modifier_insertKey (_inLexique, _currentObject->mActionName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (109)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'classDeclaration' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_classDeclaration (C_Compiler & _inLexique,
                                const cPtr_classDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @classDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_superClassIndex ;
  if (((_currentObject->mSuperClassName.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_superClassIndex = GGS_typeMapIndex::constructor_null (_inLexique COMMA_HERE) ;
  }else{
    GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mSuperClassName, var_cas_ioTypeMap, var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (128)) ;
  }
  GGS_attributeList  var_cas_attributeList ;
  var_cas_attributeList = GGS_attributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_attributeInCollection::element_type * _ptr = _currentObject->mAttributeList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_attributeInCollection_type * _f = (_treewalking_routine_attributeInCollection_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_attributeList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_classMethodList  var_cas_classMethodList ;
  var_cas_classMethodList = GGS_classMethodList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_abstractMethodDefinition::element_type * _ptr = _currentObject->mAbstractMethodList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_abstractMethodDefinition_type * _f = (_treewalking_routine_abstractMethodDefinition_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_classMethodList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  macroValidPointer (_currentObject) ;
  { GGS__list_methodDefinition::element_type * _ptr = _currentObject->mMethodList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_methodDefinition_type * _f = (_treewalking_routine_methodDefinition_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_classMethodList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  macroValidPointer (_currentObject) ;
  { GGS__list_overridenMethodDefinition::element_type * _ptr = _currentObject->mOverridenMethodList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_overridenMethodDefinition_type * _f = (_treewalking_routine_overridenMethodDefinition_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_classMethodList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_classGalgasType::constructor_new (_inLexique, _currentObject->mIsAbstract, _currentObject->mClassTypeName, var_cas_superClassIndex, var_cas_attributeList, var_cas_classMethodList COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mClassTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (146)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'formalParameter' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_formalParameter (C_Compiler & _inLexique,
                                const cPtr_formalParameter * _currentObject,
                                GGS_signature  & var_cas_ioMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @formalParameter\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_parameterTypeIndex ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mFormalParameterTypeName, var_cas_ioTypeMap, var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (157)) ;
  var_cas_ioMethodSignature._addAssign_operation (var_cas_parameterTypeIndex, _currentObject->mFormalParameterName, _currentObject->mFormalParameterPassingMode) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'formalParameters' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_formalParameters (C_Compiler & _inLexique,
                                const cPtr_formalParameters * _currentObject,
                                GGS_signature  & var_cas_outMethodSignature,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @formalParameters\n") ; fflush (stdout) ;
  #endif
  var_cas_outMethodSignature = GGS_signature::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_formalParameter::element_type * _ptr = _currentObject->mFormalParameterList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_formalParameter_type * _f = (_treewalking_routine_formalParameter_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_outMethodSignature, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'abstractMethodDefinition' treewalking routine implementation        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_abstractMethodDefinition (C_Compiler & _inLexique,
                                const cPtr_abstractMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @abstractMethodDefinition\n") ; fflush (stdout) ;
  #endif
  GGS_signature  var_cas_methodSignature ;
  { _treewalking_routine_formalParameters_type * _f = (_treewalking_routine_formalParameters_type *) _gDispatcherTree.entry (_currentObject->mSignature.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _currentObject->mSignature.getPtr (), var_cas_methodSignature, var_cas_ioTypeMap) ;
  }
  var_cas_ioClassMethodList._addAssign_operation (_currentObject->mMethodName, var_cas_methodSignature) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'overridenMethodDefinition' treewalking routine implementation       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_overridenMethodDefinition (C_Compiler & _inLexique,
                                const cPtr_overridenMethodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @overridenMethodDefinition\n") ; fflush (stdout) ;
  #endif
  GGS_signature  var_cas_methodSignature ;
  { _treewalking_routine_formalParameters_type * _f = (_treewalking_routine_formalParameters_type *) _gDispatcherTree.entry (_currentObject->mSignature.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _currentObject->mSignature.getPtr (), var_cas_methodSignature, var_cas_ioTypeMap) ;
  }
  var_cas_ioClassMethodList._addAssign_operation (_currentObject->mMethodName, var_cas_methodSignature) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'methodDefinition' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_methodDefinition (C_Compiler & _inLexique,
                                const cPtr_methodDefinition * _currentObject,
                                GGS_classMethodList  & var_cas_ioClassMethodList,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @methodDefinition\n") ; fflush (stdout) ;
  #endif
  GGS_signature  var_cas_methodSignature ;
  { _treewalking_routine_formalParameters_type * _f = (_treewalking_routine_formalParameters_type *) _gDispatcherTree.entry (_currentObject->mSignature.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _currentObject->mSignature.getPtr (), var_cas_methodSignature, var_cas_ioTypeMap) ;
  }
  var_cas_ioClassMethodList._addAssign_operation (_currentObject->mMethodName, var_cas_methodSignature) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'enumDeclaration' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_enumDeclaration (C_Compiler & _inLexique,
                                const cPtr_enumDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @enumDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_enumType::constructor_new (_inLexique, _currentObject->mEnumTypeName, _currentObject->mConstantList COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mEnumTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (221)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'mapDeclaration' treewalking routine implementation             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_mapDeclaration (C_Compiler & _inLexique,
                                const cPtr_mapDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @mapDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_attributeList  var_cas_attributeList ;
  var_cas_attributeList = GGS_attributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_attributeInCollection::element_type * _ptr = _currentObject->mAttributeList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_attributeInCollection_type * _f = (_treewalking_routine_attributeInCollection_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_attributeList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_mapType::constructor_new (_inLexique, _currentObject->mMapTypeName, var_cas_attributeList COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mMapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (243)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'listDeclaration' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_listDeclaration (C_Compiler & _inLexique,
                                const cPtr_listDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @listDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_attributeList  var_cas_attributeList ;
  var_cas_attributeList = GGS_attributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_attributeInCollection::element_type * _ptr = _currentObject->mAttributeList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_attributeInCollection_type * _f = (_treewalking_routine_attributeInCollection_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_attributeList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_listGalgasType::constructor_new (_inLexique, _currentObject->mListTypeName, var_cas_attributeList COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (265)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'attributeInCollection' treewalking routine implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_attributeInCollection (C_Compiler & _inLexique,
                                const cPtr_attributeInCollection * _currentObject,
                                GGS_attributeList  & var_cas_ioAttributeList,
                                GGS_typeMap  & var_cas_ioTypeMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @attributeInCollection\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_index ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mAttributeTypeName, var_cas_ioTypeMap, var_cas_index COMMA_SOURCE_FILE_AT_LINE (275)) ;
  var_cas_ioAttributeList._addAssign_operation (var_cas_index, _currentObject->mAttributeName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      'sortedListSortDescriptor' treewalking routine implementation        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_sortedListSortDescriptor (C_Compiler &,
                                const cPtr_sortedListSortDescriptor * _currentObject,
                                GGS_sortDescriptorList  & var_cas_ioSortDescriptorList) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @sortedListSortDescriptor\n") ; fflush (stdout) ;
  #endif
  var_cas_ioSortDescriptorList._addAssign_operation (_currentObject->mSortedAttributeName, _currentObject->mAscending) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        'sortedListDeclaration' treewalking routine implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_sortedListDeclaration (C_Compiler & _inLexique,
                                const cPtr_sortedListDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @sortedListDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_attributeList  var_cas_attributeList ;
  var_cas_attributeList = GGS_attributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_attributeInCollection::element_type * _ptr = _currentObject->mAttributeList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_attributeInCollection_type * _f = (_treewalking_routine_attributeInCollection_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_attributeList, var_cas_ioTypeMap) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_sortDescriptorList  var_cas_sortDescriptorList ;
  var_cas_sortDescriptorList = GGS_sortDescriptorList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { GGS__list_sortedListSortDescriptor::element_type * _ptr = _currentObject->mSortDescriptorList.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_sortedListSortDescriptor_type * _f = (_treewalking_routine_sortedListSortDescriptor_type *) _gDispatcherTree.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr, var_cas_sortDescriptorList) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_sortedlistGalgasType::constructor_new (_inLexique, _currentObject->mSortedListTypeName, var_cas_attributeList, var_cas_sortDescriptorList COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mSortedListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (310)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         'mapindexDeclaration' treewalking routine implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_mapindexDeclaration (C_Compiler & _inLexique,
                                const cPtr_mapindexDeclaration * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & /* var_cas_ioRoutineMap */,
                                GGS_typeList  & /* var_cas_ioTypeList */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @mapindexDeclaration\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_index ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mMapTypeName, var_cas_ioTypeMap, var_cas_index COMMA_SOURCE_FILE_AT_LINE (325)) ;
  GGS_ACGalgasType  var_cas_t ;
  var_cas_t = GGS_mapindexType::constructor_new (_inLexique, _currentObject->mMapIndexName, var_cas_index, _currentObject->mSearchMethodName, _currentObject->mSearchMethodErrorMessage COMMA_HERE) ;
  var_cas_ioTypeMap.modifier_insertKey (_inLexique, _currentObject->mMapIndexName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (333)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Build Dispatcher Tree                            *
//                                                                           *
//---------------------------------------------------------------------------*

static void _build_dispacher_tree (void) {
  _gDispatcherTree.enterTable (_metamodel_index_for_instructionMetamodel (),
                                _kSize_instructionMetamodel,
                                _kDispatcherFor_instructionMetamodel
                                COMMA_HERE) ;
  _gDispatcherTree.enterTable (_metamodel_index_for_parameterArgumentMetamodel (),
                                _kSize_parameterArgumentMetamodel,
                                _kDispatcherFor_parameterArgumentMetamodel
                                COMMA_HERE) ;
  _gDispatcherTree.enterTable (_metamodel_index_for_semanticsMetamodel (),
                                _kSize_semanticsMetamodel,
                                _kDispatcherFor_semanticsMetamodel
                                COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                               Root routine                                *
//                                                                           *
//---------------------------------------------------------------------------*

void
_walk_throught_buildMapsForSemantics (C_Compiler & _inLexique,
                                const GGS_semanticsComponentRoot & _rootObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) {
  if (_rootObject._isBuilt ()) {
    if (! _gDispatcherTree.isInited ()) {
      _build_dispacher_tree () ;
    }
    _treewalking_routine_semanticsComponentRoot_type * _f = (_treewalking_routine_semanticsComponentRoot_type *) _gDispatcherTree.entry (_rootObject.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _rootObject.getPtr (), var_cas_inSourceFileDirectory, var_cas_inErrorLocation, var_cas_ioImportedComponentSet, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_outTypeList) ;
  }else{
    var_cas_outTypeList._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

