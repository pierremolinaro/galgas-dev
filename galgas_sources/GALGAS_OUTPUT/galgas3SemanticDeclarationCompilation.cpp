//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  File 'galgas3SemanticDeclarationCompilation.cpp'                                   *
//                                             Generated by version 3.0.0                                              *
//                                         september 27th, 2014, at 12h28'55"                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "templateGrammar.h"
#include "galgas_cli_options.h"
#include "grammarLL1grammar.h"
#include "syntaxSLRgrammar.h"
#include "lexiqueLL1grammar.h"
#include "semanticsSLRgrammar.h"
#include "galgas3SemanticDeclarationCompilation.h"


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'compileSemanticDeclarationsGalgas3'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_compileSemanticDeclarationsGalgas_33_ (const GALGAS_location constinArgument_inEndOfProjectSourceFile,
                                                    const GALGAS_semanticDeclarationListAST constinArgument_inSemanticDeclarationList,
                                                    const GALGAS_galgas_33_OptionComponentListAST constinArgument_inOptionComponentList,
                                                    const GALGAS_galgas_33_LexiqueComponentListAST constinArgument_inLexiqueComponentList,
                                                    const GALGAS_galgas_33_GrammarComponentListAST constinArgument_inGrammarComponentList,
                                                    GALGAS_semanticContext & outArgument_outSemanticContext,
                                                    GALGAS_semanticDeclarationSortedListForGeneration & outArgument_outSemanticDeclarationSortedListForGeneration,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticContext.drop () ; // Release 'out' argument
  outArgument_outSemanticDeclarationSortedListForGeneration.drop () ; // Release 'out' argument
  inCompiler->printMessage (GALGAS_string ("*** Building context\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 36)) ;
  GALGAS_semanticDeclarationListAST var_semanticDeclarationListWithPredefinedTypes = constinArgument_inSemanticDeclarationList ;
  {
  routine_appendPredefinedTypesASTs (var_semanticDeclarationListWithPredefinedTypes, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 39)) ;
  }
  GALGAS_semanticDeclarationListAST var_sortedSemanticDeclarationListAST ;
  {
  routine_buildGalgas_33_SemanticContext (var_semanticDeclarationListWithPredefinedTypes, constinArgument_inEndOfProjectSourceFile, outArgument_outSemanticContext, var_sortedSemanticDeclarationListAST, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 41)) ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (gOption_galgas_5F_builtin_5F_options_verbose_5F_output.reader_value ()).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->printMessage (GALGAS_string ("*** Semantic analysis\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 49)) ;
  }
  GALGAS_stringlist var_implementationFileIncludeList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 52)) ;
  GALGAS_optionComponentMapForSemanticAnalysis var_optionComponentMapForSemanticAnalysis ;
  {
  routine_buildGalgas_33_OptionComponentMapForSemanticAnalysis (constinArgument_inOptionComponentList, var_optionComponentMapForSemanticAnalysis, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 53)) ;
  }
  outArgument_outSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis = var_optionComponentMapForSemanticAnalysis ;
  cEnumerator_optionComponentMapForSemanticAnalysis enumerator_3066 (var_optionComponentMapForSemanticAnalysis, kEnumeration_up) ;
  while (enumerator_3066.hasCurrentObject ()) {
    const enumGalgasBool test_1 = enumerator_3066.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 59)).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_implementationFileIncludeList.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_3066.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 60))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 60)) ;
    }
    enumerator_3066.gotoNextObject () ;
  }
  cEnumerator_galgas_33_LexiqueComponentListAST enumerator_3289 (constinArgument_inLexiqueComponentList, kEnumeration_up) ;
  while (enumerator_3289.hasCurrentObject ()) {
    GALGAS_terminalMap var_terminalMap ;
    {
    routine_buildTerminalMap (enumerator_3289.current (HERE), var_terminalMap, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 65)) ;
    }
    {
    outArgument_outSemanticContext.mAttribute_mLexiqueComponentMapForSemanticAnalysis.modifier_insertKey (enumerator_3289.current (HERE).mAttribute_mLexiqueComponentName, var_terminalMap, enumerator_3289.current (HERE).mAttribute_mIndexingListAST, enumerator_3289.current (HERE).mAttribute_mIndexingDirectory, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 66)) ;
    }
    enumerator_3289.gotoNextObject () ;
  }
  {
  routine_buildGalgas_33_GrammarComponentMapForSemanticAnalysis (constinArgument_inGrammarComponentList, outArgument_outSemanticContext, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 74)) ;
  }
  cEnumerator_lstringlist enumerator_3856 (outArgument_outSemanticContext.mAttribute_mTypeMap.reader_unsolvedProxyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 79)), kEnumeration_up) ;
  while (enumerator_3856.hasCurrentObject ()) {
    GALGAS_location location_2 (enumerator_3856.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_2, GALGAS_string ("the '").operator_concat (enumerator_3856.current_mValue (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 80))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 80)).operator_concat (GALGAS_string ("' type is undefined")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 80))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 80)) ;
    enumerator_3856.gotoNextObject () ;
  }
  outArgument_outSemanticDeclarationSortedListForGeneration = GALGAS_semanticDeclarationSortedListForGeneration::constructor_emptySortedList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 83)) ;
  const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 84)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_predefinedTypes var_predefinedTypes = function_buildPredefinedTypes (outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 85)) ;
    cEnumerator_semanticDeclarationListAST enumerator_4248 (var_sortedSemanticDeclarationListAST, kEnumeration_up) ;
    while (enumerator_4248.hasCurrentObject ()) {
      callCategoryMethod_semanticAnalysis ((const cPtr_semanticDeclarationAST *) enumerator_4248.current_mSemanticDeclaration (HERE).ptr (), outArgument_outSemanticContext, var_predefinedTypes, outArgument_outSemanticDeclarationSortedListForGeneration, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 87)) ;
      enumerator_4248.gotoNextObject () ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            Routine 'buildGalgas3GrammarComponentMapForSemanticAnalysis'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildGalgas_33_GrammarComponentMapForSemanticAnalysis (const GALGAS_galgas_33_GrammarComponentListAST constinArgument_inGrammarComponentList,
                                                                    GALGAS_semanticContext & ioArgument_ioSemanticContext,
                                                                    C_Compiler * inCompiler
                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_galgas_33_GrammarComponentListAST enumerator_4783 (constinArgument_inGrammarComponentList, kEnumeration_up) ;
  while (enumerator_4783.hasCurrentObject ()) {
    GALGAS_grammarLabelMap var_grammarLabelMap = GALGAS_grammarLabelMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 105)) ;
    cEnumerator_nonTerminalLabelListAST enumerator_4905 (enumerator_4783.current_mStartSymbolLabelList (HERE), kEnumeration_up) ;
    while (enumerator_4905.hasCurrentObject ()) {
      GALGAS_formalParameterSignature var_formalArgumentList = GALGAS_formalParameterSignature::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 108)) ;
      cEnumerator_formalParameterListAST enumerator_5034 (enumerator_4905.current_mFormalArgumentList (HERE), kEnumeration_up) ;
      while (enumerator_5034.hasCurrentObject ()) {
        var_formalArgumentList.addAssign_operation (enumerator_5034.current_mFormalSelector (HERE), GALGAS_unifiedTypeMapProxy::constructor_searchKey (ioArgument_ioSemanticContext.mAttribute_mTypeMap, enumerator_5034.current_mFormalArgumentTypeName (HERE), inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 112)), enumerator_5034.current_mFormalArgumentPassingMode (HERE), enumerator_5034.current_mFormalArgumentName (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 110)) ;
        enumerator_5034.gotoNextObject () ;
      }
      {
      var_grammarLabelMap.modifier_insertKey (enumerator_4905.current_mLabelName (HERE), var_formalArgumentList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 117)) ;
      }
      enumerator_4905.gotoNextObject () ;
    }
    {
    ioArgument_ioSemanticContext.mAttribute_mGrammarMap.modifier_insertGrammar (enumerator_4783.current_mGrammarComponentName (HERE), var_grammarLabelMap, enumerator_4783.current_mHasIndexing (HERE).mAttribute_bool, enumerator_4783.current_mHasTranslateFeature (HERE), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 123)) ;
    }
    enumerator_4783.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'buildGalgas3SemanticContext'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildGalgas_33_SemanticContext (const GALGAS_semanticDeclarationListAST constinArgument_inSemanticDeclarationList,
                                             const GALGAS_location constinArgument_inEndOfProjectSourceFile,
                                             GALGAS_semanticContext & outArgument_outSemanticContext,
                                             GALGAS_semanticDeclarationListAST & outArgument_outSortedSemanticDeclarationListAST,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outSemanticContext.drop () ; // Release 'out' argument
  outArgument_outSortedSemanticDeclarationListAST.drop () ; // Release 'out' argument
  GALGAS_semanticDeclarationListAST var_semanticDeclarationList = constinArgument_inSemanticDeclarationList ;
  cEnumerator_semanticDeclarationListAST enumerator_6465 (constinArgument_inSemanticDeclarationList, kEnumeration_up) ;
  while (enumerator_6465.hasCurrentObject ()) {
    callCategoryMethod_addAssociatedElement ((const cPtr_semanticDeclarationAST *) enumerator_6465.current_mSemanticDeclaration (HERE).ptr (), var_semanticDeclarationList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 147)) ;
    enumerator_6465.gotoNextObject () ;
  }
  GALGAS_semanticTypePrecedenceGraph var_semanticTypePrecedenceGraph = GALGAS_semanticTypePrecedenceGraph::constructor_emptyGraph (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 153)) ;
  GALGAS_categoryMethodMapForBuildingContext var_categoryMethodMapForBuildingContext = GALGAS_categoryMethodMapForBuildingContext::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 154)) ;
  GALGAS_categoryReaderMapForBuildingContext var_categoryReaderMapForBuildingContext = GALGAS_categoryReaderMapForBuildingContext::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 155)) ;
  GALGAS_categoryModifierMapForBuildingContext var_categoryModifierMapForBuildingContext = GALGAS_categoryModifierMapForBuildingContext::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 156)) ;
  GALGAS_semanticDeclarationListAST var_categoryOverrideDefinitionList = GALGAS_semanticDeclarationListAST::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 157)) ;
  cEnumerator_semanticDeclarationListAST enumerator_7198 (var_semanticDeclarationList, kEnumeration_up) ;
  while (enumerator_7198.hasCurrentObject ()) {
    callCategoryMethod_enterDeclarationInGraph ((const cPtr_semanticDeclarationAST *) enumerator_7198.current_mSemanticDeclaration (HERE).ptr (), var_semanticTypePrecedenceGraph, var_categoryMethodMapForBuildingContext, var_categoryReaderMapForBuildingContext, var_categoryModifierMapForBuildingContext, var_categoryOverrideDefinitionList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 159)) ;
    enumerator_7198.gotoNextObject () ;
  }
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_semanticTypePrecedenceGraph.reader_undefinedNodeCount (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 167)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_lstringlist enumerator_7618 (var_semanticTypePrecedenceGraph.reader_undefinedNodeReferenceList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 168)), kEnumeration_up) ;
    while (enumerator_7618.hasCurrentObject ()) {
      GALGAS_location location_1 (enumerator_7618.current_mValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (enumerator_7618.current_mValue (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 169))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 169)).operator_concat (GALGAS_string ("' type is not defined")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 169))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 169)) ;
      enumerator_7618.gotoNextObject () ;
    }
    inCompiler->emitSemanticError (constinArgument_inEndOfProjectSourceFile, GALGAS_string ("semantic analysis not performed, due to undefined type error(s)")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 171)) ;
    outArgument_outSemanticContext.drop () ; // Release error dropped variable
    outArgument_outSortedSemanticDeclarationListAST.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    GALGAS_semanticDeclarationListAST var_unsortedSemanticDeclarationListAST ;
    GALGAS_lstringlist var_unsortedNodeKeyList ;
    GALGAS_lstringlist joker_7975_0 ; // Joker input parameter
    var_semanticTypePrecedenceGraph.method_topologicalSort (outArgument_outSortedSemanticDeclarationListAST, joker_7975_0, var_unsortedSemanticDeclarationListAST, var_unsortedNodeKeyList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 173)) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsStrictSup, var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 179)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_string var_s = GALGAS_string ("semantic analysis not performed, ").operator_concat (var_unsortedSemanticDeclarationListAST.reader_length (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 180)).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 180))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 180)).operator_concat (GALGAS_string (" declarations are involved in circular definition:")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 180)) ;
      cEnumerator_semanticDeclarationListAST enumerator_8370 (var_unsortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_8370.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "-  ").operator_concat (callCategoryReader_keyRepresentation ((const cPtr_semanticDeclarationAST *) enumerator_8370.current_mSemanticDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 182))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 182))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 182)) ;
        enumerator_8370.gotoNextObject () ;
      }
      inCompiler->emitSemanticError (constinArgument_inEndOfProjectSourceFile, var_s  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 184)) ;
      outArgument_outSemanticContext.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_2) {
      outArgument_outSortedSemanticDeclarationListAST.dotAssign_operation (var_categoryOverrideDefinitionList  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 187)) ;
      outArgument_outSemanticContext = GALGAS_semanticContext::constructor_new (GALGAS_unifiedTypeMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 190)), GALGAS_routineMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 191)), GALGAS_functionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 192)), GALGAS_filewrapperMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 193)), GALGAS_grammarMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 194)), GALGAS_optionComponentMapForSemanticAnalysis::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 195)), GALGAS_lexiqueComponentMapForSemanticAnalysis::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 196))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 189)) ;
      cEnumerator_semanticDeclarationListAST enumerator_9119 (outArgument_outSortedSemanticDeclarationListAST, kEnumeration_up) ;
      while (enumerator_9119.hasCurrentObject ()) {
        callCategoryMethod_enterInSemanticContext ((const cPtr_semanticDeclarationAST *) enumerator_9119.current_mSemanticDeclaration (HERE).ptr (), var_categoryMethodMapForBuildingContext, var_categoryReaderMapForBuildingContext, var_categoryModifierMapForBuildingContext, outArgument_outSemanticContext, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 200)) ;
        enumerator_9119.gotoNextObject () ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                             Routine 'buildGalgas3OptionComponentMapForSemanticAnalysis'                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildGalgas_33_OptionComponentMapForSemanticAnalysis (const GALGAS_galgas_33_OptionComponentListAST constinArgument_inOptionComponentList,
                                                                   GALGAS_optionComponentMapForSemanticAnalysis & outArgument_outOptionComponentMapForSemanticAnalysis,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outOptionComponentMapForSemanticAnalysis.drop () ; // Release 'out' argument
  outArgument_outOptionComponentMapForSemanticAnalysis = GALGAS_optionComponentMapForSemanticAnalysis::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 221)) ;
  cEnumerator_galgas_33_OptionComponentListAST enumerator_10105 (constinArgument_inOptionComponentList, kEnumeration_up) ;
  while (enumerator_10105.hasCurrentObject ()) {
    GALGAS_commandLineOptionMap var_boolOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 223)) ;
    GALGAS_commandLineOptionMap var_uintOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 224)) ;
    GALGAS_commandLineOptionMap var_stringOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 225)) ;
    GALGAS_stringset var_optionNameSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 226)) ;
    cEnumerator_commandLineOptionListAST enumerator_10353 (enumerator_10105.current_mOptions (HERE), kEnumeration_up) ;
    while (enumerator_10353.hasCurrentObject ()) {
      const enumGalgasBool test_0 = var_optionNameSet.reader_hasKey (enumerator_10353.current_mOptionInternalName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 228)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 228)).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_location location_1 (enumerator_10353.current_mOptionInternalName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").add_operation (enumerator_10353.current_mOptionInternalName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 229)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 229)).add_operation (GALGAS_string ("' command line option has been already declared"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 229))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 229)) ;
      }else if (kBoolFalse == test_0) {
        const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionTypeName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 230)).objectCompare (GALGAS_string ("bool"))).boolEnum () ;
        if (kBoolTrue == test_2) {
          {
          var_boolOptionMap.modifier_insertKey (enumerator_10353.current_mOptionInternalName (HERE), enumerator_10353.current_mOptionInvocationLetter (HERE).reader_char (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 233)), enumerator_10353.current_mOptionInvocationString (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 234)), enumerator_10353.current_mOptionComment (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 235)), GALGAS_string ("false"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 231)) ;
          }
          const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, enumerator_10353.current_mOptionDefaultValueKind (HERE).objectCompare (GALGAS_optionDefaultValueEnumAST::constructor_noDefaultValue (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 238)))).boolEnum () ;
          if (kBoolTrue == test_3) {
            GALGAS_location location_4 (enumerator_10353.current_mOptionDefaultValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, GALGAS_string ("an @bool option cannot have a default value (default value is allways false)")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 239)) ;
          }
        }else if (kBoolFalse == test_2) {
          const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionTypeName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 241)).objectCompare (GALGAS_string ("uint"))).boolEnum () ;
          if (kBoolTrue == test_5) {
            {
            GALGAS_string temp_6 ;
            const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionDefaultValue (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 247)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
            if (kBoolTrue == test_7) {
              temp_6 = GALGAS_string ("0") ;
            }else if (kBoolFalse == test_7) {
              temp_6 = enumerator_10353.current_mOptionDefaultValue (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 247)) ;
            }
            var_uintOptionMap.modifier_insertKey (enumerator_10353.current_mOptionInternalName (HERE), enumerator_10353.current_mOptionInvocationLetter (HERE).reader_char (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 244)), enumerator_10353.current_mOptionInvocationString (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 245)), enumerator_10353.current_mOptionComment (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 246)), temp_6, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 242)) ;
            }
            const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionDefaultValueKind (HERE).objectCompare (GALGAS_optionDefaultValueEnumAST::constructor_stringDefaultValue (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 249)))).boolEnum () ;
            if (kBoolTrue == test_8) {
              GALGAS_location location_9 (enumerator_10353.current_mOptionDefaultValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_9, GALGAS_string ("an @uint option default value cannot be an @string value")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 250)) ;
            }
          }else if (kBoolFalse == test_5) {
            const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionTypeName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 252)).objectCompare (GALGAS_string ("string"))).boolEnum () ;
            if (kBoolTrue == test_10) {
              {
              var_stringOptionMap.modifier_insertKey (enumerator_10353.current_mOptionInternalName (HERE), enumerator_10353.current_mOptionInvocationLetter (HERE).reader_char (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 255)), enumerator_10353.current_mOptionInvocationString (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 256)), enumerator_10353.current_mOptionComment (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 257)), enumerator_10353.current_mOptionDefaultValue (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 258)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 253)) ;
              }
              const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, enumerator_10353.current_mOptionDefaultValueKind (HERE).objectCompare (GALGAS_optionDefaultValueEnumAST::constructor_unsignedDefaultValue (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 260)))).boolEnum () ;
              if (kBoolTrue == test_11) {
                GALGAS_location location_12 (enumerator_10353.current_mOptionDefaultValue (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_12, GALGAS_string ("an @string option default value cannot be an @uint value")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 261)) ;
              }
            }else if (kBoolFalse == test_10) {
              GALGAS_location location_13 (enumerator_10353.current_mOptionTypeName (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_13, GALGAS_string ("only the @bool, @uint or @string types are allowed here")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 264)) ;
            }
          }
        }
      }
      var_optionNameSet.addAssign_operation (enumerator_10353.current_mOptionInternalName (HERE).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 266))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 266)) ;
      enumerator_10353.gotoNextObject () ;
    }
    {
    outArgument_outOptionComponentMapForSemanticAnalysis.modifier_insertKey (enumerator_10105.current_mOptionComponentName (HERE), GALGAS_bool (false), var_boolOptionMap, var_uintOptionMap, var_stringOptionMap, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 268)) ;
    }
    enumerator_10105.gotoNextObject () ;
  }
  const enumGalgasBool test_14 = outArgument_outOptionComponentMapForSemanticAnalysis.reader_hasKey (GALGAS_string ("galgas_builtin_options") COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 277)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 277)).boolEnum () ;
  if (kBoolTrue == test_14) {
    GALGAS__32_stringlist var_optionNameList = GALGAS_application::constructor_boolOptionNameList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 278)) ;
    GALGAS_commandLineOptionMap var_boolOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 279)) ;
    cEnumerator__32_stringlist enumerator_12790 (var_optionNameList, kEnumeration_up) ;
    while (enumerator_12790.hasCurrentObject ()) {
      {
      var_boolOptionMap.modifier_insertKey (GALGAS_lstring::constructor_new (enumerator_12790.current_mValue_31_ (HERE), inCompiler->here ()  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 282)), GALGAS_application::constructor_boolOptionInvocationLetter (enumerator_12790.current_mValue_30_ (HERE), enumerator_12790.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 283)), GALGAS_application::constructor_boolOptionInvocationString (enumerator_12790.current_mValue_30_ (HERE), enumerator_12790.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 284)), GALGAS_application::constructor_boolOptionCommentString (enumerator_12790.current_mValue_30_ (HERE), enumerator_12790.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 285)), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 281)) ;
      }
      enumerator_12790.gotoNextObject () ;
    }
    var_optionNameList = GALGAS_application::constructor_uintOptionNameList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 290)) ;
    GALGAS_commandLineOptionMap var_uintOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 291)) ;
    cEnumerator__32_stringlist enumerator_13266 (var_optionNameList, kEnumeration_up) ;
    while (enumerator_13266.hasCurrentObject ()) {
      {
      var_uintOptionMap.modifier_insertKey (GALGAS_lstring::constructor_new (enumerator_13266.current_mValue_31_ (HERE), inCompiler->here ()  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 294)), GALGAS_application::constructor_uintOptionInvocationLetter (enumerator_13266.current_mValue_30_ (HERE), enumerator_13266.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 295)), GALGAS_application::constructor_uintOptionInvocationString (enumerator_13266.current_mValue_30_ (HERE), enumerator_13266.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 296)), GALGAS_application::constructor_uintOptionCommentString (enumerator_13266.current_mValue_30_ (HERE), enumerator_13266.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 297)), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 293)) ;
      }
      enumerator_13266.gotoNextObject () ;
    }
    var_optionNameList = GALGAS_application::constructor_stringOptionNameList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 302)) ;
    GALGAS_commandLineOptionMap var_stringOptionMap = GALGAS_commandLineOptionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 303)) ;
    cEnumerator__32_stringlist enumerator_13746 (var_optionNameList, kEnumeration_up) ;
    while (enumerator_13746.hasCurrentObject ()) {
      {
      var_stringOptionMap.modifier_insertKey (GALGAS_lstring::constructor_new (enumerator_13746.current_mValue_31_ (HERE), inCompiler->here ()  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 306)), GALGAS_application::constructor_stringOptionInvocationLetter (enumerator_13746.current_mValue_30_ (HERE), enumerator_13746.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 307)), GALGAS_application::constructor_stringOptionInvocationString (enumerator_13746.current_mValue_30_ (HERE), enumerator_13746.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 308)), GALGAS_application::constructor_stringOptionCommentString (enumerator_13746.current_mValue_30_ (HERE), enumerator_13746.current_mValue_31_ (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 309)), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 305)) ;
      }
      enumerator_13746.gotoNextObject () ;
    }
    {
    outArgument_outOptionComponentMapForSemanticAnalysis.modifier_insertKey (GALGAS_lstring::constructor_new (GALGAS_string ("galgas_builtin_options"), inCompiler->here ()  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 315)), GALGAS_bool (true), var_boolOptionMap, var_uintOptionMap, var_stringOptionMap, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 314)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Once function 'definitionGroupAmount'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_uint onceFunction_definitionGroupAmount (C_Compiler * /* inCompiler */
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint result_outResult ; // Returned variable
  result_outResult = GALGAS_uint ((uint32_t) 100U) ;
//---
  return result_outResult ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_definitionGroupAmount = false ;
static GALGAS_uint gOnceFunctionResult_definitionGroupAmount ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint function_definitionGroupAmount (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_definitionGroupAmount) {
    gOnceFunctionResult_definitionGroupAmount = onceFunction_definitionGroupAmount (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_definitionGroupAmount = true ;
  }
  return gOnceFunctionResult_definitionGroupAmount ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_definitionGroupAmount (void) {
  gOnceFunctionResult_definitionGroupAmount.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_definitionGroupAmount (NULL,
                                                                   releaseOnceFunctionResult_definitionGroupAmount) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_definitionGroupAmount [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_definitionGroupAmount (C_Compiler * inCompiler,
                                                                      const cObjectArray & /* inEffectiveParameterArray */,
                                                                      const GALGAS_location & /* inErrorLocation */
                                                                      COMMA_LOCATION_ARGS) {
  return function_definitionGroupAmount (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_definitionGroupAmount ("definitionGroupAmount",
                                                                       functionWithGenericHeader_definitionGroupAmount,
                                                                       & kTypeDescriptor_GALGAS_uint,
                                                                       0,
                                                                       functionArgs_definitionGroupAmount) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'generateSemanticDeclarationsGalgas3'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateSemanticDeclarationsGalgas_33_ (const GALGAS_string constinArgument_inProductDirectory,
                                                     const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                     const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                                     GALGAS_stringlist & ioArgument_ioToolProductFileList,
                                                     GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 341)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (gOption_galgas_5F_cli_5F_options_generateOneHeader.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_1) {
      {
      routine_generateOneBigHeader (constinArgument_inProductDirectory, constinArgument_inSemanticDeclarationSortedListForGeneration, ioArgument_ioAllProductFileSet, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 343)) ;
      }
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = function_generateFewHeaderFiles (inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 348)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 348)).boolEnum () ;
      if (kBoolTrue == test_2) {
        {
        routine_generateManyHeaders (constinArgument_inProductDirectory, constinArgument_inSemanticDeclarationSortedListForGeneration, ioArgument_ioAllProductFileSet, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 356)) ;
        }
      }
    }
    const enumGalgasBool test_3 = GALGAS_bool (gOption_galgas_5F_cli_5F_options_generateManyFiles.reader_value ()).boolEnum () ;
    if (kBoolTrue == test_3) {
      {
      routine_generateManyImplementationFiles (constinArgument_inProductDirectory, constinArgument_inSemanticContext, constinArgument_inSemanticDeclarationSortedListForGeneration, ioArgument_ioToolProductFileList, ioArgument_ioAllProductFileSet, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 363)) ;
      }
    }else if (kBoolFalse == test_3) {
      const enumGalgasBool test_4 = function_generateFewHeaderFiles (inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 370)).boolEnum () ;
      if (kBoolTrue == test_4) {
        {
        routine_generateFewImplementationFilesWithFewHeaders (constinArgument_inProductDirectory, constinArgument_inSemanticContext, constinArgument_inSemanticDeclarationSortedListForGeneration, ioArgument_ioToolProductFileList, ioArgument_ioAllProductFileSet, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 371)) ;
        }
      }else if (kBoolFalse == test_4) {
        {
        routine_generateFewImplementationFiles (constinArgument_inProductDirectory, constinArgument_inSemanticContext, constinArgument_inSemanticDeclarationSortedListForGeneration, ioArgument_ioToolProductFileList, ioArgument_ioAllProductFileSet, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 379)) ;
        }
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'generateManyHeaders'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateManyHeaders (const GALGAS_string constinArgument_inProductDirectory,
                                  const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                  GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringlist var_headerInclusionList_31_ = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 398)) ;
  GALGAS_stringlist var_headerInclusionList_32_ = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 399)) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_16876 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_16876.hasCurrentObject ()) {
    const enumGalgasBool test_0 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 401)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 401)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_stringset var_inclusionSet_31_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 402)) ;
      GALGAS_string var_headerDef_31_ ;
      callCategoryMethod_appendDeclaration_31_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), var_inclusionSet_31_, var_headerDef_31_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 403)) ;
      GALGAS_string var_headerIncludes_31_ = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_17118 (var_inclusionSet_31_, kEnumeration_up) ;
      while (enumerator_17118.hasCurrentObject ()) {
        var_headerIncludes_31_.dotAssign_operation (GALGAS_string ("#include \"").operator_concat (enumerator_17118.current_key (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 406)).operator_concat (GALGAS_string (".h\"\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 406))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 406)) ;
        enumerator_17118.gotoNextObject () ;
      }
      var_headerIncludes_31_.dotAssign_operation (var_headerDef_31_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 408)) ;
      GALGAS_stringset var_inclusionSet_32_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 409)) ;
      GALGAS_string var_headerDef_32_ ;
      callCategoryMethod_appendDeclaration_32_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), GALGAS_bool (true), constinArgument_inProductDirectory, var_inclusionSet_32_, var_headerDef_32_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 410)) ;
      GALGAS_string var_headerIncludes_32_ = GALGAS_string::makeEmptyString () ;
      cEnumerator_stringset enumerator_17454 (var_inclusionSet_32_, kEnumeration_up) ;
      while (enumerator_17454.hasCurrentObject ()) {
        var_headerIncludes_32_.dotAssign_operation (GALGAS_string ("#include \"").operator_concat (enumerator_17454.current_key (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 413)).operator_concat (GALGAS_string (".h\"\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 413))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 413)) ;
        enumerator_17454.gotoNextObject () ;
      }
      var_headerIncludes_32_.dotAssign_operation (var_headerDef_32_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 415)) ;
      if (callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 417)).isValid ()) {
        switch (callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 417)).enumValue ()) {
        case GALGAS_headerKind::kNotBuilt:
          break ;
        case GALGAS_headerKind::kEnum_noHeader: {
          const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_headerIncludes_31_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_1) {
            GALGAS_location location_2 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 420)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_2, GALGAS_string ("'noHeader' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 420)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes1' string is not empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 420))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 420)) ;
          }
          const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, var_headerIncludes_32_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_3) {
            GALGAS_location location_4 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 423)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, GALGAS_string ("'noHeader' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 423)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes2' string is not empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 423))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 423)) ;
          }
          } break ;
        case GALGAS_headerKind::kEnum_oneHeader: {
          const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, var_headerIncludes_31_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_5) {
            GALGAS_location location_6 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 427)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_6, GALGAS_string ("'oneHeader' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 427)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes1' string is empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 427))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 427)) ;
          }
          const enumGalgasBool test_7 = GALGAS_bool (kIsNotEqual, var_headerIncludes_32_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_7) {
            GALGAS_location location_8 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 430)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticWarning (location_8, GALGAS_string ("'oneHeader' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 430)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes2' string is not empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 430))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 430)) ;
          }
          } break ;
        case GALGAS_headerKind::kEnum_twoHeaders: {
          const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, var_headerIncludes_31_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_9) {
            GALGAS_location location_10 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 434)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticWarning (location_10, GALGAS_string ("'twoHeaders' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 434)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes1' string is empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 434))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 434)) ;
          }
          const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, var_headerIncludes_32_.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_11) {
            GALGAS_location location_12 (GALGAS_string::makeEmptyString ().reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 437)).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticWarning (location_12, GALGAS_string ("'twoHeaders' setting for the '").operator_concat (enumerator_16876.current_mMessage (HERE)  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 437)).operator_concat (GALGAS_string ("' declaration, and 'headerIncludes2' string is empty")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 437))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 437)) ;
          }
          } break ;
        }
      }
      const enumGalgasBool test_13 = GALGAS_bool (kIsNotEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 441)).objectCompare (GALGAS_headerKind::constructor_noHeader (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 441)))).boolEnum () ;
      if (kBoolTrue == test_13) {
        GALGAS_string var_headerString = GALGAS_string ("#ifndef ").operator_concat (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 442)).reader_identifierRepresentation (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 442))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 442)).operator_concat (GALGAS_string ("_1_DEFINED\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 442)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#define ").operator_concat (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 443)).reader_identifierRepresentation (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 443))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 443)).operator_concat (GALGAS_string ("_1_DEFINED\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 443))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 443)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 444)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#include \"galgas2/predefined-types.h\"\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 445)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 446)) ;
        var_headerString.dotAssign_operation (var_headerIncludes_31_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 447)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 448)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 449)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#endif\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 450)) ;
        GALGAS_string temp_14 ;
        const enumGalgasBool test_15 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 451)).objectCompare (GALGAS_headerKind::constructor_twoHeaders (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 451)))).boolEnum () ;
        if (kBoolTrue == test_15) {
          temp_14 = GALGAS_string ("-1") ;
        }else if (kBoolFalse == test_15) {
          temp_14 = GALGAS_string::makeEmptyString () ;
        }
        GALGAS_string var_headerFileName = callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 451)).add_operation (temp_14, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 451)) ;
        var_headerInclusionList_31_.addAssign_operation (var_headerFileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 452)) ;
        ioArgument_ioAllProductFileSet.addAssign_operation (var_headerFileName.operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 453))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 453)) ;
        {
        GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_headerFileName.operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 456)), var_headerString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 454)) ;
        }
      }
      const enumGalgasBool test_16 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 461)).objectCompare (GALGAS_headerKind::constructor_twoHeaders (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 461)))).boolEnum () ;
      if (kBoolTrue == test_16) {
        GALGAS_string var_headerString = GALGAS_string ("#ifndef ").operator_concat (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 462)).reader_identifierRepresentation (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 462))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 462)).operator_concat (GALGAS_string ("_DEFINED\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 462)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#define ").operator_concat (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 463)).reader_identifierRepresentation (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 463))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 463)).operator_concat (GALGAS_string ("_DEFINED\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 463))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 463)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 464)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#include \"").operator_concat (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 465))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 465)).operator_concat (GALGAS_string ("-1.h\"\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 465))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 465)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("\n"
          "//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 466)) ;
        var_headerString.dotAssign_operation (var_headerIncludes_32_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 467)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 468)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("//---------------------------------------------------------------------------------------------------------------------*\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 469)) ;
        var_headerString.dotAssign_operation (GALGAS_string ("#endif\n"
          "\n")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 470)) ;
        var_headerInclusionList_32_.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 471))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 471)) ;
        ioArgument_ioAllProductFileSet.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 472)).operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 472))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 472)) ;
        {
        GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_16876.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 475)).operator_concat (GALGAS_string (".h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 475)), var_headerString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 473)) ;
        }
      }
    }
    enumerator_16876.gotoNextObject () ;
  }
  GALGAS_string var_headerString = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileHeader (inCompiler, GALGAS_string ("all-declarations"), var_headerInclusionList_31_.add_operation (var_headerInclusionList_32_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 484)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 482))) ;
  ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("all-declarations.h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 486)) ;
  {
  GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, GALGAS_string ("all-declarations.h"), var_headerString.add_operation (GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 490)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 487)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'generateOneBigHeader'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateOneBigHeader (const GALGAS_string constinArgument_inProductDirectory,
                                   const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                   GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                   C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_headerString = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileHeader (inCompiler, GALGAS_string ("all-declarations"), GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 503)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 501))) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_22492 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_22492.hasCurrentObject ()) {
    const enumGalgasBool test_0 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_22492.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 507)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 507)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_stringset var_inclusionSet_31_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 508)) ;
      GALGAS_string var_headerString_31_ ;
      callCategoryMethod_appendDeclaration_31_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_22492.current_mDeclaration (HERE).ptr (), var_inclusionSet_31_, var_headerString_31_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 509)) ;
      var_headerString.dotAssign_operation (var_headerString_31_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 510)) ;
    }
    enumerator_22492.gotoNextObject () ;
  }
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_22813 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_22813.hasCurrentObject ()) {
    const enumGalgasBool test_1 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_22813.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 515)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 515)).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_stringset var_inclusionSet_32_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 516)) ;
      GALGAS_string var_headerString_32_ ;
      callCategoryMethod_appendDeclaration_32_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_22813.current_mDeclaration (HERE).ptr (), GALGAS_bool (true), constinArgument_inProductDirectory, var_inclusionSet_32_, var_headerString_32_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 517)) ;
      var_headerString.dotAssign_operation (var_headerString_32_  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 518)) ;
    }
    enumerator_22813.gotoNextObject () ;
  }
  ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("all-declarations.h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 521)) ;
  {
  GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, GALGAS_string ("all-declarations.h"), var_headerString.add_operation (GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 525)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 522)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*

cMapElement_headerCompositionMap::cMapElement_headerCompositionMap (const GALGAS_lstring & inKey,
                                                                    const GALGAS_stringset & in_mInclusion,
                                                                    const GALGAS_string & in_mHeaderString
                                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mInclusion (in_mInclusion),
mAttribute_mHeaderString (in_mHeaderString) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_headerCompositionMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mInclusion.isValid () && mAttribute_mHeaderString.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_headerCompositionMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_headerCompositionMap (mAttribute_lkey, mAttribute_mInclusion, mAttribute_mHeaderString COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_headerCompositionMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mInclusion" ":" ;
  mAttribute_mInclusion.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHeaderString" ":" ;
  mAttribute_mHeaderString.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_headerCompositionMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_headerCompositionMap * operand = (cMapElement_headerCompositionMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mInclusion.objectCompare (operand->mAttribute_mInclusion) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mHeaderString.objectCompare (operand->mAttribute_mHeaderString) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap::GALGAS_headerCompositionMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap::GALGAS_headerCompositionMap (const GALGAS_headerCompositionMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap & GALGAS_headerCompositionMap::operator = (const GALGAS_headerCompositionMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap GALGAS_headerCompositionMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_headerCompositionMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap GALGAS_headerCompositionMap::constructor_mapWithMapToOverride (const GALGAS_headerCompositionMap & inMapToOverride
                                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_headerCompositionMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap GALGAS_headerCompositionMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_headerCompositionMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                       const GALGAS_stringset & inArgument0,
                                                       const GALGAS_string & inArgument1,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_headerCompositionMap * p = NULL ;
  macroMyNew (p, cMapElement_headerCompositionMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@headerCompositionMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap::modifier_insertKey (GALGAS_lstring inKey,
                                                      GALGAS_stringset inArgument0,
                                                      GALGAS_string inArgument1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cMapElement_headerCompositionMap * p = NULL ;
  macroMyNew (p, cMapElement_headerCompositionMap (inKey, inArgument0, inArgument1 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' key is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_headerCompositionMap_searchKey = "there is no '%K' key" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap::method_searchKey (GALGAS_lstring inKey,
                                                    GALGAS_stringset & outArgument0,
                                                    GALGAS_string & outArgument1,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) const {
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) performSearch (inKey,
                                                                                                           inCompiler,
                                                                                                           kSearchErrorMessage_headerCompositionMap_searchKey
                                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
    outArgument0 = p->mAttribute_mInclusion ;
    outArgument1 = p->mAttribute_mHeaderString ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset GALGAS_headerCompositionMap::reader_mInclusionForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) attributes ;
  GALGAS_stringset result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
    result = p->mAttribute_mInclusion ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_headerCompositionMap::reader_mHeaderStringForKey (const GALGAS_string & inKey,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
    result = p->mAttribute_mHeaderString ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap::modifier_setMInclusionForKey (GALGAS_stringset inAttributeValue,
                                                                GALGAS_string inKey,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_headerCompositionMap * p = (cMapElement_headerCompositionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
    p->mAttribute_mInclusion = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap::modifier_setMHeaderStringForKey (GALGAS_string inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_headerCompositionMap * p = (cMapElement_headerCompositionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
    p->mAttribute_mHeaderString = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_headerCompositionMap * GALGAS_headerCompositionMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                   const GALGAS_string & inKey
                                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_headerCompositionMap * result = (cMapElement_headerCompositionMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_headerCompositionMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_headerCompositionMap::cEnumerator_headerCompositionMap (const GALGAS_headerCompositionMap & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element cEnumerator_headerCompositionMap::current (LOCATION_ARGS) const {
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
  return GALGAS_headerCompositionMap_2D_element (p->mAttribute_lkey, p->mAttribute_mInclusion, p->mAttribute_mHeaderString) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_headerCompositionMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset cEnumerator_headerCompositionMap::current_mInclusion (LOCATION_ARGS) const {
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
  return p->mAttribute_mInclusion ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_headerCompositionMap::current_mHeaderString (LOCATION_ARGS) const {
  const cMapElement_headerCompositionMap * p = (const cMapElement_headerCompositionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_headerCompositionMap) ;
  return p->mAttribute_mHeaderString ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @headerCompositionMap type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_headerCompositionMap ("headerCompositionMap",
                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_headerCompositionMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_headerCompositionMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_headerCompositionMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_headerCompositionMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap GALGAS_headerCompositionMap::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_headerCompositionMap result ;
  const GALGAS_headerCompositionMap * p = (const GALGAS_headerCompositionMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_headerCompositionMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("headerCompositionMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_headerRepartitionMap::cMapElement_headerRepartitionMap (const GALGAS_lstring & inKey,
                                                                    const GALGAS_string & in_mHeaderFileName
                                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mHeaderFileName (in_mHeaderFileName) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_headerRepartitionMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mHeaderFileName.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_headerRepartitionMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_headerRepartitionMap (mAttribute_lkey, mAttribute_mHeaderFileName COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cMapElement_headerRepartitionMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mHeaderFileName" ":" ;
  mAttribute_mHeaderFileName.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_headerRepartitionMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_headerRepartitionMap * operand = (cMapElement_headerRepartitionMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mHeaderFileName.objectCompare (operand->mAttribute_mHeaderFileName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap::GALGAS_headerRepartitionMap (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap::GALGAS_headerRepartitionMap (const GALGAS_headerRepartitionMap & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap & GALGAS_headerRepartitionMap::operator = (const GALGAS_headerRepartitionMap & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap GALGAS_headerRepartitionMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_headerRepartitionMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap GALGAS_headerRepartitionMap::constructor_mapWithMapToOverride (const GALGAS_headerRepartitionMap & inMapToOverride
                                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_headerRepartitionMap result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap GALGAS_headerRepartitionMap::reader_overriddenMap (C_Compiler * inCompiler
                                                                               COMMA_LOCATION_ARGS) const {
  GALGAS_headerRepartitionMap result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap::addAssign_operation (const GALGAS_lstring & inKey,
                                                       const GALGAS_string & inArgument0,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_headerRepartitionMap * p = NULL ;
  macroMyNew (p, cMapElement_headerRepartitionMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "@headerRepartitionMap insert error: '%K' already in map" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap::modifier_insertKey (GALGAS_lstring inKey,
                                                      GALGAS_string inArgument0,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  cMapElement_headerRepartitionMap * p = NULL ;
  macroMyNew (p, cMapElement_headerRepartitionMap (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "the '%K' key is already declared in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

const char * kSearchErrorMessage_headerRepartitionMap_searchKey = "there is no '%K' key" ;

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap::method_searchKey (GALGAS_lstring inKey,
                                                    GALGAS_string & outArgument0,
                                                    C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) const {
  const cMapElement_headerRepartitionMap * p = (const cMapElement_headerRepartitionMap *) performSearch (inKey,
                                                                                                           inCompiler,
                                                                                                           kSearchErrorMessage_headerRepartitionMap_searchKey
                                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_headerRepartitionMap) ;
    outArgument0 = p->mAttribute_mHeaderFileName ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_headerRepartitionMap::reader_mHeaderFileNameForKey (const GALGAS_string & inKey,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_headerRepartitionMap * p = (const cMapElement_headerRepartitionMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerRepartitionMap) ;
    result = p->mAttribute_mHeaderFileName ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap::modifier_setMHeaderFileNameForKey (GALGAS_string inAttributeValue,
                                                                     GALGAS_string inKey,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_headerRepartitionMap * p = (cMapElement_headerRepartitionMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_headerRepartitionMap) ;
    p->mAttribute_mHeaderFileName = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement_headerRepartitionMap * GALGAS_headerRepartitionMap::readWriteAccessForWithInstruction (C_Compiler * inCompiler,
                                                                                                   const GALGAS_string & inKey
                                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_headerRepartitionMap * result = (cMapElement_headerRepartitionMap *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_headerRepartitionMap) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_headerRepartitionMap::cEnumerator_headerRepartitionMap (const GALGAS_headerRepartitionMap & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element cEnumerator_headerRepartitionMap::current (LOCATION_ARGS) const {
  const cMapElement_headerRepartitionMap * p = (const cMapElement_headerRepartitionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_headerRepartitionMap) ;
  return GALGAS_headerRepartitionMap_2D_element (p->mAttribute_lkey, p->mAttribute_mHeaderFileName) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_headerRepartitionMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string cEnumerator_headerRepartitionMap::current_mHeaderFileName (LOCATION_ARGS) const {
  const cMapElement_headerRepartitionMap * p = (const cMapElement_headerRepartitionMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_headerRepartitionMap) ;
  return p->mAttribute_mHeaderFileName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             @headerRepartitionMap type                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_headerRepartitionMap ("headerRepartitionMap",
                                             NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_headerRepartitionMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_headerRepartitionMap ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_headerRepartitionMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_headerRepartitionMap (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap GALGAS_headerRepartitionMap::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_headerRepartitionMap result ;
  const GALGAS_headerRepartitionMap * p = (const GALGAS_headerRepartitionMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_headerRepartitionMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("headerRepartitionMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Routine 'buildHeader'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_buildHeader (const GALGAS_headerCompositionMap constinArgument_inHeaderCompositionMap,
                          const GALGAS_string constinArgument_inHeaderFileName,
                          const GALGAS_string constinArgument_inDeclarationName,
                          GALGAS_headerRepartitionMap & ioArgument_ioHeaderRepartitionMap,
                          GALGAS_string & ioArgument_ioHeaderString,
                          C_Compiler * inCompiler
                          COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = ioArgument_ioHeaderRepartitionMap.reader_hasKey (constinArgument_inDeclarationName COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 556)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 556)).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    ioArgument_ioHeaderRepartitionMap.modifier_insertKey (constinArgument_inDeclarationName.reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 557)), constinArgument_inHeaderFileName, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 557)) ;
    }
    const enumGalgasBool test_1 = constinArgument_inHeaderCompositionMap.reader_hasKey (constinArgument_inDeclarationName COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 558)).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_stringset var_inclusionSet ;
      GALGAS_string var_headerString ;
      constinArgument_inHeaderCompositionMap.method_searchKey (constinArgument_inDeclarationName.reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 560)), var_inclusionSet, var_headerString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 559)) ;
      ioArgument_ioHeaderString.dotAssign_operation (GALGAS_string ("//START--- ").add_operation (constinArgument_inDeclarationName, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 564)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 564))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 564)) ;
      cEnumerator_stringset enumerator_24592 (var_inclusionSet, kEnumeration_up) ;
      while (enumerator_24592.hasCurrentObject ()) {
        {
        routine_buildHeader (constinArgument_inHeaderCompositionMap, constinArgument_inHeaderFileName, enumerator_24592.current_key (HERE), ioArgument_ioHeaderRepartitionMap, ioArgument_ioHeaderString, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 566)) ;
        }
        enumerator_24592.gotoNextObject () ;
      }
      ioArgument_ioHeaderString.dotAssign_operation (GALGAS_string ("//--- ").add_operation (constinArgument_inDeclarationName, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 574)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 574))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 574)) ;
      cEnumerator_stringset enumerator_24870 (var_inclusionSet, kEnumeration_up) ;
      while (enumerator_24870.hasCurrentObject ()) {
        ioArgument_ioHeaderString.dotAssign_operation (GALGAS_string ("  // ").add_operation (enumerator_24870.current_key (HERE), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 576)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 576))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 576)) ;
        enumerator_24870.gotoNextObject () ;
      }
      ioArgument_ioHeaderString.dotAssign_operation (var_headerString  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 578)) ;
    }else if (kBoolFalse == test_1) {
      ioArgument_ioHeaderString.dotAssign_operation (GALGAS_string ("#include \"").add_operation (constinArgument_inDeclarationName, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 580)).add_operation (GALGAS_string (".h\"\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 580))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 580)) ;
    }
  }else if (kBoolFalse == test_0) {
    ioArgument_ioHeaderString.dotAssign_operation (GALGAS_string ("//--- ").add_operation (constinArgument_inDeclarationName, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 583)).add_operation (GALGAS_string (" already included\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 583))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 583)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'generateFewImplementationFiles'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateFewImplementationFiles (const GALGAS_string constinArgument_inProductDirectory,
                                             const GALGAS_semanticContext constinArgument_inSemanticContext,
                                             const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                             GALGAS_stringlist & ioArgument_ioToolProductFileList,
                                             GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                             C_Compiler * inCompiler
                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool var_useOneHugeHeader = GALGAS_bool (gOption_galgas_5F_cli_5F_options_generateOneHeader.reader_value ()) ;
  GALGAS_uint var_n = GALGAS_uint ((uint32_t) 0U) ;
  GALGAS_uint var_fileIdx = GALGAS_uint ((uint32_t) 0U) ;
  GALGAS_string var_implementationString = GALGAS_string::makeEmptyString () ;
  GALGAS_stringset var_inclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 728)) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_30842 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_30842.hasCurrentObject ()) {
    const enumGalgasBool test_0 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_30842.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 730)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 730)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_code ;
      callCategoryMethod_appendSpecificImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_30842.current_mDeclaration (HERE).ptr (), var_inclusionSet, var_code, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 731)) ;
      var_implementationString.dotAssign_operation (var_code  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 732)) ;
      var_implementationString.dotAssign_operation (callCategoryReader_appendTypeGenericImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_30842.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 733))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 733)) ;
      var_n.increment_operation (inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 734)) ;
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_n.objectCompare (function_definitionGroupAmount (inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 735)))).boolEnum () ;
      if (kBoolTrue == test_1) {
        const enumGalgasBool test_2 = var_useOneHugeHeader.boolEnum () ;
        if (kBoolTrue == test_2) {
          var_inclusionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("all-declarations")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 737)) ;
        }
        cEnumerator_optionComponentMapForSemanticAnalysis enumerator_31453 (constinArgument_inSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, kEnumeration_up) ;
        while (enumerator_31453.hasCurrentObject ()) {
          const enumGalgasBool test_3 = enumerator_31453.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 742)).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_inclusionSet.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_31453.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 743))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 743)) ;
          }
          enumerator_31453.gotoNextObject () ;
        }
        cEnumerator_grammarMap enumerator_31634 (constinArgument_inSemanticContext.mAttribute_mGrammarMap, kEnumeration_up) ;
        while (enumerator_31634.hasCurrentObject ()) {
          var_inclusionSet.addAssign_operation (GALGAS_string ("grammar-").operator_concat (enumerator_31634.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 747))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 747)) ;
          enumerator_31634.gotoNextObject () ;
        }
        GALGAS_string var_header = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileImplementation (inCompiler, var_inclusionSet.reader_stringList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 750)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 749))) ;
        GALGAS_string var_fileName = GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 752))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 752)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 752)) ;
        ioArgument_ioToolProductFileList = GALGAS_stringlist::constructor_listWithValue (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 753)).add_operation (ioArgument_ioToolProductFileList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 753)) ;
        ioArgument_ioAllProductFileSet.addAssign_operation (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 754)) ;
        {
        GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_fileName, var_header.add_operation (var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 758)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 755)) ;
        }
        var_n = GALGAS_uint ((uint32_t) 0U) ;
        var_fileIdx.increment_operation (inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 761)) ;
        var_implementationString = GALGAS_string::makeEmptyString () ;
        var_inclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 763)) ;
      }
    }
    enumerator_30842.gotoNextObject () ;
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_implementationString.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_4) {
    const enumGalgasBool test_5 = var_useOneHugeHeader.boolEnum () ;
    if (kBoolTrue == test_5) {
      var_inclusionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("all-declarations")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 770)) ;
    }
    cEnumerator_optionComponentMapForSemanticAnalysis enumerator_32598 (constinArgument_inSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, kEnumeration_up) ;
    while (enumerator_32598.hasCurrentObject ()) {
      const enumGalgasBool test_6 = enumerator_32598.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 773)).boolEnum () ;
      if (kBoolTrue == test_6) {
        var_inclusionSet.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_32598.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 774))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 774)) ;
      }
      enumerator_32598.gotoNextObject () ;
    }
    cEnumerator_grammarMap enumerator_32759 (constinArgument_inSemanticContext.mAttribute_mGrammarMap, kEnumeration_up) ;
    while (enumerator_32759.hasCurrentObject ()) {
      var_inclusionSet.addAssign_operation (GALGAS_string ("grammar-").operator_concat (enumerator_32759.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 778))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 778)) ;
      enumerator_32759.gotoNextObject () ;
    }
    GALGAS_string var_header = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileImplementation (inCompiler, var_inclusionSet.reader_stringList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 782)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 780))) ;
    GALGAS_string var_fileName = GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 784))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 784)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 784)) ;
    ioArgument_ioToolProductFileList = GALGAS_stringlist::constructor_listWithValue (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 785)).add_operation (ioArgument_ioToolProductFileList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 785)) ;
    ioArgument_ioAllProductFileSet.addAssign_operation (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 786)) ;
    {
    GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_fileName, var_header.add_operation (var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 790)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 787)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               Routine 'generateFewImplementationFilesWithFewHeaders'                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateFewImplementationFilesWithFewHeaders (const GALGAS_string constinArgument_inProductDirectory,
                                                           const GALGAS_semanticContext constinArgument_inSemanticContext,
                                                           const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                                           GALGAS_stringlist & ioArgument_ioToolProductFileList,
                                                           GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                                           C_Compiler * inCompiler
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool var_useOneHugeHeader = GALGAS_bool (gOption_galgas_5F_cli_5F_options_generateOneHeader.reader_value ()) ;
  GALGAS_headerCompositionMap var_headerCompositionMap = GALGAS_headerCompositionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 805)) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_33969 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_33969.hasCurrentObject ()) {
    const enumGalgasBool test_0 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 807)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 807)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_stringset var_inclusionSet_31_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 808)) ;
      GALGAS_string var_headerString_31_ ;
      callCategoryMethod_appendDeclaration_31_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), var_inclusionSet_31_, var_headerString_31_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 809)) ;
      GALGAS_stringset var_inclusionSet_32_ = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 810)) ;
      GALGAS_string var_headerString_32_ ;
      callCategoryMethod_appendDeclaration_32_ ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), GALGAS_bool (true), constinArgument_inProductDirectory, var_inclusionSet_32_, var_headerString_32_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 811)) ;
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 812)).objectCompare (GALGAS_headerKind::constructor_noHeader (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 812)))).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_string temp_2 ;
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 813)).objectCompare (GALGAS_headerKind::constructor_twoHeaders (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 813)))).boolEnum () ;
        if (kBoolTrue == test_3) {
          temp_2 = GALGAS_string ("-1") ;
        }else if (kBoolFalse == test_3) {
          temp_2 = GALGAS_string::makeEmptyString () ;
        }
        GALGAS_string var_headerFileName = callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 813)).add_operation (temp_2, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 813)) ;
        {
        var_headerCompositionMap.modifier_insertKey (var_headerFileName.reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 815)), var_inclusionSet_31_, var_headerString_31_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 814)) ;
        }
      }
      const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 820)).objectCompare (GALGAS_headerKind::constructor_twoHeaders (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 820)))).boolEnum () ;
      if (kBoolTrue == test_4) {
        {
        GALGAS_stringset temp_5 = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 823)) ;
        temp_5.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 823)).add_operation (GALGAS_string ("-1"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 823))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 823)) ;
        var_headerCompositionMap.modifier_insertKey (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_33969.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 822)).reader_nowhere (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 822)), var_inclusionSet_32_.operator_or (temp_5 COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 823)), var_headerString_32_, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 821)) ;
        }
      }
    }
    enumerator_33969.gotoNextObject () ;
  }
  GALGAS_headerRepartitionMap var_headerRepartitionMap = GALGAS_headerRepartitionMap::constructor_emptyMap (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 830)) ;
  GALGAS_uint var_fileIdx = GALGAS_uint ((uint32_t) 0U) ;
  GALGAS_string var_implementationString = GALGAS_string::makeEmptyString () ;
  GALGAS_string var_headerString = GALGAS_string::makeEmptyString () ;
  GALGAS_stringset var_inclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 834)) ;
  GALGAS_string var_headerFileName = GALGAS_string ("all-declarations-").add_operation (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 835)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 835)) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_35344 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_35344.hasCurrentObject ()) {
    const enumGalgasBool test_6 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 837)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 837)).boolEnum () ;
    if (kBoolTrue == test_6) {
      const enumGalgasBool test_7 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 838)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 838)).boolEnum () ;
      if (kBoolTrue == test_7) {
        const enumGalgasBool test_8 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 839)).objectCompare (GALGAS_headerKind::constructor_twoHeaders (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 839)))).boolEnum () ;
        if (kBoolTrue == test_8) {
          {
          routine_buildHeader (var_headerCompositionMap, var_headerFileName, callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 840)).add_operation (GALGAS_string ("-1"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 840)), var_headerRepartitionMap, var_headerString, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 840)) ;
          }
          {
          routine_buildHeader (var_headerCompositionMap, var_headerFileName, callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 841)), var_headerRepartitionMap, var_headerString, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 841)) ;
          }
        }else if (kBoolFalse == test_8) {
          const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, callCategoryReader_headerKind ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 842)).objectCompare (GALGAS_headerKind::constructor_oneHeader (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 842)))).boolEnum () ;
          if (kBoolTrue == test_9) {
            {
            routine_buildHeader (var_headerCompositionMap, var_headerFileName, callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 843)), var_headerRepartitionMap, var_headerString, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 843)) ;
            }
          }
        }
      }
      GALGAS_string var_code ;
      callCategoryMethod_appendSpecificImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), var_inclusionSet, var_code, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 846)) ;
      cEnumerator_stringset enumerator_36155 (var_inclusionSet, kEnumeration_up) ;
      while (enumerator_36155.hasCurrentObject ()) {
        {
        routine_buildHeader (var_headerCompositionMap, var_headerFileName, enumerator_36155.current_key (HERE), var_headerRepartitionMap, var_headerString, inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 848)) ;
        }
        enumerator_36155.gotoNextObject () ;
      }
      var_implementationString.dotAssign_operation (var_code  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 850)) ;
      var_implementationString.dotAssign_operation (callCategoryReader_appendTypeGenericImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_35344.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 851))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 851)) ;
      const enumGalgasBool test_10 = GALGAS_bool (kIsStrictSup, var_implementationString.reader_length (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 852)).objectCompare (GALGAS_uint ((uint32_t) 1000000U))).boolEnum () ;
      if (kBoolTrue == test_10) {
        const enumGalgasBool test_11 = var_useOneHugeHeader.boolEnum () ;
        if (kBoolTrue == test_11) {
          var_inclusionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("all-declarations")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 854)) ;
        }else if (kBoolFalse == test_11) {
          GALGAS_stringset temp_12 = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 857)) ;
          temp_12.addAssign_operation (GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 857))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 857))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 857)) ;
          var_inclusionSet = temp_12 ;
        }
        cEnumerator_optionComponentMapForSemanticAnalysis enumerator_36766 (constinArgument_inSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, kEnumeration_up) ;
        while (enumerator_36766.hasCurrentObject ()) {
          const enumGalgasBool test_13 = enumerator_36766.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 860)).boolEnum () ;
          if (kBoolTrue == test_13) {
            var_inclusionSet.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_36766.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 861))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 861)) ;
          }
          enumerator_36766.gotoNextObject () ;
        }
        cEnumerator_grammarMap enumerator_36947 (constinArgument_inSemanticContext.mAttribute_mGrammarMap, kEnumeration_up) ;
        while (enumerator_36947.hasCurrentObject ()) {
          var_inclusionSet.addAssign_operation (GALGAS_string ("grammar-").operator_concat (enumerator_36947.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 865))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 865)) ;
          enumerator_36947.gotoNextObject () ;
        }
        GALGAS_string var_cppHeader = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileImplementation (inCompiler, var_inclusionSet.reader_stringList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 869)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 868))) ;
        GALGAS_string var_fileName = GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 871))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 871)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 871)) ;
        ioArgument_ioToolProductFileList = GALGAS_stringlist::constructor_listWithValue (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 872)).add_operation (ioArgument_ioToolProductFileList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 872)) ;
        ioArgument_ioAllProductFileSet.addAssign_operation (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 873)) ;
        {
        GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_fileName, var_cppHeader.add_operation (var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 877)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 874)) ;
        }
        ioArgument_ioAllProductFileSet.addAssign_operation (var_headerFileName.add_operation (GALGAS_string (".h"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 880))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 880)) ;
        GALGAS_stringlist temp_14 ;
        const enumGalgasBool test_15 = GALGAS_bool (kIsEqual, var_fileIdx.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_15) {
          temp_14 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883)) ;
        }else if (kBoolFalse == test_15) {
          GALGAS_stringlist temp_16 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883)) ;
          temp_16.addAssign_operation (GALGAS_string ("all-declarations-").add_operation (var_fileIdx.substract_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883)).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 883)) ;
          temp_14 = temp_16 ;
        }
        GALGAS_string var_startOfHeader = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileHeader (inCompiler, var_headerFileName, temp_14 COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 881))) ;
        {
        GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_headerFileName.add_operation (GALGAS_string (".h"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 887)), var_startOfHeader.add_operation (var_headerString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 888)).add_operation (GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 888)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 885)) ;
        }
        var_fileIdx.increment_operation (inCompiler  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 891)) ;
        var_implementationString = GALGAS_string::makeEmptyString () ;
        var_headerString = GALGAS_string::makeEmptyString () ;
        var_headerFileName = GALGAS_string ("all-declarations-").add_operation (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 894)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 894)) ;
        var_inclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 895)) ;
      }
    }
    enumerator_35344.gotoNextObject () ;
  }
  const enumGalgasBool test_17 = GALGAS_bool (kIsNotEqual, var_implementationString.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_17) {
    const enumGalgasBool test_18 = var_useOneHugeHeader.boolEnum () ;
    if (kBoolTrue == test_18) {
      var_inclusionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("all-declarations")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 903)) ;
    }
    cEnumerator_optionComponentMapForSemanticAnalysis enumerator_38538 (constinArgument_inSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, kEnumeration_up) ;
    while (enumerator_38538.hasCurrentObject ()) {
      const enumGalgasBool test_19 = enumerator_38538.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 906)).boolEnum () ;
      if (kBoolTrue == test_19) {
        var_inclusionSet.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_38538.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 907))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 907)) ;
      }
      enumerator_38538.gotoNextObject () ;
    }
    cEnumerator_grammarMap enumerator_38699 (constinArgument_inSemanticContext.mAttribute_mGrammarMap, kEnumeration_up) ;
    while (enumerator_38699.hasCurrentObject ()) {
      var_inclusionSet.addAssign_operation (GALGAS_string ("grammar-").operator_concat (enumerator_38699.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 911))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 911)) ;
      enumerator_38699.gotoNextObject () ;
    }
    GALGAS_stringlist temp_20 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 915)) ;
    temp_20.addAssign_operation (GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 915))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 915))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 915)) ;
    GALGAS_string var_header = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileImplementation (inCompiler, temp_20 COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 913))) ;
    GALGAS_string var_fileName = GALGAS_string ("all-declarations-").operator_concat (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 917))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 917)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 917)) ;
    ioArgument_ioToolProductFileList = GALGAS_stringlist::constructor_listWithValue (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 918)).add_operation (ioArgument_ioToolProductFileList, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 918)) ;
    ioArgument_ioAllProductFileSet.addAssign_operation (var_fileName  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 919)) ;
    {
    GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_fileName, var_header.add_operation (var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 923)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 920)) ;
    }
    ioArgument_ioAllProductFileSet.addAssign_operation (var_headerFileName.add_operation (GALGAS_string (".h"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 926))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 926)) ;
    GALGAS_stringlist temp_21 ;
    const enumGalgasBool test_22 = GALGAS_bool (kIsEqual, var_fileIdx.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_22) {
      temp_21 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929)) ;
    }else if (kBoolFalse == test_22) {
      GALGAS_stringlist temp_23 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929)) ;
      temp_23.addAssign_operation (GALGAS_string ("all-declarations-").add_operation (var_fileIdx.substract_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929)).reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 929)) ;
      temp_21 = temp_23 ;
    }
    GALGAS_string var_startOfHeader = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileHeader (inCompiler, var_headerFileName, temp_21 COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 927))) ;
    {
    GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, var_headerFileName.add_operation (GALGAS_string (".h"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 933)), var_startOfHeader.add_operation (var_headerString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 934)).add_operation (GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 934)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 931)) ;
    }
  }
  ioArgument_ioAllProductFileSet.addAssign_operation (GALGAS_string ("all-declarations.h")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 938)) ;
  GALGAS_stringlist temp_24 = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 941)) ;
  temp_24.addAssign_operation (GALGAS_string ("all-declarations-").add_operation (var_fileIdx.reader_string (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 941)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 941))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 941)) ;
  GALGAS_string var_startOfAllDeclarationsHeader = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileHeader (inCompiler, var_headerFileName, temp_24 COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 939))) ;
  {
  GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, GALGAS_string ("all-declarations.h"), var_startOfAllDeclarationsHeader.add_operation (GALGAS_string ("#endif\n"), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 946)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 943)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'generateManyImplementationFiles'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_generateManyImplementationFiles (const GALGAS_string constinArgument_inProductDirectory,
                                              const GALGAS_semanticContext constinArgument_inSemanticContext,
                                              const GALGAS_semanticDeclarationSortedListForGeneration constinArgument_inSemanticDeclarationSortedListForGeneration,
                                              GALGAS_stringlist & ioArgument_ioToolProductFileList,
                                              GALGAS_stringset & ioArgument_ioAllProductFileSet,
                                              C_Compiler * inCompiler
                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool var_useOneHugeHeader = GALGAS_bool (gOption_galgas_5F_cli_5F_options_generateOneHeader.reader_value ()) ;
  cEnumerator_semanticDeclarationSortedListForGeneration enumerator_40616 (constinArgument_inSemanticDeclarationSortedListForGeneration, kEnumeration_up) ;
  while (enumerator_40616.hasCurrentObject ()) {
    GALGAS_stringset var_inclusionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 961)) ;
    const enumGalgasBool test_0 = callCategoryReader_isPredefined ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 962)).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 962)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_string var_implementationString ;
      callCategoryMethod_appendSpecificImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), var_inclusionSet, var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 963)) ;
      const enumGalgasBool test_1 = callCategoryReader_hasCppHeaderFile ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 964)).boolEnum () ;
      if (kBoolTrue == test_1) {
        var_inclusionSet.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 965))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 965)) ;
      }
      const enumGalgasBool test_2 = var_useOneHugeHeader.boolEnum () ;
      if (kBoolTrue == test_2) {
        var_inclusionSet = GALGAS_stringset::constructor_setWithString (GALGAS_string ("all-declarations")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 968)) ;
        cEnumerator_optionComponentMapForSemanticAnalysis enumerator_41117 (constinArgument_inSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis, kEnumeration_up) ;
        while (enumerator_41117.hasCurrentObject ()) {
          const enumGalgasBool test_3 = enumerator_41117.current_mIsPredefined (HERE).operator_not (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 970)).boolEnum () ;
          if (kBoolTrue == test_3) {
            var_inclusionSet.addAssign_operation (GALGAS_string ("option-").add_operation (enumerator_41117.current_lkey (HERE).mAttribute_string, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 971))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 971)) ;
          }
          enumerator_41117.gotoNextObject () ;
        }
        cEnumerator_grammarMap enumerator_41298 (constinArgument_inSemanticContext.mAttribute_mGrammarMap, kEnumeration_up) ;
        while (enumerator_41298.hasCurrentObject ()) {
          var_inclusionSet.addAssign_operation (GALGAS_string ("grammar-").operator_concat (enumerator_41298.current_lkey (HERE).mAttribute_string  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 975))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 975)) ;
          enumerator_41298.gotoNextObject () ;
        }
      }
      GALGAS_string var_header = GALGAS_string (filewrapperTemplate_semanticFileGenerationTemplate_semanticFileImplementation (inCompiler, var_inclusionSet.reader_stringList (SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 979)) COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 978))) ;
      var_implementationString.dotAssign_operation (callCategoryReader_appendTypeGenericImplementation ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 981))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 981)) ;
      ioArgument_ioAllProductFileSet.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 982)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 982))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 982)) ;
      {
      GALGAS_string::class_method_generateFile (constinArgument_inProductDirectory, callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 985)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 985)), var_header.add_operation (var_implementationString, inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 986)), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 983)) ;
      }
      ioArgument_ioToolProductFileList.addAssign_operation (callCategoryReader_implementationCppFileName ((const cPtr_semanticDeclarationForGeneration *) enumerator_40616.current_mDeclaration (HERE).ptr (), inCompiler COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 988)).operator_concat (GALGAS_string (".cpp")  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 988))  COMMA_SOURCE_FILE ("galgas3SemanticDeclarationCompilation.gSemantics", 988)) ;
    }
    enumerator_40616.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element::GALGAS_headerCompositionMap_2D_element (void) :
mAttribute_lkey (),
mAttribute_mInclusion (),
mAttribute_mHeaderString () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element::~ GALGAS_headerCompositionMap_2D_element (void) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element::GALGAS_headerCompositionMap_2D_element (const GALGAS_lstring & inOperand0,
                                                                                const GALGAS_stringset & inOperand1,
                                                                                const GALGAS_string & inOperand2) :
mAttribute_lkey (inOperand0),
mAttribute_mInclusion (inOperand1),
mAttribute_mHeaderString (inOperand2) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element GALGAS_headerCompositionMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_headerCompositionMap_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                 GALGAS_stringset::constructor_emptySet (HERE),
                                                 GALGAS_string::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element GALGAS_headerCompositionMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                const GALGAS_stringset & inOperand1,
                                                                                                const GALGAS_string & inOperand2 
                                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_headerCompositionMap_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid ()) {
    result = GALGAS_headerCompositionMap_2D_element (inOperand0, inOperand1, inOperand2) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_headerCompositionMap_2D_element::objectCompare (const GALGAS_headerCompositionMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mInclusion.objectCompare (inOperand.mAttribute_mInclusion) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHeaderString.objectCompare (inOperand.mAttribute_mHeaderString) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

bool GALGAS_headerCompositionMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mInclusion.isValid () && mAttribute_mHeaderString.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mInclusion.drop () ;
  mAttribute_mHeaderString.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerCompositionMap_2D_element::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "<struct @headerCompositionMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mInclusion.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHeaderString.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_headerCompositionMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset GALGAS_headerCompositionMap_2D_element::reader_mInclusion (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mInclusion ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_headerCompositionMap_2D_element::reader_mHeaderString (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHeaderString ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         @headerCompositionMap-element type                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_headerCompositionMap_2D_element ("headerCompositionMap-element",
                                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_headerCompositionMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_headerCompositionMap_2D_element ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_headerCompositionMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_headerCompositionMap_2D_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerCompositionMap_2D_element GALGAS_headerCompositionMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_headerCompositionMap_2D_element result ;
  const GALGAS_headerCompositionMap_2D_element * p = (const GALGAS_headerCompositionMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_headerCompositionMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("headerCompositionMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element::GALGAS_headerRepartitionMap_2D_element (void) :
mAttribute_lkey (),
mAttribute_mHeaderFileName () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element::~ GALGAS_headerRepartitionMap_2D_element (void) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element::GALGAS_headerRepartitionMap_2D_element (const GALGAS_lstring & inOperand0,
                                                                                const GALGAS_string & inOperand1) :
mAttribute_lkey (inOperand0),
mAttribute_mHeaderFileName (inOperand1) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element GALGAS_headerRepartitionMap_2D_element::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_headerRepartitionMap_2D_element (GALGAS_lstring::constructor_default (HERE),
                                                 GALGAS_string::constructor_default (HERE)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element GALGAS_headerRepartitionMap_2D_element::constructor_new (const GALGAS_lstring & inOperand0,
                                                                                                const GALGAS_string & inOperand1 
                                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_headerRepartitionMap_2D_element result ;
  if (inOperand0.isValid () && inOperand1.isValid ()) {
    result = GALGAS_headerRepartitionMap_2D_element (inOperand0, inOperand1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_headerRepartitionMap_2D_element::objectCompare (const GALGAS_headerRepartitionMap_2D_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_lkey.objectCompare (inOperand.mAttribute_lkey) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mHeaderFileName.objectCompare (inOperand.mAttribute_mHeaderFileName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

bool GALGAS_headerRepartitionMap_2D_element::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mHeaderFileName.isValid () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap_2D_element::drop (void) {
  mAttribute_lkey.drop () ;
  mAttribute_mHeaderFileName.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_headerRepartitionMap_2D_element::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "<struct @headerRepartitionMap-element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_lkey.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mHeaderFileName.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring GALGAS_headerRepartitionMap_2D_element::reader_lkey (UNUSED_LOCATION_ARGS) const {
  return mAttribute_lkey ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string GALGAS_headerRepartitionMap_2D_element::reader_mHeaderFileName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHeaderFileName ;
}



//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         @headerRepartitionMap-element type                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_headerRepartitionMap_2D_element ("headerRepartitionMap-element",
                                                        NULL) ;

//---------------------------------------------------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_headerRepartitionMap_2D_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_headerRepartitionMap_2D_element ;
}

//---------------------------------------------------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_headerRepartitionMap_2D_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_headerRepartitionMap_2D_element (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_headerRepartitionMap_2D_element GALGAS_headerRepartitionMap_2D_element::extractObject (const GALGAS_object & inObject,
                                                                                              C_Compiler * inCompiler
                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_headerRepartitionMap_2D_element result ;
  const GALGAS_headerRepartitionMap_2D_element * p = (const GALGAS_headerRepartitionMap_2D_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_headerRepartitionMap_2D_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("headerRepartitionMap-element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


