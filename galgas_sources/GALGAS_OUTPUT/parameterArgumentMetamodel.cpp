//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'parameterArgumentMetamodel.cpp'                    *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 28th, 2007, at 14h38'0"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "parameterArgumentMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parameterArgumentMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("parameterArgumentMetamodel", 8) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_parameterArgumentMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@formalParameters'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_formalParameters::
cPtr_formalParameters (const GGS__list_formalParameter & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mFormalParameterList (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_formalParameters::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_formalParameters * _p = dynamic_cast <const cPtr_formalParameters *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalParameterList._operator_isEqual (_p->mFormalParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_formalParameters::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @formalParameters" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameters::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameters::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "formalParameters" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_formalParameters * cPtr_formalParameters::
_cloneObject (void) const {
  cPtr_formalParameters * _p = NULL ;
  macroMyNew (_p, cPtr_formalParameters (mFormalParameterList COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@_list_formalParameters'                       *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
_internalAppendValues (const GGS__list_formalParameter & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
_internalPrependValues (const GGS__list_formalParameter & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_formalParameters::
_addAssign_operation (const GGS_formalParameters & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_formalParameters GGS__list_formalParameters::
_operator_concat (const GGS__list_formalParameters & inOperand) const {
  GGS__list_formalParameters result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_formalParameters::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_formalParameters & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalParameterList) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_formalParameters  GGS__list_formalParameters::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_formalParameters result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_formalParameters  GGS__list_formalParameters::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_formalParameters & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_formalParameters result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_formalParameters::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_formalParameters", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
_addModel (const GGS_formalParameters & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
method_first (C_Compiler & _inLexique,
              GGS_formalParameters & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
method_last (C_Compiler & _inLexique,
             GGS_formalParameters & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_formalParameters & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameters::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_formalParameters & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@formalParameters'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameters GGS_formalParameters::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS__list_formalParameter & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_formalParameters result ;
  macroMyNew (result.mPointer, cPtr_formalParameters (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_formalParameter  GGS_formalParameters::
reader_mFormalParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_formalParameter   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameters *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameters *) mPointer)->mFormalParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_formalParameters::actualTypeName (void) const {
 return "formalParameters" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_formalParameters * GGS_formalParameters::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_formalParameters *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@formalParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_formalParameter::
cPtr_formalParameter (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mFormalParameterPassingMode (argument_0),
mFormalParameterTypeName (argument_1),
mFormalParameterName (argument_2),
mIsUnused (argument_3) {
}

//---------------------------------------------------------------------------*

bool cPtr_formalParameter::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_formalParameter * _p = dynamic_cast <const cPtr_formalParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalParameterPassingMode._operator_isEqual (_p->mFormalParameterPassingMode).boolValue ()
         && mFormalParameterTypeName._operator_isEqual (_p->mFormalParameterTypeName).boolValue ()
         && mFormalParameterName._operator_isEqual (_p->mFormalParameterName).boolValue ()
         && mIsUnused._operator_isEqual (_p->mIsUnused).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_formalParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @formalParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterPassingMode.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mIsUnused.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "formalParameter" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_formalParameter * cPtr_formalParameter::
_cloneObject (void) const {
  cPtr_formalParameter * _p = NULL ;
  macroMyNew (_p, cPtr_formalParameter (mFormalParameterPassingMode, mFormalParameterTypeName, mFormalParameterName, mIsUnused COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@_list_formalParameter'                        *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
_internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
_internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_formalParameter::
_addAssign_operation (const GGS_formalParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_formalParameter GGS__list_formalParameter::
_operator_concat (const GGS__list_formalParameter & inOperand) const {
  GGS__list_formalParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_formalParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_formalParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalParameterPassingMode,
                                _p->mFormalParameterTypeName,
                                _p->mFormalParameterName,
                                _p->mIsUnused) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_formalParameter  GGS__list_formalParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_formalParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_formalParameter  GGS__list_formalParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_formalParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_formalParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_formalParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_formalParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
_addModel (const GGS_formalParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
method_first (C_Compiler & _inLexique,
              GGS_formalParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
method_last (C_Compiler & _inLexique,
             GGS_formalParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_formalParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_formalParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_formalParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS entity '@formalParameter'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameter GGS_formalParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_formalArgumentPassingMode& argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_formalParameter result ;
  macroMyNew (result.mPointer, cPtr_formalParameter (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalArgumentPassingMode GGS_formalParameter::
reader_mFormalParameterPassingMode (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_formalArgumentPassingMode  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_formalParameter::
reader_mFormalParameterTypeName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_formalParameter::
reader_mFormalParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalParameter::
reader_mIsUnused (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mIsUnused ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_formalParameter::actualTypeName (void) const {
 return "formalParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_formalParameter * GGS_formalParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_formalParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of list '@actualParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_actualParameter::
cPtr_actualParameter (LOCATION_ARGS) :
cPtr_entity (THERE) {
}

//---------------------------------------------------------------------------*

bool cPtr_actualParameter::
isEqualToObject (const cPtr_entity * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

void cPtr_actualParameter::
appendForDescription (C_Compiler & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "-> instance of @actualParameter" ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 2 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "actualParameter" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_actualParameter * cPtr_actualParameter::
_cloneObject (void) const {
  cPtr_actualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_actualParameter (HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@_list_actualParameter'                        *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
_internalAppendValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
_internalPrependValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_actualParameter::
_addAssign_operation (const GGS_actualParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_actualParameter GGS__list_actualParameter::
_operator_concat (const GGS__list_actualParameter & inOperand) const {
  GGS__list_actualParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_actualParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_actualParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues () ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_actualParameter  GGS__list_actualParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_actualParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_actualParameter  GGS__list_actualParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_actualParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_actualParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_actualParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_actualParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
_addModel (const GGS_actualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
method_first (C_Compiler & _inLexique,
              GGS_actualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
method_last (C_Compiler & _inLexique,
             GGS_actualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_actualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_actualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS entity '@actualParameter'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const char * GGS_actualParameter::actualTypeName (void) const {
 return "actualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_actualParameter * GGS_actualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_actualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@outputActualParameter'                  *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_outputActualParameter::
cPtr_outputActualParameter (const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mOutputActualParameterExpression (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_outputActualParameter::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_outputActualParameter * _p = dynamic_cast <const cPtr_outputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOutputActualParameterExpression._operator_isEqual (_p->mOutputActualParameterExpression).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_outputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @outputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOutputActualParameterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentIndex (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputActualParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 3 ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassID (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputActualParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "outputActualParameter" ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_outputActualParameter * cPtr_outputActualParameter::
_cloneObject (void) const {
  cPtr_outputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_outputActualParameter (mOutputActualParameterExpression COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                   List '@_list_outputActualParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
_internalAppendValues (const GGS_semanticExpression & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
_internalPrependValues (const GGS_semanticExpression & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_outputActualParameter::
_addAssign_operation (const GGS_outputActualParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_outputActualParameter GGS__list_outputActualParameter::
_operator_concat (const GGS__list_outputActualParameter & inOperand) const {
  GGS__list_outputActualParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_outputActualParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_outputActualParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOutputActualParameterExpression) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_outputActualParameter  GGS__list_outputActualParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_outputActualParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_outputActualParameter  GGS__list_outputActualParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_outputActualParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_outputActualParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_outputActualParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_outputActualParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
_addModel (const GGS_outputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
method_first (C_Compiler & _inLexique,
              GGS_outputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
method_last (C_Compiler & _inLexique,
             GGS_outputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_outputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputActualParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_outputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@outputActualParameter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_outputActualParameter GGS_outputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_outputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_outputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticExpression  GGS_outputActualParameter::
reader_mOutputActualParameterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_outputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_outputActualParameter *) mPointer)->mOutputActualParameterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_outputActualParameter::actualTypeName (void) const {
 return "outputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_outputActualParameter * GGS_outputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_outputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//              Element of list '@outputInputActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_outputInputActualParameter::
cPtr_outputInputActualParameter (const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mOutputInputActualParameterName (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_outputInputActualParameter::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_outputInputActualParameter * _p = dynamic_cast <const cPtr_outputInputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOutputInputActualParameterName._operator_isEqual (_p->mOutputInputActualParameterName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_outputInputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @outputInputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOutputInputActualParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentIndex (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputInputActualParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 4 ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassID (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputInputActualParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "outputInputActualParameter" ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_outputInputActualParameter * cPtr_outputInputActualParameter::
_cloneObject (void) const {
  cPtr_outputInputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_outputInputActualParameter (mOutputInputActualParameterName COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                 List '@_list_outputInputActualParameter'                  *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
_internalAppendValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
_internalPrependValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_outputInputActualParameter::
_addAssign_operation (const GGS_outputInputActualParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_outputInputActualParameter GGS__list_outputInputActualParameter::
_operator_concat (const GGS__list_outputInputActualParameter & inOperand) const {
  GGS__list_outputInputActualParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_outputInputActualParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_outputInputActualParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOutputInputActualParameterName) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_outputInputActualParameter  GGS__list_outputInputActualParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_outputInputActualParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_outputInputActualParameter  GGS__list_outputInputActualParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_outputInputActualParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_outputInputActualParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_outputInputActualParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_outputInputActualParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
_addModel (const GGS_outputInputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
method_first (C_Compiler & _inLexique,
              GGS_outputInputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
method_last (C_Compiler & _inLexique,
             GGS_outputInputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_outputInputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_outputInputActualParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_outputInputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS entity '@outputInputActualParameter'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_outputInputActualParameter GGS_outputInputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_outputInputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_outputInputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_outputInputActualParameter::
reader_mOutputInputActualParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_outputInputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_outputInputActualParameter *) mPointer)->mOutputInputActualParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_outputInputActualParameter::actualTypeName (void) const {
 return "outputInputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_outputInputActualParameter * GGS_outputInputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_outputInputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@inputActualParameter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_inputActualParameter::
cPtr_inputActualParameter (const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mInputActualParameterName (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_inputActualParameter::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_inputActualParameter * _p = dynamic_cast <const cPtr_inputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInputActualParameterName._operator_isEqual (_p->mInputActualParameterName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_inputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @inputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInputActualParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentIndex (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputActualParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 5 ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassID (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputActualParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "inputActualParameter" ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_inputActualParameter * cPtr_inputActualParameter::
_cloneObject (void) const {
  cPtr_inputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_inputActualParameter (mInputActualParameterName COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@_list_inputActualParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
_internalAppendValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
_internalPrependValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_inputActualParameter::
_addAssign_operation (const GGS_inputActualParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_inputActualParameter GGS__list_inputActualParameter::
_operator_concat (const GGS__list_inputActualParameter & inOperand) const {
  GGS__list_inputActualParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_inputActualParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_inputActualParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mInputActualParameterName) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_inputActualParameter  GGS__list_inputActualParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_inputActualParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_inputActualParameter  GGS__list_inputActualParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_inputActualParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_inputActualParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_inputActualParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_inputActualParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
_addModel (const GGS_inputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
method_first (C_Compiler & _inLexique,
              GGS_inputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
method_last (C_Compiler & _inLexique,
             GGS_inputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_inputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputActualParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_inputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@inputActualParameter'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_inputActualParameter GGS_inputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_inputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_inputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_inputActualParameter::
reader_mInputActualParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_inputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_inputActualParameter *) mPointer)->mInputActualParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_inputActualParameter::actualTypeName (void) const {
 return "inputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_inputActualParameter * GGS_inputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_inputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@inputJokerActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_inputJokerActualParameter::
cPtr_inputJokerActualParameter (LOCATION_ARGS) :
cPtr_actualParameter (THERE) {
}

//---------------------------------------------------------------------------*

bool cPtr_inputJokerActualParameter::
isEqualToObject (const cPtr_entity * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

void cPtr_inputJokerActualParameter::
appendForDescription (C_Compiler & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "-> instance of @inputJokerActualParameter" ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentIndex (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputJokerActualParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelComponentName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 6 ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassID (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputJokerActualParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "inputJokerActualParameter" ;
  if (inLevel > 0) {
    result = cPtr_actualParameter::_metamodelClassName (inLevel - 1) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_inputJokerActualParameter * cPtr_inputJokerActualParameter::
_cloneObject (void) const {
  cPtr_inputJokerActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_inputJokerActualParameter (HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                 List '@_list_inputJokerActualParameter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
_internalAppendValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
_internalPrependValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_inputJokerActualParameter::
_addAssign_operation (const GGS_inputJokerActualParameter & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_inputJokerActualParameter GGS__list_inputJokerActualParameter::
_operator_concat (const GGS__list_inputJokerActualParameter & inOperand) const {
  GGS__list_inputJokerActualParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_inputJokerActualParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_inputJokerActualParameter & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues () ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_inputJokerActualParameter  GGS__list_inputJokerActualParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_inputJokerActualParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_inputJokerActualParameter  GGS__list_inputJokerActualParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_inputJokerActualParameter & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_inputJokerActualParameter result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_inputJokerActualParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_inputJokerActualParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
_addModel (const GGS_inputJokerActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
method_first (C_Compiler & _inLexique,
              GGS_inputJokerActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
method_last (C_Compiler & _inLexique,
             GGS_inputJokerActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_inputJokerActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_inputJokerActualParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_inputJokerActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS entity '@inputJokerActualParameter'                 *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_inputJokerActualParameter GGS_inputJokerActualParameter::
constructor_new (C_Compiler & /* inLexique */
                                COMMA_LOCATION_ARGS) {
  GGS_inputJokerActualParameter result ;
  macroMyNew (result.mPointer, cPtr_inputJokerActualParameter (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_inputJokerActualParameter::actualTypeName (void) const {
 return "inputJokerActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_inputJokerActualParameter * GGS_inputJokerActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_inputJokerActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@actualParameters'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_actualParameters::
cPtr_actualParameters (const GGS__list_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_entity (THERE),
mActualParameter (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_actualParameters::
isEqualToObject (const cPtr_entity * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_actualParameters * _p = dynamic_cast <const cPtr_actualParameters *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mActualParameter._operator_isEqual (_p->mActualParameter).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_actualParameters::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @actualParameters" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mActualParameter.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameters::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 7 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameters::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "actualParameters" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

/*cPtr_actualParameters * cPtr_actualParameters::
_cloneObject (void) const {
  cPtr_actualParameters * _p = NULL ;
  macroMyNew (_p, cPtr_actualParameters (mActualParameter COMMA_HERE)) ;
  return _p ;
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      List '@_list_actualParameters'                       *
//                                                                           *
//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
_internalAppendValues (const GGS__list_actualParameter & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
_internalPrependValues (const GGS__list_actualParameter & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
} */

//---------------------------------------------------------------------------*

void GGS__list_actualParameters::
_addAssign_operation (const GGS_actualParameters & inObject) {
   _insulateList () ;
   _internalAppendItem (inObject._ptr ()) ;
}

//---------------------------------------------------------------------------*

GGS__list_actualParameters GGS__list_actualParameters::
_operator_concat (const GGS__list_actualParameters & inOperand) const {
  GGS__list_actualParameters result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cEntityListElement * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          macroValidPointer (p->ptr ()) ;
          result._internalAppendItem (p->ptr ()) ;
          p = p->internalNextItem () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_actualParameters::
modifier_prependValue (C_Compiler & /* inLexique */,
                       const GGS_actualParameters & inObject
                       COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt () && inObject._isBuilt ()) {
    _insulateList () ;
    _internalPrependItem (inObject._ptr ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mActualParameter) ;
      _p = _p->nextObject () ;
    }
  }
} */

//---------------------------------------------------------------------------*

GGS__list_actualParameters  GGS__list_actualParameters::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_actualParameters result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_actualParameters  GGS__list_actualParameters::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_actualParameters & inObject
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_actualParameters result ;
  result._alloc () ;
  result._internalAppendItem (inObject._ptr ()) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_actualParameters::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_actualParameters", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
_addModel (const GGS_actualParameters & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
method_first (C_Compiler & _inLexique,
              GGS_actualParameters & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
method_last (C_Compiler & _inLexique,
             GGS_actualParameters & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_actualParameters & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_actualParameters::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_actualParameters & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS entity '@actualParameters'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_actualParameters GGS_actualParameters::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS__list_actualParameter & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_actualParameters result ;
  macroMyNew (result.mPointer, cPtr_actualParameters (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_actualParameter  GGS_actualParameters::
reader_mActualParameter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_actualParameter   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_actualParameters *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_actualParameters *) mPointer)->mActualParameter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_actualParameters::actualTypeName (void) const {
 return "actualParameters" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_actualParameters * GGS_actualParameters::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_actualParameters *) mPointer ;
  }
#endif

