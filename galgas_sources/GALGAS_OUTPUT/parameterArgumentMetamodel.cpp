//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'parameterArgumentMetamodel.cpp'                    *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 6th, 2007, at 23h36'59"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "parameterArgumentMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parameterArgumentMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("parameterArgumentMetamodel") ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_parameterArgumentMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@formalParametersList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_formalParameters::
cPtr_formalParameters (const GGS_formalParameterList & argument_0
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mFormalParameterList (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_formalParameters::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_formalParameters * _p = dynamic_cast <const cPtr_formalParameters *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalParameterList._operator_isEqual (_p->mFormalParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_formalParameters::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @formalParameters" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_superClassMetamodelComponentIndex (void) const {
  return -1 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameters::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelClassID (void) const {
  return 0 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameters::_metamodelClassIDForClass (void) {
  return 0 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameters::_metamodelClassName (void) const {
  return "formalParameters" ;
}

//---------------------------------------------------------------------------*

cPtr_formalParameters * cPtr_formalParameters::
_cloneObject (void) const {
  cPtr_formalParameters * _p = NULL ;
  macroMyNew (_p, cPtr_formalParameters (mFormalParameterList COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@formalParametersList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_formalParametersList::
_internalAppendValues (const GGS_formalParameterList & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParametersList::
_internalPrependValues (const GGS_formalParameterList & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParametersList::
_addAssign_operation (const GGS_formalParameters & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_formalParameters *) inElement.getPtr ())->mFormalParameterList) ;
  }
}

//---------------------------------------------------------------------------*

GGS_formalParametersList GGS_formalParametersList::
_operator_concat (const GGS_formalParametersList & inOperand) const {
  GGS_formalParametersList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_formalParameters * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_formalParameterList  p_0 = p->mFormalParameterList ;
          result._internalAppendValues (p_0) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_formalParametersList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_formalParameterList & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_formalParametersList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalParameterList) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_formalParametersList  GGS_formalParametersList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_formalParametersList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParametersList  GGS_formalParametersList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_formalParameterList & argument_0
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_formalParametersList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_formalParametersList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@formalParametersList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParametersList::
_addModel (const GGS_formalParameters & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_formalParametersList::
method_first (C_Compiler & _inLexique,
              GGS_formalParameters & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParametersList::
method_last (C_Compiler & _inLexique,
             GGS_formalParameters & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParametersList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_formalParameters & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParametersList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_formalParameters & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameters::constructor_new (_inLexique,
       _p->mFormalParameterList) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_formalParameters'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameters GGS_formalParameters::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_formalParameterList & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_formalParameters result ;
  macroMyNew (result.mPointer, cPtr_formalParameters (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterList  GGS_formalParameters::
reader_mFormalParameterList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_formalParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameters *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameters *) mPointer)->mFormalParameterList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_formalParameters::actualTypeName (void) const {
 return "formalParameters" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_formalParameters * GGS_formalParameters::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_formalParameters *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@formalParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_formalParameter::
cPtr_formalParameter (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mFormalParameterPassingMode (argument_0),
mFormalParameterTypeName (argument_1),
mFormalParameterName (argument_2),
mIsUnused (argument_3) {
}

//---------------------------------------------------------------------------*

bool cPtr_formalParameter::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_formalParameter * _p = dynamic_cast <const cPtr_formalParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalParameterPassingMode._operator_isEqual (_p->mFormalParameterPassingMode).boolValue ()
         && mFormalParameterTypeName._operator_isEqual (_p->mFormalParameterTypeName).boolValue ()
         && mFormalParameterName._operator_isEqual (_p->mFormalParameterName).boolValue ()
         && mIsUnused._operator_isEqual (_p->mIsUnused).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_formalParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @formalParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterPassingMode.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mIsUnused.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_superClassMetamodelComponentIndex (void) const {
  return -1 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelClassID (void) const {
  return 1 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_formalParameter::_metamodelClassIDForClass (void) {
  return 1 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_formalParameter::_metamodelClassName (void) const {
  return "formalParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_formalParameter * cPtr_formalParameter::
_cloneObject (void) const {
  cPtr_formalParameter * _p = NULL ;
  macroMyNew (_p, cPtr_formalParameter (mFormalParameterPassingMode, mFormalParameterTypeName, mFormalParameterName, mIsUnused COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@formalParameterList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_formalParameterList::
_internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParameterList::
_internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS_bool& argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParameterList::
_addAssign_operation (const GGS_formalParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_formalParameter *) inElement.getPtr ())->mFormalParameterPassingMode,
                                ((cPtr_formalParameter *) inElement.getPtr ())->mFormalParameterTypeName,
                                ((cPtr_formalParameter *) inElement.getPtr ())->mFormalParameterName,
                                ((cPtr_formalParameter *) inElement.getPtr ())->mIsUnused) ;
  }
}

//---------------------------------------------------------------------------*

GGS_formalParameterList GGS_formalParameterList::
_operator_concat (const GGS_formalParameterList & inOperand) const {
  GGS_formalParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_formalParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_formalArgumentPassingMode p_0 = p->mFormalParameterPassingMode ;
          GGS_lstring  p_1 = p->mFormalParameterTypeName ;
          GGS_lstring  p_2 = p->mFormalParameterName ;
          GGS_bool p_3 = p->mIsUnused ;
          result._internalAppendValues (p_0, p_1, p_2, p_3) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_formalParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_formalArgumentPassingMode& argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstring & argument_2,
                     const GGS_bool& argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_formalParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalParameterPassingMode,
                                _p->mFormalParameterTypeName,
                                _p->mFormalParameterName,
                                _p->mIsUnused) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_formalParameterList  GGS_formalParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_formalParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalParameterList  GGS_formalParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_formalArgumentPassingMode& argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_lstring & argument_2,
                           const GGS_bool& argument_3
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_formalParameterList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_formalParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@formalParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_formalParameterList::
_addModel (const GGS_formalParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_formalParameterList::
method_first (C_Compiler & _inLexique,
              GGS_formalParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParameterList::
method_last (C_Compiler & _inLexique,
             GGS_formalParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_formalParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_formalParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_formalParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_formalParameter::constructor_new (_inLexique,
       _p->mFormalParameterPassingMode,
       _p->mFormalParameterTypeName,
       _p->mFormalParameterName,
       _p->mIsUnused) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_formalParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameter GGS_formalParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_formalArgumentPassingMode& argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_bool& argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_formalParameter result ;
  macroMyNew (result.mPointer, cPtr_formalParameter (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalArgumentPassingMode GGS_formalParameter::
reader_mFormalParameterPassingMode (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_formalArgumentPassingMode  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_formalParameter::
reader_mFormalParameterTypeName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_formalParameter::
reader_mFormalParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mFormalParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_formalParameter::
reader_mIsUnused (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_formalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_formalParameter *) mPointer)->mIsUnused ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_formalParameter::actualTypeName (void) const {
 return "formalParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_formalParameter * GGS_formalParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_formalParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@actualParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_actualParameter::
cPtr_actualParameter (LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE) {
}

//---------------------------------------------------------------------------*

bool cPtr_actualParameter::
isEqualToObject (const cListElement * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

void cPtr_actualParameter::
appendForDescription (C_Compiler & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "-> instance of @actualParameter" ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_superClassMetamodelComponentIndex (void) const {
  return -1 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelClassID (void) const {
  return 2 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameter::_metamodelClassIDForClass (void) {
  return 2 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameter::_metamodelClassName (void) const {
  return "actualParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_actualParameter * cPtr_actualParameter::
_cloneObject (void) const {
  cPtr_actualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_actualParameter (HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@actualParameterList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_actualParameterList::
_internalAppendValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParameterList::
_internalPrependValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParameterList::
_addAssign_operation (const GGS_actualParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues () ;
  }
}

//---------------------------------------------------------------------------*

GGS_actualParameterList GGS_actualParameterList::
_operator_concat (const GGS_actualParameterList & inOperand) const {
  GGS_actualParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_actualParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          result._internalAppendValues () ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_actualParameterList::
modifier_prependValue (C_Compiler & /* inLexique */
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_actualParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues () ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_actualParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_actualParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_actualParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_actualParameterList result ;
  result._alloc () ;
  result._internalAppendValues () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_actualParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@actualParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParameterList::
_addModel (const GGS_actualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_actualParameterList::
method_first (C_Compiler & _inLexique,
              GGS_actualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParameterList::
method_last (C_Compiler & _inLexique,
             GGS_actualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_actualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_actualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_actualParameter'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const char * GGS_actualParameter::actualTypeName (void) const {
 return "actualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_actualParameter * GGS_actualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_actualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@outputActualParameterList'                *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_outputActualParameter::
cPtr_outputActualParameter (const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mOutputActualParameterExpression (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_outputActualParameter::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_outputActualParameter * _p = dynamic_cast <const cPtr_outputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOutputActualParameterExpression._operator_isEqual (_p->mOutputActualParameterExpression).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_outputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @outputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOutputActualParameterExpression.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_superClassMetamodelComponentIndex (void) const {
  return cPtr_actualParameter::_metamodelComponentIndex () ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputActualParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelClassID (void) const {
  return 3 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputActualParameter::_metamodelClassIDForClass (void) {
  return 3 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputActualParameter::_metamodelClassName (void) const {
  return "outputActualParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_outputActualParameter * cPtr_outputActualParameter::
_cloneObject (void) const {
  cPtr_outputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_outputActualParameter (mOutputActualParameterExpression COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@outputActualParameterList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
_internalAppendValues (const GGS_semanticExpression & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
_internalPrependValues (const GGS_semanticExpression & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
_addAssign_operation (const GGS_outputActualParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_outputActualParameter *) inElement.getPtr ())->mOutputActualParameterExpression) ;
  }
}

//---------------------------------------------------------------------------*

GGS_outputActualParameterList GGS_outputActualParameterList::
_operator_concat (const GGS_outputActualParameterList & inOperand) const {
  GGS_outputActualParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_outputActualParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_semanticExpression  p_0 = p->mOutputActualParameterExpression ;
          result._internalAppendValues (p_0) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_semanticExpression & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOutputActualParameterExpression) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_outputActualParameterList  GGS_outputActualParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_outputActualParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_outputActualParameterList  GGS_outputActualParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_semanticExpression & argument_0
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_outputActualParameterList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_outputActualParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@outputActualParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_outputActualParameterList::
_addModel (const GGS_outputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_outputActualParameterList::
method_first (C_Compiler & _inLexique,
              GGS_outputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputActualParameterList::
method_last (C_Compiler & _inLexique,
             GGS_outputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputActualParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_outputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputActualParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_outputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputActualParameter::constructor_new (_inLexique,
       _p->mOutputActualParameterExpression) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_outputActualParameter'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_outputActualParameter GGS_outputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_semanticExpression & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_outputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_outputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticExpression  GGS_outputActualParameter::
reader_mOutputActualParameterExpression (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_semanticExpression   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_outputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_outputActualParameter *) mPointer)->mOutputActualParameterExpression ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_outputActualParameter::actualTypeName (void) const {
 return "outputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_outputActualParameter * GGS_outputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_outputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@outputInputActualParameterList'              *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_outputInputActualParameter::
cPtr_outputInputActualParameter (const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mOutputInputActualParameterName (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_outputInputActualParameter::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_outputInputActualParameter * _p = dynamic_cast <const cPtr_outputInputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mOutputInputActualParameterName._operator_isEqual (_p->mOutputInputActualParameterName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_outputInputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @outputInputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mOutputInputActualParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_superClassMetamodelComponentIndex (void) const {
  return cPtr_actualParameter::_metamodelComponentIndex () ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputInputActualParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelClassID (void) const {
  return 4 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_outputInputActualParameter::_metamodelClassIDForClass (void) {
  return 4 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_outputInputActualParameter::_metamodelClassName (void) const {
  return "outputInputActualParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_outputInputActualParameter * cPtr_outputInputActualParameter::
_cloneObject (void) const {
  cPtr_outputInputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_outputInputActualParameter (mOutputInputActualParameterName COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  List '@outputInputActualParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
_internalAppendValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
_internalPrependValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
_addAssign_operation (const GGS_outputInputActualParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_outputInputActualParameter *) inElement.getPtr ())->mOutputInputActualParameterName) ;
  }
}

//---------------------------------------------------------------------------*

GGS_outputInputActualParameterList GGS_outputInputActualParameterList::
_operator_concat (const GGS_outputInputActualParameterList & inOperand) const {
  GGS_outputInputActualParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_outputInputActualParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mOutputInputActualParameterName ;
          result._internalAppendValues (p_0) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mOutputInputActualParameterName) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_outputInputActualParameterList  GGS_outputInputActualParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_outputInputActualParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_outputInputActualParameterList  GGS_outputInputActualParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_outputInputActualParameterList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_outputInputActualParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@outputInputActualParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_outputInputActualParameterList::
_addModel (const GGS_outputInputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_outputInputActualParameterList::
method_first (C_Compiler & _inLexique,
              GGS_outputInputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputInputActualParameterList::
method_last (C_Compiler & _inLexique,
             GGS_outputInputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputInputActualParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_outputInputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_outputInputActualParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_outputInputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_outputInputActualParameter::constructor_new (_inLexique,
       _p->mOutputInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_outputInputActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_outputInputActualParameter GGS_outputInputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_outputInputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_outputInputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_outputInputActualParameter::
reader_mOutputInputActualParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_outputInputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_outputInputActualParameter *) mPointer)->mOutputInputActualParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_outputInputActualParameter::actualTypeName (void) const {
 return "outputInputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_outputInputActualParameter * GGS_outputInputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_outputInputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@inputActualParameterList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_inputActualParameter::
cPtr_inputActualParameter (const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) :
cPtr_actualParameter (THERE),
mInputActualParameterName (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_inputActualParameter::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_inputActualParameter * _p = dynamic_cast <const cPtr_inputActualParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mInputActualParameterName._operator_isEqual (_p->mInputActualParameterName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_inputActualParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @inputActualParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mInputActualParameterName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_superClassMetamodelComponentIndex (void) const {
  return cPtr_actualParameter::_metamodelComponentIndex () ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputActualParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelClassID (void) const {
  return 5 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputActualParameter::_metamodelClassIDForClass (void) {
  return 5 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputActualParameter::_metamodelClassName (void) const {
  return "inputActualParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_inputActualParameter * cPtr_inputActualParameter::
_cloneObject (void) const {
  cPtr_inputActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_inputActualParameter (mInputActualParameterName COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     List '@inputActualParameterList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
_internalAppendValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
_internalPrependValues (const GGS_lstring & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
_addAssign_operation (const GGS_inputActualParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_inputActualParameter *) inElement.getPtr ())->mInputActualParameterName) ;
  }
}

//---------------------------------------------------------------------------*

GGS_inputActualParameterList GGS_inputActualParameterList::
_operator_concat (const GGS_inputActualParameterList & inOperand) const {
  GGS_inputActualParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_inputActualParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mInputActualParameterName ;
          result._internalAppendValues (p_0) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mInputActualParameterName) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_inputActualParameterList  GGS_inputActualParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_inputActualParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_inputActualParameterList  GGS_inputActualParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_inputActualParameterList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_inputActualParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@inputActualParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_inputActualParameterList::
_addModel (const GGS_inputActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_inputActualParameterList::
method_first (C_Compiler & _inLexique,
              GGS_inputActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputActualParameterList::
method_last (C_Compiler & _inLexique,
             GGS_inputActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputActualParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_inputActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputActualParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_inputActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputActualParameter::constructor_new (_inLexique,
       _p->mInputActualParameterName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_inputActualParameter'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_inputActualParameter GGS_inputActualParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_inputActualParameter result ;
  macroMyNew (result.mPointer, cPtr_inputActualParameter (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_inputActualParameter::
reader_mInputActualParameterName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_inputActualParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_inputActualParameter *) mPointer)->mInputActualParameterName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_inputActualParameter::actualTypeName (void) const {
 return "inputActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_inputActualParameter * GGS_inputActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_inputActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@inputJokerActualParameterList'              *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_inputJokerActualParameter::
cPtr_inputJokerActualParameter (LOCATION_ARGS) :
cPtr_actualParameter (THERE) {
}

//---------------------------------------------------------------------------*

bool cPtr_inputJokerActualParameter::
isEqualToObject (const cListElement * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

void cPtr_inputJokerActualParameter::
appendForDescription (C_Compiler & /* _inLexique */,
                      C_String & ioString,
                      const sint32 /* inIndentation */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  ioString << "-> instance of @inputJokerActualParameter" ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_superClassMetamodelComponentIndex (void) const {
  return cPtr_actualParameter::_metamodelComponentIndex () ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputJokerActualParameter::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelClassID (void) const {
  return 6 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_inputJokerActualParameter::_metamodelClassIDForClass (void) {
  return 6 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_inputJokerActualParameter::_metamodelClassName (void) const {
  return "inputJokerActualParameter" ;
}

//---------------------------------------------------------------------------*

cPtr_inputJokerActualParameter * cPtr_inputJokerActualParameter::
_cloneObject (void) const {
  cPtr_inputJokerActualParameter * _p = NULL ;
  macroMyNew (_p, cPtr_inputJokerActualParameter (HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  List '@inputJokerActualParameterList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
_internalAppendValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
_internalPrependValues () {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
_addAssign_operation (const GGS_inputJokerActualParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues () ;
  }
}

//---------------------------------------------------------------------------*

GGS_inputJokerActualParameterList GGS_inputJokerActualParameterList::
_operator_concat (const GGS_inputJokerActualParameterList & inOperand) const {
  GGS_inputJokerActualParameterList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_inputJokerActualParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          result._internalAppendValues () ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
modifier_prependValue (C_Compiler & /* inLexique */
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues () ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_inputJokerActualParameterList  GGS_inputJokerActualParameterList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_inputJokerActualParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_inputJokerActualParameterList  GGS_inputJokerActualParameterList::
constructor_listWithValue (C_Compiler & /* _inLexique */
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_inputJokerActualParameterList result ;
  result._alloc () ;
  result._internalAppendValues () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_inputJokerActualParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@inputJokerActualParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_inputJokerActualParameterList::
_addModel (const GGS_inputJokerActualParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_inputJokerActualParameterList::
method_first (C_Compiler & _inLexique,
              GGS_inputJokerActualParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputJokerActualParameterList::
method_last (C_Compiler & _inLexique,
             GGS_inputJokerActualParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputJokerActualParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_inputJokerActualParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_inputJokerActualParameterList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_inputJokerActualParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_inputJokerActualParameter::constructor_new (_inLexique) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_inputJokerActualParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_inputJokerActualParameter GGS_inputJokerActualParameter::
constructor_new (C_Compiler & /* inLexique */
                                COMMA_LOCATION_ARGS) {
  GGS_inputJokerActualParameter result ;
  macroMyNew (result.mPointer, cPtr_inputJokerActualParameter (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_inputJokerActualParameter::actualTypeName (void) const {
 return "inputJokerActualParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_inputJokerActualParameter * GGS_inputJokerActualParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_inputJokerActualParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@actualParametersList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_actualParameters::
cPtr_actualParameters (const GGS_actualParameterList & argument_0
                                COMMA_LOCATION_ARGS) :
C_GGS_MetamodelEntity (THERE),
mActualParameter (argument_0) {
}

//---------------------------------------------------------------------------*

bool cPtr_actualParameters::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_actualParameters * _p = dynamic_cast <const cPtr_actualParameters *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mActualParameter._operator_isEqual (_p->mActualParameter).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_actualParameters::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @actualParameters" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mActualParameter.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelComponentIndex (void) const {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelComponentIndexForClass (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_superClassMetamodelComponentIndex (void) const {
  return -1 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameters::_metamodelComponentName (void) const {
  return gMetamodelManager.mMetamodelComponentName ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelClassID (void) const {
  return 7 ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_actualParameters::_metamodelClassIDForClass (void) {
  return 7 ;
}

//---------------------------------------------------------------------------*

const char * cPtr_actualParameters::_metamodelClassName (void) const {
  return "actualParameters" ;
}

//---------------------------------------------------------------------------*

cPtr_actualParameters * cPtr_actualParameters::
_cloneObject (void) const {
  cPtr_actualParameters * _p = NULL ;
  macroMyNew (_p, cPtr_actualParameters (mActualParameter COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       List '@actualParametersList'                        *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_actualParametersList::
_internalAppendValues (const GGS_actualParameterList & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParametersList::
_internalPrependValues (const GGS_actualParameterList & argument_0) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParametersList::
_addAssign_operation (const GGS_actualParameters & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_actualParameters *) inElement.getPtr ())->mActualParameter) ;
  }
}

//---------------------------------------------------------------------------*

GGS_actualParametersList GGS_actualParametersList::
_operator_concat (const GGS_actualParametersList & inOperand) const {
  GGS_actualParametersList result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_actualParameters * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_actualParameterList  p_0 = p->mActualParameter ;
          result._internalAppendValues (p_0) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_actualParametersList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_actualParameterList & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_actualParametersList::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mActualParameter) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_actualParametersList  GGS_actualParametersList::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_actualParametersList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParametersList  GGS_actualParametersList::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_actualParameterList & argument_0
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS_actualParametersList result ;
  result._alloc () ;
  result._internalAppendValues (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_actualParametersList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@actualParametersList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_actualParametersList::
_addModel (const GGS_actualParameters & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS_actualParametersList::
method_first (C_Compiler & _inLexique,
              GGS_actualParameters & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParametersList::
method_last (C_Compiler & _inLexique,
             GGS_actualParameters & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParametersList::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_actualParameters & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS_actualParametersList::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_actualParameters & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_actualParameters::constructor_new (_inLexique,
       _p->mActualParameter) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_actualParameters'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_actualParameters GGS_actualParameters::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_actualParameterList & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_actualParameters result ;
  macroMyNew (result.mPointer, cPtr_actualParameters (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_actualParameterList  GGS_actualParameters::
reader_mActualParameter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_actualParameterList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_actualParameters *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_actualParameters *) mPointer)->mActualParameter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_actualParameters::actualTypeName (void) const {
 return "actualParameters" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_actualParameters * GGS_actualParameters::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_actualParameters *) mPointer ;
  }
#endif

