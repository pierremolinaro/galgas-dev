//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'treewalkingMetamodel.h'                        *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       june 3rd, 2007, at 20h35'9"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef treewalkingMetamodel_METAMODEL_DEFINED
#define treewalkingMetamodel_METAMODEL_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/predefined_types.h"
#include "commonSemantics.h"
#include "instructionMetamodel.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

uint32 _metamodel_index_for_treewalkingMetamodel (void) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_treewalkingRuleList ;
class GGS_treewalkingRule ;
class cPtr_treewalkingRule ;
class GGS_treewalkingComponentRootList ;
class GGS_treewalkingComponentRoot ;
class cPtr_treewalkingComponentRoot ;
class GGS_referenceCallInstructionList ;
class GGS_referenceCallInstruction ;
class cPtr_referenceCallInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_treewalkingRule'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_treewalkingRule : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_treewalkingRule constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_treewalkingRule * getPtr (void) const {
    return (cPtr_treewalkingRule *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mEntityName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_formalParameters  reader_mFormalParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticInstructions  reader_mInstructionList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_treewalkingRule * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_treewalkingRule * operator () (void) const {
      return (cPtr_treewalkingRule *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       list '@treewalkingRuleList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_treewalkingRuleList : public AC_galgas_list {
  public : typedef cPtr_treewalkingRule element_type ;
//--- Constructor 'emptyList'
  public : static GGS_treewalkingRuleList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_treewalkingRuleList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_treewalkingRuleList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_treewalkingRule & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_treewalkingRule & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_treewalkingRule & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_treewalkingRule & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_treewalkingRule & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_treewalkingRuleList _operator_concat (const GGS_treewalkingRuleList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_formalParameters & argument_1,
                                const GGS_semanticInstructions & argument_2) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_treewalkingRule & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_treewalkingComponentRoot'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_treewalkingComponentRoot : public AC_galgas_entity {
//--- 'new' constructor
  public : static GGS_treewalkingComponentRoot constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- getPtr
  public : inline cPtr_treewalkingComponentRoot * getPtr (void) const {
    return (cPtr_treewalkingComponentRoot *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mTreewalkingComponentName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_mMetamodelReferenceName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_mImportedComponentFileNameList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_semanticDeclarationList  reader_mSemanticDeclarationList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_treewalkingRuleList  reader_mTreewalkingRules (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_treewalkingComponentRoot * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_treewalkingComponentRoot * operator () (void) const {
      return (cPtr_treewalkingComponentRoot *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@treewalkingComponentRootList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_treewalkingComponentRootList : public AC_galgas_list {
  public : typedef cPtr_treewalkingComponentRoot element_type ;
//--- Constructor 'emptyList'
  public : static GGS_treewalkingComponentRootList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_treewalkingComponentRootList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_treewalkingComponentRootList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_treewalkingComponentRoot & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_treewalkingComponentRoot & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_treewalkingComponentRoot & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_treewalkingComponentRoot & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_treewalkingComponentRoot & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_treewalkingComponentRootList _operator_concat (const GGS_treewalkingComponentRootList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_semanticDeclarationList & argument_3,
                                const GGS_treewalkingRuleList & argument_4) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_treewalkingComponentRoot & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_referenceCallInstruction'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_referenceCallInstruction : public GGS_semanticInstruction {
//--- 'new' constructor
  public : static GGS_referenceCallInstruction constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_mReferenceName (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_actualParameters  reader_mActualParameterList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_referenceCallInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_referenceCallInstruction * operator () (void) const {
      return (cPtr_referenceCallInstruction *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   list '@referenceCallInstructionList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_referenceCallInstructionList : public AC_galgas_list {
  public : typedef cPtr_referenceCallInstruction element_type ;
//--- Constructor 'emptyList'
  public : static GGS_referenceCallInstructionList constructor_emptyList (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;
  public : static GGS_referenceCallInstructionList constructor_listWithValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Get first object
  public : inline element_type * firstObject (void) const {
    return (element_type *) internalFirstObject () ;
  }
//--- Get last object
  public : inline element_type * lastObject (void) const {
    return (element_type *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : inline const GGS_referenceCallInstructionList * operator () (UNUSED_LOCATION_ARGS) const { return this ;}

//--- Method 'first'
/*  public : void method_first (C_Compiler & _inLexique,
                              GGS_referenceCallInstruction & outElement
                              COMMA_LOCATION_ARGS) const ; */
//--- Method 'last'
/*  public : void method_last (C_Compiler & _inLexique,
                             GGS_referenceCallInstruction & outElement
                             COMMA_LOCATION_ARGS) const ; */
//--- Modifier 'popLast'
/*  public : void modifier_popLast (C_Compiler & _inLexique,
                                  GGS_referenceCallInstruction & outElement
                                  COMMA_LOCATION_ARGS) ; */
//--- Modifier 'popFirst'
/*  public : void modifier_popFirst (C_Compiler & _inLexique,
                                   GGS_referenceCallInstruction & outElement
                                   COMMA_LOCATION_ARGS) ; */
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_referenceCallInstruction & inElement) ;
//--- Handling '.' GALGAS operator
  public : GGS_referenceCallInstructionList _operator_concat (const GGS_referenceCallInstructionList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1) ;

  protected : void _internalPrependValues (const GGS_lstring & argument_0,
                                const GGS_actualParameters & argument_1) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--- Metamodel Add method
  public : void _addModel (const GGS_referenceCallInstruction & inOperand) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@treewalkingRuleList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_treewalkingRule : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mEntityName ;
  public : GGS_formalParameters  mFormalParameterList ;
  public : GGS_semanticInstructions  mInstructionList ;
//--- Constructor
  public : cPtr_treewalkingRule (const GGS_lstring & ,
                                const GGS_formalParameters & ,
                                const GGS_semanticInstructions & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_treewalkingRule * nextObject (void) const {
    return (cPtr_treewalkingRule *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_treewalkingRule * previousObject (void) const {
    return (cPtr_treewalkingRule *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_treewalkingRule * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_treewalkingRuleList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@treewalkingComponentRootList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_treewalkingComponentRoot : public C_GGS_MetamodelEntity {
//--- Attributes
  public : GGS_lstring  mTreewalkingComponentName ;
  public : GGS_lstring  mMetamodelReferenceName ;
  public : GGS_lstringlist  mImportedComponentFileNameList ;
  public : GGS_semanticDeclarationList  mSemanticDeclarationList ;
  public : GGS_treewalkingRuleList  mTreewalkingRules ;
//--- Constructor
  public : cPtr_treewalkingComponentRoot (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_lstringlist & ,
                                const GGS_semanticDeclarationList & ,
                                const GGS_treewalkingRuleList & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_treewalkingComponentRoot * nextObject (void) const {
    return (cPtr_treewalkingComponentRoot *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_treewalkingComponentRoot * previousObject (void) const {
    return (cPtr_treewalkingComponentRoot *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_treewalkingComponentRoot * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_treewalkingComponentRootList ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@referenceCallInstructionList'               *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_referenceCallInstruction : public cPtr_semanticInstruction {
//--- Attributes
  public : GGS_lstring  mReferenceName ;
  public : GGS_actualParameters  mActualParameterList ;
//--- Constructor
  public : cPtr_referenceCallInstruction (const GGS_lstring & ,
                                const GGS_actualParameters & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline cPtr_referenceCallInstruction * nextObject (void) const {
    return (cPtr_referenceCallInstruction *) internalNextItem () ;
  }

//--- Access to previous
  public : inline cPtr_referenceCallInstruction * previousObject (void) const {
    return (cPtr_referenceCallInstruction *) internalPreviousItem () ;
  }

//--- Element comparison
  public : virtual bool isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Metamodel Index
  public : virtual uint32 _metamodelIndex (void) const ;

//--- Metamodel Class ID
  public : virtual uint32 _metamodelClassID (void) const ;

//--- 'clone' virtual method
  public : virtual cPtr_referenceCallInstruction * _cloneObject (void) const ;

//--- Friend class declarations
  friend class GGS_referenceCallInstructionList ;
} ;

//---------------------------------------------------------------------------*

#endif
