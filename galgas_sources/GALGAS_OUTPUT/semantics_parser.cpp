//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semantics_parser.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 8th, 2009, at 18h50'17"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semantics_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semantics_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgasTemplateGrammar.h"
#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (571)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  const GGS_bool cond_21067 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (572))).operator_isNotEqual (var_cas_basename) ;
  if (cond_21067.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (574)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (576)) ;
  }
  GGS_string var_cas_defLexique = GGS_string ("") ;
  GGS_ModelMap  var_cas_modelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_ActionMap  var_cas_actionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentEntitiesMap ;
  GGS_stringset  var_cas_classNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  nt_import_headers_semantics_and_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_optionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_componentEntitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_23682 = inLexique.parsingContext () ;
    GGS_typeTableRoutinesAimplementer  var_cas_UNUSED_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_UNUSED_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableEnAvant  var_cas_UNUSED_tableEnAvant = var_cas_tableEnAvant ;
    GGS_M_semanticsEntitiesForUse  var_cas_UNUSED_componentSemanticsEntitiesMap = var_cas_componentEntitiesMap ;
    GGS_EXsemanticContext var_cas_UNUSED_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappers ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_UNUSED_componentSemanticsEntitiesMap, var_cas_UNUSED_tableNomRoutinesDeclarees, var_cas_UNUSED_tableEnAvant, var_cas_UNUSED_tableRoutinesAimplementer, var_cas_UNUSED_semanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_23682) ;
    GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_ (inLexique, var_cas_componentEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_optionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  const GGS_bool cond_24125 = (var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) COMMA_SOURCE_FILE_AT_LINE (657))).operator_not () ;
  if (cond_24125.isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentEntitiesMap COMMA_SOURCE_FILE_AT_LINE (659)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_24268 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_24268 = NULL ;
    while (((operand_24268 = enumerator_24268.nextObject ()))) {
      macroValidPointer (operand_24268) ;
      const GGS_bool cond_24462 = (var_cas_tableRoutinesAimplementer.reader_hasKey (inLexique, operand_24268->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) COMMA_SOURCE_FILE_AT_LINE (676))).operator_not () ;
      if (cond_24462.isBuiltAndTrue ()) {
        operand_24268->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the routine '")).operator_concat (operand_24268->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)))).operator_concat (GGS_string ("' is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }
    }
  }
  {
    GGS_typeTableEnAvant::cEnumerator enumerator_24562 (var_cas_tableEnAvant, true) ;
    const GGS_typeTableEnAvant::cElement * operand_24562 = NULL ;
    while (((operand_24562 = enumerator_24562.nextObject ()))) {
      macroValidPointer (operand_24562) ;
      const GGS_bool cond_24757 = (var_cas_componentEntitiesMap.reader_hasKey (inLexique, operand_24562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)) COMMA_SOURCE_FILE_AT_LINE (683))).operator_not () ;
      if (cond_24757.isBuiltAndTrue ()) {
        operand_24562->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_24562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684)))).operator_concat (GGS_string ("' forward type is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
      }
    }
  }
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (689)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (721)) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_importSemantics (inLexique, var_cas_ioSemanticsComponentsMap, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_ioSemanticContext, var_cas_ioImportedSemanticsComponentNameSet) ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_27032 = (var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (754)) COMMA_SOURCE_FILE_AT_LINE (754))).operator_not () ;
  if (cond_27032.isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (756)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "parse_semantics_component_for_importing"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parse_semantics_component_for_importing (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFileName,
                                GGS_M_semanticsComponents  & var_cas_ioSemanticsMapForUse,
                                GGS_EXsemanticContext & var_cas_ioSemanticContext,
                                GGS_stringset  & var_cas_ioImportedSemanticsComponentNameSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parse_semantics_component_for_importing at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importSemantics (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSemanticsMapForUse,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioImportedSemanticsComponentNameSet
                                  COMMA_SOURCE_FILE_AT_LINE (828)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parse_semantics_component_for_importing\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'import_headers_semantics_and_grammars'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_ (galgas_scanner & inLexique,
                                GGS_stringset  &var_cas_outImportedSemanticsComponentNameSet,
                                GGS_stringset  &var_cas_outIncludedMetamodelComponents,
                                GGS_stringset  &var_cas_outImportedOptionComponents,
                                GGS_stringset  &var_cas_outImportedGrammarComponents,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_stringset  &var_cas_outInclusionsForImplementationFile,
                                GGS_stringset  &var_cas_outInclusionsForHeaderFile,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outInclusionsForHeaderFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outInclusionsForImplementationFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedSemanticsComponentNameSet = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedGrammarComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_ioOptionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_CharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (872)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_StringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (874)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_UIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (876)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_SIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (878)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_UInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (880)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_SInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (882)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_HERE), GGS_BoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (884)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_DoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (886)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_HERE), GGS_LCharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (888)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_HERE), GGS_LStringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (890)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_HERE), GGS_LUIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (892)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_HERE), GGS_LSIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (894)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_HERE), GGS_LUInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (896)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_HERE), GGS_LSInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (898)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_HERE), GGS_LBoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (900)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_HERE), GGS_LDoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (902)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_HERE), GGS_LocationModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (904)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("stringset"), GGS_location (inLexique) COMMA_HERE), GGS_StringsetModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (906)) ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_ioComponentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (908)) ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (921))) ;
              var_cas_outImportedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
              GGS_M_cli_options  var_cas_boolOptionsMap ;
              GGS_M_cli_options  var_cas_uintOptionsMap ;
              GGS_M_cli_options  var_cas_stringOptionsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_fileName ;
              inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
              const GGS_M_optionComponents  temp_33100 = var_cas_importedOptionComponentsMap ;
              if (temp_33100.isBuilt ()) {
                temp_33100 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (934)) ;
              }
              var_cas_ioOptionsComponentsMapForUse.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (935)) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              GGS_lstring  var_cas_grammarComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_grammarComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForImplementationFile.addAssign_operation ((var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (940))).operator_concat (GGS_string (".h"))) ;
              var_cas_outImportedGrammarComponents.addAssign_operation (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_ (inLexique, var_cas_sourceFile, var_cas_grammarComponentsMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioSemanticContext) ;
              GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_nonterminalSymbolParametersMap ;
              GGS_lstring  var_cas_lexiqueClassName ;
              GGS_M_optionComponents  automatic_var_0 ;
              const GGS_M_grammarComponents  temp_34080 = var_cas_grammarComponentsMap ;
              if (temp_34080.isBuilt ()) {
                temp_34080 (HERE)->method_searchKey (inLexique, var_cas_grammarComponentName, var_cas_nonterminalSymbolParametersMap, var_cas_lexiqueClassName, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (955)) ;
              }
              GGS_M_nonterminalSymbolAlts  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
              {
                GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_34261 (var_cas_nonterminalSymbolParametersMap, true) ;
                const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_34261 = NULL ;
                while (((operand_34261 = enumerator_34261.nextObject ()))) {
                  macroValidPointer (operand_34261) ;
                  GGS_L_EXsignature  var_cas_formalParametersList = GGS_L_EXsignature ::constructor_emptyList () ;
                  {
                    GGS_signatureForGrammarAnalysis::cEnumerator enumerator_34360 (operand_34261->mInfo.mFormalParametersList, true) ;
                    const GGS_signatureForGrammarAnalysis::cElement * operand_34360 = NULL ;
                    while (((operand_34360 = enumerator_34360.nextObject ()))) {
                      macroValidPointer (operand_34360) ;
                      GGS_AC_semanticsEntity  var_cas_e ;
                      const GGS_M_semanticsEntitiesForUse  temp_34450 = var_cas_ioComponentSemanticsEntitiesMap ;
                      if (temp_34450.isBuilt ()) {
                        temp_34450 (HERE)->method_searchKey (inLexique, operand_34360->mGalgasTypeNameForGrammarAnalysis, var_cas_e COMMA_SOURCE_FILE_AT_LINE (961)) ;
                      }
                      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, operand_34360->mGalgasTypeNameForGrammarAnalysis COMMA_SOURCE_FILE_AT_LINE (962)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (962)) ;
                      var_cas_formalParametersList.addAssign_operation (var_cas_type, operand_34360->mFormalArgumentPassingModeForGrammarAnalysis) ;
                    }
                  }
                  var_cas_grammarAltMap.modifier_insertKey (inLexique, operand_34261->mKey, var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (965)) ;
                }
              }
              GGS_AC_semanticsEntity  var_cas_e = GGS_C_grammarForSemantics ::constructor_new (inLexique, var_cas_grammarAltMap, var_cas_lexiqueClassName COMMA_HERE) ;
              var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_grammarComponentName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (968)) ;
              GGS_lstring  var_cas_path = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_extension = GGS_lstring ::constructor_new (inLexique, GGS_string ("h"), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_fileNameWithPath ;
              if (var_cas_path.isBuilt () &&
                  var_cas_grammarComponentName.isBuilt () &&
                  var_cas_extension.isBuilt ()) {
                ::routine_buildFileNameWithPath (inLexique,  var_cas_fileNameWithPath,  var_cas_path,  var_cas_grammarComponentName,  var_cas_extension COMMA_SOURCE_FILE_AT_LINE (972)) ;
              }
              var_cas_outInclusionsForImplementationFile.addAssign_operation (var_cas_fileNameWithPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (973))) ;
              {
                GGS_M_grammarComponents::cEnumerator enumerator_35317 (var_cas_grammarComponentsMap, true) ;
                const GGS_M_grammarComponents::cElement * operand_35317 = NULL ;
                while (((operand_35317 = enumerator_35317.nextObject ()))) {
                  macroValidPointer (operand_35317) ;
                  const GGS_bool cond_35571 = (var_cas_ioGrammarComponentsMap.reader_hasKey (inLexique, operand_35317->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (975)) COMMA_SOURCE_FILE_AT_LINE (975))).operator_not () ;
                  if (cond_35571.isBuiltAndTrue ()) {
                    var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, operand_35317->mKey, operand_35317->mInfo.mNonterminalSymbolParametersMap, operand_35317->mInfo.mLexiqueName, operand_35317->mInfo.mOptionsMap COMMA_SOURCE_FILE_AT_LINE (976)) ;
                  }
                }
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (988))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              const GGS_bool cond_37100 = (var_cas_outImportedSemanticsComponentNameSet.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (992)) COMMA_SOURCE_FILE_AT_LINE (992))).operator_not () ;
              if (cond_37100.isBuiltAndTrue ()) {
                var_cas_outImportedSemanticsComponentNameSet.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (993))) ;
                ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_outImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (995)) ;
                GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
                GGS_M_optionComponents  var_cas_importedOptionsComponentsMap ;
                GGS_ModelMap  automatic_var_1 ;
                GGS_ActionMap  automatic_var_2 ;
                GGS_stringset  automatic_var_3 ;
                GGS_stringset  automatic_var_4 ;
                GGS_stringset  automatic_var_5 ;
                const GGS_M_semanticsComponents  temp_36400 = var_cas_ioSemanticsComponentsMap ;
                if (temp_36400.isBuilt ()) {
                  temp_36400 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_importedOptionsComponentsMap, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1003)) ;
                }
                {
                  GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_36503 (var_cas_importedEntities, true) ;
                  const GGS_M_semanticsEntitiesForUse::cElement * operand_36503 = NULL ;
                  while (((operand_36503 = enumerator_36503.nextObject ()))) {
                    macroValidPointer (operand_36503) ;
                    const GGS_bool cond_36674 = (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_36503->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1005)) COMMA_SOURCE_FILE_AT_LINE (1005))).operator_not () ;
                    if (cond_36674.isBuiltAndTrue ()) {
                      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_36503->mKey, operand_36503->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1006)) ;
                    }
                  }
                }
                {
                  GGS_M_optionComponents::cEnumerator enumerator_36876 (var_cas_importedOptionsComponentsMap, true) ;
                  const GGS_M_optionComponents::cElement * operand_36876 = NULL ;
                  while (((operand_36876 = enumerator_36876.nextObject ()))) {
                    macroValidPointer (operand_36876) ;
                    const GGS_bool cond_37063 = (var_cas_ioOptionsComponentsMapForUse.reader_hasKey (inLexique, operand_36876->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1012)) COMMA_SOURCE_FILE_AT_LINE (1012))).operator_not () ;
                    if (cond_37063.isBuiltAndTrue ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_36876->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)))).operator_concat (GGS_string ("' option component must have been imported")) COMMA_SOURCE_FILE_AT_LINE (1014)) ;
                    }
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1018)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_stringset  &var_cas_outIncludedSemanticsComponents,
                                GGS_stringset  &var_cas_outIncludedOptionComponents,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outIncludedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedSemanticsComponents.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1070))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_ioImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (1074)) ;
              GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
              GGS_ModelMap  automatic_var_6 ;
              GGS_ActionMap  automatic_var_7 ;
              GGS_stringset  automatic_var_8 ;
              GGS_stringset  automatic_var_9 ;
              GGS_stringset  automatic_var_10 ;
              GGS_M_optionComponents  automatic_var_11 ;
              const GGS_M_semanticsComponents  temp_39195 = var_cas_ioSemanticsComponentsMap ;
              if (temp_39195.isBuilt ()) {
                temp_39195 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9, automatic_var_10, automatic_var_11, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1081)) ;
              }
              {
                GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_39269 (var_cas_importedEntities, true) ;
                const GGS_M_semanticsEntitiesForUse::cElement * operand_39269 = NULL ;
                while (((operand_39269 = enumerator_39269.nextObject ()))) {
                  macroValidPointer (operand_39269) ;
                  const GGS_bool cond_39434 = (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_39269->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)) COMMA_SOURCE_FILE_AT_LINE (1083))).operator_not () ;
                  if (cond_39434.isBuiltAndTrue ()) {
                    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_39269->mKey, operand_39269->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1084)) ;
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1088)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1107_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  automatic_var_12 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_12) ;
  const GGS_bool cond_41641 = var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
  if (cond_41641.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_41369 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_41369.isBuilt ()) {
      temp_41369 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1136)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1137)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1138)) ;
  }else if (cond_41641.isBuiltAndFalse ()) {
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1144)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1146)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea = GGS_typeRoutineAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1107_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  const GGS_bool cond_43856 = (var_cas_ioExternActionMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1203)) COMMA_SOURCE_FILE_AT_LINE (1203))).operator_not () ;
  if (cond_43856.isBuiltAndTrue ()) {
    var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1204)) ;
  }
  const GGS_bool cond_44287 = var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206)) ;
  if (cond_44287.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_44014 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_44014.isBuilt ()) {
      temp_44014 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1208)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1209)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1210)) ;
  }else if (cond_44287.isBuiltAndFalse ()) {
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1216)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1218)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1229)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1107_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1241_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  automatic_var_13 ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_13) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) COMMA_HERE) ;
  GGS_bool var_cas_modeIn = GGS_bool (false) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1283)) ;
  const GGS_bool cond_47573 = var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)) COMMA_SOURCE_FILE_AT_LINE (1286)) ;
  if (cond_47573.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_47164 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_47164.isBuilt ()) {
      temp_47164 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1288)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1289)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1290)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1295)) ;
  }else if (cond_47573.isBuiltAndFalse ()) {
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1302)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1304)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea = GGS_typeFonctionAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_returnedType, var_cas_returnedVar, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1334)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1241_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)) COMMA_HERE) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1377)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1379)) ;
  const GGS_bool cond_51029 = var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)) COMMA_SOURCE_FILE_AT_LINE (1381)) ;
  if (cond_51029.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_50619 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_50619.isBuilt ()) {
      temp_50619 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1383)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1384)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1386)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1385)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1390)) ;
  }else if (cond_51029.isBuiltAndFalse ()) {
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1397)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1399)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1410)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1241_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1420_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClassName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_outSuperClassMessage = GGS_string ("") ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1420_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1420_19_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1466_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outSuperClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_54595 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_54595.isBuilt ()) {
    temp_54595 (HERE)->method_searchKey (inLexique, var_cas_outSuperClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1482)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1484)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1484)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1485)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1486)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) ;
  var_cas_outSuperClassMessage = var_cas_classType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1494)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1466_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  GGS_lstring  var_cas_superClassName ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_superClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_56195 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_56195.isBuilt ()) {
    temp_56195 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1514)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1516)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1516)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  GGS_TypeModel  var_cas_type ;
  const GGS_ModelMap  temp_57078 = var_cas_ioModelMap ;
  if (temp_57078.isBuilt ()) {
    temp_57078 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1529)) ;
  }
  { const GGS_TypeModel _var_57535 = var_cas_type ; // CAST instruction
    if (_var_57535.getPtr () != NULL) {
      macroValidPointer (_var_57535.getPtr ()) ;
      if (dynamic_cast <cPtr_ClassModel *> (_var_57535.getPtr ()) != NULL) {
        const GGS_ClassModel var_cas_model (_var_57535.getPtr ()) ;
        var_cas_outSuperClasses = var_cas_model.reader_mSuperClasses (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) ;
        var_cas_outAttributeList = var_cas_model.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1533)) ;
        var_cas_outMessageMap = var_cas_model.reader_mMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1534)) ;
      }else{
        var_cas_superClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1536)))).operator_concat (GGS_string ("' type is not a class")) COMMA_SOURCE_FILE_AT_LINE (1538)) ;
        var_cas_outSuperClasses.drop () ;
        var_cas_outAttributeList.drop () ;
        var_cas_outMessageMap.drop () ;
      }
    }
  }
  var_cas_outSuperClasses.addAssign_operation (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1539))) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1466_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1553_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1553_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1553_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1599_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1599_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1599_50_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1641_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1641_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1641_28_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lazy_reader'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1701_18_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_L_lazyAttributeList  &var_cas_ioLazyAttributeList) {
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_64002 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_64002 = NULL ;
    while (((operand_64002 = enumerator_64002.nextObject ()))) {
      macroValidPointer (operand_64002) ;
      GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_64002->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)), operand_64002->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_64002->mKey, operand_64002->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1721)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_computedAttributeTypeAndNameList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_lstring  var_cas_attributeTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_lstring  var_cas_attributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_64479 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_64479.isBuilt ()) {
          temp_64479 (HERE)->method_searchKey (inLexique, var_cas_attributeTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1730)) ;
        }
        GGS_AC_galgasType  var_cas_t = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_attributeTypeName COMMA_SOURCE_FILE_AT_LINE (1731)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1731)) ;
        GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, var_cas_attributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)), var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)) COMMA_HERE) ;
        var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_attributeName, var_cas_t, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1733)) ;
        var_cas_computedAttributeTypeAndNameList.addAssign_operation (var_cas_t, var_cas_attributeName) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_L_lazyAttributeList  var_cas_lazyAttributeListForSelfAndSuper = var_cas_ioLazyAttributeList ;
  var_cas_lazyAttributeListForSelfAndSuper.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, GGS_typeInstructionList ::constructor_emptyList ()) ;
  GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1756)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1770)) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1774)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioLazyAttributeList.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, var_cas_instructionsList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1701_18_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'class_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1800_24_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      const GGS_bool cond_67802 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) COMMA_SOURCE_FILE_AT_LINE (1814))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1815)) COMMA_SOURCE_FILE_AT_LINE (1815)))).operator_not () ;
      if (cond_67802.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1817)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_string var_cas_superClassMessage ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting ;
      GGS_lstring  automatic_var_14 ;
      nt_parent_class_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, automatic_var_14, var_cas_superClassMessage, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          const GGS_bool cond_68752 = (var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_isNotEqual (GGS_string ("generatedInSeparateFile")) ;
          if (cond_68752.isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (1846)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          const GGS_bool cond_68970 = (var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1848))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_68970.isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (1850)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  const GGS_bool cond_70041 = (var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1877))).operator_strictSup (GGS_uint (0U)) ;
                  if (cond_70041.isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (1879)) ;
                  }else if (cond_70041.isBuiltAndFalse ()) {
                    const GGS_bool cond_70164 = (var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1879))).operator_isEqual (GGS_uint (0U)) ;
                    if (cond_70164.isBuiltAndTrue ()) {
                      var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (1881)) ;
                    }else if (cond_70164.isBuiltAndFalse ()) {
                      var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1882)) ;
                    }
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  const GGS_bool cond_70611 = (var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)) COMMA_SOURCE_FILE_AT_LINE (1891))).operator_not () ;
                  if (cond_70611.isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (1892)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (1894)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      const GGS_bool cond_72628 = ((var_cas_superClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1960))).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1960))).operator_isEqual (GGS_uint (0U))) ;
      if (cond_72628.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this class should defined a class message, as it inherits from a class that does") COMMA_SOURCE_FILE_AT_LINE (1962)) ;
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_72719 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_72719 = NULL ;
        while (((operand_72719 = enumerator_72719.nextObject ()))) {
          macroValidPointer (operand_72719) ;
          const GGS_bool cond_72876 = (var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_72719->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1965)) COMMA_SOURCE_FILE_AT_LINE (1965))).operator_not () ;
          if (cond_72876.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_72719->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1966)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (1967)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1983)) ;
      GGS_typeListeAttributsSemantiques  var_cas_setterAttributeModifierToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_73577 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_73577 = NULL ;
        while (((operand_73577 = enumerator_73577.nextObject ()))) {
          macroValidPointer (operand_73577) ;
          GGS_bool var_cas_hasSetter ;
          GGS_AC_galgasType  automatic_var_15 ;
          GGS_bool automatic_var_16 ;
          const GGS_typeSemanticAttributesMap  temp_73636 = var_cas_tableAttributs ;
          if (temp_73636.isBuilt ()) {
            temp_73636 (HERE)->method_searchKey (inLexique, operand_73577->mAttributeName, automatic_var_15, var_cas_hasSetter, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (1988)) ;
          }
          const GGS_bool cond_73817 = var_cas_hasSetter ;
          if (cond_73817.isBuiltAndTrue ()) {
            var_cas_setterAttributeModifierToImplementList.addAssign_operation (operand_73577->mAttributType, operand_73577->mAttributeName) ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_getterAttributeReaderToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_73987 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_73987 = NULL ;
        while (((operand_73987 = enumerator_73987.nextObject ()))) {
          macroValidPointer (operand_73987) ;
          GGS_bool var_cas_hasGetter ;
          GGS_AC_galgasType  automatic_var_17 ;
          GGS_bool automatic_var_18 ;
          const GGS_typeSemanticAttributesMap  temp_74046 = var_cas_tableAttributs ;
          if (temp_74046.isBuilt ()) {
            temp_74046 (HERE)->method_searchKey (inLexique, operand_73987->mAttributeName, automatic_var_17, automatic_var_18, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (2000)) ;
          }
          const GGS_bool cond_74225 = var_cas_hasGetter ;
          if (cond_74225.isBuiltAndTrue ()) {
            var_cas_getterAttributeReaderToImplementList.addAssign_operation (operand_73987->mAttributType, operand_73987->mAttributeName) ;
          }
        }
      }
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_classToImplement ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_inIsAbstract, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_listeAttributsSemantiquesCourants, var_cas_tableDesClassesAncetres, var_cas_tableMessagesClasseConcrete, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement, var_cas_setterAttributeModifierToImplementList, var_cas_getterAttributeReaderToImplementList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1800_24_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      const GGS_bool cond_75687 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2042)) COMMA_SOURCE_FILE_AT_LINE (2042))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2043)) COMMA_SOURCE_FILE_AT_LINE (2043)))).operator_not () ;
      if (cond_75687.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2045)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_stringset  var_cas_superClasses ;
      GGS_typeListModel  var_cas_attributeList ;
      GGS_classMessageMap  var_cas_messageMap ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (false) ;
      nt_parent_class_importSemantics (inLexique, var_cas_ioModelMap, var_cas_superClasses, var_cas_attributeList, var_cas_messageMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          const GGS_bool cond_76773 = (var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2076))).operator_isNotEqual (GGS_string ("generatedInSeparateFile")) ;
          if (cond_76773.isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (2078)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          const GGS_bool cond_76991 = (var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (2080))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_76991.isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (2082)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeList, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
      GGS_M_optionComponents  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  const GGS_bool cond_78138 = (var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2110))).operator_strictSup (GGS_uint (0U)) ;
                  if (cond_78138.isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (2112)) ;
                  }else if (cond_78138.isBuiltAndFalse ()) {
                    const GGS_bool cond_78261 = (var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2112))).operator_isEqual (GGS_uint (0U)) ;
                    if (cond_78261.isBuiltAndTrue ()) {
                      var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (2114)) ;
                    }else if (cond_78261.isBuiltAndFalse ()) {
                      var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2115)) ;
                    }
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  const GGS_bool cond_78708 = (var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2124)) COMMA_SOURCE_FILE_AT_LINE (2124))).operator_not () ;
                  if (cond_78708.isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (2125)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (2127)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_80566 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_80566 = NULL ;
        while (((operand_80566 = enumerator_80566.nextObject ()))) {
          macroValidPointer (operand_80566) ;
          const GGS_bool cond_80724 = (var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_80566->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2193)) COMMA_SOURCE_FILE_AT_LINE (2193))).operator_not () ;
          if (cond_80724.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_80566->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2194)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (2195)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2211)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_TypeModel  var_cas_t = GGS_ClassModel ::constructor_new (inLexique, GGS_bool (true), var_cas_superClasses, var_cas_attributeList, var_cas_messageMap COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2214)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1800_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_parent_class_parse (inLexique) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_parse (inLexique) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_parse (inLexique) ;
              } break ;
            case 5 : {
              nt_overrided_method_parse (inLexique) ;
              } break ;
            case 6 : {
              nt_lazy_reader_parse (inLexique) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'abstract_method'             *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2222_22_ (galgas_scanner & inLexique,
                                const GGS_bool var_cas_inIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  const GGS_bool cond_82069 = (var_cas_inIsAbstract).operator_not () ;
  if (cond_82069.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class should not declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (2233)) ;
  }
  GGS_lstring  var_cas_nomMethode ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (2248)) ;
  GGS_typeInstructionList  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_tableMethodesAimplementer.modifier_insertAbstract (inLexique, var_cas_nomMethode, var_cas_listeDeTypes, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions COMMA_SOURCE_FILE_AT_LINE (2250)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2222_22_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parse_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2256_19_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outMethodName,
                                GGS_typeInstructionList  &var_cas_outInstructionsList,
                                GGS_L_EXsignature  &var_cas_outMethodSignature,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.assignFromAttribute_tokenString (var_cas_outMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_83878 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_83878 = NULL ;
    while (((operand_83878 = enumerator_83878.nextObject ()))) {
      macroValidPointer (operand_83878) ;
      GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_83878->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2281)), operand_83878->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2281)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_83878->mKey, operand_83878->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (2282)) ;
    }
  }
  GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2297)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2311)) ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_outMethodSignature, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2326)) ;
  var_cas_outInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_outInstructionsList, var_cas_inSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2256_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'non_abstract_method'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2341_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (2383)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2384)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2341_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'overrided_method'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2392_23_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  GGS_L_EXsignature  var_cas_listeDeTypesMethodeOriginale ;
  const GGS_typeTableMethodes  temp_89425 = var_cas_tableDesMethodes ;
  if (temp_89425.isBuilt ()) {
    temp_89425 (HERE)->method_searchKey (inLexique, var_cas_methodName, var_cas_listeDeTypesMethodeOriginale COMMA_SOURCE_FILE_AT_LINE (2437)) ;
  }
  ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesMethodeOriginale,  var_cas_methodSignature,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2438)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2444)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2392_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'formal_arguments_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2455_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_signatureForGrammarAnalysis  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2485)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2485)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2487)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2490)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2490)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2492)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2511)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2511)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2513)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2517)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2517)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2519)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2538)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2538)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2540)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2543)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2543)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2545)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2562)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2562)) COMMA_HERE) ;
          GGS_bool var_cas_modeIn = GGS_bool (false) ;
          var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
          var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2565)) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2455_28_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_signatureForGrammarAnalysis  &var_cas_outSignature) {
  var_cas_outSignature = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2455_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'formal_input_arguments_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2622_34_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_signatureForGrammarAnalysis  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2652)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2652)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2654)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2657)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2657)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2659)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2678)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2678)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2680)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2684)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2684)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2686)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2622_34_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_signatureForGrammarAnalysis  &var_cas_outSignature) {
  var_cas_outSignature = GGS_signatureForGrammarAnalysis ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2622_34_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_parsing'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2725_19_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_outTypeDefinition,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  const GGS_bool cond_101679 = var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2732)) COMMA_SOURCE_FILE_AT_LINE (2732)) ;
  if (cond_101679.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_101550 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_101550.isBuilt ()) {
      temp_101550 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2734)) ;
    }
    var_cas_outTypeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (2735)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (2735)) ;
  }else if (cond_101679.isBuiltAndFalse ()) {
    const GGS_bool cond_101803 = var_cas_inTableEnAvant.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2736)) COMMA_SOURCE_FILE_AT_LINE (2736)) ;
    if (cond_101803.isBuiltAndTrue ()) {
      const GGS_typeTableEnAvant  temp_101760 = var_cas_inTableEnAvant ;
      if (temp_101760.isBuilt ()) {
        temp_101760 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_outTypeDefinition COMMA_SOURCE_FILE_AT_LINE (2737)) ;
      }
    }else if (cond_101803.isBuiltAndFalse ()) {
      var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2739)))).operator_concat (GGS_string ("' type is not defined")) COMMA_SOURCE_FILE_AT_LINE (2740)) ;
      var_cas_outTypeDefinition.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2725_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2750_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_inTargetVarName,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_AC_galgasType  var_cas_targetVarType ;
  GGS_typeCplusPlusName  var_cas_targetVarCppName ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, var_cas_targetVarType, var_cas_targetVarCppName COMMA_SOURCE_FILE_AT_LINE (2773)) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetVarType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2775)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_targetVarCppName, GGS_lstringlist ::constructor_emptyList (), var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2750_44_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2789_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (2800)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        GGS_lstring  var_cas_structAttributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
        GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (2808)) ;
        GGS_bool var_cas_found = GGS_bool (false) ;
        {
          GGS_typeListeAttributsSemantiques::cEnumerator enumerator_104869 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (2810)), true) ;
          const GGS_typeListeAttributsSemantiques::cElement * operand_104869 = NULL ;
          while (((operand_104869 = enumerator_104869.nextObject ()))
              && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_104869) ;
            var_cas_found = (operand_104869->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2811))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2811))) ;
            var_cas_targetType = operand_104869->mAttributType ;
          }
        }
        const GGS_bool cond_105210 = (var_cas_found).operator_not () ;
        if (cond_105210.isBuiltAndTrue ()) {
          var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (2815)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (2816)) ;
        }
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2833)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_nomCppVariableSource, var_cas_structAttributeList, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2789_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2845_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inTargetVarCppName,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_string var_cas_sourceExpressionConverter ;
  if (var_cas_inTargetType.isBuilt () && var_cas_sourceType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_107027 = var_cas_inTargetType (HERE) ;
    cPtr_AC_galgasType * ptr_107040 = var_cas_sourceType (HERE) ;
    cPtr_typeGalgasListmapType * operand_107027 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107027) ;
    cPtr_typeGalgasListmapType * operand_107040 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107040) ;
    if ((operand_107027 != NULL) && (operand_107040 != NULL)) {
      const GGS_bool cond_107423 = (operand_107027->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2871))).operator_isNotEqual (operand_107040->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2871))) ;
      if (cond_107423.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, listmap type @")).operator_concat (operand_107027->mListmapTypeName)).operator_concat (GGS_string (" of target object is not compatible with listmap type @"))).operator_concat (operand_107040->mListmapTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2875)) ;
        var_cas_sourceExpressionConverter.drop () ;
      }else if (cond_107423.isBuiltAndFalse ()) {
        var_cas_sourceExpressionConverter = GGS_string ("") ;
      }
    }else{
      cPtr_typeGalgasListType * operand_107027 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107027) ;
      cPtr_typeGalgasListType * operand_107040 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107040) ;
      if ((operand_107027 != NULL) && (operand_107040 != NULL)) {
        const GGS_bool cond_107847 = (operand_107027->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2879))).operator_isNotEqual (operand_107040->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2879))) ;
        if (cond_107847.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, list type @")).operator_concat (operand_107027->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with list type @"))).operator_concat (operand_107040->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2883)) ;
          var_cas_sourceExpressionConverter.drop () ;
        }else if (cond_107847.isBuiltAndFalse ()) {
          var_cas_sourceExpressionConverter = GGS_string ("") ;
        }
      }else{
        cPtr_typeGalgasSortedListType * operand_107027 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107027) ;
        cPtr_typeGalgasSortedListType * operand_107040 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107040) ;
        if ((operand_107027 != NULL) && (operand_107040 != NULL)) {
          const GGS_bool cond_108295 = (operand_107027->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2887))).operator_isNotEqual (operand_107040->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2887))) ;
          if (cond_108295.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, sortedlist type @")).operator_concat (operand_107027->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with sortedlist type @"))).operator_concat (operand_107040->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2891)) ;
            var_cas_sourceExpressionConverter.drop () ;
          }else if (cond_108295.isBuiltAndFalse ()) {
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }
        }else{
          cPtr_typeGalgas_string * operand_107027 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107027) ;
          cPtr_typeGalgas_string * operand_107040 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107040) ;
          if ((operand_107027 != NULL) && (operand_107040 != NULL)) {
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }else{
            cPtr_typeGalgas_string * operand_107027 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107027) ;
            cPtr_typeGalgas_lstring * operand_107040 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_107040) ;
            if ((operand_107027 != NULL) && (operand_107040 != NULL)) {
              var_cas_sourceExpressionConverter = GGS_string ("ggs_string") ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, ")).operator_concat (var_cas_inTargetType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2899)))).operator_concat (GGS_string (" target object type is not compatible with "))).operator_concat (var_cas_sourceType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2900)))).operator_concat (GGS_string (" source expression type")) COMMA_SOURCE_FILE_AT_LINE (2902)) ;
              var_cas_sourceExpressionConverter.drop () ;
            }
          }
        }
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_C_dotEqualInstruction ::constructor_new (inLexique, var_cas_inTargetVarCppName, var_cas_inStructAttributeList, var_cas_sourceExpression, var_cas_sourceExpressionConverter COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2845_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'input_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2917_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_assignedVariables  &var_cas_listeAffectationParametresEffectifs,
                                GGS_typeCplusPlusNameList  &var_cas_outAllVariablesList,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_typeListeCibles  var_cas_listeCibles = GGS_typeListeCibles ::constructor_emptyList () ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_nomVariableDest ;
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  GGS_AC_galgasType  var_cas_definitionType ;
                  GGS_lstring  var_cas_typeName ;
                  nt_type_parsing_ (inLexique, GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE), var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomVariableDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2941)), var_cas_nomVariableDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2941)) COMMA_HERE) ;
                  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_nomVariableDest, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2942)) ;
                  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE)) ;
                  } break ;
                case 2 : {
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              GGS_AC_galgasType  var_cas_typeVarDest ;
              GGS_typeCplusPlusName  var_cas_nomCppDest ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariableDest, var_cas_typeVarDest, var_cas_nomCppDest COMMA_SOURCE_FILE_AT_LINE (2949)) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeEntiteDest ::constructor_new (inLexique, var_cas_typeVarDest, var_cas_nomCppDest, GGS_location (inLexique) COMMA_HERE)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2958)) ;
              GGS_uint _variant_111024 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (2959)) ;
              GGS_bool _condition_111024 (_variant_111024.isBuilt (), true) ;
              while (_condition_111024.isBuiltAndTrue ()) {
                _condition_111024 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_111024.isBuiltAndTrue ()) {
                  if (_variant_111024.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (2963)) ;
                    _condition_111024 = GGS_bool (false) ;
                  }else{
                    _variant_111024.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2962)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsis ;
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      var_cas_ellipsis = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_ellipsis = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  const GGS_bool cond_111545 = (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2974))).operator_strictInf (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2974))) ;
  if (cond_111545.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("too much arguments: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2975)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2975)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2976)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2976)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2978)) ;
    var_cas_outAllVariablesList.drop () ;
    var_cas_listeAffectationParametresEffectifs.drop () ;
  }else if (cond_111545.isBuiltAndFalse ()) {
    const GGS_bool cond_111852 = ((var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2978))).operator_strictSup (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2978)))).operator_and ((var_cas_ellipsis).operator_not ()) ;
    if (cond_111852.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("argument(s) missing: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2980)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2980)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2982)) ;
      var_cas_outAllVariablesList.drop () ;
      var_cas_listeAffectationParametresEffectifs.drop () ;
    }else if (cond_111852.isBuiltAndFalse ()) {
      var_cas_listeAffectationParametresEffectifs = GGS_L_assignedVariables ::constructor_emptyList () ;
      var_cas_outAllVariablesList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_112032 (var_cas_listeAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_112032 = NULL ;
        GGS_typeListeCibles::cEnumerator enumerator_112045 (var_cas_listeCibles, true) ;
        const GGS_typeListeCibles::cElement * operand_112045 = NULL ;
        while (((operand_112032 = enumerator_112032.nextObject ()))
            && ((operand_112045 = enumerator_112045.nextObject ()))) {
          macroValidPointer (operand_112032) ;
          macroValidPointer (operand_112045) ;
          GGS_lstring  var_cas_nomAttributSource = operand_112032->mAttributeName ;
          const GGS_typeCible  temp_112128 = operand_112045->aCible ;
          if (temp_112128.isBuilt ()) {
            temp_112128 (HERE)->method_verifierType (inLexique, operand_112032->mAttributType, var_cas_nomAttributSource, var_cas_listeAffectationParametresEffectifs, var_cas_outAllVariablesList COMMA_SOURCE_FILE_AT_LINE (2987)) ;
          }
        }
      }
    }
  }
  GGS_typeCplusPlusName  var_cas_nullName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
  if (var_cas_outAllVariablesList.isBuilt () &&
      var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2994)).isBuilt () &&
      var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2995)).isBuilt () &&
      var_cas_nullName.isBuilt ()) {
    ::routine_appendJokersIfNeeded (inLexique,  var_cas_outAllVariablesList,  var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2994)),  var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2995)),  var_cas_nullName COMMA_SOURCE_FILE_AT_LINE (2992)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2917_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  nt_type_parsing_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3012_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (3023)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3032)) ;
          GGS_bool var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_114250 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3034)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_114250 = NULL ;
            while (((operand_114250 = enumerator_114250.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_114250) ;
              var_cas_found = (operand_114250->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3035))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3035))) ;
              var_cas_targetType = operand_114250->mAttributType ;
            }
          }
          const GGS_bool cond_114591 = (var_cas_found).operator_not () ;
          if (cond_114591.isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3039)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3040)) ;
          }
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_ (inLexique, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext, var_cas_nomCppVariableSource, var_cas_targetType, var_cas_structAttributeList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3012_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3064_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_116138 = var_cas_inTargetType ;
  if (temp_116138.isBuilt ()) {
    temp_116138 (HERE)->method_handleAddAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3078)) ;
  }
  GGS_typeTypesList  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_116924 = (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3099))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3099))) ;
  if (cond_116924.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3100)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3100))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3100)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3100)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3101)) ;
  }else if (cond_116924.isBuiltAndFalse ()) {
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_116957 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_116957 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_116967 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_116967 = NULL ;
      while (((operand_116957 = enumerator_116957.nextObject ()))
          && ((operand_116967 = enumerator_116967.nextObject ()))) {
        macroValidPointer (operand_116957) ;
        macroValidPointer (operand_116967) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_116957->mAttributType,  operand_116967->mType,  operand_116967->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3103)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeAppendInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3064_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3123_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_118445 = var_cas_inTargetType ;
  if (temp_118445.isBuilt ()) {
    temp_118445 (HERE)->method_handleMinusAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3136)) ;
  }
  GGS_typeTypesList  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_119231 = (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3157))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3157))) ;
  if (cond_119231.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3158)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3158))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3158)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3158)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3159)) ;
  }else if (cond_119231.isBuiltAndFalse ()) {
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_119264 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_119264 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_119274 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_119274 = NULL ;
      while (((operand_119264 = enumerator_119264.nextObject ()))
          && ((operand_119274 = enumerator_119274.nextObject ()))) {
        macroValidPointer (operand_119264) ;
        macroValidPointer (operand_119274) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_119264->mAttributType,  operand_119274->mType,  operand_119274->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3161)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeRemoveInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3123_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3181_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_120722 = var_cas_inTargetType ;
  if (temp_120722.isBuilt ()) {
    temp_120722 (HERE)->method_handleIncrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3193)) ;
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeIncrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3181_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3207_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_122032 = var_cas_inTargetType ;
  if (temp_122032.isBuilt ()) {
    temp_122032 (HERE)->method_handleDecrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3219)) ;
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeDecrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3207_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'actual_parameters_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3229_29_ (galgas_scanner & inLexique,
                                const GGS_L_EXsignature  var_cas_listeTypesParametresFormels,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool automatic_var_19 ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_outExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, automatic_var_19) ;
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_listeTypesParametresFormels,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_outExpressionList COMMA_SOURCE_FILE_AT_LINE (3249)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3229_29_parse (galgas_scanner & inLexique) {
  nt_parse_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3263_28_ (galgas_scanner & inLexique,
                                GGS_L_actualParametersSignature  &var_cas_listeTypesParametresEffectifs,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_bool &var_cas_outHasInputParameter) {
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  var_cas_listeTypesParametresEffectifs = GGS_L_actualParametersSignature ::constructor_emptyList () ;
  GGS_stringset  var_cas_exclusiveVariables = GGS_stringset ::constructor_emptySet () ;
  var_cas_outHasInputParameter = GGS_bool (false) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_expressionType ;
          GGS_typeExpression  var_cas_expressionValue ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOut (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_expressionType, var_cas_parameterPassingMode) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expressionValue) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterIn (inLexique COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
              var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 2 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (3302)) ;
              GGS_uint _variant_125485 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (3303)) ;
              GGS_bool _condition_125485 (_variant_125485.isBuilt (), true) ;
              while (_condition_125485.isBuiltAndTrue ()) {
                _condition_125485 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_125485.isBuiltAndTrue ()) {
                  if (_variant_125485.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (3308)) ;
                    _condition_125485 = GGS_bool (false) ;
                  }else{
                    _variant_125485.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
                    var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (3307)) ;
                  }
                }
              }
              } break ;
            case 3 : {
              GGS_AC_galgasType  var_cas_typeArgument ;
              GGS_typeCplusPlusName  var_cas_nomCppArgument ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3314)) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
              GGS_typeExpression  var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
              var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
              const GGS_bool cond_126140 = var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3318)) COMMA_SOURCE_FILE_AT_LINE (3318)) ;
              if (cond_126140.isBuiltAndTrue ()) {
                var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3320)) ;
              }else if (cond_126140.isBuiltAndFalse ()) {
                var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3321))) ;
              }
              var_cas_outHasInputParameter = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_typeArgument ;
          GGS_typeCplusPlusName  var_cas_nomCppArgument ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3331)) ;
          GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  GGS_lstring  var_cas_structAttributeName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_typeArgument.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3337)) ;
                  GGS_bool var_cas_found = GGS_bool (false) ;
                  {
                    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_126814 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3339)), true) ;
                    const GGS_typeListeAttributsSemantiques::cElement * operand_126814 = NULL ;
                    while (((operand_126814 = enumerator_126814.nextObject ()))
                        && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                      macroValidPointer (operand_126814) ;
                      var_cas_found = (operand_126814->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3340))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3340))) ;
                      var_cas_typeArgument = operand_126814->mAttributType ;
                    }
                  }
                  const GGS_bool cond_127169 = (var_cas_found).operator_not () ;
                  if (cond_127169.isBuiltAndTrue ()) {
                    var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3344)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3345)) ;
                  }
                  var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOutIn (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
          GGS_typeExpression  var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, var_cas_structAttributeList COMMA_HERE) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
          const GGS_bool cond_127743 = var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3352)) COMMA_SOURCE_FILE_AT_LINE (3352)) ;
          if (cond_127743.isBuiltAndTrue ()) {
            var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3354)) ;
          }else if (cond_127743.isBuiltAndFalse ()) {
            var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3355))) ;
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3263_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'semantic_instructions_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3364_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (inLexique COMMA_SOURCE_FILE_AT_LINE (3372)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3372)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3364_33_parse (galgas_scanner & inLexique) {
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3390_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeVarSource ;
  GGS_typeCplusPlusName  var_cas_sourceVarCppName ;
  GGS_lstring  var_cas_nomVarSource ;
  nt_read_access_ (inLexique, var_cas_nomVarSource, var_cas_sourceVarCppName, var_cas_typeVarSource, var_cas_ioVariablesMap) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeVarSource.getPtr (), true, var_cas_nomVarSource COMMA_SOURCE_FILE_AT_LINE (3405)) ;
  GGS_lstring  var_cas_nomTypeSource = var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3406)) ;
  GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3407)) ;
  nt_extract_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_sourceVarCppName, var_cas_nomTypeSource, var_cas_tableMessagesAbstraits, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3390_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  nt_read_access_parse (inLexique) ;
  nt_extract_instruction_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3427_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("simple extract instruction is obsolete: use cast expression instead") COMMA_SOURCE_FILE_AT_LINE (3438)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomClasse ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomClasse) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_131195 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_131195.isBuilt ()) {
    temp_131195 (HERE)->method_searchKey (inLexique, var_cas_nomClasse, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3445)) ;
  }
  GGS_AC_galgasType  var_cas_leType = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3446)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3446)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_leType.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3447)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3448)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3449)) ;
  const GGS_bool cond_131805 = (var_cas_tableDesClassesAncetres.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3451)) COMMA_SOURCE_FILE_AT_LINE (3451))).operator_not () ;
  if (cond_131805.isBuiltAndTrue ()) {
    var_cas_nomClasse.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3452)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3453)) ;
  }
  GGS_L_assignedVariables  var_cas_listeAffectationParametresEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeAffectationParametresEffectifs, var_cas_allVariablesList, var_cas_listeAttributsSemantiques, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_132638 = var_cas_errorExpressionType ;
  if (temp_132638.isBuilt ()) {
    temp_132638 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3480)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_messageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  const GGS_typeClassInheritedMessagesMap  temp_132741 = var_cas_tableMessagesAbstraits ;
  if (temp_132741.isBuilt ()) {
    temp_132741 (HERE)->method_searchKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (3484)) ;
  }
  var_cas_ioInstructionList.addAssign_operation (GGS_typeSimpleExtractInstruction ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_nomClasse, var_cas_listeAffectationParametresEffectifs, var_cas_errorExpression, var_cas_messageName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3427_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3497_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  /* var_cas_tableMessagesAbstraits */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_typeStructuredExtractCasesList  var_cas_casesList = GGS_typeStructuredExtractCasesList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("structured extract instruction is obsolete: use cast instruction instead") COMMA_SOURCE_FILE_AT_LINE (3510)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3512)) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3514)) ;
        GGS_location  var_cas_indicatif1 = GGS_location (inLexique) ;
        GGS_lstring  var_cas_nomType1 ;
        inLexique.assignFromAttribute_tokenString (var_cas_nomType1) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_134419 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_134419.isBuilt ()) {
          temp_134419 (HERE)->method_searchKey (inLexique, var_cas_nomType1, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3521)) ;
        }
        GGS_AC_galgasType  var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3522)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3522)) ;
        GGS_typeGalgasClassType  var_cas_classType1 = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3524)) ;
        GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 = var_cas_classType1.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3525)) ;
        GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 = var_cas_classType1.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3526)) ;
        const GGS_bool cond_135178 = (var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3528)) COMMA_SOURCE_FILE_AT_LINE (3528))).operator_not () ;
        if (cond_135178.isBuiltAndTrue ()) {
          var_cas_nomType1.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3529)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3530)) ;
        }
        GGS_bool var_cas_noUsedParameter ;
        nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_indicatif1, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), var_cas_noUsedParameter) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_casesList.addAssign_operation (var_cas_nomType1, var_cas_indicatif1, var_cas_instructionsList, var_cas_noUsedParameter) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3514)) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3558)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elseInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_typeStructuredExtractInstructionWithElse ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_casesList, var_cas_elseInstructionList COMMA_HERE)) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3558)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3512)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3497_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        nt_parse_effective_input_parameters_list_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3584_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
  GGS_typeGalgasClassType  var_cas_sourceClassType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3605)) ;
  GGS_lstring  var_cas_sourceExpressionTypeName = var_cas_sourceClassType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3606)) ;
  GGS_string var_cas_sourceClassMessage = var_cas_sourceClassType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (3607)) ;
  GGS_typeStructuredCastBranchList  var_cas_branchList = GGS_typeStructuredCastBranchList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3611)) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3613)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        GGS_bool var_cas_checkForKindOfClass ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_lstring  var_cas_castedTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_castedTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_138517 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_138517.isBuilt ()) {
          temp_138517 (HERE)->method_searchKey (inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3627)) ;
        }
        GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3628)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3628)) ;
        GGS_typeSuperClassesMap  var_cas_superClassMap = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeDefinition.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3631)).reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3631)) ;
        GGS_string var_cas_sourceExpressionTypeNameString = var_cas_sourceExpressionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3633)) ;
        const GGS_bool cond_139328 = (var_cas_checkForKindOfClass).operator_not () ;
        if (cond_139328.isBuiltAndTrue ()) {
          const GGS_bool cond_139309 = ((var_cas_castedTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3635))).operator_isNotEqual (var_cas_sourceExpressionTypeNameString)).operator_and ((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3635))).operator_not ()) ;
          if (cond_139309.isBuiltAndTrue ()) {
            var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class is not '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (3637)) ;
          }
        }else if (cond_139328.isBuiltAndFalse ()) {
          const GGS_bool cond_139516 = (var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3638))).operator_not () ;
          if (cond_139516.isBuiltAndTrue ()) {
            var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3640)) ;
          }
        }
        GGS_typeCplusPlusNameList  var_cas_localConstantCppNameList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3647)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3647)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3649)) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3656)) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_branchList.addAssign_operation (var_cas_castedTypeName, var_cas_checkForKindOfClass, var_cas_localConstantCppNameList, var_cas_instructionsList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3613)) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  GGS_AC_elseOrDefaultForCastInstruction  var_cas_elseOrDefault ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3674)) ;
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      const GGS_bool cond_141369 = (var_cas_sourceClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3677))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_141369.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for using the 'default' construct, the static class of source expression (@")).operator_concat (var_cas_sourceExpressionTypeName)).operator_concat (GGS_string (") should define a class message")) COMMA_SOURCE_FILE_AT_LINE (3680)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  temp_141866 = var_cas_errorLocationExpressionType ;
      if (temp_141866.isBuilt ()) {
        temp_141866 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3693)) ;
      }
      var_cas_elseOrDefault = GGS_C_defaultForCastInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_elseBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionsList, var_cas_inSemanticContext) ;
      var_cas_elseOrDefault = GGS_C_elseForCastInstruction ::constructor_new (inLexique, var_cas_elseBranchInstructionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3674)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3611)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeStructuredCastInstruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_sourceExpression, var_cas_sourceExpressionTypeName, var_cas_branchList, var_cas_elseOrDefault COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3584_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3731_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_definitionType ;
  GGS_lstring  var_cas_typeName ;
  nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
  GGS_lstring  var_cas_targetVarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_targetVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_targetVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3751)), var_cas_targetVarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3751)) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_targetVarName, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (3752)) ;
  nt_optional_assignment_ (inLexique, var_cas_typeName, var_cas_targetVarName, var_cas_nomCppVariable, var_cas_definitionType, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3731_27_parse (galgas_scanner & inLexique) {
  nt_type_parsing_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_optional_assignment_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3774_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        GGS_lstring  var_cas_galgasVariableName ;
        inLexique.assignFromAttribute_tokenString (var_cas_galgasVariableName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_20 ;
        var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_galgasVariableName, automatic_var_20, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3787)) ;
        GGS_typeInstruction  var_cas_instruction = GGS_typeLogInstruction ::constructor_new (inLexique, var_cas_galgasVariableName, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3774_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3802_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        GGS_lstring  var_cas_nom ;
        inLexique.assignFromAttribute_tokenString (var_cas_nom) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_21 ;
        var_cas_ioVariablesMap.modifier_searchForDestructiveReadAccess (inLexique, var_cas_nom, automatic_var_21, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3815)) ;
        GGS_typeInstruction  var_cas_instruction = GGS_typeDropInstruction ::constructor_new (inLexique, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3802_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3832_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_147436 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_147436.isBuilt ()) {
    temp_147436 (HERE)->method_searchKey (inLexique, var_cas_nomVarDest, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3843)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_147908 = var_cas_entite ; // CAST instruction
    if (_var_147908.getPtr () != NULL) {
      macroValidPointer (_var_147908.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteRoutine *> (_var_147908.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutine var_cas_r (_var_147908.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (3847)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteRoutineExterne *> (_var_147908.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutineExterne var_cas_ae (_var_147908.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (3850)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_nomVarDest.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_nomVarDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3854)))).operator_concat (GGS_string ("' should name a routine or an extern routine")) COMMA_SOURCE_FILE_AT_LINE (3857)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureRoutine, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeRoutineCallInstruction ::constructor_new (inLexique, var_cas_nomVarDest, var_cas_expressionsList, var_cas_signatureRoutine, var_cas_isExternActionCall COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3832_44_parse (galgas_scanner & inLexique) {
  nt_actual_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3892_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expression ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      GGS_string var_cas_categoryMethodClassBaseName ;
      const GGS_AC_galgasType  temp_150240 = var_cas_expressionType ;
      if (temp_150240.isBuilt ()) {
        temp_150240 (HERE)->method_handleMethodInstructionCall (inLexique, var_cas_methodName, var_cas_inSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3921)), var_cas_methodSignature, var_cas_categoryMethodClassBaseName COMMA_SOURCE_FILE_AT_LINE (3919)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeMethodCallInstruction ::constructor_new (inLexique, var_cas_expressionType, var_cas_expression, var_cas_methodName, var_cas_categoryMethodClassBaseName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      GGS_lstring  var_cas_modifiedObjectName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifiedObjectName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_variableType ;
      GGS_typeCplusPlusName  var_cas_cppVariableName ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_modifiedObjectName, var_cas_variableType, var_cas_cppVariableName COMMA_SOURCE_FILE_AT_LINE (3950)) ;
      GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              GGS_lstring  var_cas_structAttributeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
              GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_variableType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3959)) ;
              GGS_bool var_cas_found = GGS_bool (false) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_151560 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3961)), true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_151560 = NULL ;
                while (((operand_151560 = enumerator_151560.nextObject ()))
                    && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                  macroValidPointer (operand_151560) ;
                  var_cas_found = (operand_151560->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3962))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3962))) ;
                  var_cas_variableType = operand_151560->mAttributType ;
                }
              }
              const GGS_bool cond_151915 = (var_cas_found).operator_not () ;
              if (cond_151915.isBuiltAndTrue ()) {
                var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3966)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3967)) ;
              }
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_modifierName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      const GGS_AC_galgasType  temp_152098 = var_cas_variableType ;
      if (temp_152098.isBuilt ()) {
        temp_152098 (HERE)->method_handleModifierCall (inLexique, var_cas_modifierName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (3973)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeModifierCallInstruction ::constructor_new (inLexique, var_cas_cppVariableName, var_cas_structAttributeList, var_cas_modifierName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_typeMethodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_typeMethodSignature ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_152894 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_152894.isBuilt ()) {
        temp_152894 (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (3995)) ;
      }
      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (3996)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3996)) ;
      const GGS_AC_galgasType  temp_153049 = var_cas_type ;
      if (temp_153049.isBuilt ()) {
        temp_153049 (HERE)->method_handleClassMethodCall (inLexique, var_cas_typeMethodName, var_cas_typeMethodSignature COMMA_SOURCE_FILE_AT_LINE (3997)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_typeMethodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeCallOfTypeMethodInstruction ::constructor_new (inLexique, var_cas_typeName, var_cas_typeMethodName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3892_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4029_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_const) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_targetVarType ;
  GGS_lstring  var_cas_targetTypeName ;
  nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_targetVarType, var_cas_targetTypeName) ;
  GGS_lstring  var_cas_targetVarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_targetVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetVarType,  var_cas_sourceExpressionType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (4065)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      const GGS_AC_galgasType  temp_155528 = var_cas_targetVarType ;
      if (temp_155528.isBuilt ()) {
        temp_155528 (HERE)->method_handleConstructorCall (inLexique, var_cas_constructorName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (4074)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
      var_cas_sourceExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_targetVarType, var_cas_constructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4089)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_targetVarCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_targetVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4096)), var_cas_targetVarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4096)) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_insertConstInArgument (inLexique, var_cas_targetVarName, var_cas_targetVarType, var_cas_targetVarCppName COMMA_SOURCE_FILE_AT_LINE (4097)) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_C_constantDeclarationInstruction ::constructor_new (inLexique, var_cas_targetVarType, var_cas_targetVarCppName, var_cas_sourceExpression COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4029_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_const) COMMA_HERE) ;
  nt_type_parsing_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4113_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_ (inLexique, var_cas_nomVarDest, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4113_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4140_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4140_27_parse (galgas_scanner & inLexique) {
  nt_warning_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'warning_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4159_26_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_159236 = var_cas_errorExpressionType ;
  if (temp_159236.isBuilt ()) {
    temp_159236 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4178)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_warningMessageExpression ;
  GGS_AC_galgasType  var_cas_warningMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_warningMessageExpression, var_cas_warningMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_warningMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4192)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeWarningInstruction ::constructor_new (inLexique, var_cas_errorExpression, var_cas_warningMessageExpression, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4159_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4206_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4206_27_parse (galgas_scanner & inLexique) {
  nt_error_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'error_instruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4225_24_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorLocationExpression ;
  GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
  const GGS_AC_galgasType  temp_161610 = var_cas_errorLocationExpressionType ;
  if (temp_161610.isBuilt ()) {
    temp_161610 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4244)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorMessageExpression ;
  GGS_AC_galgasType  var_cas_errorMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorMessageExpression, var_cas_errorMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_errorMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4258)) ;
  GGS_varToDropList  var_cas_variablesToDrop = GGS_varToDropList ::constructor_emptyList () ;
  switch (select_semantics_parser_38 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_39 = true ;
        while (syntaxRepeat_39) {
            GGS_lstring  var_cas_nomVariable ;
            inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_varCppName ;
            GGS_AC_galgasType  automatic_var_22 ;
            var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariable, automatic_var_22, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (4268)) ;
            var_cas_variablesToDrop.addAssign_operation (var_cas_varCppName) ;
          switch (select_repeat_semantics_parser_39 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_39 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeErrorInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, var_cas_errorMessageExpression, GGS_location (inLexique), var_cas_variablesToDrop COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4225_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_semantics_parser_38 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_39 = true ;
        while (syntaxRepeat_39) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_39 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_39 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4291_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_typeExpression  var_cas_messageExpression ;
  GGS_AC_galgasType  var_cas_messageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_messageExpression, var_cas_messageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_messageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4313)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeMessageInstruction ::constructor_new (inLexique, var_cas_messageExpression, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4291_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4326_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  GGS_L_expression_instructionsList_list  var_cas_listeBranchesTest = GGS_L_expression_instructionsList_list ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4336)) ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4338)) ;
        GGS_typeExpression  var_cas_testBranche ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_testBranche, var_cas_resultType) ;
        GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4349)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheTest = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheTest, var_cas_inSemanticContext) ;
        var_cas_listeBranchesTest.addAssign_operation (var_cas_testBranche, var_cas_listeInstructionsBrancheTest, GGS_location (inLexique)) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4338)) ;
      switch (select_repeat_semantics_parser_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  GGS_typeInstructionList  var_cas_listeInstructionsBrancheAutre = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4366)) ;
  switch (select_semantics_parser_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheAutre, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4366)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4336)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_if_instruction ::constructor_new (inLexique, var_cas_listeBranchesTest, var_cas_listeInstructionsBrancheAutre COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4326_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        nt_expression_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4397_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  GGS_typeExpression  var_cas_switchExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_switchExpression, var_cas_resultType) ;
  GGS_typeGalgas_enum  var_cas_e = GGS_typeGalgas_enum::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4418)) ;
  GGS_lstring  var_cas_enumTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4419)) ;
  GGS_enumConstantMap  var_cas_enumConstantesMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4420)) ;
  GGS_stringset  var_cas_allBranchConstantSet = GGS_stringset ::constructor_emptySet () ;
  GGS_L_switchBranchlist  var_cas_switchBranchlist = GGS_L_switchBranchlist ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4424)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_42 = true ;
    while (syntaxRepeat_42) {
        GGS_stringset  var_cas_branchConstantSet = GGS_stringset ::constructor_emptySet () ;
        { bool syntaxRepeat_43 = true ;
          while (syntaxRepeat_43) {
              GGS_lstring  var_cas_enumConstantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_enumConstantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_branchConstantSet.addAssign_operation (var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4432))) ;
              GGS_bool automatic_var_23 ;
              const GGS_enumConstantMap  temp_168278 = var_cas_enumConstantesMap ;
              if (temp_168278.isBuilt ()) {
                temp_168278 (HERE)->method_searchKey (inLexique, var_cas_enumConstantName, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (4433)) ;
              }
              const GGS_bool cond_168485 = var_cas_allBranchConstantSet.reader_hasKey (inLexique, var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4434)) COMMA_SOURCE_FILE_AT_LINE (4434)) ;
              if (cond_168485.isBuiltAndTrue ()) {
                var_cas_enumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this constant is already used in current switch instruction") COMMA_SOURCE_FILE_AT_LINE (4436)) ;
              }
            switch (select_repeat_semantics_parser_43 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_43 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        var_cas_allBranchConstantSet = (var_cas_allBranchConstantSet).operator_or (var_cas_branchConstantSet) ;
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4442)) ;
        GGS_typeInstructionList  var_cas_branchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_branchInstructionList, var_cas_inSemanticContext) ;
        var_cas_switchBranchlist.addAssign_operation (var_cas_branchConstantSet, var_cas_branchInstructionList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4442)) ;
      switch (select_repeat_semantics_parser_42 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_42 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4424)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  GGS_stringset  var_cas_missingConstants = var_cas_enumConstantesMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (4460)).substract_operation (inLexique, var_cas_allBranchConstantSet COMMA_SOURCE_FILE_AT_LINE (4460)) ;
  {
    GGS_stringset::cEnumerator enumerator_169295 (var_cas_missingConstants, true) ;
    while (enumerator_169295.hasCurrentObject ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (enumerator_169295._key (HERE))).operator_concat (GGS_string ("' is not used in switch instruction")) COMMA_SOURCE_FILE_AT_LINE (4463)) ;
      enumerator_169295.next () ;
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_switch_instruction ::constructor_new (inLexique, var_cas_switchExpression, var_cas_enumTypeName, var_cas_switchBranchlist COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4397_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_42 = true ;
    while (syntaxRepeat_42) {
        { bool syntaxRepeat_43 = true ;
          while (syntaxRepeat_43) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_43 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_43 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_42 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_42 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4479_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  GGS_typeExpression  var_cas_variantExpression ;
  GGS_AC_galgasType  var_cas_variantResultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
  GGS_typeGalgas_uint  var_cas_ui = GGS_typeGalgas_uint::castFrom (inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4499)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList1 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4503)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4504)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList1, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4504)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4503)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  GGS_typeExpression  var_cas_conditionalExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
  GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4527)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList2 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4531)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4532)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList2, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4532)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4531)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_while_instruction ::constructor_new (inLexique, var_cas_variantExpression, var_cas_instructionList1, var_cas_conditionalExpression, var_cas_instructionList2, GGS_location (inLexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4479_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4563_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bool var_cas_sourceIsFile ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_typeExpression  var_cas_depFileExpression ;
  GGS_typeExpression  var_cas_depFilePath ;
  GGS_bool var_cas_hasDependancyFile = GGS_bool (false) ;
  GGS_location  var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
  switch (select_semantics_parser_45 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (true) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_lstring  var_cas_gs = GGS_typeGalgas_lstring::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4602)) ;
      switch (select_semantics_parser_46 (inLexique)) {
        case 1 : {
          var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_depFileExpressionType ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFileExpression, var_cas_depFileExpressionType) ;
          var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
          GGS_typeGalgas_string  var_cas_gss = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4618)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFilePath, var_cas_depFileExpressionType) ;
          var_cas_gss = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4628)) ;
          var_cas_hasDependancyFile = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (false) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4643)) ;
      var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool var_cas_hasInputParameter ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_hasInputParameter) ;
  const GGS_bool cond_176106 = (var_cas_hasDependancyFile).operator_and (var_cas_hasInputParameter) ;
  if (cond_176106.isBuiltAndTrue ()) {
    var_cas_dependancyFileDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a dependancy file reference requires there is no input parameter") COMMA_SOURCE_FILE_AT_LINE (4663)) ;
  }
  GGS_AC_semanticsEntity  var_cas_e ;
  const GGS_M_semanticsEntitiesForUse  temp_176205 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_176205.isBuilt ()) {
    temp_176205 (HERE)->method_searchKey (inLexique, var_cas_grammarName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (4666)) ;
  }
  GGS_C_grammarForSemantics  var_cas_gfs = GGS_C_grammarForSemantics::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_grammarName COMMA_SOURCE_FILE_AT_LINE (4667)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_startSymbolAltMap = var_cas_gfs.reader_mGrammarAltMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4668)) ;
  GGS_lstring  var_cas_lexiqueClassName = var_cas_gfs.reader_mLexiqueClassName (inLexique COMMA_SOURCE_FILE_AT_LINE (4669)) ;
  GGS_L_EXsignature  var_cas_startSymbolSignature ;
  const GGS_M_nonterminalSymbolAlts  temp_176518 = var_cas_startSymbolAltMap ;
  if (temp_176518.isBuilt ()) {
    temp_176518 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_startSymbolSignature COMMA_SOURCE_FILE_AT_LINE (4671)) ;
  }
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_startSymbolSignature,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_expressionsList COMMA_SOURCE_FILE_AT_LINE (4673)) ;
  GGS_typeCplusPlusName  var_cas_sentStringName ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      var_cas_sentStringName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4686)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_sentVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_sentVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_targetType ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_sentVariableName, var_cas_targetType, var_cas_sentStringName COMMA_SOURCE_FILE_AT_LINE (4691)) ;
      GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_sentVariableName COMMA_SOURCE_FILE_AT_LINE (4692)) ;
      } break ;
    default :
      break ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_grammarInstruction ::constructor_new (inLexique, var_cas_sourceIsFile, var_cas_sourceExpression, var_cas_grammarName, var_cas_expressionsList, var_cas_altName, var_cas_lexiqueClassName, var_cas_sentStringName, var_cas_depFileExpression, var_cas_depFilePath COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4563_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_45 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      switch (select_semantics_parser_46 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  nt_parse_parameters_list_parse (inLexique) ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4717_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4726)) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
  GGS_typeGalgas_string  var_cas_classType = GGS_typeGalgas_string::castFrom (inLexique, var_cas_expressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4739)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeSendInstruction ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4717_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4754_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  GGS_string var_cas_prefixString ;
  switch (select_semantics_parser_48 (inLexique)) {
    case 1 : {
      var_cas_prefixString = GGS_string ("") ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_thePrefix ;
      inLexique.assignFromAttribute_tokenString (var_cas_thePrefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_prefixString = var_cas_thePrefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4769)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation = var_cas_nomVarDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4775)) ;
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_accessedVariableCppName ;
  GGS_string var_cas_errorMessageName ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_accessedVariableCppName COMMA_SOURCE_FILE_AT_LINE (4780)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_49 = true ;
    while (syntaxRepeat_49) {
      switch (select_repeat_semantics_parser_49 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          var_cas_instructionLocation = var_cas_structAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4789)) ;
          GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (4790)) ;
          GGS_bool var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_180641 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (4792)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_180641 = NULL ;
            while (((operand_180641 = enumerator_180641.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_180641) ;
              var_cas_found = (operand_180641->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4793))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4793))) ;
              var_cas_targetType = operand_180641->mAttributType ;
            }
          }
          const GGS_bool cond_180982 = (var_cas_found).operator_not () ;
          if (cond_180982.isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4797)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (4798)) ;
          }
          } break ;
        default :
          syntaxRepeat_49 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_searchMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_searchMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_keyExpression ;
  GGS_AC_galgasType  var_cas_keyExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_keyExpression, var_cas_keyExpressionType) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
  GGS_string var_cas_mapTypeName ;
  const GGS_AC_galgasType  temp_181484 = var_cas_targetType ;
  if (temp_181484.isBuilt ()) {
    temp_181484 (HERE)->method_check_with_InstructionAccess (inLexique, var_cas_instructionLocation, var_cas_searchMethodName, var_cas_keyExpressionType, var_cas_mapTypeName, var_cas_errorMessageName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (4817)) ;
  }
  GGS_typeInstructionList  var_cas_doBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeInstructionList  var_cas_elseBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4828)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4829)) ;
  var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (GGS_string ("key")), var_cas_instructionLocation COMMA_HERE), GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE), GGS_typeKeyName ::constructor_new (inLexique, var_cas_instructionLocation, GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4831)) ;
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_182175 (var_cas_attributeList, true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_182175 = NULL ;
    while (((operand_182175 = enumerator_182175.nextObject ()))) {
      macroValidPointer (operand_182175) ;
      var_cas_ioVariablesMap.modifier_insertWithInstructionLocalVariable (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (operand_182175->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4840))), var_cas_instructionLocation COMMA_HERE), operand_182175->mAttributType, GGS_typeOperandName ::constructor_new (inLexique, var_cas_instructionLocation, operand_182175->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4842)), GGS_bool (true), GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4839)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_doBranchInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4829)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4856)) ;
  switch (select_semantics_parser_50 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4856)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4828)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeWithInstruction ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_accessedVariableCppName, var_cas_structAttributeList, var_cas_errorMessageName, var_cas_keyExpression, var_cas_doBranchInstructionList, var_cas_elseBranchInstructionList, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4754_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  switch (select_semantics_parser_48 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_49 = true ;
    while (syntaxRepeat_49) {
      switch (select_repeat_semantics_parser_49 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_49 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  switch (select_semantics_parser_50 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'constant_while_before_in_foreach_instruction'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4894_51_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeCplusPlusName  &var_cas_outIndexVariable,
                                GGS_typeInstructionList  &var_cas_out_before_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4904)) ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_prefixedby) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          case 3 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      var_cas_outIndexVariable = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_index) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_outIndexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4933)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4933)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_outIndexVariable COMMA_SOURCE_FILE_AT_LINE (4934)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  var_cas_out_before_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_before_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4904)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4894_51_secondPhase (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_foreachEnumerationList  &var_cas_outForeachEnumerationList,
                                GGS_typeExpression  &var_cas_outWhileExpression,
                                GGS_typeInstructionList  &var_cas_out_do_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4974)) ;
  var_cas_outForeachEnumerationList = GGS_foreachEnumerationList ::constructor_emptyList () ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        const GGS_location  var_cas_magicNumber = GGS_location (inLexique) ;
        GGS_bool var_cas_ascending ;
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_typeExpression  var_cas_sourceExpression ;
        GGS_AC_galgasType  var_cas_sourceExpressionType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
        GGS_typeListeAttributsSemantiques  var_cas_formalEnumerationList ;
        GGS_localConstantBuildStyleEnum var_cas_localConstantBuildStyleEnum ;
        GGS_bool var_cas_iteratorNewStyle ;
        const GGS_AC_galgasType  temp_187198 = var_cas_sourceExpressionType ;
        if (temp_187198.isBuilt ()) {
          temp_187198 (HERE)->method_acceptForeachInstruction (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_magicNumber, var_cas_formalEnumerationList, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle COMMA_SOURCE_FILE_AT_LINE (5005)) ;
        }
        GGS_string var_cas_typeName ;
        const GGS_AC_galgasType  temp_187456 = var_cas_sourceExpressionType ;
        if (temp_187456.isBuilt ()) {
          temp_187456 (HERE)->method_getTypeName (inLexique, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (5014)) ;
        }
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            GGS_bool automatic_var_24 ;
            nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_formalEnumerationList, var_cas_magicNumber, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle, automatic_var_24) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_prefixedby) COMMA_HERE) ;
            GGS_lstring  var_cas_prefix ;
            inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_bool var_cas_mapStyle = (var_cas_localConstantBuildStyleEnum).operator_isNotEqual (GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE)) ;
            GGS_bool var_cas_firstOne = GGS_bool (true) ;
            {
              GGS_typeListeAttributsSemantiques::cEnumerator enumerator_187993 (var_cas_formalEnumerationList, true) ;
              const GGS_typeListeAttributsSemantiques::cElement * operand_187993 = NULL ;
              while (((operand_187993 = enumerator_187993.nextObject ()))) {
                macroValidPointer (operand_187993) ;
                GGS_typeCplusPlusName  var_cas_cppName ;
                const GGS_bool cond_188242 = ((var_cas_localConstantBuildStyleEnum).operator_isEqual (GGS_localConstantBuildStyleEnum::constructor_firstIsKeyOtherMapStyle (inLexique COMMA_HERE))).operator_and (var_cas_firstOne) ;
                if (cond_188242.isBuiltAndTrue ()) {
                  var_cas_cppName = GGS_typeKeyName ::constructor_new (inLexique, var_cas_magicNumber, var_cas_iteratorNewStyle COMMA_HERE) ;
                }else if (cond_188242.isBuiltAndFalse ()) {
                  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_magicNumber, operand_187993->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5035)), var_cas_mapStyle, var_cas_iteratorNewStyle COMMA_HERE) ;
                }
                var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5037))).operator_concat (operand_187993->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5037))), GGS_location (inLexique) COMMA_HERE), operand_187993->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (5037)) ;
                var_cas_firstOne = GGS_bool (false) ;
              }
            }
            } break ;
          case 3 : {
            GGS_bool var_cas_mapStyle = (var_cas_localConstantBuildStyleEnum).operator_isNotEqual (GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE)) ;
            GGS_bool var_cas_firstOne = GGS_bool (true) ;
            {
              GGS_typeListeAttributsSemantiques::cEnumerator enumerator_188753 (var_cas_formalEnumerationList, true) ;
              const GGS_typeListeAttributsSemantiques::cElement * operand_188753 = NULL ;
              while (((operand_188753 = enumerator_188753.nextObject ()))) {
                macroValidPointer (operand_188753) ;
                GGS_typeCplusPlusName  var_cas_cppName ;
                const GGS_bool cond_189002 = ((var_cas_localConstantBuildStyleEnum).operator_isEqual (GGS_localConstantBuildStyleEnum::constructor_firstIsKeyOtherMapStyle (inLexique COMMA_HERE))).operator_and (var_cas_firstOne) ;
                if (cond_189002.isBuiltAndTrue ()) {
                  var_cas_cppName = GGS_typeKeyName ::constructor_new (inLexique, var_cas_magicNumber, var_cas_iteratorNewStyle COMMA_HERE) ;
                }else if (cond_189002.isBuiltAndFalse ()) {
                  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_magicNumber, operand_188753->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5048)), var_cas_mapStyle, var_cas_iteratorNewStyle COMMA_HERE) ;
                }
                var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, operand_188753->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5050)), GGS_location (inLexique) COMMA_HERE), operand_188753->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (5050)) ;
                var_cas_firstOne = GGS_bool (false) ;
              }
            }
            } break ;
          default :
            break ;
        }
        var_cas_outForeachEnumerationList.addAssign_operation (var_cas_iteratorNewStyle, var_cas_sourceExpression, var_cas_magicNumber, var_cas_typeName, var_cas_ascending) ;
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_index) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeCplusPlusName  var_cas_indexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5064)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5064)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5065)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      var_cas_outWhileExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outWhileExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5084)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  var_cas_out_do_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_do_instructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4974)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4894_51_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_prefixedby) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          case 3 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_index) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5109_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5119)) ;
  GGS_typeInstructionList  var_cas_before_instructionList ;
  GGS_typeExpression  var_cas_whileExpression ;
  GGS_foreachEnumerationList  var_cas_foreachEnumerationList ;
  GGS_typeInstructionList  var_cas_do_instructionList ;
  GGS_typeCplusPlusName  var_cas_indexVariable ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_192194 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_indexVariable, var_cas_before_instructionList) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_192194) ;
    nt_constant_while_before_in_foreach_instruction_secondPhase (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_foreachEnumerationList, var_cas_whileExpression, var_cas_do_instructionList) ;
  //--- End of parse/rewind instruction
  GGS_typeInstructionList  var_cas_between_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5149)) ;
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_192647 = var_cas_indexVariable ; // CAST instruction
        if (_var_192647.getPtr () != NULL) {
          macroValidPointer (_var_192647.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_192647.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_192647.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5155)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5155)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5154)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_between_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5149)) ;
  GGS_typeInstructionList  var_cas_after_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5174)) ;
  switch (select_semantics_parser_58 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_193414 = var_cas_indexVariable ; // CAST instruction
        if (_var_193414.getPtr () != NULL) {
          macroValidPointer (_var_193414.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_193414.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_193414.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5180)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5180)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5179)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_after_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5174)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5119)) ;
  var_cas_instruction = GGS_typeForeachInstruction ::constructor_new (inLexique, var_cas_foreachEnumerationList, var_cas_indexVariable, var_cas_whileExpression, var_cas_before_instructionList, var_cas_do_instructionList, var_cas_between_instructionList, var_cas_after_instructionList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5109_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_192194 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_192194) ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- End of parse/rewind instruction
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_58 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'parse_match_operand'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5219_26_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  &var_cas_outCppName,
                                GGS_lstring  &var_cas_outBaseTypeName,
                                GGS_location  &var_cas_outVarLocation,
                                GGS_bool &var_cas_outIsEnumeration,
                                GGS_enumConstantMap  &var_cas_outEnumMessageMap) {
  GGS_lstring  var_cas_variableName ;
  GGS_AC_galgasType  var_cas_type ;
  nt_read_access_ (inLexique, var_cas_variableName, var_cas_outCppName, var_cas_type, var_cas_ioVariablesMap) ;
  var_cas_outVarLocation = GGS_location (inLexique) ;
  { const GGS_AC_galgasType _var_195467 = var_cas_type ; // CAST instruction
    if (_var_195467.getPtr () != NULL) {
      macroValidPointer (_var_195467.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgasClassType *> (_var_195467.getPtr ()) != NULL) {
        const GGS_typeGalgasClassType var_cas_t (_var_195467.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_t.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5238)) ;
        var_cas_outIsEnumeration = GGS_bool (false) ;
        var_cas_outEnumMessageMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      }else if (dynamic_cast <cPtr_typeGalgas_enum *> (_var_195467.getPtr ()) != NULL) {
        const GGS_typeGalgas_enum var_cas_e (_var_195467.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5242)) ;
        var_cas_outIsEnumeration = GGS_bool (true) ;
        var_cas_outEnumMessageMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5244)) ;
      }else{
        GGS_string var_cas_actualTypeName ;
        const GGS_AC_galgasType  temp_195231 = var_cas_type ;
        if (temp_195231.isBuilt ()) {
          temp_195231 (HERE)->method_getTypeName (inLexique, var_cas_actualTypeName COMMA_SOURCE_FILE_AT_LINE (5247)) ;
        }
        var_cas_variableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the type of this variable is '@")).operator_concat (var_cas_actualTypeName)).operator_concat (GGS_string ("' ; I was expected an enumeration type or an abstract type")) COMMA_SOURCE_FILE_AT_LINE (5251)) ;
        var_cas_outBaseTypeName.drop () ;
        var_cas_outIsEnumeration.drop () ;
        var_cas_outEnumMessageMap.drop () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5219_26_parse (galgas_scanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5257_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  var_cas_inVarLocation,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  /* var_cas_inEnumMessageMap */,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_196015 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_196015.isBuilt ()) {
    temp_196015 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5270)) ;
  }
  GGS_AC_galgasType  var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5271)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5271)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5273)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5274)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5275)) ;
  GGS_bool var_cas_isAbstract = var_cas_classType.reader_mClassIsAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (5276)) ;
  const GGS_bool cond_196689 = var_cas_isAbstract ;
  if (cond_196689.isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an abstract class is not allowed here") COMMA_SOURCE_FILE_AT_LINE (5280)) ;
  }
  const GGS_bool cond_196881 = var_cas_inIsEnumeration ;
  if (cond_196881.isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5283)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (5284)) ;
  }else if (cond_196881.isBuiltAndFalse ()) {
    const GGS_bool cond_197045 = (var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5284)) COMMA_SOURCE_FILE_AT_LINE (5284))).operator_not () ;
    if (cond_197045.isBuiltAndTrue ()) {
      var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This type does not inherit from '")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5285)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (5286)) ;
    }
  }
  GGS_bool automatic_var_25 ;
  nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_inVarLocation, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), automatic_var_25) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5257_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  nt_parse_effective_input_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5300_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  /* var_cas_inVarLocation */,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  var_cas_inEnumMessageMap,
                                GGS_lstring  &var_cas_outEnumConstantName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outEnumConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  const GGS_bool cond_197850 = var_cas_inIsEnumeration ;
  if (cond_197850.isBuiltAndTrue ()) {
    GGS_bool automatic_var_26 ;
    const GGS_enumConstantMap  temp_197816 = var_cas_inEnumMessageMap ;
    if (temp_197816.isBuilt ()) {
      temp_197816 (HERE)->method_searchKey (inLexique, var_cas_outEnumConstantName, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (5313)) ;
    }
  }else if (cond_197850.isBuiltAndFalse ()) {
    var_cas_outEnumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a class that inherit from '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5315)))).operator_concat (GGS_string ("' abstract class is expected here")) COMMA_SOURCE_FILE_AT_LINE (5316)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5300_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5321_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand1_cppName ;
  GGS_lstring  var_cas_operand1_typeName ;
  GGS_location  var_cas_operand1_location ;
  GGS_bool var_cas_operand1_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand1_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand1_cppName, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand2_cppName ;
  GGS_lstring  var_cas_operand2_typeName ;
  GGS_location  var_cas_operand2_location ;
  GGS_bool var_cas_operand2_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand2_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand2_cppName, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_L_matchInstructionCasesList  var_cas_casesList = GGS_L_matchInstructionCasesList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5362)) ;
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5366)) ;
          GGS_lstring  var_cas_case1_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap, var_cas_case1_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          GGS_lstring  var_cas_case2_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap, var_cas_case2_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
          nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
          var_cas_casesList.addAssign_operation (var_cas_case1_name, var_cas_case2_name, var_cas_instructionsList) ;
          var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5366)) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5406)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elsePartInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elsePartInstructionsList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5406)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5362)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeMatchInstruction ::constructor_new (inLexique, var_cas_operand1_location, var_cas_operand2_location, var_cas_operand1_cppName, var_cas_operand2_cppName, var_cas_operand1_typeName, var_cas_operand2_typeName, var_cas_operand1_isEnumeration, var_cas_operand2_isEnumeration, var_cas_casesList, var_cas_elsePartInstructionsList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5321_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          nt_semantic_instructions_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'semantic_instructions_list_no_verif'   *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5438_42_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  { bool syntaxRepeat_60 = true ;
    while (syntaxRepeat_60) {
      switch (select_repeat_semantics_parser_60 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_60 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5438_42_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_60 = true ;
    while (syntaxRepeat_60) {
      switch (select_repeat_semantics_parser_60 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_60 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5463_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  /* var_cas_inTargetVarName */,
                                const GGS_typeCplusPlusName  var_cas_inVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */) {
  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_inVariableCppName, var_cas_inVariableType COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5463_26_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5479_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_inVariableType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (5503)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_galgasType  automatic_var_27 ;
  GGS_typeCplusPlusName  automatic_var_28 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_27, automatic_var_28 COMMA_SOURCE_FILE_AT_LINE (5508)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5479_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5513_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_lstring  var_cas_constructorName ;
  inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  const GGS_AC_galgasType  temp_205219 = var_cas_inVariableType ;
  if (temp_205219.isBuilt ()) {
    temp_205219 (HERE)->method_handleConstructorCall (inLexique, var_cas_constructorName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (5531)) ;
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_e = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_inVariableType, var_cas_constructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5546)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_e COMMA_HERE)) ;
  GGS_AC_galgasType  automatic_var_29 ;
  GGS_typeCplusPlusName  automatic_var_30 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_29, automatic_var_30 COMMA_SOURCE_FILE_AT_LINE (5552)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5513_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5561_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_207201 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5575)) COMMA_SOURCE_FILE_AT_LINE (5575))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5576)) COMMA_SOURCE_FILE_AT_LINE (5576)))).operator_not () ;
      if (cond_207201.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5578)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_207363 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_207363.isBuilt ()) {
        temp_207363 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5585)) ;
      }
      GGS_AC_galgasType  var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5586)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5586)) ;
      GGS_typeGalgasMapType  var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5587)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5588)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5589)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5590)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5591)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5604)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5605)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5618)) ;
      GGS_typeEntityToGenerate  var_cas_e = GGS_C_mapindexToImplement ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5561_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_209726 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5641)) COMMA_SOURCE_FILE_AT_LINE (5641))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5642)) COMMA_SOURCE_FILE_AT_LINE (5642)))).operator_not () ;
      if (cond_209726.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5644)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_209888 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_209888.isBuilt ()) {
        temp_209888 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5651)) ;
      }
      GGS_AC_galgasType  var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5652)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5652)) ;
      GGS_typeGalgasMapType  var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5653)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5654)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5655)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5656)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5657)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5670)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5671)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5684)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5561_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5694_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_212463 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5708)) COMMA_SOURCE_FILE_AT_LINE (5708))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5709)) COMMA_SOURCE_FILE_AT_LINE (5709)))).operator_not () ;
      if (cond_212463.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5711)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_cppClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("old style map definition") COMMA_SOURCE_FILE_AT_LINE (5718)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5731)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5738)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (5773)) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_inPassingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_outPassingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_215406 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_215406 = NULL ;
        while (((operand_215406 = enumerator_215406.nextObject ()))) {
          macroValidPointer (operand_215406) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_215583 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_215583 = NULL ;
            while (((operand_215583 = enumerator_215583.nextObject ()))) {
              macroValidPointer (operand_215583) ;
              var_cas_methodSignature.addAssign_operation (operand_215583->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_215406->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5801)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_215985 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_215985 = NULL ;
            while (((operand_215985 = enumerator_215985.nextObject ()))) {
              macroValidPointer (operand_215985) ;
              var_cas_methodSignature.addAssign_operation (operand_215985->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_215406->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5809))).operator_concat (GGS_string ("GetIndex")), operand_215406->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5809)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5810)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_216313 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_216313 = NULL ;
        while (((operand_216313 = enumerator_216313.nextObject ()))) {
          macroValidPointer (operand_216313) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_216488 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_216488 = NULL ;
            while (((operand_216488 = enumerator_216488.nextObject ()))) {
              macroValidPointer (operand_216488) ;
              var_cas_methodSignature.addAssign_operation (operand_216488->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_216313->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5819)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_216888 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_216888 = NULL ;
            while (((operand_216888 = enumerator_216888.nextObject ()))) {
              macroValidPointer (operand_216888) ;
              var_cas_methodSignature.addAssign_operation (operand_216888->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_216313->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5827))).operator_concat (GGS_string ("GetIndex")), operand_216313->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5827)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5828)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5839)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_typeDefinitionTableAimplementer ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_cppClassName, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_tableMethodesBloc COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_enumTypeName ;
      GGS_lstring  var_cas_checkFinalStateMethod ;
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          var_cas_enumTypeName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_checkFinalStateMethod = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_checkFinalStateMethod) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_removeMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_inPassingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_outPassingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5895)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_220257 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_220257 = NULL ;
                while (((operand_220257 = enumerator_220257.nextObject ()))) {
                  macroValidPointer (operand_220257) ;
                  var_cas_methodSignature.addAssign_operation (operand_220257->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5903)) ;
              var_cas_removeMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5904)), GGS_bool (false), GGS_string ("")) ;
              const GGS_bool cond_221095 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5906))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_221095.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_220811 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_220811 = NULL ;
                  while (((operand_220811 = enumerator_220811.nextObject ()))) {
                    macroValidPointer (operand_220811) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_220811->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5913)) ;
                var_cas_removeMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5914)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5922)) ;
              }
              GGS_string var_cas_shadowErrorMessage ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  var_cas_shadowErrorMessage = GGS_string ("") ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  GGS_lstring  var_cas_shadowErrorMessageString ;
                  inLexique.assignFromAttribute_tokenString (var_cas_shadowErrorMessageString) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (var_cas_shadowErrorMessageString.isBuilt ()) {
                    ::routine_check_KL_escapeCharacters (inLexique,  var_cas_shadowErrorMessageString COMMA_SOURCE_FILE_AT_LINE (5930)) ;
                  }
                  var_cas_shadowErrorMessage = var_cas_shadowErrorMessageString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5931)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_221872 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_221872 = NULL ;
                while (((operand_221872 = enumerator_221872.nextObject ()))) {
                  macroValidPointer (operand_221872) ;
                  var_cas_methodSignature.addAssign_operation (operand_221872->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5940)) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5941)), GGS_bool (false), var_cas_shadowErrorMessage) ;
              const GGS_bool cond_222740 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5943))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_222740.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_222441 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_222441 = NULL ;
                  while (((operand_222441 = enumerator_222441.nextObject ()))) {
                    macroValidPointer (operand_222441) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_222441->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5950)) ;
                var_cas_insertMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5951)), GGS_bool (true), var_cas_shadowErrorMessage) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_K_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5959)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_223188 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_223188 = NULL ;
                while (((operand_223188 = enumerator_223188.nextObject ()))) {
                  macroValidPointer (operand_223188) ;
                  var_cas_methodSignature.addAssign_operation (operand_223188->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5967)) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5968)), GGS_bool (false), GGS_string ("")) ;
              const GGS_bool cond_224053 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5970))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_224053.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_223772 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_223772 = NULL ;
                  while (((operand_223772 = enumerator_223772.nextObject ()))) {
                    macroValidPointer (operand_223772) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_223772->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5977)) ;
                var_cas_searchMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5978)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_224138 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_224138 = NULL ;
        while (((operand_224138 = enumerator_224138.nextObject ()))) {
          macroValidPointer (operand_224138) ;
          const GGS_bool cond_224569 = operand_224138->mInfo.mHasSetter ;
          if (cond_224569.isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_224138->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5984)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (5984)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_224138->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (5988)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6000)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_mapToImplement ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_enumTypeName, var_cas_checkFinalStateMethod, var_cas_listeTousAttributsSemantiques, var_cas_tableAttributs, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_removeMethodList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5694_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_226091 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6029)) COMMA_SOURCE_FILE_AT_LINE (6029))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6029)) COMMA_SOURCE_FILE_AT_LINE (6029)))).operator_not () ;
      if (cond_226091.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (6031)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6050)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6057)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (6092)) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_inPassingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_outPassingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_228987 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_228987 = NULL ;
        while (((operand_228987 = enumerator_228987.nextObject ()))) {
          macroValidPointer (operand_228987) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_229164 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_229164 = NULL ;
            while (((operand_229164 = enumerator_229164.nextObject ()))) {
              macroValidPointer (operand_229164) ;
              var_cas_methodSignature.addAssign_operation (operand_229164->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_228987->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6120)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_229566 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_229566 = NULL ;
            while (((operand_229566 = enumerator_229566.nextObject ()))) {
              macroValidPointer (operand_229566) ;
              var_cas_methodSignature.addAssign_operation (operand_229566->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_228987->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6128))).operator_concat (GGS_string ("GetIndex")), operand_228987->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6128)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6129)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_229894 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_229894 = NULL ;
        while (((operand_229894 = enumerator_229894.nextObject ()))) {
          macroValidPointer (operand_229894) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_230071 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_230071 = NULL ;
            while (((operand_230071 = enumerator_230071.nextObject ()))) {
              macroValidPointer (operand_230071) ;
              var_cas_methodSignature.addAssign_operation (operand_230071->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_229894->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6138)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_230474 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_230474 = NULL ;
            while (((operand_230474 = enumerator_230474.nextObject ()))) {
              macroValidPointer (operand_230474) ;
              var_cas_methodSignature.addAssign_operation (operand_230474->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_229894->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6146))).operator_concat (GGS_string ("GetIndex")), operand_229894->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6146)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6147)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6158)) ;
      GGS_TypeModel  var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6160)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_inPassingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_formalArgumentPassingMode var_cas_outPassingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_31 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_31) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_232808 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_232808 = NULL ;
                while (((operand_232808 = enumerator_232808.nextObject ()))) {
                  macroValidPointer (operand_232808) ;
                  var_cas_methodSignature.addAssign_operation (operand_232808->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6207)) ;
              const GGS_bool cond_233519 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6209))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_233519.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_233318 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_233318 = NULL ;
                  while (((operand_233318 = enumerator_233318.nextObject ()))) {
                    macroValidPointer (operand_233318) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_233318->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6216)) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_32 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_32) ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_233964 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_233964 = NULL ;
                while (((operand_233964 = enumerator_233964.nextObject ()))) {
                  macroValidPointer (operand_233964) ;
                  var_cas_methodSignature.addAssign_operation (operand_233964->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6235)) ;
              const GGS_bool cond_234674 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6237))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_234674.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_234473 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_234473 = NULL ;
                  while (((operand_234473 = enumerator_234473.nextObject ()))) {
                    macroValidPointer (operand_234473) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_234473->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6244)) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_33 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_33) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_235039 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_235039 = NULL ;
                while (((operand_235039 = enumerator_235039.nextObject ()))) {
                  macroValidPointer (operand_235039) ;
                  var_cas_methodSignature.addAssign_operation (operand_235039->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6258)) ;
              const GGS_bool cond_235788 = (var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6260))).operator_isNotEqual (GGS_string ("")) ;
              if (cond_235788.isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_235589 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_235589 = NULL ;
                  while (((operand_235589 = enumerator_235589.nextObject ()))) {
                    macroValidPointer (operand_235589) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_235589->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6267)) ;
              }
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_235873 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_235873 = NULL ;
        while (((operand_235873 = enumerator_235873.nextObject ()))) {
          macroValidPointer (operand_235873) ;
          const GGS_bool cond_236304 = operand_235873->mInfo.mHasSetter ;
          if (cond_236304.isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_235873->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6273)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (6273)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_235873->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (6277)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6289)) ;
      GGS_TypeModel  var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6291)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5694_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ex_map_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6298_20_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_nomMethode,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6298_20_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'map_method'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6310_17_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_methodName,
                                GGS_lstring  &var_cas_getIndexMethodName,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      var_cas_getIndexMethodName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_getIndexMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6310_17_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6333_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  const GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6359))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6359))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6359)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6360)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_239301 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_239301.isBuilt ()) {
    temp_239301 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6363)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6364)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6364)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6365)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6368)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_239770 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_239770 = NULL ;
    while (((operand_239770 = enumerator_239770.nextObject ()))) {
      macroValidPointer (operand_239770) ;
      GGS_string var_cas_keyClassMethod = ((operand_239770->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6371))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6371))) ;
      const GGS_bool cond_240065 = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6372)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6372)) ;
      if (cond_240065.isBuiltAndTrue ()) {
        var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_239770->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6375)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6377)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6388)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6333_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6416))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6416))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6416)) COMMA_HERE) ;
  const GGS_bool cond_241699 = (var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6417)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6417)) COMMA_SOURCE_FILE_AT_LINE (6417))).operator_not () ;
  if (cond_241699.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6418)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6333_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6429_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  const GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6461))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6461))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6461)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6462)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_243650 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_243650.isBuilt ()) {
    temp_243650 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6465)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6466)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6466)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6467)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6470)) ;
  const GGS_bool cond_245200 = (var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
  if (cond_245200.isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_244244 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_244244 = NULL ;
      while (((operand_244244 = enumerator_244244.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_244244) ;
        GGS_string var_cas_keyClassMethod = ((operand_244244->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6475))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6475))) ;
        var_cas_baseClassName = operand_244244->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6476)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6477)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6477)) ;
        const GGS_bool cond_244980 = var_cas_found ;
        if (cond_244980.isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_localCategoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryMethodMap  temp_244649 = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6481)) ;
          if (temp_244649.isBuilt ()) {
            temp_244649 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_localCategoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (6481)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (6482)) ;
          var_cas_found = (var_cas_localCategoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    const GGS_bool cond_245188 = (var_cas_found).operator_not () ;
    if (cond_245188.isBuiltAndTrue ()) {
      var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden method is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6493)) ;
    }
  }else if (cond_245200.isBuiltAndFalse ()) {
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_245277 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_245277 = NULL ;
      while (((operand_245277 = enumerator_245277.nextObject ()))) {
        macroValidPointer (operand_245277) ;
        GGS_string var_cas_keyClassMethod = ((operand_245277->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6496))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6496))) ;
        const GGS_bool cond_245581 = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6497)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6497)) ;
        if (cond_245581.isBuiltAndTrue ()) {
          var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_245277->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6500)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6502)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_245734 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6505)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_245734 = NULL ;
    while (((operand_245734 = enumerator_245734.nextObject ()))) {
      macroValidPointer (operand_245734) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6507)), operand_245734->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6508)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_245734->mAttributeName, operand_245734->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6512)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6515)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6515)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6537)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6429_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6571))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6571))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6571)) COMMA_HERE) ;
  const GGS_bool cond_248251 = (var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6572)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6572)) COMMA_SOURCE_FILE_AT_LINE (6572))).operator_not () ;
  if (cond_248251.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6573)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6429_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6589_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6619)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6619)) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_250203 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_250203.isBuilt ()) {
    temp_250203 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6621)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6622)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6622)) ;
  const GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6624))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6624))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6624)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6625)) ;
  const GGS_M_semanticsEntitiesForUse  temp_250728 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_250728.isBuilt ()) {
    temp_250728 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6627)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6628)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6628)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6629)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6632)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_251197 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_251197 = NULL ;
    while (((operand_251197 = enumerator_251197.nextObject ()))) {
      macroValidPointer (operand_251197) ;
      GGS_string var_cas_keyClassMethod = ((operand_251197->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6635))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6635))) ;
      const GGS_bool cond_251492 = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6636)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6636)) ;
      if (cond_251492.isBuiltAndTrue ()) {
        var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_251197->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6639)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6641)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6652)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6589_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_253119 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_253119.isBuilt ()) {
    temp_253119 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6687)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6688)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6688)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6690))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6690))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6690)) COMMA_HERE) ;
  const GGS_bool cond_253610 = (var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6691)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6691)) COMMA_SOURCE_FILE_AT_LINE (6691))).operator_not () ;
  if (cond_253610.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6692)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6589_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6703_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_255424 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_255424.isBuilt ()) {
    temp_255424 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6739)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6740)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6740)) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6743)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6743)) COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_returnedVariableName, var_cas_returnedType, var_cas_returnedCppVarName COMMA_SOURCE_FILE_AT_LINE (6744)) ;
  const GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6746))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6746))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6746)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6747)) ;
  const GGS_M_semanticsEntitiesForUse  temp_256302 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_256302.isBuilt ()) {
    temp_256302 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6749)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6750)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6750)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6751)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6754)) ;
  const GGS_bool cond_258195 = (var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
  if (cond_258195.isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_256896 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_256896 = NULL ;
      while (((operand_256896 = enumerator_256896.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_256896) ;
        GGS_string var_cas_keyClassMethod = ((operand_256896->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6759))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6759))) ;
        var_cas_baseClassName = operand_256896->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6760)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6761)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6761)) ;
        const GGS_bool cond_257975 = var_cas_found ;
        if (cond_257975.isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_localCategoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          GGS_AC_galgasType  var_cas_returnedTypePreviousDeclaration ;
          const GGS_EXcategoryReaderMap  temp_257358 = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6766)) ;
          if (temp_257358.isBuilt ()) {
            temp_257358 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_localCategoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration, var_cas_returnedTypePreviousDeclaration COMMA_SOURCE_FILE_AT_LINE (6766)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6775)) COMMA_SOURCE_FILE_AT_LINE (6772)) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_returnedType,  var_cas_returnedTypePreviousDeclaration,  var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6780)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (6777)) ;
          var_cas_found = (var_cas_localCategoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    const GGS_bool cond_258183 = (var_cas_found).operator_not () ;
    if (cond_258183.isBuiltAndTrue ()) {
      var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden reader is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6789)) ;
    }
  }else if (cond_258195.isBuiltAndFalse ()) {
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_258272 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_258272 = NULL ;
      while (((operand_258272 = enumerator_258272.nextObject ()))) {
        macroValidPointer (operand_258272) ;
        GGS_string var_cas_keyClassMethod = ((operand_258272->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6792))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6792))) ;
        const GGS_bool cond_258576 = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6793)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6793)) ;
        if (cond_258576.isBuiltAndTrue ()) {
          var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_258272->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6796)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6798)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_258729 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6801)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_258729 = NULL ;
    while (((operand_258729 = enumerator_258729.nextObject ()))) {
      macroValidPointer (operand_258729) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6803)), operand_258729->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6804)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_258729->mAttributeName, operand_258729->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6808)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6811)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6811)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6833)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6703_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_261238 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_261238.isBuilt ()) {
    temp_261238 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6874)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6875)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6875)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6877))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6877))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6877)) COMMA_HERE) ;
  const GGS_bool cond_261729 = (var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6878)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6878)) COMMA_SOURCE_FILE_AT_LINE (6878))).operator_not () ;
  if (cond_261729.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6879)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6703_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6895_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6922))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6922))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6922)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6923)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_263715 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_263715.isBuilt ()) {
    temp_263715 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6926)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6927)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6927)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6928)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6931)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_264184 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_264184 = NULL ;
    while (((operand_264184 = enumerator_264184.nextObject ()))) {
      macroValidPointer (operand_264184) ;
      GGS_string var_cas_keyClassMethod = ((operand_264184->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6934))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6934))) ;
      const GGS_bool cond_264487 = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6935)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6935)) ;
      if (cond_264487.isBuiltAndTrue ()) {
        var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_264184->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6938)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6940)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, GGS_templateInstructionList ::constructor_emptyList (), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6950)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6895_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6979))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6979))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6979)) COMMA_HERE) ;
  const GGS_bool cond_266180 = (var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6980)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6980)) COMMA_SOURCE_FILE_AT_LINE (6980))).operator_not () ;
  if (cond_266180.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6981)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6895_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6992_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  const GGS_lstring  var_cas_kKey = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7025))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7025))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7025)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_kKey, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7026)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_268212 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_268212.isBuilt ()) {
    temp_268212 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (7029)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (7030)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7030)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (7031)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7034)) ;
  const GGS_bool cond_269833 = (var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
  if (cond_269833.isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_268806 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_268806 = NULL ;
      while (((operand_268806 = enumerator_268806.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_268806) ;
        GGS_string var_cas_keyClassMethod = ((operand_268806->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7039))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7039))) ;
        var_cas_baseClassName = operand_268806->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7040)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7041)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (7041)) ;
        const GGS_bool cond_269609 = var_cas_found ;
        if (cond_269609.isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_localCategoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryTemplateMap  temp_269217 = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7045)) ;
          if (temp_269217.isBuilt ()) {
            temp_269217 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_localCategoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (7045)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7053)) COMMA_SOURCE_FILE_AT_LINE (7050)) ;
          var_cas_found = (var_cas_localCategoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    const GGS_bool cond_269821 = (var_cas_found).operator_not () ;
    if (cond_269821.isBuiltAndTrue ()) {
      var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden template is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (7061)) ;
    }
  }else if (cond_269833.isBuiltAndFalse ()) {
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_269910 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_269910 = NULL ;
      while (((operand_269910 = enumerator_269910.nextObject ()))) {
        macroValidPointer (operand_269910) ;
        GGS_string var_cas_keyClassMethod = ((operand_269910->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7064))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7064))) ;
        const GGS_bool cond_270222 = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7065)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (7065)) ;
        if (cond_270222.isBuiltAndTrue ()) {
          var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_269910->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (7068)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7070)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_270375 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7073)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_270375 = NULL ;
    while (((operand_270375 = enumerator_270375.nextObject ()))) {
      macroValidPointer (operand_270375) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7075)), operand_270375->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7076)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_270375->mAttributeName, operand_270375->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7080)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7083)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7083)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_templateString = GGS_string ("") ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        GGS_lstring  var_cas_s ;
        inLexique.assignFromAttribute_tokenString (var_cas_s) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_templateString.dotAssign_operation (var_cas_s.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7089))) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  GGS_templateInstructionList  var_cas_templateInstructionList ;
  galgasTemplateGrammar::_performSourceStringParsing_ (inLexique,
                                  NULL,
                                  var_cas_templateString,
                                  var_cas_methodLocalVariablesMap,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioComponentSemanticsEntitiesMap,
                                  var_cas_inOptionsComponentsMapForUse,
                                  var_cas_templateInstructionList
                                  COMMA_SOURCE_FILE_AT_LINE (7093)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, var_cas_templateInstructionList, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7110)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6992_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7145))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7145))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7145)) COMMA_HERE) ;
  const GGS_bool cond_273138 = (var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7146)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7146)) COMMA_SOURCE_FILE_AT_LINE (7146))).operator_not () ;
  if (cond_273138.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7147)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6992_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7166_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_274446 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7180)) COMMA_SOURCE_FILE_AT_LINE (7180))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7180)) COMMA_SOURCE_FILE_AT_LINE (7180)))).operator_not () ;
      if (cond_274446.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7182)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_275138 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_275138 = NULL ;
        while (((operand_275138 = enumerator_275138.nextObject ()))) {
          macroValidPointer (operand_275138) ;
          var_cas_extractSignature.addAssign_operation (operand_275138->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_275138->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7214)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_listTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7166_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_276579 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7235)) COMMA_SOURCE_FILE_AT_LINE (7235))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7235)) COMMA_SOURCE_FILE_AT_LINE (7235)))).operator_not () ;
      if (cond_276579.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7237)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_277271 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_277271 = NULL ;
        while (((operand_277271 = enumerator_277271.nextObject ()))) {
          macroValidPointer (operand_277271) ;
          var_cas_extractSignature.addAssign_operation (operand_277271->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_277271->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7269)) ;
      GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7271)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7166_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7281_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_279129 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7295)) COMMA_SOURCE_FILE_AT_LINE (7295))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7295)) COMMA_SOURCE_FILE_AT_LINE (7295)))).operator_not () ;
      if (cond_279129.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7297)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_279773 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_279773 = NULL ;
        while (((operand_279773 = enumerator_279773.nextObject ()))) {
          macroValidPointer (operand_279773) ;
          var_cas_extractSignature.addAssign_operation (operand_279773->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_EXsortDescriptorList  var_cas_sortDescriptorList = GGS_EXsortDescriptorList ::constructor_emptyList () ;
      GGS_stringset  var_cas_usedSortedAttributes = GGS_stringset ::constructor_emptySet () ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            GGS_lstring  var_cas_sortAttribute ;
            inLexique.assignFromAttribute_tokenString (var_cas_sortAttribute) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            const GGS_bool cond_280461 = var_cas_usedSortedAttributes.reader_hasKey (inLexique, var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7332)) COMMA_SOURCE_FILE_AT_LINE (7332)) ;
            if (cond_280461.isBuiltAndTrue ()) {
              var_cas_sortAttribute.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this attribute is already used in sort list") COMMA_SOURCE_FILE_AT_LINE (7334)) ;
            }else if (cond_280461.isBuiltAndFalse ()) {
              GGS_AC_galgasType  var_cas_definitionType ;
              GGS_bool automatic_var_34 ;
              GGS_bool automatic_var_35 ;
              const GGS_typeSemanticAttributesMap  temp_280535 = var_cas_tableAttributs ;
              if (temp_280535.isBuilt ()) {
                temp_280535 (HERE)->method_searchKey (inLexique, var_cas_sortAttribute, var_cas_definitionType, automatic_var_34, automatic_var_35 COMMA_SOURCE_FILE_AT_LINE (7336)) ;
              }
              const GGS_AC_galgasType  temp_280639 = var_cas_definitionType ;
              if (temp_280639.isBuilt ()) {
                temp_280639 (HERE)->method_acceptToBeSortKeyInSortedListDefinition (inLexique, var_cas_sortAttribute COMMA_SOURCE_FILE_AT_LINE (7337)) ;
              }
              var_cas_usedSortedAttributes.addAssign_operation (var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7338))) ;
            }
            GGS_bool var_cas_ascendingOrder ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (true) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (false) ;
                } break ;
              default :
                break ;
            }
            var_cas_sortDescriptorList.addAssign_operation (var_cas_sortAttribute, var_cas_ascendingOrder) ;
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7354)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_sortedListTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_sortDescriptorList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7281_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      const GGS_bool cond_282088 = ((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7376)) COMMA_SOURCE_FILE_AT_LINE (7376))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7376)) COMMA_SOURCE_FILE_AT_LINE (7376)))).operator_not () ;
      if (cond_282088.isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7378)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_282732 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_282732 = NULL ;
        while (((operand_282732 = enumerator_282732.nextObject ()))) {
          macroValidPointer (operand_282732) ;
          var_cas_extractSignature.addAssign_operation (operand_282732->mAttributType, GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7420)) ;
      GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7422)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7281_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'attributes_definition_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7432_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                GGS_typeListModel  &var_cas_outAttributeListModel,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeAttributsSemantiquesCourants,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap) {
  var_cas_listeAttributsSemantiquesCourants = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_outAttributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_77 = true ;
    while (syntaxRepeat_77) {
      switch (select_repeat_semantics_parser_77 (inLexique)) {
        case 2 : {
          GGS_AC_galgasType  var_cas_definitionType ;
          GGS_lstring  var_cas_typeName ;
          nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_bool var_cas_hasSetter = GGS_bool (false) ;
          GGS_bool var_cas_hasGetter = GGS_bool (true) ;
          switch (select_semantics_parser_78 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_79 = true ;
                while (syntaxRepeat_79) {
                    GGS_lstring  var_cas_directiveName ;
                    inLexique.assignFromAttribute_tokenString (var_cas_directiveName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    const GGS_bool cond_285167 = (var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7464))).operator_isEqual (GGS_string ("nogetter")) ;
                    if (cond_285167.isBuiltAndTrue ()) {
                      const GGS_bool cond_285117 = (var_cas_hasGetter).operator_not () ;
                      if (cond_285117.isBuiltAndTrue ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'nogetter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7467)) ;
                      }
                      var_cas_hasGetter = GGS_bool (false) ;
                    }else if (cond_285167.isBuiltAndFalse ()) {
                      const GGS_bool cond_285369 = (var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7469))).operator_isEqual (GGS_string ("setter")) ;
                      if (cond_285369.isBuiltAndTrue ()) {
                        const GGS_bool cond_285321 = var_cas_hasSetter ;
                        if (cond_285321.isBuiltAndTrue ()) {
                          var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'setter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7472)) ;
                        }
                        var_cas_hasSetter = GGS_bool (true) ;
                      }else if (cond_285369.isBuiltAndFalse ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'setter' or 'nogetter' feature names are allowed here") COMMA_SOURCE_FILE_AT_LINE (7476)) ;
                      }
                    }
                  switch (select_repeat_semantics_parser_79 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_79 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          var_cas_tableAttributs.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_definitionType, var_cas_hasSetter, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (7481)) ;
          var_cas_listeTousAttributsSemantiques.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_listeAttributsSemantiquesCourants.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_outAttributeListModel.addAssign_operation (var_cas_typeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_77 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7432_33_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_77 = true ;
    while (syntaxRepeat_77) {
      switch (select_repeat_semantics_parser_77 (inLexique)) {
        case 2 : {
          nt_type_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_78 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_79 = true ;
                while (syntaxRepeat_79) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_semantics_parser_79 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_79 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_77 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7495_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_286899 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_286899.isBuilt ()) {
    temp_286899 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7512)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7513)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7513)) ;
  GGS_typeGalgasListType  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7514)) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7520)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7522)) ;
  GGS_typeEntityToGenerate  var_cas_def = GGS_typeGalgasListmapToImplement ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7526)) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7495_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_288180 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_288180.isBuilt ()) {
    temp_288180 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7546)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7547)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7547)) ;
  GGS_typeGalgasListType  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7548)) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7554)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7556)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7495_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7565_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7598)) ;
  GGS_typeEntityToGenerate  var_cas_def = GGS_C_structToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7565_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7637)) ;
  GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7639)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7565_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  nt_attributes_definition_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "recursivelyEnumerateDirectories"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyEnumerateDirectories (C_Compiler & inLexique,
                                const GGS_string  var_cas_inAbsoluteSourcePath,
                                const GGS_string  var_cas_inPathInWrapper,
                                const GGS_wrapperExtensionMap   var_cas_inExtensionMap,
                                GGS_wrapperFileSortedList  & var_cas_outWrapperFileSortedList,
                                GGS_wrapperDirectorySortedList  & var_cas_outWrapperDirectorySortedList,
                                GGS_uint  & var_cas_ioWrapperFileIndex,
                                GGS_uint  & var_cas_ioWrapperDirectoryIndex,
                                GGS_M_regularFiles  & var_cas_ioRegularFileMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyEnumerateDirectories at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
  var_cas_ioWrapperDirectoryIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7659)) ;
  GGS_stringlist  var_cas_files = var_cas_inAbsoluteSourcePath.reader_regularFiles (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7661)) ;
  var_cas_outWrapperFileSortedList = GGS_wrapperFileSortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_292916 (var_cas_files, true) ;
    const GGS_stringlist::cElement * operand_292916 = NULL ;
    while (((operand_292916 = enumerator_292916.nextObject ()))) {
      macroValidPointer (operand_292916) ;
      const GGS_bool cond_293423 = var_cas_inExtensionMap.reader_hasKey (inLexique, operand_292916->mValue.reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7664)) COMMA_SOURCE_FILE_AT_LINE (7664)) ;
      if (cond_293423.isBuiltAndTrue ()) {
        GGS_string var_cas_absoluteFilePath = ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_292916->mValue) ;
        var_cas_outWrapperFileSortedList.addAssign_operation (operand_292916->mValue, var_cas_absoluteFilePath, var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex) ;
        var_cas_ioRegularFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_inPathInWrapper).operator_concat (operand_292916->mValue), GGS_location (inLexique) COMMA_HERE), var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (7673)) ;
        var_cas_ioWrapperFileIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7678)) ;
      }
    }
  }
  GGS_stringlist  var_cas_directories = var_cas_inAbsoluteSourcePath.reader_directories (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7682)) ;
  var_cas_outWrapperDirectorySortedList = GGS_wrapperDirectorySortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_293658 (var_cas_directories, true) ;
    const GGS_stringlist::cElement * operand_293658 = NULL ;
    while (((operand_293658 = enumerator_293658.nextObject ()))) {
      macroValidPointer (operand_293658) ;
      GGS_wrapperFileSortedList  var_cas_internalWrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_internalWrapperDirectorySortedList ;
      GGS_uint  var_cas_theDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_293658->mValue),  ((var_cas_inPathInWrapper).operator_concat (operand_293658->mValue)).operator_concat (GGS_string ("/")),  var_cas_inExtensionMap,  var_cas_internalWrapperFileSortedList,  var_cas_internalWrapperDirectorySortedList,  var_cas_ioWrapperFileIndex,  var_cas_ioWrapperDirectoryIndex,  var_cas_ioRegularFileMap COMMA_SOURCE_FILE_AT_LINE (7688)) ;
      var_cas_outWrapperDirectorySortedList.addAssign_operation (operand_293658->mValue, var_cas_internalWrapperFileSortedList, var_cas_internalWrapperDirectorySortedList, var_cas_theDirectoryIndex) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyEnumerateDirectories\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7709_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7731)) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_absoluteSourcePath ;
  const GGS_bool cond_295441 = (var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7740))).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_295441.isBuiltAndTrue ()) {
    var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7741)) ;
  }else if (cond_295441.isBuiltAndFalse ()) {
    var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7743))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7743))) ;
  }
  const GGS_bool cond_295721 = (var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7745))).operator_not () ;
  if (cond_295721.isBuiltAndTrue ()) {
    var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7747)) ;
  }else if (cond_295721.isBuiltAndFalse ()) {
    GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
    GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
    GGS_uint  var_cas_wrapperFileIndex = GGS_uint (0U) ;
    GGS_uint  var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
    ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7753)) ;
    GGS_typeEntityToGenerate  var_cas_w = GGS_C_wrapperToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7766)), var_cas_extensionMap, var_cas_wrapperFileSortedList, var_cas_wrapperDirectorySortedList COMMA_HERE) ;
    var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_w) ;
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_lstring  var_cas_templateAbsolutePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_templatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7786))), var_cas_templatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7787)) COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_templateArgumentTypesList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_templateVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  GGS_bool var_cas_parameterIsUsed ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      var_cas_parameterIsUsed = GGS_bool (true) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      var_cas_parameterIsUsed = GGS_bool (false) ;
                      } break ;
                    default :
                      break ;
                  }
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_cppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_parameterName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7814)), var_cas_parameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7814)) COMMA_HERE) ;
                  var_cas_templateArgumentTypesList.addAssign_operation (var_cas_type_semantique, GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE), var_cas_cppName, GGS_bool (true), var_cas_parameterName) ;
                  const GGS_bool cond_298047 = var_cas_parameterIsUsed ;
                  if (cond_298047.isBuiltAndTrue ()) {
                    var_cas_templateVariableMap.modifier_insertConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7817)) ;
                  }else if (cond_298047.isBuiltAndFalse ()) {
                    var_cas_templateVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7819)) ;
                  }
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7822)) ;
          GGS_templateInstructionList  var_cas_templateInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            galgasTemplateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          var_cas_templateAbsolutePath,
                                          var_cas_templateVariableMap,
                                          var_cas_ioSemanticContext,
                                          var_cas_ioComponentSemanticsEntitiesMap,
                                          var_cas_inOptionsComponentsMapForUse,
                                          var_cas_templateInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (7824)) ;
          }
          var_cas_listeEntitesAengendrer.addAssign_operation (GGS_C_filewrapperTemplateToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_templateName, var_cas_templateArgumentTypesList, var_cas_templateInstructionList COMMA_HERE)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7840)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7709_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7864)) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  const GGS_bool cond_300709 = (var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7871)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7871)) COMMA_SOURCE_FILE_AT_LINE (7871))).operator_not () ;
  if (cond_300709.isBuiltAndTrue ()) {
    GGS_string var_cas_absoluteSourcePath ;
    const GGS_bool cond_299921 = (var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7874))).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_299921.isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7875)) ;
    }else if (cond_299921.isBuiltAndFalse ()) {
      var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7877))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7877))) ;
    }
    const GGS_bool cond_300211 = (var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7879))).operator_not () ;
    if (cond_300211.isBuiltAndTrue ()) {
      var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7881)) ;
    }else if (cond_300211.isBuiltAndFalse ()) {
      GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
      GGS_uint  var_cas_wrapperFileIndex = GGS_uint (0U) ;
      GGS_uint  var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7887)) ;
    }
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7928)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_301765 = (var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7932)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7932)) COMMA_SOURCE_FILE_AT_LINE (7932))).operator_not () ;
  if (cond_301765.isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7933)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7709_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7944_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7944_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7944_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7988_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_modifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_constructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_constructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (8029)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_methodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8049)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_methodName ;
              inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              var_cas_modifiersMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8069)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              const GGS_bool cond_307375 = var_cas_acceptAddAssignOperatorCall ;
              if (cond_307375.isBuiltAndTrue ()) {
                var_cas_errorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (8090)) ;
              }else if (cond_307375.isBuiltAndFalse ()) {
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_t = GGS_typeExternTypeToGenerate ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_t) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8116)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7988_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_EXmodifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_EXconstructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_addAssignFormalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeListModel  var_cas_formalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  var_cas_formalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_EXconstructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (8165)) ;
          var_cas_constructorMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_formalInputArgumentList COMMA_SOURCE_FILE_AT_LINE (8166)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_signatureForGrammarAnalysis  var_cas_signature ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8186)) ;
          var_cas_readerMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8187)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_modifierName ;
              inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signature ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
              var_cas_EXmodifiersMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8207)) ;
              var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8208)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              const GGS_bool cond_311602 = (var_cas_addAssignFormalInputArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (8211))).operator_strictSup (GGS_uint (0U)) ;
              if (cond_311602.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (8213)) ;
              }else if (cond_311602.isBuiltAndFalse ()) {
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      var_cas_addAssignFormalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_EXconstructorsMap, var_cas_EXmodifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8245)) ;
  GGS_TypeModel  var_cas_t = GGS_ExternTypeModel ::constructor_new (inLexique, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_addAssignFormalInputArgumentList COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (8247)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7988_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      nt_formal_argument_type_parse (inLexique) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8255_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  const GGS_bool cond_313534 = var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8262)) COMMA_SOURCE_FILE_AT_LINE (8262)) ;
  if (cond_313534.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_313396 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_313396.isBuilt ()) {
      temp_313396 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8264)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8265)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8265)) ;
  }else if (cond_313534.isBuiltAndFalse ()) {
    const GGS_typeTableEnAvant  temp_313588 = var_cas_tableEnAvant ;
    if (temp_313588.isBuilt ()) {
      temp_313588 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8267)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8255_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8255_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8277_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  const GGS_bool cond_314367 = var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8285)) COMMA_SOURCE_FILE_AT_LINE (8285)) ;
  if (cond_314367.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_314229 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_314229.isBuilt ()) {
      temp_314229 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8287)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8288)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8288)) ;
  }else if (cond_314367.isBuiltAndFalse ()) {
    const GGS_typeTableEnAvant  temp_314421 = var_cas_tableEnAvant ;
    if (temp_314421.isBuilt ()) {
      temp_314421 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8290)) ;
    }
    GGS_typeGalgasUndefinedListType  var_cas_x = GGS_typeGalgasUndefinedListType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8291)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8277_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8277_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8302_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  const GGS_bool cond_315337 = var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8310)) COMMA_SOURCE_FILE_AT_LINE (8310)) ;
  if (cond_315337.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_315199 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_315199.isBuilt ()) {
      temp_315199 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8312)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8313)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8313)) ;
  }else if (cond_315337.isBuiltAndFalse ()) {
    const GGS_typeTableEnAvant  temp_315391 = var_cas_tableEnAvant ;
    if (temp_315391.isBuilt ()) {
      temp_315391 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8315)) ;
    }
    GGS_typeGalgasUndefinedMapType  var_cas_x = GGS_typeGalgasUndefinedMapType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8316)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8302_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8302_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8327_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  const GGS_bool cond_316322 = var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8336)) COMMA_SOURCE_FILE_AT_LINE (8336)) ;
  if (cond_316322.isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_316184 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_316184.isBuilt ()) {
      temp_316184 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8338)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8339)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8339)) ;
  }else if (cond_316322.isBuiltAndFalse ()) {
    const GGS_typeTableEnAvant  temp_316376 = var_cas_tableEnAvant ;
    if (temp_316376.isBuilt ()) {
      temp_316376 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8341)) ;
    }
    GGS_typeGalgasUndefinedClassType  var_cas_x = GGS_typeGalgasUndefinedClassType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8342)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8327_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8327_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8358_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  automatic_var_36 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_36) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8382)) ;
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeRoutineExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8358_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8411)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8412)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8358_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8422_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  automatic_var_37 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_37) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_320539 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_320539 = NULL ;
    while (((operand_320539 = enumerator_320539.nextObject ()))) {
      macroValidPointer (operand_320539) ;
      const GGS_bool cond_320755 = (operand_320539->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
      if (cond_320755.isBuiltAndTrue ()) {
        operand_320539->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8451)) ;
      }else if (cond_320755.isBuiltAndFalse ()) {
        const GGS_bool cond_320961 = (operand_320539->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE)) ;
        if (cond_320961.isBuiltAndTrue ()) {
          operand_320539->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8453)) ;
        }
      }
    }
  }
  GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8467)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8467)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8468)) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8471)) ;
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeFonctionExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8422_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_322806 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_322806 = NULL ;
    while (((operand_322806 = enumerator_322806.nextObject ()))) {
      macroValidPointer (operand_322806) ;
      const GGS_bool cond_323022 = (operand_322806->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
      if (cond_323022.isBuiltAndTrue ()) {
        operand_322806->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8505)) ;
      }else if (cond_323022.isBuiltAndFalse ()) {
        const GGS_bool cond_323228 = (operand_322806->mFormalArgumentPassingMode).operator_isEqual (GGS_formalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE)) ;
        if (cond_323228.isBuiltAndTrue ()) {
          operand_322806->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8507)) ;
        }
      }
    }
  }
  GGS_formalArgumentPassingMode var_cas_passingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8521)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8521)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8522)) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8525)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8526)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8422_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8536_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8563)) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_enumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              const GGS_bool cond_326067 = (var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8590))).operator_isNotEqual (GGS_string ("location")) ;
              if (cond_326067.isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8592)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_formalArgumentPassingMode var_cas_argumentConstantIn = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8599)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8599)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8601)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8605)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8605)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8607)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_38 ;
                const GGS_enumConstantMap  temp_327326 = var_cas_constantMap ;
                if (temp_327326.isBuilt ()) {
                  temp_327326 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_38 COMMA_SOURCE_FILE_AT_LINE (8617)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_39 ;
                const GGS_enumConstantMap  temp_327519 = var_cas_constantMap ;
                if (temp_327519.isBuilt ()) {
                  temp_327519 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_39 COMMA_SOURCE_FILE_AT_LINE (8622)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_40 ;
                const GGS_enumConstantMap  temp_327718 = var_cas_constantMap ;
                if (temp_327718.isBuilt ()) {
                  temp_327718 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_40 COMMA_SOURCE_FILE_AT_LINE (8627)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8659)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              const GGS_bool cond_329099 = (var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8673))).operator_isNotEqual (GGS_string ("location")) ;
              if (cond_329099.isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8675)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_formalArgumentPassingMode var_cas_argumentConstantIn = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8682)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8682)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8684)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8688)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8688)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8690)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_41 ;
                const GGS_enumConstantMap  temp_330363 = var_cas_constantMap ;
                if (temp_330363.isBuilt ()) {
                  temp_330363 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_41 COMMA_SOURCE_FILE_AT_LINE (8700)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8701)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_42 ;
                const GGS_enumConstantMap  temp_330536 = var_cas_constantMap ;
                if (temp_330536.isBuilt ()) {
                  temp_330536 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_42 COMMA_SOURCE_FILE_AT_LINE (8705)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_331269 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_331269 = NULL ;
            while (((operand_331269 = enumerator_331269.nextObject ()))) {
              macroValidPointer (operand_331269) ;
              const GGS_bool cond_331406 = (var_cas_definedSourceMap.reader_hasKey (inLexique, operand_331269->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8731)) COMMA_SOURCE_FILE_AT_LINE (8731))).operator_not () ;
              if (cond_331406.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_331269->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8732)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8733)) ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8736)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              const GGS_bool cond_332002 = (var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8750))).operator_isNotEqual (GGS_string ("location")) ;
              if (cond_332002.isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8752)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_formalArgumentPassingMode var_cas_argumentConstantIn = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8759)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8759)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8761)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8765)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8765)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8767)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_43 ;
                const GGS_enumConstantMap  temp_333264 = var_cas_constantMap ;
                if (temp_333264.isBuilt ()) {
                  temp_333264 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_43 COMMA_SOURCE_FILE_AT_LINE (8777)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8778)) ;
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_334036 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_334036 = NULL ;
            while (((operand_334036 = enumerator_334036.nextObject ()))) {
              macroValidPointer (operand_334036) ;
              const GGS_bool cond_334173 = (var_cas_definedSourceMap.reader_hasKey (inLexique, operand_334036->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8804)) COMMA_SOURCE_FILE_AT_LINE (8804))).operator_not () ;
              if (cond_334173.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_334036->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8805)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8806)) ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8809)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeEnumCstMessageStringMap  var_cas_cstMessageStringMap = GGS_typeEnumCstMessageStringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                GGS_lstring  var_cas_cstName ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_cstString ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstString) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                var_cas_cstMessageStringMap.modifier_insertKey (inLexique, var_cas_cstName, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8823)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_lstringlist  var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          {
            GGS_enumConstantMap::cEnumerator enumerator_334873 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_334873 = NULL ;
            while (((operand_334873 = enumerator_334873.nextObject ()))) {
              macroValidPointer (operand_334873) ;
              GGS_lstring  var_cas_name = GGS_lstring ::constructor_new (inLexique, operand_334873->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8833)), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_cstString ;
              const GGS_typeEnumCstMessageStringMap  temp_335000 = var_cas_cstMessageStringMap ;
              if (temp_335000.isBuilt ()) {
                temp_335000 (HERE)->method_searchKey (inLexique, var_cas_name, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8835)) ;
              }
              var_cas_messageStringList.addAssign_operation (var_cas_cstString) ;
            }
          }
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (8839)) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_typeEntityToGenerate  var_cas_e = GGS_enumGalgasType ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
  GGS_AC_galgasType  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_ee = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_ee COMMA_SOURCE_FILE_AT_LINE (8863)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8536_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8891)) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_exEnumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMessageMap  var_cas_enumMessageMap = GGS_enumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              const GGS_bool cond_337458 = (var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8919))).operator_isNotEqual (GGS_string ("location")) ;
              if (cond_337458.isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8921)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_formalArgumentPassingMode var_cas_argumentConstantIn = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8928)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8928)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8930)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8934)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8934)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8936)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_44 ;
                const GGS_enumConstantMap  temp_338717 = var_cas_constantMap ;
                if (temp_338717.isBuilt ()) {
                  temp_338717 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_44 COMMA_SOURCE_FILE_AT_LINE (8946)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_45 ;
                const GGS_enumConstantMap  temp_338910 = var_cas_constantMap ;
                if (temp_338910.isBuilt ()) {
                  temp_338910 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_45 COMMA_SOURCE_FILE_AT_LINE (8951)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_46 ;
                const GGS_enumConstantMap  temp_339109 = var_cas_constantMap ;
                if (temp_339109.isBuilt ()) {
                  temp_339109 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_46 COMMA_SOURCE_FILE_AT_LINE (8956)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8976)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_47 ;
                const GGS_enumConstantMap  temp_340449 = var_cas_constantMap ;
                if (temp_340449.isBuilt ()) {
                  temp_340449 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_47 COMMA_SOURCE_FILE_AT_LINE (9003)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (9004)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_48 ;
                const GGS_enumConstantMap  temp_340622 = var_cas_constantMap ;
                if (temp_340622.isBuilt ()) {
                  temp_340622 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_48 COMMA_SOURCE_FILE_AT_LINE (9008)) ;
                }
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (9020)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_formalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_49 ;
                const GGS_enumConstantMap  temp_341771 = var_cas_constantMap ;
                if (temp_341771.isBuilt ()) {
                  temp_341771 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_49 COMMA_SOURCE_FILE_AT_LINE (9047)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (9048)) ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (9060)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (9067)) ;
          GGS_lstringlist  var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          var_cas_exEnumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (9069)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_exEnumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (9093)) ;
  GGS_TypeModel  var_cas_type = GGS_EnumModel ::constructor_new (inLexique, var_cas_constantMap, var_cas_enumMessageMap COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (9095)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8536_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

