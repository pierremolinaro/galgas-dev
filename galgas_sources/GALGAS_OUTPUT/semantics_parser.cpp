//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semantics_parser.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 10th, 2009, at 17h22'10"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semantics_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semantics_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgasTemplateGrammar.h"
#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_basename ;
  var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (571)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (572))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (574)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (576)) ;
  }
  GGS_string var_cas_defLexique ;
  var_cas_defLexique = GGS_string ("") ;
  GGS_ModelMap  var_cas_modelMap ;
  var_cas_modelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_ActionMap  var_cas_actionMap ;
  var_cas_actionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse ;
  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentEntitiesMap ;
  GGS_stringset  var_cas_classNamesSet ;
  var_cas_classNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  nt_import_headers_semantics_and_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_optionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_componentEntitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_23618 = inLexique.parsingContext () ;
    GGS_typeTableRoutinesAimplementer  var_cas_UNUSED_tableRoutinesAimplementer ;
    var_cas_UNUSED_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_UNUSED_tableNomRoutinesDeclarees ;
    var_cas_UNUSED_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableEnAvant  var_cas_UNUSED_tableEnAvant ;
    var_cas_UNUSED_tableEnAvant = var_cas_tableEnAvant ;
    GGS_M_semanticsEntitiesForUse  var_cas_UNUSED_componentSemanticsEntitiesMap ;
    var_cas_UNUSED_componentSemanticsEntitiesMap = var_cas_componentEntitiesMap ;
    GGS_EXsemanticContext var_cas_UNUSED_semanticContext ;
    var_cas_UNUSED_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappers ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_UNUSED_componentSemanticsEntitiesMap, var_cas_UNUSED_tableNomRoutinesDeclarees, var_cas_UNUSED_tableEnAvant, var_cas_UNUSED_tableRoutinesAimplementer, var_cas_UNUSED_semanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_23618) ;
    GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
    var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
    var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
    var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_ (inLexique, var_cas_componentEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_optionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  if (((var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) COMMA_SOURCE_FILE_AT_LINE (657))).operator_not ()).isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap ;
    var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentEntitiesMap COMMA_SOURCE_FILE_AT_LINE (659)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_24204 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_24204 = NULL ;
    while (((operand_24204 = enumerator_24204.nextObject ()))) {
      macroValidPointer (operand_24204) ;
      if (((var_cas_tableRoutinesAimplementer.reader_hasKey (inLexique, operand_24204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) COMMA_SOURCE_FILE_AT_LINE (676))).operator_not ()).isBuiltAndTrue ()) {
        operand_24204->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the routine '")).operator_concat (operand_24204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)))).operator_concat (GGS_string ("' is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }
    }
  }
  {
    GGS_typeTableEnAvant::cEnumerator enumerator_24541 (var_cas_tableEnAvant, true) ;
    const GGS_typeTableEnAvant::cElement * operand_24541 = NULL ;
    while (((operand_24541 = enumerator_24541.nextObject ()))) {
      macroValidPointer (operand_24541) ;
      if (((var_cas_componentEntitiesMap.reader_hasKey (inLexique, operand_24541->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)) COMMA_SOURCE_FILE_AT_LINE (683))).operator_not ()).isBuiltAndTrue ()) {
        operand_24541->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_24541->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684)))).operator_concat (GGS_string ("' forward type is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
      }
    }
  }
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (689)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (721)) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  var_cas_includedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_importSemantics (inLexique, var_cas_ioSemanticsComponentsMap, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_ioSemanticContext, var_cas_ioImportedSemanticsComponentNameSet) ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer ;
  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees ;
  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  if (((var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (754)) COMMA_SOURCE_FILE_AT_LINE (754))).operator_not ()).isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap ;
    var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (756)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "parse_semantics_component_for_importing"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parse_semantics_component_for_importing (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFileName,
                                GGS_M_semanticsComponents  & var_cas_ioSemanticsMapForUse,
                                GGS_EXsemanticContext & var_cas_ioSemanticContext,
                                GGS_stringset  & var_cas_ioImportedSemanticsComponentNameSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parse_semantics_component_for_importing at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importSemantics (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSemanticsMapForUse,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioImportedSemanticsComponentNameSet
                                  COMMA_SOURCE_FILE_AT_LINE (828)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parse_semantics_component_for_importing\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'import_headers_semantics_and_grammars'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_ (galgas_scanner & inLexique,
                                GGS_stringset  &var_cas_outImportedSemanticsComponentNameSet,
                                GGS_stringset  &var_cas_outIncludedMetamodelComponents,
                                GGS_stringset  &var_cas_outImportedOptionComponents,
                                GGS_stringset  &var_cas_outImportedGrammarComponents,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_stringset  &var_cas_outInclusionsForImplementationFile,
                                GGS_stringset  &var_cas_outInclusionsForHeaderFile,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outInclusionsForHeaderFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outInclusionsForImplementationFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedSemanticsComponentNameSet = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedGrammarComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_ioOptionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_CharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (872)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_StringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (874)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_UIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (876)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_SIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (878)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_UInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (880)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_SInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (882)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_HERE), GGS_BoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (884)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_DoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (886)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_HERE), GGS_LCharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (888)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_HERE), GGS_LStringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (890)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_HERE), GGS_LUIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (892)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_HERE), GGS_LSIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (894)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_HERE), GGS_LUInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (896)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_HERE), GGS_LSInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (898)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_HERE), GGS_LBoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (900)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_HERE), GGS_LDoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (902)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_HERE), GGS_LocationModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (904)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("stringset"), GGS_location (inLexique) COMMA_HERE), GGS_StringsetModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (906)) ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_ioComponentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (908)) ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents ;
  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents ;
  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (921))) ;
              var_cas_outImportedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
              GGS_M_cli_options  var_cas_boolOptionsMap ;
              GGS_M_cli_options  var_cas_uintOptionsMap ;
              GGS_M_cli_options  var_cas_stringOptionsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_fileName ;
              inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
              var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
              const GGS_M_optionComponents  temp_33079 = var_cas_importedOptionComponentsMap ;
              if (temp_33079.isBuilt ()) {
                temp_33079 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (934)) ;
              }
              var_cas_ioOptionsComponentsMapForUse.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (935)) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              GGS_lstring  var_cas_grammarComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_grammarComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForImplementationFile.addAssign_operation ((var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (940))).operator_concat (GGS_string (".h"))) ;
              var_cas_outImportedGrammarComponents.addAssign_operation (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_ (inLexique, var_cas_sourceFile, var_cas_grammarComponentsMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioSemanticContext) ;
              GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
              GGS_lstring  var_cas_lexiqueClassName ;
              GGS_M_optionComponents  automatic_var_0 ;
              const GGS_M_grammarComponents  temp_34049 = var_cas_grammarComponentsMap ;
              if (temp_34049.isBuilt ()) {
                temp_34049 (HERE)->method_searchKey (inLexique, var_cas_grammarComponentName, var_cas_nonterminalSymbolParametersMap, var_cas_lexiqueClassName, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (955)) ;
              }
              GGS_M_nonterminalSymbolAlts  var_cas_grammarAltMap ;
              var_cas_grammarAltMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
              {
                GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_34230 (var_cas_nonterminalSymbolParametersMap, true) ;
                const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_34230 = NULL ;
                while (((operand_34230 = enumerator_34230.nextObject ()))) {
                  macroValidPointer (operand_34230) ;
                  GGS_L_EXsignature  var_cas_formalParametersList ;
                  var_cas_formalParametersList = GGS_L_EXsignature ::constructor_emptyList () ;
                  {
                    GGS_L_signature::cEnumerator enumerator_34359 (operand_34230->mInfo.mFormalParametersList, true) ;
                    const GGS_L_signature::cElement * operand_34359 = NULL ;
                    while (((operand_34359 = enumerator_34359.nextObject ()))) {
                      macroValidPointer (operand_34359) ;
                      GGS_AC_semanticsEntity  var_cas_e ;
                      const GGS_M_semanticsEntitiesForUse  temp_34510 = var_cas_ioComponentSemanticsEntitiesMap ;
                      if (temp_34510.isBuilt ()) {
                        temp_34510 (HERE)->method_searchKey (inLexique, operand_34359->mGalgasTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (961)) ;
                      }
                      GGS_AC_galgasType  var_cas_type ;
                      var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, operand_34359->mGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (962)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (962)) ;
                      var_cas_formalParametersList.addAssign_operation (var_cas_type, operand_34359->mFormalArgumentPassingMode) ;
                    }
                  }
                  var_cas_grammarAltMap.modifier_insertKey (inLexique, operand_34230->mKey, var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (965)) ;
                }
              }
              GGS_AC_semanticsEntity  var_cas_e ;
              var_cas_e = GGS_C_grammarForSemantics ::constructor_new (inLexique, var_cas_grammarAltMap, var_cas_lexiqueClassName COMMA_HERE) ;
              var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_grammarComponentName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (968)) ;
              GGS_lstring  var_cas_path ;
              var_cas_path = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_extension ;
              var_cas_extension = GGS_lstring ::constructor_new (inLexique, GGS_string ("h"), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_fileNameWithPath ;
              if (var_cas_path.isBuilt () &&
                  var_cas_grammarComponentName.isBuilt () &&
                  var_cas_extension.isBuilt ()) {
                ::routine_buildFileNameWithPath (inLexique,  var_cas_fileNameWithPath,  var_cas_path,  var_cas_grammarComponentName,  var_cas_extension COMMA_SOURCE_FILE_AT_LINE (972)) ;
              }
              var_cas_outInclusionsForImplementationFile.addAssign_operation (var_cas_fileNameWithPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (973))) ;
              {
                GGS_M_grammarComponents::cEnumerator enumerator_35298 (var_cas_grammarComponentsMap, true) ;
                const GGS_M_grammarComponents::cElement * operand_35298 = NULL ;
                while (((operand_35298 = enumerator_35298.nextObject ()))) {
                  macroValidPointer (operand_35298) ;
                  if (((var_cas_ioGrammarComponentsMap.reader_hasKey (inLexique, operand_35298->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (978)) COMMA_SOURCE_FILE_AT_LINE (978))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, operand_35298->mKey, operand_35298->mInfo.mNonterminalSymbolParametersMap, operand_35298->mInfo.mLexiqueName, operand_35298->mInfo.mOptionsMap COMMA_SOURCE_FILE_AT_LINE (979)) ;
                  }
                }
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (991))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (((var_cas_outImportedSemanticsComponentNameSet.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) COMMA_SOURCE_FILE_AT_LINE (995))).operator_not ()).isBuiltAndTrue ()) {
                var_cas_outImportedSemanticsComponentNameSet.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (996))) ;
                ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_outImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (998)) ;
                GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
                GGS_M_optionComponents  var_cas_importedOptionsComponentsMap ;
                GGS_ModelMap  automatic_var_1 ;
                GGS_ActionMap  automatic_var_2 ;
                GGS_stringset  automatic_var_3 ;
                GGS_stringset  automatic_var_4 ;
                GGS_stringset  automatic_var_5 ;
                const GGS_M_semanticsComponents  temp_36628 = var_cas_ioSemanticsComponentsMap ;
                if (temp_36628.isBuilt ()) {
                  temp_36628 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_importedOptionsComponentsMap, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1006)) ;
                }
                {
                  GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_36731 (var_cas_importedEntities, true) ;
                  const GGS_M_semanticsEntitiesForUse::cElement * operand_36731 = NULL ;
                  while (((operand_36731 = enumerator_36731.nextObject ()))) {
                    macroValidPointer (operand_36731) ;
                    if (((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_36731->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) COMMA_SOURCE_FILE_AT_LINE (1008))).operator_not ()).isBuiltAndTrue ()) {
                      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_36731->mKey, operand_36731->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1009)) ;
                    }
                  }
                }
                {
                  GGS_M_optionComponents::cEnumerator enumerator_37171 (var_cas_importedOptionsComponentsMap, true) ;
                  const GGS_M_optionComponents::cElement * operand_37171 = NULL ;
                  while (((operand_37171 = enumerator_37171.nextObject ()))) {
                    macroValidPointer (operand_37171) ;
                    if (((var_cas_ioOptionsComponentsMapForUse.reader_hasKey (inLexique, operand_37171->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1015)) COMMA_SOURCE_FILE_AT_LINE (1015))).operator_not ()).isBuiltAndTrue ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_37171->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)))).operator_concat (GGS_string ("' option component must have been imported")) COMMA_SOURCE_FILE_AT_LINE (1017)) ;
                    }
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1021)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_stringset  &var_cas_outIncludedSemanticsComponents,
                                GGS_stringset  &var_cas_outIncludedOptionComponents,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outIncludedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents ;
  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents ;
  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1059))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedSemanticsComponents.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_ioImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (1077)) ;
              GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
              GGS_ModelMap  automatic_var_6 ;
              GGS_ActionMap  automatic_var_7 ;
              GGS_stringset  automatic_var_8 ;
              GGS_stringset  automatic_var_9 ;
              GGS_stringset  automatic_var_10 ;
              GGS_M_optionComponents  automatic_var_11 ;
              const GGS_M_semanticsComponents  temp_39554 = var_cas_ioSemanticsComponentsMap ;
              if (temp_39554.isBuilt ()) {
                temp_39554 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9, automatic_var_10, automatic_var_11, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1084)) ;
              }
              {
                GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_39628 (var_cas_importedEntities, true) ;
                const GGS_M_semanticsEntitiesForUse::cElement * operand_39628 = NULL ;
                while (((operand_39628 = enumerator_39628.nextObject ()))) {
                  macroValidPointer (operand_39628) ;
                  if (((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_39628->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1086)) COMMA_SOURCE_FILE_AT_LINE (1086))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_39628->mKey, operand_39628->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1087)) ;
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1091)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_12 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_12) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)) COMMA_SOURCE_FILE_AT_LINE (1137))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_41795 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_41795.isBuilt ()) {
      temp_41795 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1139)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration ;
    var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1140)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1141)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1147)) ;
    GGS_AC_semanticsEntity  var_cas_entite ;
    var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1149)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList ;
      var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeRoutineAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  if (((var_cas_ioExternActionMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
  }
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) COMMA_SOURCE_FILE_AT_LINE (1209))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_44424 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_44424.isBuilt ()) {
      temp_44424 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1211)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration ;
    var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1212)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1219)) ;
    GGS_AC_semanticsEntity  var_cas_entite ;
    var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1221)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1232)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_13 ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_13) ;
  GGS_L_EXsignature  var_cas_returnedTypes ;
  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_EXformalArgumentPassingMode var_cas_passingMode ;
  var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar ;
  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)) COMMA_HERE) ;
  GGS_bool var_cas_modeIn ;
  var_cas_modeIn = GGS_bool (false) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1286)) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) COMMA_SOURCE_FILE_AT_LINE (1289))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_47578 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_47578.isBuilt ()) {
      temp_47578 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1291)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration ;
    var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1292)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1293)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1298)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1305)) ;
    GGS_AC_semanticsEntity  var_cas_entite ;
    var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1307)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList ;
      var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea ;
      var_cas_ea = GGS_typeFonctionAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_returnedType, var_cas_returnedVar, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap ;
  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes ;
  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_EXformalArgumentPassingMode var_cas_passingMode ;
  var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar ;
  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)) COMMA_HERE) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1380)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1382)) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)) COMMA_SOURCE_FILE_AT_LINE (1384))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_51021 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_51021.isBuilt ()) {
      temp_51021 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1386)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration ;
    var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1388)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1394)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1393)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1400)) ;
    GGS_AC_semanticsEntity  var_cas_entite ;
    var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1402)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1413)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClassName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_outSuperClassMessage = GGS_string ("") ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outSuperClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_54997 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_54997.isBuilt ()) {
    temp_54997 (HERE)->method_searchKey (inLexique, var_cas_outSuperClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1485)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur ;
  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1487)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1488)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1493)) ;
  var_cas_outSuperClassMessage = var_cas_classType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1497)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  GGS_lstring  var_cas_superClassName ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_superClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_56597 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_56597.isBuilt ()) {
    temp_56597 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur ;
  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1519)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1524)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1525)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1529)) ;
  GGS_TypeModel  var_cas_type ;
  const GGS_ModelMap  temp_57480 = var_cas_ioModelMap ;
  if (temp_57480.isBuilt ()) {
    temp_57480 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  }
  { const GGS_TypeModel _var_57937 = var_cas_type ; // CAST instruction
    if (_var_57937.getPtr () != NULL) {
      macroValidPointer (_var_57937.getPtr ()) ;
      if (dynamic_cast <cPtr_ClassModel *> (_var_57937.getPtr ()) != NULL) {
        const GGS_ClassModel var_cas_model (_var_57937.getPtr ()) ;
        var_cas_outSuperClasses = var_cas_model.reader_mSuperClasses (inLexique COMMA_SOURCE_FILE_AT_LINE (1535)) ;
        var_cas_outAttributeList = var_cas_model.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1536)) ;
        var_cas_outMessageMap = var_cas_model.reader_mMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1537)) ;
      }else{
        var_cas_superClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1539)))).operator_concat (GGS_string ("' type is not a class")) COMMA_SOURCE_FILE_AT_LINE (1541)) ;
        var_cas_outSuperClasses.drop () ;
        var_cas_outAttributeList.drop () ;
        var_cas_outMessageMap.drop () ;
      }
    }
  }
  var_cas_outSuperClasses.addAssign_operation (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1542))) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lazy_reader'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1704_18_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_L_lazyAttributeList  &var_cas_ioLazyAttributeList) {
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_64404 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_64404 = NULL ;
    while (((operand_64404 = enumerator_64404.nextObject ()))) {
      macroValidPointer (operand_64404) ;
      GGS_typeCplusPlusName  var_cas_nomCpp ;
      var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_64404->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)), operand_64404->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_64404->mKey, operand_64404->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1724)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_computedAttributeTypeAndNameList ;
  var_cas_computedAttributeTypeAndNameList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_lstring  var_cas_attributeTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_lstring  var_cas_attributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_64917 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_64917.isBuilt ()) {
          temp_64917 (HERE)->method_searchKey (inLexique, var_cas_attributeTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1733)) ;
        }
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_attributeTypeName COMMA_SOURCE_FILE_AT_LINE (1734)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1734)) ;
        GGS_typeCplusPlusName  var_cas_nomCpp ;
        var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, var_cas_attributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)), var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)) COMMA_HERE) ;
        var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_attributeName, var_cas_t, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1736)) ;
        var_cas_computedAttributeTypeAndNameList.addAssign_operation (var_cas_t, var_cas_attributeName) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_L_lazyAttributeList  var_cas_lazyAttributeListForSelfAndSuper ;
  var_cas_lazyAttributeListForSelfAndSuper = var_cas_ioLazyAttributeList ;
  var_cas_lazyAttributeListForSelfAndSuper.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, GGS_typeInstructionList ::constructor_emptyList ()) ;
  GGS_AC_galgasType  var_cas_typeDefinition ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1759)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1773)) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap ;
  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioLazyAttributeList.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, var_cas_instructionsList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1704_18_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'class_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1817)) COMMA_SOURCE_FILE_AT_LINE (1817))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1818)) COMMA_SOURCE_FILE_AT_LINE (1818)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1820)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_string var_cas_superClassMessage ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting ;
      GGS_lstring  automatic_var_14 ;
      nt_parent_class_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, automatic_var_14, var_cas_superClassMessage, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1847))).operator_isNotEqual (GGS_string ("generatedInSeparateFile"))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (1849)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          if (((var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1851))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (1853)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer ;
      var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete ;
      var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs ;
      var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes ;
      var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement ;
      var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage ;
      var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1880))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (1882)) ;
                  }else if (((var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1882))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (1884)) ;
                  }else{
                    var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)) ;
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)) COMMA_SOURCE_FILE_AT_LINE (1894))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (1895)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (1897)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      if ((((var_cas_superClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1963))).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1963))).operator_isEqual (GGS_uint (0U)))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this class should defined a class message, as it inherits from a class that does") COMMA_SOURCE_FILE_AT_LINE (1965)) ;
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_73157 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_73157 = NULL ;
        while (((operand_73157 = enumerator_73157.nextObject ()))) {
          macroValidPointer (operand_73157) ;
          if (((var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_73157->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1968)) COMMA_SOURCE_FILE_AT_LINE (1968))).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_73157->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (1970)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1986)) ;
      GGS_typeListeAttributsSemantiques  var_cas_setterAttributeModifierToImplementList ;
      var_cas_setterAttributeModifierToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_74075 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_74075 = NULL ;
        while (((operand_74075 = enumerator_74075.nextObject ()))) {
          macroValidPointer (operand_74075) ;
          GGS_bool var_cas_hasSetter ;
          GGS_AC_galgasType  automatic_var_15 ;
          GGS_bool automatic_var_16 ;
          const GGS_typeSemanticAttributesMap  temp_74134 = var_cas_tableAttributs ;
          if (temp_74134.isBuilt ()) {
            temp_74134 (HERE)->method_searchKey (inLexique, operand_74075->mAttributeName, automatic_var_15, var_cas_hasSetter, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (1991)) ;
          }
          if ((var_cas_hasSetter).isBuiltAndTrue ()) {
            var_cas_setterAttributeModifierToImplementList.addAssign_operation (operand_74075->mAttributType, operand_74075->mAttributeName) ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_getterAttributeReaderToImplementList ;
      var_cas_getterAttributeReaderToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_74485 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_74485 = NULL ;
        while (((operand_74485 = enumerator_74485.nextObject ()))) {
          macroValidPointer (operand_74485) ;
          GGS_bool var_cas_hasGetter ;
          GGS_AC_galgasType  automatic_var_17 ;
          GGS_bool automatic_var_18 ;
          const GGS_typeSemanticAttributesMap  temp_74544 = var_cas_tableAttributs ;
          if (temp_74544.isBuilt ()) {
            temp_74544 (HERE)->method_searchKey (inLexique, operand_74485->mAttributeName, automatic_var_17, automatic_var_18, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (2003)) ;
          }
          if ((var_cas_hasGetter).isBuiltAndTrue ()) {
            var_cas_getterAttributeReaderToImplementList.addAssign_operation (operand_74485->mAttributType, operand_74485->mAttributeName) ;
          }
        }
      }
      GGS_typeEntityToGenerate  var_cas_def ;
      var_cas_def = GGS_C_classToImplement ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_inIsAbstract, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_listeAttributsSemantiquesCourants, var_cas_tableDesClassesAncetres, var_cas_tableMessagesClasseConcrete, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement, var_cas_setterAttributeModifierToImplementList, var_cas_getterAttributeReaderToImplementList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2045)) COMMA_SOURCE_FILE_AT_LINE (2045))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)) COMMA_SOURCE_FILE_AT_LINE (2046)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2048)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_stringset  var_cas_superClasses ;
      GGS_typeListModel  var_cas_attributeList ;
      GGS_classMessageMap  var_cas_messageMap ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting ;
      var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (false) ;
      nt_parent_class_importSemantics (inLexique, var_cas_ioModelMap, var_cas_superClasses, var_cas_attributeList, var_cas_messageMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2079))).operator_isNotEqual (GGS_string ("generatedInSeparateFile"))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (2081)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          if (((var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (2083))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (2085)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeList, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer ;
      var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete ;
      var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs ;
      var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes ;
      var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer ;
      var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
      GGS_M_optionComponents  var_cas_optionsComponentsMapForUse ;
      var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement ;
      var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage ;
      var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2113))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (2115)) ;
                  }else if (((var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2115))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (2117)) ;
                  }else{
                    var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2118)) ;
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2127)) COMMA_SOURCE_FILE_AT_LINE (2127))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (2128)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (2130)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_81064 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_81064 = NULL ;
        while (((operand_81064 = enumerator_81064.nextObject ()))) {
          macroValidPointer (operand_81064) ;
          if (((var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_81064->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2196)) COMMA_SOURCE_FILE_AT_LINE (2196))).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_81064->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2197)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (2198)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2214)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_TypeModel  var_cas_t ;
      var_cas_t = GGS_ClassModel ::constructor_new (inLexique, GGS_bool (true), var_cas_superClasses, var_cas_attributeList, var_cas_messageMap COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2217)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_parent_class_parse (inLexique) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_parse (inLexique) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_parse (inLexique) ;
              } break ;
            case 5 : {
              nt_overrided_method_parse (inLexique) ;
              } break ;
            case 6 : {
              nt_lazy_reader_parse (inLexique) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'abstract_method'             *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2225_22_ (galgas_scanner & inLexique,
                                const GGS_bool var_cas_inIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  if (((var_cas_inIsAbstract).operator_not ()).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class should not declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (2236)) ;
  }
  GGS_lstring  var_cas_nomMethode ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (2251)) ;
  GGS_typeInstructionList  var_cas_listeInstructions ;
  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_tableMethodesAimplementer.modifier_insertAbstract (inLexique, var_cas_nomMethode, var_cas_listeDeTypes, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions COMMA_SOURCE_FILE_AT_LINE (2253)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2225_22_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parse_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2259_19_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outMethodName,
                                GGS_typeInstructionList  &var_cas_outInstructionsList,
                                GGS_L_EXsignature  &var_cas_outMethodSignature,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.assignFromAttribute_tokenString (var_cas_outMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_84420 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_84420 = NULL ;
    while (((operand_84420 = enumerator_84420.nextObject ()))) {
      macroValidPointer (operand_84420) ;
      GGS_typeCplusPlusName  var_cas_nomCpp ;
      var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_84420->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2284)), operand_84420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2284)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_84420->mKey, operand_84420->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (2285)) ;
    }
  }
  GGS_AC_galgasType  var_cas_typeDefinition ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2300)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2314)) ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_outMethodSignature, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap ;
  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2329)) ;
  var_cas_outInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_outInstructionsList, var_cas_inSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2259_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'non_abstract_method'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2344_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (2386)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2387)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2344_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'overrided_method'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2395_23_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  GGS_L_EXsignature  var_cas_listeDeTypesMethodeOriginale ;
  const GGS_typeTableMethodes  temp_89987 = var_cas_tableDesMethodes ;
  if (temp_89987.isBuilt ()) {
    temp_89987 (HERE)->method_searchKey (inLexique, var_cas_methodName, var_cas_listeDeTypesMethodeOriginale COMMA_SOURCE_FILE_AT_LINE (2440)) ;
  }
  ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesMethodeOriginale,  var_cas_methodSignature,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2441)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2447)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2395_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'formal_arguments_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_L_signature  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn ;
          var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2488)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2488)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2490)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2493)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2493)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2495)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2514)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2514)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2516)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2520)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2520)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2522)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2541)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2541)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2543)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2546)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2546)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2548)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeCplusPlusName  var_cas_natureNom ;
          var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2565)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2565)) COMMA_HERE) ;
          GGS_bool var_cas_modeIn ;
          var_cas_modeIn = GGS_bool (false) ;
          var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
          var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2568)) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_L_signature  &var_cas_outSignature) {
  var_cas_outSignature = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'formal_input_arguments_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_L_signature  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn ;
          var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2655)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2655)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2657)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2660)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2660)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2662)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2681)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2681)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2683)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom ;
              var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2687)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2687)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2689)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_L_signature  &var_cas_outSignature) {
  var_cas_outSignature = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode ;
          var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_parsing'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2728_19_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_outTypeDefinition,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2735)) COMMA_SOURCE_FILE_AT_LINE (2735))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_102032 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_102032.isBuilt ()) {
      temp_102032 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2737)) ;
    }
    var_cas_outTypeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (2738)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (2738)) ;
  }else if ((var_cas_inTableEnAvant.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2739)) COMMA_SOURCE_FILE_AT_LINE (2739))).isBuiltAndTrue ()) {
    const GGS_typeTableEnAvant  temp_102242 = var_cas_inTableEnAvant ;
    if (temp_102242.isBuilt ()) {
      temp_102242 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_outTypeDefinition COMMA_SOURCE_FILE_AT_LINE (2740)) ;
    }
  }else{
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2742)))).operator_concat (GGS_string ("' type is not defined")) COMMA_SOURCE_FILE_AT_LINE (2743)) ;
    var_cas_outTypeDefinition.drop () ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2728_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2753_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_inTargetVarName,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_AC_galgasType  var_cas_targetVarType ;
  GGS_typeCplusPlusName  var_cas_targetVarCppName ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, var_cas_targetVarType, var_cas_targetVarCppName COMMA_SOURCE_FILE_AT_LINE (2776)) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetVarType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2778)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_targetVarCppName, GGS_lstringlist ::constructor_emptyList (), var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2753_44_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2792_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (2803)) ;
  GGS_lstringlist  var_cas_structAttributeList ;
  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        GGS_lstring  var_cas_structAttributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
        GGS_typeGalgasStructType  var_cas_structType ;
        var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (2811)) ;
        GGS_bool var_cas_found ;
        var_cas_found = GGS_bool (false) ;
        {
          GGS_typeListeAttributsSemantiques::cEnumerator enumerator_105351 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (2813)), true) ;
          const GGS_typeListeAttributsSemantiques::cElement * operand_105351 = NULL ;
          while (((operand_105351 = enumerator_105351.nextObject ()))
              && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_105351) ;
            var_cas_found = (operand_105351->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2814))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2814))) ;
            var_cas_targetType = operand_105351->mAttributType ;
          }
        }
        if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
          var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (2818)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (2819)) ;
        }
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2836)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_nomCppVariableSource, var_cas_structAttributeList, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2792_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2848_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inTargetVarCppName,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_string var_cas_sourceExpressionConverter ;
  if (var_cas_inTargetType.isBuilt () && var_cas_sourceType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_107564 = var_cas_inTargetType (HERE) ;
    cPtr_AC_galgasType * ptr_107577 = var_cas_sourceType (HERE) ;
    cPtr_typeGalgasListmapType * operand_107564 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107564) ;
    cPtr_typeGalgasListmapType * operand_107577 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107577) ;
    if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
      if (((operand_107564->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2874))).operator_isNotEqual (operand_107577->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2874)))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, listmap type @")).operator_concat (operand_107564->mListmapTypeName)).operator_concat (GGS_string (" of target object is not compatible with listmap type @"))).operator_concat (operand_107577->mListmapTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2878)) ;
        var_cas_sourceExpressionConverter.drop () ;
      }else{
        var_cas_sourceExpressionConverter = GGS_string ("") ;
      }
    }else{
      cPtr_typeGalgasListType * operand_107564 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107564) ;
      cPtr_typeGalgasListType * operand_107577 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107577) ;
      if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
        if (((operand_107564->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2882))).operator_isNotEqual (operand_107577->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2882)))).isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, list type @")).operator_concat (operand_107564->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with list type @"))).operator_concat (operand_107577->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2886)) ;
          var_cas_sourceExpressionConverter.drop () ;
        }else{
          var_cas_sourceExpressionConverter = GGS_string ("") ;
        }
      }else{
        cPtr_typeGalgasSortedListType * operand_107564 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107564) ;
        cPtr_typeGalgasSortedListType * operand_107577 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107577) ;
        if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
          if (((operand_107564->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2890))).operator_isNotEqual (operand_107577->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2890)))).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, sortedlist type @")).operator_concat (operand_107564->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with sortedlist type @"))).operator_concat (operand_107577->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2894)) ;
            var_cas_sourceExpressionConverter.drop () ;
          }else{
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }
        }else{
          cPtr_typeGalgas_string * operand_107564 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107564) ;
          cPtr_typeGalgas_string * operand_107577 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107577) ;
          if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }else{
            cPtr_typeGalgas_string * operand_107564 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107564) ;
            cPtr_typeGalgas_lstring * operand_107577 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_107577) ;
            if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
              var_cas_sourceExpressionConverter = GGS_string ("ggs_string") ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, ")).operator_concat (var_cas_inTargetType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2902)))).operator_concat (GGS_string (" target object type is not compatible with "))).operator_concat (var_cas_sourceType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2903)))).operator_concat (GGS_string (" source expression type")) COMMA_SOURCE_FILE_AT_LINE (2905)) ;
              var_cas_sourceExpressionConverter.drop () ;
            }
          }
        }
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_dotEqualInstruction ::constructor_new (inLexique, var_cas_inTargetVarCppName, var_cas_inStructAttributeList, var_cas_sourceExpression, var_cas_sourceExpressionConverter COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2848_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'input_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2920_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_assignedVariables  &var_cas_listeAffectationParametresEffectifs,
                                GGS_typeCplusPlusNameList  &var_cas_outAllVariablesList,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_typeListeCibles  var_cas_listeCibles ;
  var_cas_listeCibles = GGS_typeListeCibles ::constructor_emptyList () ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_nomVariableDest ;
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  GGS_AC_galgasType  var_cas_definitionType ;
                  GGS_lstring  var_cas_typeName ;
                  nt_type_parsing_ (inLexique, GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE), var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_nomCppVariable ;
                  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomVariableDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2944)), var_cas_nomVariableDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2944)) COMMA_HERE) ;
                  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_nomVariableDest, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2945)) ;
                  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE)) ;
                  } break ;
                case 2 : {
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              GGS_AC_galgasType  var_cas_typeVarDest ;
              GGS_typeCplusPlusName  var_cas_nomCppDest ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariableDest, var_cas_typeVarDest, var_cas_nomCppDest COMMA_SOURCE_FILE_AT_LINE (2952)) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeEntiteDest ::constructor_new (inLexique, var_cas_typeVarDest, var_cas_nomCppDest, GGS_location (inLexique) COMMA_HERE)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2961)) ;
              GGS_uint _variant_111561 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (2962)) ;
              GGS_bool _condition_111561 (_variant_111561.isBuilt (), true) ;
              while (_condition_111561.isBuiltAndTrue ()) {
                _condition_111561 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_111561.isBuiltAndTrue ()) {
                  if (_variant_111561.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (2966)) ;
                    _condition_111561 = GGS_bool (false) ;
                  }else{
                    _variant_111561.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2965)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsis ;
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      var_cas_ellipsis = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_ellipsis = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  if (((var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2977))).operator_strictInf (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2977)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("too much arguments: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2978)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2978)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2981)) ;
    var_cas_outAllVariablesList.drop () ;
    var_cas_listeAffectationParametresEffectifs.drop () ;
  }else if ((((var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2981))).operator_strictSup (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2981)))).operator_and ((var_cas_ellipsis).operator_not ())).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("argument(s) missing: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2982)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2982)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2983)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2983)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2985)) ;
    var_cas_outAllVariablesList.drop () ;
    var_cas_listeAffectationParametresEffectifs.drop () ;
  }else{
    var_cas_listeAffectationParametresEffectifs = GGS_L_assignedVariables ::constructor_emptyList () ;
    var_cas_outAllVariablesList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_112569 (var_cas_listeAttributsSemantiques, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_112569 = NULL ;
      GGS_typeListeCibles::cEnumerator enumerator_112651 (var_cas_listeCibles, true) ;
      const GGS_typeListeCibles::cElement * operand_112651 = NULL ;
      while (((operand_112569 = enumerator_112569.nextObject ()))
          && ((operand_112651 = enumerator_112651.nextObject ()))) {
        macroValidPointer (operand_112569) ;
        macroValidPointer (operand_112651) ;
        GGS_lstring  var_cas_nomAttributSource ;
        var_cas_nomAttributSource = operand_112569->mAttributeName ;
        const GGS_typeCible  temp_112758 = operand_112651->aCible ;
        if (temp_112758.isBuilt ()) {
          temp_112758 (HERE)->method_verifierType (inLexique, operand_112569->mAttributType, var_cas_nomAttributSource, var_cas_listeAffectationParametresEffectifs, var_cas_outAllVariablesList COMMA_SOURCE_FILE_AT_LINE (2991)) ;
        }
      }
    }
  }
  GGS_typeCplusPlusName  var_cas_nullName ;
  var_cas_nullName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
  if (var_cas_outAllVariablesList.isBuilt () &&
      var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2998)).isBuilt () &&
      var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2999)).isBuilt () &&
      var_cas_nullName.isBuilt ()) {
    ::routine_appendJokersIfNeeded (inLexique,  var_cas_outAllVariablesList,  var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2998)),  var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2999)),  var_cas_nullName COMMA_SOURCE_FILE_AT_LINE (2996)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2920_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  nt_type_parsing_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3016_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (3027)) ;
  GGS_lstringlist  var_cas_structAttributeList ;
  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          GGS_typeGalgasStructType  var_cas_structType ;
          var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3036)) ;
          GGS_bool var_cas_found ;
          var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_114882 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3038)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_114882 = NULL ;
            while (((operand_114882 = enumerator_114882.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_114882) ;
              var_cas_found = (operand_114882->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3039))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3039))) ;
              var_cas_targetType = operand_114882->mAttributType ;
            }
          }
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3043)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3044)) ;
          }
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_ (inLexique, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext, var_cas_nomCppVariableSource, var_cas_targetType, var_cas_structAttributeList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3016_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3068_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_116825 = var_cas_inTargetType ;
  if (temp_116825.isBuilt ()) {
    temp_116825 (HERE)->method_handleAddAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3082)) ;
  }
  GGS_typeTypesList  var_cas_typeList ;
  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList ;
  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  if (((var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3103))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3103)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3104))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3105)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_117644 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_117644 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_117714 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_117714 = NULL ;
      while (((operand_117644 = enumerator_117644.nextObject ()))
          && ((operand_117714 = enumerator_117714.nextObject ()))) {
        macroValidPointer (operand_117644) ;
        macroValidPointer (operand_117714) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_117644->mAttributType,  operand_117714->mType,  operand_117714->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3108)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeAppendInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3068_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3128_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_119243 = var_cas_inTargetType ;
  if (temp_119243.isBuilt ()) {
    temp_119243 (HERE)->method_handleMinusAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3141)) ;
  }
  GGS_typeTypesList  var_cas_typeList ;
  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList ;
  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
  if (((var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3162))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3162)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3163))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3164)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_120062 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_120062 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_120132 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_120132 = NULL ;
      while (((operand_120062 = enumerator_120062.nextObject ()))
          && ((operand_120132 = enumerator_120132.nextObject ()))) {
        macroValidPointer (operand_120062) ;
        macroValidPointer (operand_120132) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_120062->mAttributType,  operand_120132->mType,  operand_120132->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3167)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeRemoveInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3128_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3187_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_121631 = var_cas_inTargetType ;
  if (temp_121631.isBuilt ()) {
    temp_121631 (HERE)->method_handleIncrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3199)) ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeIncrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3187_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3213_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_122941 = var_cas_inTargetType ;
  if (temp_122941.isBuilt ()) {
    temp_122941 (HERE)->method_handleDecrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3225)) ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeDecrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3213_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'actual_parameters_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3235_29_ (galgas_scanner & inLexique,
                                const GGS_L_EXsignature  var_cas_listeTypesParametresFormels,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool automatic_var_19 ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_outExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, automatic_var_19) ;
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_listeTypesParametresFormels,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_outExpressionList COMMA_SOURCE_FILE_AT_LINE (3255)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3235_29_parse (galgas_scanner & inLexique) {
  nt_parse_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3269_28_ (galgas_scanner & inLexique,
                                GGS_L_actualParametersSignature  &var_cas_listeTypesParametresEffectifs,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_bool &var_cas_outHasInputParameter) {
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  var_cas_listeTypesParametresEffectifs = GGS_L_actualParametersSignature ::constructor_emptyList () ;
  GGS_stringset  var_cas_exclusiveVariables ;
  var_cas_exclusiveVariables = GGS_stringset ::constructor_emptySet () ;
  var_cas_outHasInputParameter = GGS_bool (false) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_expressionType ;
          GGS_typeExpression  var_cas_expressionValue ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode ;
          var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOut (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_expressionType, var_cas_parameterPassingMode) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expressionValue) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode ;
          var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterIn (inLexique COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
              var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 2 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount ;
              var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (3308)) ;
              GGS_uint _variant_126394 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (3309)) ;
              GGS_bool _condition_126394 (_variant_126394.isBuilt (), true) ;
              while (_condition_126394.isBuiltAndTrue ()) {
                _condition_126394 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_126394.isBuiltAndTrue ()) {
                  if (_variant_126394.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (3314)) ;
                    _condition_126394 = GGS_bool (false) ;
                  }else{
                    _variant_126394.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
                    var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (3313)) ;
                  }
                }
              }
              } break ;
            case 3 : {
              GGS_AC_galgasType  var_cas_typeArgument ;
              GGS_typeCplusPlusName  var_cas_nomCppArgument ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3320)) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
              GGS_typeExpression  var_cas_e ;
              var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
              var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
              if ((var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3324)) COMMA_SOURCE_FILE_AT_LINE (3324))).isBuiltAndTrue ()) {
                var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3326)) ;
              }else{
                var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3327))) ;
              }
              var_cas_outHasInputParameter = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_typeArgument ;
          GGS_typeCplusPlusName  var_cas_nomCppArgument ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3337)) ;
          GGS_lstringlist  var_cas_structAttributeList ;
          var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  GGS_lstring  var_cas_structAttributeName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeGalgasStructType  var_cas_structType ;
                  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_typeArgument.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3343)) ;
                  GGS_bool var_cas_found ;
                  var_cas_found = GGS_bool (false) ;
                  {
                    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_127723 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3345)), true) ;
                    const GGS_typeListeAttributsSemantiques::cElement * operand_127723 = NULL ;
                    while (((operand_127723 = enumerator_127723.nextObject ()))
                        && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                      macroValidPointer (operand_127723) ;
                      var_cas_found = (operand_127723->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3346))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3346))) ;
                      var_cas_typeArgument = operand_127723->mAttributType ;
                    }
                  }
                  if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3350)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3351)) ;
                  }
                  var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode ;
          var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOutIn (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
          GGS_typeExpression  var_cas_e ;
          var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, var_cas_structAttributeList COMMA_HERE) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
          if ((var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3358)) COMMA_SOURCE_FILE_AT_LINE (3358))).isBuiltAndTrue ()) {
            var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3360)) ;
          }else{
            var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3361))) ;
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3269_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'semantic_instructions_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3370_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (inLexique COMMA_SOURCE_FILE_AT_LINE (3378)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3378)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3370_33_parse (galgas_scanner & inLexique) {
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3396_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeVarSource ;
  GGS_typeCplusPlusName  var_cas_sourceVarCppName ;
  GGS_lstring  var_cas_nomVarSource ;
  nt_read_access_ (inLexique, var_cas_nomVarSource, var_cas_sourceVarCppName, var_cas_typeVarSource, var_cas_ioVariablesMap) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeVarSource.getPtr (), true, var_cas_nomVarSource COMMA_SOURCE_FILE_AT_LINE (3411)) ;
  GGS_lstring  var_cas_nomTypeSource ;
  var_cas_nomTypeSource = var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3412)) ;
  GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3413)) ;
  nt_extract_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_sourceVarCppName, var_cas_nomTypeSource, var_cas_tableMessagesAbstraits, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3396_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  nt_read_access_parse (inLexique) ;
  nt_extract_instruction_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3433_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("simple extract instruction is obsolete: use cast expression instead") COMMA_SOURCE_FILE_AT_LINE (3444)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomClasse ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomClasse) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_132104 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_132104.isBuilt ()) {
    temp_132104 (HERE)->method_searchKey (inLexique, var_cas_nomClasse, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3451)) ;
  }
  GGS_AC_galgasType  var_cas_leType ;
  var_cas_leType = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3452)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3452)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_leType.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3453)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  var_cas_listeAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3454)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3455)) ;
  if (((var_cas_tableDesClassesAncetres.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3457)) COMMA_SOURCE_FILE_AT_LINE (3457))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_nomClasse.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3458)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3459)) ;
  }
  GGS_L_assignedVariables  var_cas_listeAffectationParametresEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeAffectationParametresEffectifs, var_cas_allVariablesList, var_cas_listeAttributsSemantiques, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_133547 = var_cas_errorExpressionType ;
  if (temp_133547.isBuilt ()) {
    temp_133547 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3486)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_messageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  const GGS_typeClassInheritedMessagesMap  temp_133650 = var_cas_tableMessagesAbstraits ;
  if (temp_133650.isBuilt ()) {
    temp_133650 (HERE)->method_searchKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (3490)) ;
  }
  var_cas_ioInstructionList.addAssign_operation (GGS_typeSimpleExtractInstruction ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_nomClasse, var_cas_listeAffectationParametresEffectifs, var_cas_errorExpression, var_cas_messageName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3433_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3503_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  /* var_cas_tableMessagesAbstraits */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_typeStructuredExtractCasesList  var_cas_casesList ;
  var_cas_casesList = GGS_typeStructuredExtractCasesList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("structured extract instruction is obsolete: use cast instruction instead") COMMA_SOURCE_FILE_AT_LINE (3516)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3518)) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3520)) ;
        GGS_location  var_cas_indicatif1 ;
        var_cas_indicatif1 = GGS_location (inLexique) ;
        GGS_lstring  var_cas_nomType1 ;
        inLexique.assignFromAttribute_tokenString (var_cas_nomType1) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_135328 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_135328.isBuilt ()) {
          temp_135328 (HERE)->method_searchKey (inLexique, var_cas_nomType1, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3527)) ;
        }
        GGS_AC_galgasType  var_cas_definitionClasse1 ;
        var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3528)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3528)) ;
        GGS_typeGalgasClassType  var_cas_classType1 ;
        var_cas_classType1 = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3530)) ;
        GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 ;
        var_cas_listeAttributs1 = var_cas_classType1.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3531)) ;
        GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 ;
        var_cas_tableDesClassesAncetresType1 = var_cas_classType1.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3532)) ;
        if (((var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3534)) COMMA_SOURCE_FILE_AT_LINE (3534))).operator_not ()).isBuiltAndTrue ()) {
          var_cas_nomType1.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3535)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3536)) ;
        }
        GGS_bool var_cas_noUsedParameter ;
        nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_indicatif1, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), var_cas_noUsedParameter) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList ;
        var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_casesList.addAssign_operation (var_cas_nomType1, var_cas_indicatif1, var_cas_instructionsList, var_cas_noUsedParameter) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3520)) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3564)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elseInstructionList ;
  var_cas_elseInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_typeStructuredExtractInstructionWithElse ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_casesList, var_cas_elseInstructionList COMMA_HERE)) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3564)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3518)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3503_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        nt_parse_effective_input_parameters_list_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3590_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
  GGS_typeGalgasClassType  var_cas_sourceClassType ;
  var_cas_sourceClassType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3611)) ;
  GGS_lstring  var_cas_sourceExpressionTypeName ;
  var_cas_sourceExpressionTypeName = var_cas_sourceClassType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3612)) ;
  GGS_string var_cas_sourceClassMessage ;
  var_cas_sourceClassMessage = var_cas_sourceClassType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (3613)) ;
  GGS_typeInstructionList  var_cas_elseBranchInstructionsList ;
  var_cas_elseBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeStructuredCastBranchList  var_cas_branchList ;
  var_cas_branchList = GGS_typeStructuredCastBranchList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3618)) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3620)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        GGS_bool var_cas_checkForKindOfClass ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_lstring  var_cas_castedTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_castedTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_139490 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_139490.isBuilt ()) {
          temp_139490 (HERE)->method_searchKey (inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3634)) ;
        }
        GGS_AC_galgasType  var_cas_typeDefinition ;
        var_cas_typeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3635)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3635)) ;
        GGS_typeSuperClassesMap  var_cas_superClassMap ;
        var_cas_superClassMap = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeDefinition.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3638)).reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3638)) ;
        GGS_string var_cas_sourceExpressionTypeNameString ;
        var_cas_sourceExpressionTypeNameString = var_cas_sourceExpressionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3640)) ;
        if (((var_cas_checkForKindOfClass).operator_not ()).isBuiltAndTrue ()) {
          if ((((var_cas_castedTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3642))).operator_isNotEqual (var_cas_sourceExpressionTypeNameString)).operator_and ((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3642))).operator_not ())).isBuiltAndTrue ()) {
            var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class is not '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (3644)) ;
          }
        }else if (((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3645))).operator_not ()).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3647)) ;
        }
        GGS_typeCplusPlusNameList  var_cas_localConstantCppNameList ;
        var_cas_localConstantCppNameList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName ;
            var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3656)) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName ;
            var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3661)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3661)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3663)) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList ;
        var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_branchList.addAssign_operation (var_cas_castedTypeName, var_cas_checkForKindOfClass, var_cas_localConstantCppNameList, var_cas_instructionsList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3620)) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  GGS_AC_elseOrDefaultForCastInstruction  var_cas_elseOrDefault ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3681)) ;
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      if (((var_cas_sourceClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3684))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for using the 'default' construct, the static class of source expression (@")).operator_concat (var_cas_sourceExpressionTypeName)).operator_concat (GGS_string (") should define a class message")) COMMA_SOURCE_FILE_AT_LINE (3687)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  temp_142839 = var_cas_errorLocationExpressionType ;
      if (temp_142839.isBuilt ()) {
        temp_142839 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3700)) ;
      }
      var_cas_elseOrDefault = GGS_C_defaultForCastInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_elseBranchInstructionsList ;
      var_cas_elseBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionsList, var_cas_inSemanticContext) ;
      var_cas_elseOrDefault = GGS_C_elseForCastInstruction ::constructor_new (inLexique, var_cas_elseBranchInstructionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3681)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3618)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeStructuredCastInstruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_sourceExpression, var_cas_sourceExpressionTypeName, var_cas_branchList, var_cas_elseOrDefault COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3590_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3738_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_definitionType ;
  GGS_lstring  var_cas_typeName ;
  nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
  GGS_lstring  var_cas_targetVarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_targetVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_nomCppVariable ;
  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_targetVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3758)), var_cas_targetVarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3758)) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_targetVarName, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (3759)) ;
  nt_optional_assignment_ (inLexique, var_cas_typeName, var_cas_targetVarName, var_cas_nomCppVariable, var_cas_definitionType, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3738_27_parse (galgas_scanner & inLexique) {
  nt_type_parsing_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_optional_assignment_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3781_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        GGS_lstring  var_cas_galgasVariableName ;
        inLexique.assignFromAttribute_tokenString (var_cas_galgasVariableName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_20 ;
        var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_galgasVariableName, automatic_var_20, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3794)) ;
        GGS_typeInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_typeLogInstruction ::constructor_new (inLexique, var_cas_galgasVariableName, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3781_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3809_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        GGS_lstring  var_cas_nom ;
        inLexique.assignFromAttribute_tokenString (var_cas_nom) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_21 ;
        var_cas_ioVariablesMap.modifier_searchForDestructiveReadAccess (inLexique, var_cas_nom, automatic_var_21, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3822)) ;
        GGS_typeInstruction  var_cas_instruction ;
        var_cas_instruction = GGS_typeDropInstruction ::constructor_new (inLexique, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3809_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3839_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_148409 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_148409.isBuilt ()) {
    temp_148409 (HERE)->method_searchKey (inLexique, var_cas_nomVarDest, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3850)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_148881 = var_cas_entite ; // CAST instruction
    if (_var_148881.getPtr () != NULL) {
      macroValidPointer (_var_148881.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteRoutine *> (_var_148881.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutine var_cas_r (_var_148881.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (3854)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteRoutineExterne *> (_var_148881.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutineExterne var_cas_ae (_var_148881.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (3857)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_nomVarDest.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_nomVarDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3861)))).operator_concat (GGS_string ("' should name a routine or an extern routine")) COMMA_SOURCE_FILE_AT_LINE (3864)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureRoutine, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeRoutineCallInstruction ::constructor_new (inLexique, var_cas_nomVarDest, var_cas_expressionsList, var_cas_signatureRoutine, var_cas_isExternActionCall COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3839_44_parse (galgas_scanner & inLexique) {
  nt_actual_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3899_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expression ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      GGS_string var_cas_categoryMethodClassBaseName ;
      const GGS_AC_galgasType  temp_151213 = var_cas_expressionType ;
      if (temp_151213.isBuilt ()) {
        temp_151213 (HERE)->method_handleMethodInstructionCall (inLexique, var_cas_methodName, var_cas_inSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3928)), var_cas_methodSignature, var_cas_categoryMethodClassBaseName COMMA_SOURCE_FILE_AT_LINE (3926)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeMethodCallInstruction ::constructor_new (inLexique, var_cas_expressionType, var_cas_expression, var_cas_methodName, var_cas_categoryMethodClassBaseName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      GGS_lstring  var_cas_modifiedObjectName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifiedObjectName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_variableType ;
      GGS_typeCplusPlusName  var_cas_cppVariableName ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_modifiedObjectName, var_cas_variableType, var_cas_cppVariableName COMMA_SOURCE_FILE_AT_LINE (3957)) ;
      GGS_lstringlist  var_cas_structAttributeList ;
      var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              GGS_lstring  var_cas_structAttributeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
              GGS_typeGalgasStructType  var_cas_structType ;
              var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_variableType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3966)) ;
              GGS_bool var_cas_found ;
              var_cas_found = GGS_bool (false) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_152533 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3968)), true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_152533 = NULL ;
                while (((operand_152533 = enumerator_152533.nextObject ()))
                    && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                  macroValidPointer (operand_152533) ;
                  var_cas_found = (operand_152533->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3969))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3969))) ;
                  var_cas_variableType = operand_152533->mAttributType ;
                }
              }
              if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
                var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3973)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3974)) ;
              }
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_modifierName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      const GGS_AC_galgasType  temp_153126 = var_cas_variableType ;
      if (temp_153126.isBuilt ()) {
        temp_153126 (HERE)->method_handleModifierCall (inLexique, var_cas_modifierName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (3980)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeModifierCallInstruction ::constructor_new (inLexique, var_cas_cppVariableName, var_cas_structAttributeList, var_cas_modifierName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_typeMethodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_typeMethodSignature ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_153922 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_153922.isBuilt ()) {
        temp_153922 (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (4002)) ;
      }
      GGS_AC_galgasType  var_cas_type ;
      var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (4003)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (4003)) ;
      const GGS_AC_galgasType  temp_154077 = var_cas_type ;
      if (temp_154077.isBuilt ()) {
        temp_154077 (HERE)->method_handleClassMethodCall (inLexique, var_cas_typeMethodName, var_cas_typeMethodSignature COMMA_SOURCE_FILE_AT_LINE (4004)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_typeMethodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeCallOfTypeMethodInstruction ::constructor_new (inLexique, var_cas_typeName, var_cas_typeMethodName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3899_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4035_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_ (inLexique, var_cas_nomVarDest, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4035_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4062_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4062_27_parse (galgas_scanner & inLexique) {
  nt_warning_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'warning_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4081_26_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_157358 = var_cas_errorExpressionType ;
  if (temp_157358.isBuilt ()) {
    temp_157358 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4100)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_warningMessageExpression ;
  GGS_AC_galgasType  var_cas_warningMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_warningMessageExpression, var_cas_warningMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs ;
  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_warningMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4114)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeWarningInstruction ::constructor_new (inLexique, var_cas_errorExpression, var_cas_warningMessageExpression, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4081_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4128_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4128_27_parse (galgas_scanner & inLexique) {
  nt_error_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'error_instruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4147_24_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorLocationExpression ;
  GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
  const GGS_AC_galgasType  temp_159732 = var_cas_errorLocationExpressionType ;
  if (temp_159732.isBuilt ()) {
    temp_159732 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4166)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorMessageExpression ;
  GGS_AC_galgasType  var_cas_errorMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorMessageExpression, var_cas_errorMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs ;
  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_errorMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4180)) ;
  GGS_varToDropList  var_cas_variablesToDrop ;
  var_cas_variablesToDrop = GGS_varToDropList ::constructor_emptyList () ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_38 = true ;
        while (syntaxRepeat_38) {
            GGS_lstring  var_cas_nomVariable ;
            inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_varCppName ;
            GGS_AC_galgasType  automatic_var_22 ;
            var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariable, automatic_var_22, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (4190)) ;
            var_cas_variablesToDrop.addAssign_operation (var_cas_varCppName) ;
          switch (select_repeat_semantics_parser_38 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_38 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeErrorInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, var_cas_errorMessageExpression, GGS_location (inLexique), var_cas_variablesToDrop COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4147_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_38 = true ;
        while (syntaxRepeat_38) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_38 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_38 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4213_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation ;
  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_typeExpression  var_cas_messageExpression ;
  GGS_AC_galgasType  var_cas_messageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_messageExpression, var_cas_messageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs ;
  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_messageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4235)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMessageInstruction ::constructor_new (inLexique, var_cas_messageExpression, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4213_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4248_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  GGS_L_expression_instructionsList_list  var_cas_listeBranchesTest ;
  var_cas_listeBranchesTest = GGS_L_expression_instructionsList_list ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4258)) ;
  { bool syntaxRepeat_39 = true ;
    while (syntaxRepeat_39) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4260)) ;
        GGS_typeExpression  var_cas_testBranche ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_testBranche, var_cas_resultType) ;
        GGS_typeGalgas_bool  var_cas_b ;
        var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4271)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheTest ;
        var_cas_listeInstructionsBrancheTest = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheTest, var_cas_inSemanticContext) ;
        var_cas_listeBranchesTest.addAssign_operation (var_cas_testBranche, var_cas_listeInstructionsBrancheTest) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4260)) ;
      switch (select_repeat_semantics_parser_39 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_39 = false ;
          break ;
      }
    }
  }
  GGS_typeInstructionList  var_cas_listeInstructionsBrancheAutre ;
  var_cas_listeInstructionsBrancheAutre = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4288)) ;
  switch (select_semantics_parser_40 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheAutre, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4288)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4258)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_if_instruction ::constructor_new (inLexique, var_cas_listeBranchesTest, var_cas_listeInstructionsBrancheAutre COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4248_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  { bool syntaxRepeat_39 = true ;
    while (syntaxRepeat_39) {
        nt_expression_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_39 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_39 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_40 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4319_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  GGS_typeExpression  var_cas_switchExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_switchExpression, var_cas_resultType) ;
  GGS_typeGalgas_enum  var_cas_e ;
  var_cas_e = GGS_typeGalgas_enum::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4340)) ;
  GGS_lstring  var_cas_enumTypeName ;
  var_cas_enumTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4341)) ;
  GGS_enumConstantMap  var_cas_enumConstantesMap ;
  var_cas_enumConstantesMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4342)) ;
  GGS_stringset  var_cas_allBranchConstantSet ;
  var_cas_allBranchConstantSet = GGS_stringset ::constructor_emptySet () ;
  GGS_L_switchBranchlist  var_cas_switchBranchlist ;
  var_cas_switchBranchlist = GGS_L_switchBranchlist ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4346)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_41 = true ;
    while (syntaxRepeat_41) {
        GGS_stringset  var_cas_branchConstantSet ;
        var_cas_branchConstantSet = GGS_stringset ::constructor_emptySet () ;
        { bool syntaxRepeat_42 = true ;
          while (syntaxRepeat_42) {
              GGS_lstring  var_cas_enumConstantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_enumConstantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_branchConstantSet.addAssign_operation (var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4354))) ;
              GGS_bool automatic_var_23 ;
              const GGS_enumConstantMap  temp_166394 = var_cas_enumConstantesMap ;
              if (temp_166394.isBuilt ()) {
                temp_166394 (HERE)->method_searchKey (inLexique, var_cas_enumConstantName, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (4355)) ;
              }
              if ((var_cas_allBranchConstantSet.reader_hasKey (inLexique, var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4356)) COMMA_SOURCE_FILE_AT_LINE (4356))).isBuiltAndTrue ()) {
                var_cas_enumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this constant is already used in current switch instruction") COMMA_SOURCE_FILE_AT_LINE (4358)) ;
              }
            switch (select_repeat_semantics_parser_42 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_42 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        var_cas_allBranchConstantSet = (var_cas_allBranchConstantSet).operator_or (var_cas_branchConstantSet) ;
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4364)) ;
        GGS_typeInstructionList  var_cas_branchInstructionList ;
        var_cas_branchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_branchInstructionList, var_cas_inSemanticContext) ;
        var_cas_switchBranchlist.addAssign_operation (var_cas_branchConstantSet, var_cas_branchInstructionList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4364)) ;
      switch (select_repeat_semantics_parser_41 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_41 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4346)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  GGS_stringset  var_cas_missingConstants ;
  var_cas_missingConstants = var_cas_enumConstantesMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (4382)).substract_operation (inLexique, var_cas_allBranchConstantSet COMMA_SOURCE_FILE_AT_LINE (4382)) ;
  {
    GGS_stringset::cEnumerator enumerator_167411 (var_cas_missingConstants, true) ;
    while (enumerator_167411.hasCurrentObject ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (enumerator_167411._key (HERE))).operator_concat (GGS_string ("' is not used in switch instruction")) COMMA_SOURCE_FILE_AT_LINE (4385)) ;
      enumerator_167411.next () ;
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_switch_instruction ::constructor_new (inLexique, var_cas_switchExpression, var_cas_enumTypeName, var_cas_switchBranchlist COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4319_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_41 = true ;
    while (syntaxRepeat_41) {
        { bool syntaxRepeat_42 = true ;
          while (syntaxRepeat_42) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_42 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_42 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_41 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_41 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4400_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  GGS_typeExpression  var_cas_variantExpression ;
  GGS_AC_galgasType  var_cas_variantResultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
  GGS_typeGalgas_uint  var_cas_ui ;
  var_cas_ui = GGS_typeGalgas_uint::castFrom (inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4420)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList1 ;
  var_cas_instructionList1 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4424)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4425)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList1, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4425)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4424)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  GGS_typeExpression  var_cas_conditionalExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
  GGS_typeGalgas_bool  var_cas_b ;
  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4448)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList2 ;
  var_cas_instructionList2 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4452)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4453)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList2, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4453)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4452)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_while_instruction ::constructor_new (inLexique, var_cas_variantExpression, var_cas_instructionList1, var_cas_conditionalExpression, var_cas_instructionList2, GGS_location (inLexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4400_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4484_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_semantics_parser_43 (inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bool var_cas_sourceIsFile ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_typeExpression  var_cas_depFileExpression ;
  GGS_typeExpression  var_cas_depFilePath ;
  GGS_bool var_cas_hasDependancyFile ;
  var_cas_hasDependancyFile = GGS_bool (false) ;
  GGS_location  var_cas_dependancyFileDefinitionLocation ;
  var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (true) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_lstring  var_cas_gs ;
      var_cas_gs = GGS_typeGalgas_lstring::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4523)) ;
      switch (select_semantics_parser_45 (inLexique)) {
        case 1 : {
          var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_depFileExpressionType ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFileExpression, var_cas_depFileExpressionType) ;
          var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
          GGS_typeGalgas_string  var_cas_gs ;
          var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4539)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFilePath, var_cas_depFileExpressionType) ;
          var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4549)) ;
          var_cas_hasDependancyFile = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (false) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_string  var_cas_gs ;
      var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4565)) ;
      var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool var_cas_hasInputParameter ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_hasInputParameter) ;
  if (((var_cas_hasDependancyFile).operator_and (var_cas_hasInputParameter)).isBuiltAndTrue ()) {
    var_cas_dependancyFileDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a dependancy file reference requires there is no input parameter") COMMA_SOURCE_FILE_AT_LINE (4585)) ;
  }
  GGS_AC_semanticsEntity  var_cas_e ;
  const GGS_M_semanticsEntitiesForUse  temp_174295 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_174295.isBuilt ()) {
    temp_174295 (HERE)->method_searchKey (inLexique, var_cas_grammarName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (4588)) ;
  }
  GGS_C_grammarForSemantics  var_cas_gfs ;
  var_cas_gfs = GGS_C_grammarForSemantics::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_grammarName COMMA_SOURCE_FILE_AT_LINE (4589)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_startSymbolAltMap ;
  var_cas_startSymbolAltMap = var_cas_gfs.reader_mGrammarAltMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4590)) ;
  GGS_lstring  var_cas_lexiqueClassName ;
  var_cas_lexiqueClassName = var_cas_gfs.reader_mLexiqueClassName (inLexique COMMA_SOURCE_FILE_AT_LINE (4591)) ;
  GGS_L_EXsignature  var_cas_startSymbolSignature ;
  const GGS_M_nonterminalSymbolAlts  temp_174608 = var_cas_startSymbolAltMap ;
  if (temp_174608.isBuilt ()) {
    temp_174608 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_startSymbolSignature COMMA_SOURCE_FILE_AT_LINE (4593)) ;
  }
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_startSymbolSignature,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_expressionsList COMMA_SOURCE_FILE_AT_LINE (4595)) ;
  GGS_typeCplusPlusName  var_cas_sentStringName ;
  switch (select_semantics_parser_46 (inLexique)) {
    case 1 : {
      var_cas_sentStringName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4608)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_sentVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_sentVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_targetType ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_sentVariableName, var_cas_targetType, var_cas_sentStringName COMMA_SOURCE_FILE_AT_LINE (4613)) ;
      GGS_typeGalgas_string  var_cas_gs ;
      var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_sentVariableName COMMA_SOURCE_FILE_AT_LINE (4614)) ;
      } break ;
    default :
      break ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_grammarInstruction ::constructor_new (inLexique, var_cas_sourceIsFile, var_cas_sourceExpression, var_cas_grammarName, var_cas_expressionsList, var_cas_altName, var_cas_lexiqueClassName, var_cas_sentStringName, var_cas_depFileExpression, var_cas_depFilePath COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4484_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_43 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      switch (select_semantics_parser_45 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  nt_parse_parameters_list_parse (inLexique) ;
  switch (select_semantics_parser_46 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4639_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4648)) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
  GGS_typeGalgas_string  var_cas_classType ;
  var_cas_classType = GGS_typeGalgas_string::castFrom (inLexique, var_cas_expressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4661)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeSendInstruction ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4639_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4676_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  GGS_string var_cas_prefixString ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      var_cas_prefixString = GGS_string ("") ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_prefix ;
      inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_prefixString = var_cas_prefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4691)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation ;
  var_cas_instructionLocation = var_cas_nomVarDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4697)) ;
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_accessedVariableCppName ;
  GGS_string var_cas_errorMessageName ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_accessedVariableCppName COMMA_SOURCE_FILE_AT_LINE (4702)) ;
  GGS_lstringlist  var_cas_structAttributeList ;
  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_48 = true ;
    while (syntaxRepeat_48) {
      switch (select_repeat_semantics_parser_48 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          var_cas_instructionLocation = var_cas_structAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4711)) ;
          GGS_typeGalgasStructType  var_cas_structType ;
          var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (4712)) ;
          GGS_bool var_cas_found ;
          var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_178725 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (4714)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_178725 = NULL ;
            while (((operand_178725 = enumerator_178725.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_178725) ;
              var_cas_found = (operand_178725->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4715))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4715))) ;
              var_cas_targetType = operand_178725->mAttributType ;
            }
          }
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4719)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (4720)) ;
          }
          } break ;
        default :
          syntaxRepeat_48 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_searchMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_searchMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_keyExpression ;
  GGS_AC_galgasType  var_cas_keyExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_keyExpression, var_cas_keyExpressionType) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
  GGS_string var_cas_mapTypeName ;
  const GGS_AC_galgasType  temp_179623 = var_cas_targetType ;
  if (temp_179623.isBuilt ()) {
    temp_179623 (HERE)->method_check_with_InstructionAccess (inLexique, var_cas_instructionLocation, var_cas_searchMethodName, var_cas_keyExpressionType, var_cas_mapTypeName, var_cas_errorMessageName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (4739)) ;
  }
  GGS_typeInstructionList  var_cas_doBranchInstructionList ;
  var_cas_doBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeInstructionList  var_cas_elseBranchInstructionList ;
  var_cas_elseBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4750)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4751)) ;
  var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (GGS_string ("key")), var_cas_instructionLocation COMMA_HERE), GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE), GGS_typeKeyName ::constructor_new (inLexique, var_cas_instructionLocation, GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4753)) ;
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_180314 (var_cas_attributeList, true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_180314 = NULL ;
    while (((operand_180314 = enumerator_180314.nextObject ()))) {
      macroValidPointer (operand_180314) ;
      var_cas_ioVariablesMap.modifier_insertWithInstructionLocalVariable (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (operand_180314->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4762))), var_cas_instructionLocation COMMA_HERE), operand_180314->mAttributType, GGS_typeOperandName ::constructor_new (inLexique, var_cas_instructionLocation, operand_180314->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4764)), GGS_bool (true), GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4761)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_doBranchInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4751)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4778)) ;
  switch (select_semantics_parser_49 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4778)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4750)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeWithInstruction ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_accessedVariableCppName, var_cas_structAttributeList, var_cas_errorMessageName, var_cas_keyExpression, var_cas_doBranchInstructionList, var_cas_elseBranchInstructionList, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4676_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_48 = true ;
    while (syntaxRepeat_48) {
      switch (select_repeat_semantics_parser_48 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_48 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  switch (select_semantics_parser_49 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'constant_while_before_in_foreach_instruction'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4816_51_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeCplusPlusName  &var_cas_outIndexVariable,
                                GGS_typeInstructionList  &var_cas_out_before_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4826)) ;
  { bool syntaxRepeat_50 = true ;
    while (syntaxRepeat_50) {
        switch (select_semantics_parser_51 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_50 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_50 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_53 (inLexique)) {
    case 1 : {
      var_cas_outIndexVariable = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_outIndexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4852)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4852)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_outIndexVariable COMMA_SOURCE_FILE_AT_LINE (4853)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  var_cas_out_before_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_before_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4826)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4816_51_secondPhase (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_foreachEnumerationList  &var_cas_outForeachEnumerationList,
                                GGS_typeExpression  &var_cas_outWhileExpression,
                                GGS_typeInstructionList  &var_cas_out_do_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4893)) ;
  var_cas_outForeachEnumerationList = GGS_foreachEnumerationList ::constructor_emptyList () ;
  { bool syntaxRepeat_50 = true ;
    while (syntaxRepeat_50) {
        GGS_location  var_cas_magicNumber ;
        var_cas_magicNumber = GGS_location (inLexique) ;
        GGS_bool var_cas_ascending ;
        switch (select_semantics_parser_51 (inLexique)) {
          case 1 : {
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_typeExpression  var_cas_sourceExpression ;
        GGS_AC_galgasType  var_cas_sourceExpressionType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
        GGS_typeListeAttributsSemantiques  var_cas_formalEnumerationList ;
        GGS_localConstantBuildStyleEnum var_cas_localConstantBuildStyleEnum ;
        GGS_bool var_cas_iteratorNewStyle ;
        const GGS_AC_galgasType  temp_185274 = var_cas_sourceExpressionType ;
        if (temp_185274.isBuilt ()) {
          temp_185274 (HERE)->method_acceptForeachInstruction (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_magicNumber, var_cas_formalEnumerationList, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle COMMA_SOURCE_FILE_AT_LINE (4924)) ;
        }
        GGS_string var_cas_typeName ;
        const GGS_AC_galgasType  temp_185532 = var_cas_sourceExpressionType ;
        if (temp_185532.isBuilt ()) {
          temp_185532 (HERE)->method_getTypeName (inLexique, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (4933)) ;
        }
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            GGS_bool automatic_var_24 ;
            nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_formalEnumerationList, var_cas_magicNumber, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle, automatic_var_24) ;
            } break ;
          case 2 : {
            GGS_bool var_cas_mapStyle ;
            var_cas_mapStyle = (var_cas_localConstantBuildStyleEnum).operator_isNotEqual (GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE)) ;
            GGS_bool var_cas_firstOne ;
            var_cas_firstOne = GGS_bool (true) ;
            {
              GGS_typeListeAttributsSemantiques::cEnumerator enumerator_186005 (var_cas_formalEnumerationList, true) ;
              const GGS_typeListeAttributsSemantiques::cElement * operand_186005 = NULL ;
              while (((operand_186005 = enumerator_186005.nextObject ()))) {
                macroValidPointer (operand_186005) ;
                GGS_typeCplusPlusName  var_cas_cppName ;
                if ((((var_cas_localConstantBuildStyleEnum).operator_isEqual (GGS_localConstantBuildStyleEnum::constructor_firstIsKeyOtherMapStyle (inLexique COMMA_HERE))).operator_and (var_cas_firstOne)).isBuiltAndTrue ()) {
                  var_cas_cppName = GGS_typeKeyName ::constructor_new (inLexique, var_cas_magicNumber, var_cas_iteratorNewStyle COMMA_HERE) ;
                }else{
                  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_magicNumber, operand_186005->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4952)), var_cas_mapStyle, var_cas_iteratorNewStyle COMMA_HERE) ;
                }
                var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_186005->mAttributeName, operand_186005->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (4954)) ;
                var_cas_firstOne = GGS_bool (false) ;
              }
            }
            } break ;
          default :
            break ;
        }
        var_cas_outForeachEnumerationList.addAssign_operation (var_cas_iteratorNewStyle, var_cas_sourceExpression, var_cas_magicNumber, var_cas_typeName, var_cas_ascending) ;
      switch (select_repeat_semantics_parser_50 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_50 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_53 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeCplusPlusName  var_cas_indexVariable ;
      var_cas_indexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4968)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4968)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (4969)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      var_cas_outWhileExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outWhileExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b ;
      var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4988)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  var_cas_out_do_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_do_instructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4893)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4816_51_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_50 = true ;
    while (syntaxRepeat_50) {
        switch (select_semantics_parser_51 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_50 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_50 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_53 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5013_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5023)) ;
  GGS_typeInstructionList  var_cas_before_instructionList ;
  GGS_typeExpression  var_cas_whileExpression ;
  GGS_foreachEnumerationList  var_cas_foreachEnumerationList ;
  GGS_typeInstructionList  var_cas_do_instructionList ;
  GGS_typeCplusPlusName  var_cas_indexVariable ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_189445 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_indexVariable, var_cas_before_instructionList) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_189445) ;
    nt_constant_while_before_in_foreach_instruction_secondPhase (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_foreachEnumerationList, var_cas_whileExpression, var_cas_do_instructionList) ;
  //--- End of parse/rewind instruction
  GGS_typeInstructionList  var_cas_between_instructionList ;
  var_cas_between_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5053)) ;
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_189898 = var_cas_indexVariable ; // CAST instruction
        if (_var_189898.getPtr () != NULL) {
          macroValidPointer (_var_189898.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_189898.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_189898.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5059)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5059)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5058)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_between_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5053)) ;
  GGS_typeInstructionList  var_cas_after_instructionList ;
  var_cas_after_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5078)) ;
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_190665 = var_cas_indexVariable ; // CAST instruction
        if (_var_190665.getPtr () != NULL) {
          macroValidPointer (_var_190665.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_190665.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_190665.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5084)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5084)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5083)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_after_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5078)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5023)) ;
  var_cas_instruction = GGS_typeForeachInstruction ::constructor_new (inLexique, var_cas_foreachEnumerationList, var_cas_indexVariable, var_cas_whileExpression, var_cas_before_instructionList, var_cas_do_instructionList, var_cas_between_instructionList, var_cas_after_instructionList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5013_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_189445 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_189445) ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- End of parse/rewind instruction
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'parse_match_operand'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5123_26_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  &var_cas_outCppName,
                                GGS_lstring  &var_cas_outBaseTypeName,
                                GGS_location  &var_cas_outVarLocation,
                                GGS_bool &var_cas_outIsEnumeration,
                                GGS_enumConstantMap  &var_cas_outEnumMessageMap) {
  GGS_lstring  var_cas_variableName ;
  GGS_AC_galgasType  var_cas_type ;
  nt_read_access_ (inLexique, var_cas_variableName, var_cas_outCppName, var_cas_type, var_cas_ioVariablesMap) ;
  var_cas_outVarLocation = GGS_location (inLexique) ;
  { const GGS_AC_galgasType _var_192718 = var_cas_type ; // CAST instruction
    if (_var_192718.getPtr () != NULL) {
      macroValidPointer (_var_192718.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgasClassType *> (_var_192718.getPtr ()) != NULL) {
        const GGS_typeGalgasClassType var_cas_t (_var_192718.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_t.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5142)) ;
        var_cas_outIsEnumeration = GGS_bool (false) ;
        var_cas_outEnumMessageMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      }else if (dynamic_cast <cPtr_typeGalgas_enum *> (_var_192718.getPtr ()) != NULL) {
        const GGS_typeGalgas_enum var_cas_e (_var_192718.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5146)) ;
        var_cas_outIsEnumeration = GGS_bool (true) ;
        var_cas_outEnumMessageMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5148)) ;
      }else{
        GGS_string var_cas_actualTypeName ;
        const GGS_AC_galgasType  temp_192482 = var_cas_type ;
        if (temp_192482.isBuilt ()) {
          temp_192482 (HERE)->method_getTypeName (inLexique, var_cas_actualTypeName COMMA_SOURCE_FILE_AT_LINE (5151)) ;
        }
        var_cas_variableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the type of this variable is '@")).operator_concat (var_cas_actualTypeName)).operator_concat (GGS_string ("' ; I was expected an enumeration type or an abstract type")) COMMA_SOURCE_FILE_AT_LINE (5155)) ;
        var_cas_outBaseTypeName.drop () ;
        var_cas_outIsEnumeration.drop () ;
        var_cas_outEnumMessageMap.drop () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5123_26_parse (galgas_scanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5161_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  var_cas_inVarLocation,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  /* var_cas_inEnumMessageMap */,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_193266 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_193266.isBuilt ()) {
    temp_193266 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5174)) ;
  }
  GGS_AC_galgasType  var_cas_definitionClasse1 ;
  var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5175)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5175)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5177)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 ;
  var_cas_tableDesClassesAncetresType1 = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5178)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 ;
  var_cas_listeAttributs1 = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5179)) ;
  GGS_bool var_cas_isAbstract ;
  var_cas_isAbstract = var_cas_classType.reader_mClassIsAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (5180)) ;
  if ((var_cas_isAbstract).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an abstract class is not allowed here") COMMA_SOURCE_FILE_AT_LINE (5184)) ;
  }
  if ((var_cas_inIsEnumeration).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5187)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (5188)) ;
  }else if (((var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5188)) COMMA_SOURCE_FILE_AT_LINE (5188))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This type does not inherit from '")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5189)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (5190)) ;
  }
  GGS_bool automatic_var_25 ;
  nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_inVarLocation, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), automatic_var_25) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5161_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  nt_parse_effective_input_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5204_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  /* var_cas_inVarLocation */,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  var_cas_inEnumMessageMap,
                                GGS_lstring  &var_cas_outEnumConstantName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outEnumConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  if ((var_cas_inIsEnumeration).isBuiltAndTrue ()) {
    GGS_bool automatic_var_26 ;
    const GGS_enumConstantMap  temp_195067 = var_cas_inEnumMessageMap ;
    if (temp_195067.isBuilt ()) {
      temp_195067 (HERE)->method_searchKey (inLexique, var_cas_outEnumConstantName, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (5217)) ;
    }
  }else{
    var_cas_outEnumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a class that inherit from '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5219)))).operator_concat (GGS_string ("' abstract class is expected here")) COMMA_SOURCE_FILE_AT_LINE (5220)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5204_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5225_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand1_cppName ;
  GGS_lstring  var_cas_operand1_typeName ;
  GGS_location  var_cas_operand1_location ;
  GGS_bool var_cas_operand1_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand1_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand1_cppName, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand2_cppName ;
  GGS_lstring  var_cas_operand2_typeName ;
  GGS_location  var_cas_operand2_location ;
  GGS_bool var_cas_operand2_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand2_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand2_cppName, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_L_matchInstructionCasesList  var_cas_casesList ;
  var_cas_casesList = GGS_L_matchInstructionCasesList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5266)) ;
  { bool syntaxRepeat_58 = true ;
    while (syntaxRepeat_58) {
      switch (select_repeat_semantics_parser_58 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5270)) ;
          GGS_lstring  var_cas_case1_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap, var_cas_case1_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          GGS_lstring  var_cas_case2_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap, var_cas_case2_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeInstructionList  var_cas_instructionsList ;
          var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
          nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
          var_cas_casesList.addAssign_operation (var_cas_case1_name, var_cas_case2_name, var_cas_instructionsList) ;
          var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5270)) ;
          } break ;
        default :
          syntaxRepeat_58 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5310)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elsePartInstructionsList ;
  var_cas_elsePartInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elsePartInstructionsList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5310)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5266)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeMatchInstruction ::constructor_new (inLexique, var_cas_operand1_location, var_cas_operand2_location, var_cas_operand1_cppName, var_cas_operand2_cppName, var_cas_operand1_typeName, var_cas_operand2_typeName, var_cas_operand1_isEnumeration, var_cas_operand2_isEnumeration, var_cas_casesList, var_cas_elsePartInstructionsList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5225_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_58 = true ;
    while (syntaxRepeat_58) {
      switch (select_repeat_semantics_parser_58 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          nt_semantic_instructions_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_58 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'semantic_instructions_list_no_verif'   *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5342_42_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5342_42_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5367_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  /* var_cas_inTargetVarName */,
                                const GGS_typeCplusPlusName  var_cas_inVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */) {
  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_inVariableCppName, var_cas_inVariableType COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5367_26_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5383_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_inVariableType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (5407)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_galgasType  automatic_var_27 ;
  GGS_typeCplusPlusName  automatic_var_28 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_27, automatic_var_28 COMMA_SOURCE_FILE_AT_LINE (5412)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5383_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5417_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_lstring  var_cas_constructorName ;
  inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  const GGS_AC_galgasType  temp_202470 = var_cas_inVariableType ;
  if (temp_202470.isBuilt ()) {
    temp_202470 (HERE)->method_handleConstructorCall (inLexique, var_cas_constructorName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (5435)) ;
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_e ;
  var_cas_e = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_inVariableType, var_cas_constructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5450)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_e COMMA_HERE)) ;
  GGS_AC_galgasType  automatic_var_29 ;
  GGS_typeCplusPlusName  automatic_var_30 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_29, automatic_var_30 COMMA_SOURCE_FILE_AT_LINE (5456)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5417_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5465_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_60 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5479)) COMMA_SOURCE_FILE_AT_LINE (5479))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5480)) COMMA_SOURCE_FILE_AT_LINE (5480)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5482)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_204614 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_204614.isBuilt ()) {
        temp_204614 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5489)) ;
      }
      GGS_AC_galgasType  var_cas_aType ;
      var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5490)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5490)) ;
      GGS_typeGalgasMapType  var_cas_mapType ;
      var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5491)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList ;
      var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5492)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger ;
      var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5493)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap ;
      var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5494)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap ;
      var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5495)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap ;
      var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_61 = true ;
        while (syntaxRepeat_61) {
          switch (select_repeat_semantics_parser_61 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5508)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5509)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_61 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t ;
      var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5522)) ;
      GGS_typeEntityToGenerate  var_cas_e ;
      var_cas_e = GGS_C_mapindexToImplement ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5465_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_60 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5545)) COMMA_SOURCE_FILE_AT_LINE (5545))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5546)) COMMA_SOURCE_FILE_AT_LINE (5546)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5548)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_207139 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_207139.isBuilt ()) {
        temp_207139 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5555)) ;
      }
      GGS_AC_galgasType  var_cas_aType ;
      var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5556)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5556)) ;
      GGS_typeGalgasMapType  var_cas_mapType ;
      var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5557)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList ;
      var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5558)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger ;
      var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5559)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap ;
      var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5560)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap ;
      var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5561)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap ;
      var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_61 = true ;
        while (syntaxRepeat_61) {
          switch (select_repeat_semantics_parser_61 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5574)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5575)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_61 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t ;
      var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5588)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5465_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_60 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_61 = true ;
        while (syntaxRepeat_61) {
          switch (select_repeat_semantics_parser_61 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_61 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5598_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_62 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5612)) COMMA_SOURCE_FILE_AT_LINE (5612))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5613)) COMMA_SOURCE_FILE_AT_LINE (5613)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5615)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_cppClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("old style map definition") COMMA_SOURCE_FILE_AT_LINE (5622)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList ;
      var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList ;
      var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
      var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_63 = true ;
        while (syntaxRepeat_63) {
          switch (select_repeat_semantics_parser_63 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5635)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5642)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut ;
              var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin ;
              var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (5677)) ;
              } break ;
            default :
              syntaxRepeat_63 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap ;
      var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode ;
      var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode ;
      var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType ;
      var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType ;
      var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_212645 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_212645 = NULL ;
        while (((operand_212645 = enumerator_212645.nextObject ()))) {
          macroValidPointer (operand_212645) ;
          GGS_L_EXsignature  var_cas_methodSignature ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_212842 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_212842 = NULL ;
            while (((operand_212842 = enumerator_212842.nextObject ()))) {
              macroValidPointer (operand_212842) ;
              var_cas_methodSignature.addAssign_operation (operand_212842->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_212645->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5705)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_213272 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_213272 = NULL ;
            while (((operand_213272 = enumerator_213272.nextObject ()))) {
              macroValidPointer (operand_213272) ;
              var_cas_methodSignature.addAssign_operation (operand_213272->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName ;
          var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_212645->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5713))).operator_concat (GGS_string ("GetIndex")), operand_212645->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5713)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5714)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_213621 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_213621 = NULL ;
        while (((operand_213621 = enumerator_213621.nextObject ()))) {
          macroValidPointer (operand_213621) ;
          GGS_L_EXsignature  var_cas_methodSignature ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_213816 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_213816 = NULL ;
            while (((operand_213816 = enumerator_213816.nextObject ()))) {
              macroValidPointer (operand_213816) ;
              var_cas_methodSignature.addAssign_operation (operand_213816->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_213621->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5723)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_214244 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_214244 = NULL ;
            while (((operand_214244 = enumerator_214244.nextObject ()))) {
              macroValidPointer (operand_214244) ;
              var_cas_methodSignature.addAssign_operation (operand_214244->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName ;
          var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_213621->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5731))).operator_concat (GGS_string ("GetIndex")), operand_213621->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5731)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5732)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5743)) ;
      GGS_typeEntityToGenerate  var_cas_def ;
      var_cas_def = GGS_typeDefinitionTableAimplementer ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_cppClassName, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_tableMethodesBloc COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_enumTypeName ;
      GGS_lstring  var_cas_checkFinalStateMethod ;
      switch (select_semantics_parser_64 (inLexique)) {
        case 1 : {
          var_cas_enumTypeName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_checkFinalStateMethod = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_checkFinalStateMethod) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList ;
      var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList ;
      var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_removeMethodList ;
      var_cas_removeMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
      var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode ;
      var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode ;
      var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType ;
      var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType ;
      var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap ;
      var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap ;
      var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_65 = true ;
        while (syntaxRepeat_65) {
          switch (select_repeat_semantics_parser_65 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5799)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_217638 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_217638 = NULL ;
                while (((operand_217638 = enumerator_217638.nextObject ()))) {
                  macroValidPointer (operand_217638) ;
                  var_cas_methodSignature.addAssign_operation (operand_217638->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5807)) ;
              var_cas_removeMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5808)), GGS_bool (false), GGS_string ("")) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5810))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_218227 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_218227 = NULL ;
                  while (((operand_218227 = enumerator_218227.nextObject ()))) {
                    macroValidPointer (operand_218227) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_218227->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5817)) ;
                var_cas_removeMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5818)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5826)) ;
              }
              GGS_string var_cas_shadowErrorMessage ;
              switch (select_semantics_parser_66 (inLexique)) {
                case 1 : {
                  var_cas_shadowErrorMessage = GGS_string ("") ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  GGS_lstring  var_cas_shadowErrorMessageString ;
                  inLexique.assignFromAttribute_tokenString (var_cas_shadowErrorMessageString) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (var_cas_shadowErrorMessageString.isBuilt ()) {
                    ::routine_check_KL_escapeCharacters (inLexique,  var_cas_shadowErrorMessageString COMMA_SOURCE_FILE_AT_LINE (5834)) ;
                  }
                  var_cas_shadowErrorMessage = var_cas_shadowErrorMessageString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5835)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_219323 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_219323 = NULL ;
                while (((operand_219323 = enumerator_219323.nextObject ()))) {
                  macroValidPointer (operand_219323) ;
                  var_cas_methodSignature.addAssign_operation (operand_219323->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5844)) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5845)), GGS_bool (false), var_cas_shadowErrorMessage) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5847))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_219927 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_219927 = NULL ;
                  while (((operand_219927 = enumerator_219927.nextObject ()))) {
                    macroValidPointer (operand_219927) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_219927->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5854)) ;
                var_cas_insertMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5855)), GGS_bool (true), var_cas_shadowErrorMessage) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_K_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5863)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_220709 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_220709 = NULL ;
                while (((operand_220709 = enumerator_220709.nextObject ()))) {
                  macroValidPointer (operand_220709) ;
                  var_cas_methodSignature.addAssign_operation (operand_220709->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5871)) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5872)), GGS_bool (false), GGS_string ("")) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5874))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_221328 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_221328 = NULL ;
                  while (((operand_221328 = enumerator_221328.nextObject ()))) {
                    macroValidPointer (operand_221328) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_221328->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5881)) ;
                var_cas_searchMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5882)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            default :
              syntaxRepeat_65 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_221729 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_221729 = NULL ;
        while (((operand_221729 = enumerator_221729.nextObject ()))) {
          macroValidPointer (operand_221729) ;
          if ((operand_221729->mInfo.mHasSetter).isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName ;
            var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_221729->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5888)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (5888)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature ;
            var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_221729->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (5892)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5904)) ;
      GGS_typeEntityToGenerate  var_cas_def ;
      var_cas_def = GGS_C_mapToImplement ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_enumTypeName, var_cas_checkFinalStateMethod, var_cas_listeTousAttributsSemantiques, var_cas_tableAttributs, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_removeMethodList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5598_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_62 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5933)) COMMA_SOURCE_FILE_AT_LINE (5933))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5933)) COMMA_SOURCE_FILE_AT_LINE (5933)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5935)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList ;
      var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList ;
      var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
      var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_63 = true ;
        while (syntaxRepeat_63) {
          switch (select_repeat_semantics_parser_63 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5954)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5961)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut ;
              var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin ;
              var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (5996)) ;
              } break ;
            default :
              syntaxRepeat_63 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap ;
      var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode ;
      var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode ;
      var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType ;
      var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType ;
      var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_226566 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_226566 = NULL ;
        while (((operand_226566 = enumerator_226566.nextObject ()))) {
          macroValidPointer (operand_226566) ;
          GGS_L_EXsignature  var_cas_methodSignature ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_226763 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_226763 = NULL ;
            while (((operand_226763 = enumerator_226763.nextObject ()))) {
              macroValidPointer (operand_226763) ;
              var_cas_methodSignature.addAssign_operation (operand_226763->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_226566->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6024)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_227193 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_227193 = NULL ;
            while (((operand_227193 = enumerator_227193.nextObject ()))) {
              macroValidPointer (operand_227193) ;
              var_cas_methodSignature.addAssign_operation (operand_227193->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName ;
          var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_226566->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6032))).operator_concat (GGS_string ("GetIndex")), operand_226566->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6032)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6033)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_227542 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_227542 = NULL ;
        while (((operand_227542 = enumerator_227542.nextObject ()))) {
          macroValidPointer (operand_227542) ;
          GGS_L_EXsignature  var_cas_methodSignature ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_227739 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_227739 = NULL ;
            while (((operand_227739 = enumerator_227739.nextObject ()))) {
              macroValidPointer (operand_227739) ;
              var_cas_methodSignature.addAssign_operation (operand_227739->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_227542->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6042)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_228170 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_228170 = NULL ;
            while (((operand_228170 = enumerator_228170.nextObject ()))) {
              macroValidPointer (operand_228170) ;
              var_cas_methodSignature.addAssign_operation (operand_228170->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName ;
          var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_227542->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6050))).operator_concat (GGS_string ("GetIndex")), operand_227542->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6050)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6051)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6062)) ;
      GGS_TypeModel  var_cas_type ;
      var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6064)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_64 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc ;
      var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode ;
      var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode ;
      var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType ;
      var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType ;
      var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap ;
      var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap ;
      var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_65 = true ;
        while (syntaxRepeat_65) {
          switch (select_repeat_semantics_parser_65 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_31 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_31) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_230529 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_230529 = NULL ;
                while (((operand_230529 = enumerator_230529.nextObject ()))) {
                  macroValidPointer (operand_230529) ;
                  var_cas_methodSignature.addAssign_operation (operand_230529->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6111)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6113))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_231074 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_231074 = NULL ;
                  while (((operand_231074 = enumerator_231074.nextObject ()))) {
                    macroValidPointer (operand_231074) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_231074->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6120)) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_32 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_32) ;
              switch (select_semantics_parser_66 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_231755 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_231755 = NULL ;
                while (((operand_231755 = enumerator_231755.nextObject ()))) {
                  macroValidPointer (operand_231755) ;
                  var_cas_methodSignature.addAssign_operation (operand_231755->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6139)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6141))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_232299 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_232299 = NULL ;
                  while (((operand_232299 = enumerator_232299.nextObject ()))) {
                    macroValidPointer (operand_232299) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_232299->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6148)) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_33 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_33) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature ;
              var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_232900 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_232900 = NULL ;
                while (((operand_232900 = enumerator_232900.nextObject ()))) {
                  macroValidPointer (operand_232900) ;
                  var_cas_methodSignature.addAssign_operation (operand_232900->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6162)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6164))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature ;
                var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_233485 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_233485 = NULL ;
                  while (((operand_233485 = enumerator_233485.nextObject ()))) {
                    macroValidPointer (operand_233485) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_233485->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6171)) ;
              }
              } break ;
            default :
              syntaxRepeat_65 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_233804 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_233804 = NULL ;
        while (((operand_233804 = enumerator_233804.nextObject ()))) {
          macroValidPointer (operand_233804) ;
          if ((operand_233804->mInfo.mHasSetter).isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName ;
            var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_233804->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6177)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (6177)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature ;
            var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_233804->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (6181)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6193)) ;
      GGS_TypeModel  var_cas_type ;
      var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6195)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5598_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_62 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      { bool syntaxRepeat_63 = true ;
        while (syntaxRepeat_63) {
          switch (select_repeat_semantics_parser_63 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_63 = false ;
              break ;
          }
        }
      }
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_64 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_65 = true ;
        while (syntaxRepeat_65) {
          switch (select_repeat_semantics_parser_65 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              switch (select_semantics_parser_66 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_65 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ex_map_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6202_20_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_nomMethode,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6202_20_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'map_method'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6214_17_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_methodName,
                                GGS_lstring  &var_cas_getIndexMethodName,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_67 (inLexique)) {
    case 1 : {
      var_cas_getIndexMethodName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_getIndexMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6214_17_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_67 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6237_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6263))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6263))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6263)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6264)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_237208 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_237208.isBuilt ()) {
    temp_237208 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6267)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6268)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6268)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6269)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6272)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_237677 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_237677 = NULL ;
    while (((operand_237677 = enumerator_237677.nextObject ()))) {
      macroValidPointer (operand_237677) ;
      GGS_string var_cas_keyClassMethod ;
      var_cas_keyClassMethod = ((operand_237677->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6275))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6275))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6276)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6276))).isBuiltAndTrue ()) {
        var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_237677->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6279)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6281)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6292)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6237_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6320))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6320))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6320)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6321)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6321)) COMMA_SOURCE_FILE_AT_LINE (6321))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6322)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6237_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6333_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6365))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6365))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6365)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6366)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_241517 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_241517.isBuilt ()) {
    temp_241517 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6369)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6370)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6370)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6371)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6374)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_242111 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_242111 = NULL ;
      while (((operand_242111 = enumerator_242111.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_242111) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_242111->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6379))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6379))) ;
        var_cas_baseClassName = operand_242111->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6380)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6381)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6381)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryMethodMap  temp_242511 = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6385)) ;
          if (temp_242511.isBuilt ()) {
            temp_242511 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (6385)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (6386)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden method is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6397)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_243129 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_243129 = NULL ;
      while (((operand_243129 = enumerator_243129.nextObject ()))) {
        macroValidPointer (operand_243129) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_243129->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6400))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6400))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6401)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6401))).isBuiltAndTrue ()) {
          var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_243129->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6404)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6406)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_243586 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6409)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_243586 = NULL ;
    while (((operand_243586 = enumerator_243586.nextObject ()))) {
      macroValidPointer (operand_243586) ;
      GGS_typeCplusPlusName  var_cas_cppName ;
      var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6411)), operand_243586->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6412)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_243586->mAttributeName, operand_243586->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6416)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6419)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6419)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6441)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6333_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6475))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6475))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6475)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6476)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6476)) COMMA_SOURCE_FILE_AT_LINE (6476))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6477)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6333_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6493_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName ;
  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6523)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6523)) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_248023 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_248023.isBuilt ()) {
    temp_248023 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6525)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType ;
  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6526)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6526)) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6528))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6528))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6528)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6529)) ;
  const GGS_M_semanticsEntitiesForUse  temp_248540 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_248540.isBuilt ()) {
    temp_248540 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6531)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6532)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6532)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6533)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6536)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_249009 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_249009 = NULL ;
    while (((operand_249009 = enumerator_249009.nextObject ()))) {
      macroValidPointer (operand_249009) ;
      GGS_string var_cas_keyClassMethod ;
      var_cas_keyClassMethod = ((operand_249009->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6539))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6539))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6540)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6540))).isBuiltAndTrue ()) {
        var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_249009->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6543)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6545)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6556)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6493_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_250915 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_250915.isBuilt ()) {
    temp_250915 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6591)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType ;
  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6592)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6592)) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6594))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6594))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6594)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6595)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6595)) COMMA_SOURCE_FILE_AT_LINE (6595))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6596)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6493_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6607_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_253204 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_253204.isBuilt ()) {
    temp_253204 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6643)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType ;
  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6644)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6644)) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName ;
  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6647)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6647)) COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_returnedVariableName, var_cas_returnedType, var_cas_returnedCppVarName COMMA_SOURCE_FILE_AT_LINE (6648)) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6650))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6650))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6650)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6651)) ;
  const GGS_M_semanticsEntitiesForUse  temp_254074 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_254074.isBuilt ()) {
    temp_254074 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6653)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6654)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6654)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6655)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6658)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_254668 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_254668 = NULL ;
      while (((operand_254668 = enumerator_254668.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_254668) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_254668->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6663))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6663))) ;
        var_cas_baseClassName = operand_254668->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6664)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6665)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6665)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          GGS_AC_galgasType  var_cas_returnedTypePreviousDeclaration ;
          const GGS_EXcategoryReaderMap  temp_255125 = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6670)) ;
          if (temp_255125.isBuilt ()) {
            temp_255125 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration, var_cas_returnedTypePreviousDeclaration COMMA_SOURCE_FILE_AT_LINE (6670)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6679)) COMMA_SOURCE_FILE_AT_LINE (6676)) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_returnedType,  var_cas_returnedTypePreviousDeclaration,  var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6684)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (6681)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden reader is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6693)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_256029 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_256029 = NULL ;
      while (((operand_256029 = enumerator_256029.nextObject ()))) {
        macroValidPointer (operand_256029) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_256029->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6696))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6696))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6697)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6697))).isBuiltAndTrue ()) {
          var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_256029->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6700)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6702)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_256486 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6705)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_256486 = NULL ;
    while (((operand_256486 = enumerator_256486.nextObject ()))) {
      macroValidPointer (operand_256486) ;
      GGS_typeCplusPlusName  var_cas_cppName ;
      var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6707)), operand_256486->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6708)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_256486->mAttributeName, operand_256486->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6712)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6715)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6715)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList ;
  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6737)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6607_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_258979 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_258979.isBuilt ()) {
    temp_258979 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6778)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType ;
  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6779)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6779)) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6781))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6781))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6781)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6782)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6782)) COMMA_SOURCE_FILE_AT_LINE (6782))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6783)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6607_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6799_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6826))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6826))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6826)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6827)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_261438 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_261438.isBuilt ()) {
    temp_261438 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6830)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6831)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6831)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6832)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6835)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_261907 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_261907 = NULL ;
    while (((operand_261907 = enumerator_261907.nextObject ()))) {
      macroValidPointer (operand_261907) ;
      GGS_string var_cas_keyClassMethod ;
      var_cas_keyClassMethod = ((operand_261907->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6838))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6838))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6839)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6839))).isBuiltAndTrue ()) {
        var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_261907->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6842)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6844)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, GGS_templateInstructionList ::constructor_emptyList (), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6854)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6799_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6883))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6883))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6883)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6884)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6884)) COMMA_SOURCE_FILE_AT_LINE (6884))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6885)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6799_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6896_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6929))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6929))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6929)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6930)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_265895 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_265895.isBuilt ()) {
    temp_265895 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6933)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6934)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6934)) ;
  GGS_typeGalgasClassType  var_cas_classType ;
  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6935)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap ;
  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6938)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found ;
    var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_266489 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_266489 = NULL ;
      while (((operand_266489 = enumerator_266489.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_266489) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_266489->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6943))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6943))) ;
        var_cas_baseClassName = operand_266489->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6944)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6945)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6945)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryTemplateMap  temp_266895 = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6949)) ;
          if (temp_266895.isBuilt ()) {
            temp_266895 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (6949)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6957)) COMMA_SOURCE_FILE_AT_LINE (6954)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden template is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6965)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_267578 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_267578 = NULL ;
      while (((operand_267578 = enumerator_267578.nextObject ()))) {
        macroValidPointer (operand_267578) ;
        GGS_string var_cas_keyClassMethod ;
        var_cas_keyClassMethod = ((operand_267578->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6968))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6968))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6969)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6969))).isBuiltAndTrue ()) {
          var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_267578->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6972)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6974)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_268043 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6977)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_268043 = NULL ;
    while (((operand_268043 = enumerator_268043.nextObject ()))) {
      macroValidPointer (operand_268043) ;
      GGS_typeCplusPlusName  var_cas_cppName ;
      var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6979)), operand_268043->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6980)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_268043->mAttributeName, operand_268043->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6984)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6987)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6987)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_templateString ;
  var_cas_templateString = GGS_string ("") ;
  { bool syntaxRepeat_71 = true ;
    while (syntaxRepeat_71) {
        GGS_lstring  var_cas_s ;
        inLexique.assignFromAttribute_tokenString (var_cas_s) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_templateString.dotAssign_operation (var_cas_s.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6993))) ;
      switch (select_repeat_semantics_parser_71 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_71 = false ;
          break ;
      }
    }
  }
  GGS_templateInstructionList  var_cas_templateInstructionList ;
  galgasTemplateGrammar::_performSourceStringParsing_ (inLexique,
                                  NULL,
                                  var_cas_templateString,
                                  var_cas_methodLocalVariablesMap,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioComponentSemanticsEntitiesMap,
                                  var_cas_inOptionsComponentsMapForUse,
                                  var_cas_templateInstructionList
                                  COMMA_SOURCE_FILE_AT_LINE (6997)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, var_cas_templateInstructionList, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7014)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6896_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap ;
  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key ;
  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7049))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7049))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7049)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7050)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7050)) COMMA_SOURCE_FILE_AT_LINE (7050))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7051)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_71 = true ;
    while (syntaxRepeat_71) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_71 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_71 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6896_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_71 = true ;
    while (syntaxRepeat_71) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_71 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_71 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7070_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_72 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7084)) COMMA_SOURCE_FILE_AT_LINE (7084))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7084)) COMMA_SOURCE_FILE_AT_LINE (7084)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7086)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature ;
      var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature ;
      var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_272790 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_272790 = NULL ;
        while (((operand_272790 = enumerator_272790.nextObject ()))) {
          macroValidPointer (operand_272790) ;
          var_cas_extractSignature.addAssign_operation (operand_272790->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_272790->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7118)) ;
      GGS_typeEntityToGenerate  var_cas_def ;
      var_cas_def = GGS_C_listTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7070_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_72 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7139)) COMMA_SOURCE_FILE_AT_LINE (7139))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7139)) COMMA_SOURCE_FILE_AT_LINE (7139)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7141)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature ;
      var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature ;
      var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_274980 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_274980 = NULL ;
        while (((operand_274980 = enumerator_274980.nextObject ()))) {
          macroValidPointer (operand_274980) ;
          var_cas_extractSignature.addAssign_operation (operand_274980->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_274980->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7173)) ;
      GGS_TypeModel  var_cas_t ;
      var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7175)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7070_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_72 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7185_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7199)) COMMA_SOURCE_FILE_AT_LINE (7199))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7199)) COMMA_SOURCE_FILE_AT_LINE (7199)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7201)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature ;
      var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_277539 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_277539 = NULL ;
        while (((operand_277539 = enumerator_277539.nextObject ()))) {
          macroValidPointer (operand_277539) ;
          var_cas_extractSignature.addAssign_operation (operand_277539->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_EXsortDescriptorList  var_cas_sortDescriptorList ;
      var_cas_sortDescriptorList = GGS_EXsortDescriptorList ::constructor_emptyList () ;
      GGS_stringset  var_cas_usedSortedAttributes ;
      var_cas_usedSortedAttributes = GGS_stringset ::constructor_emptySet () ;
      { bool syntaxRepeat_74 = true ;
        while (syntaxRepeat_74) {
            GGS_lstring  var_cas_sortAttribute ;
            inLexique.assignFromAttribute_tokenString (var_cas_sortAttribute) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            if ((var_cas_usedSortedAttributes.reader_hasKey (inLexique, var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7236)) COMMA_SOURCE_FILE_AT_LINE (7236))).isBuiltAndTrue ()) {
              var_cas_sortAttribute.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this attribute is already used in sort list") COMMA_SOURCE_FILE_AT_LINE (7238)) ;
            }else{
              GGS_AC_galgasType  var_cas_definitionType ;
              GGS_bool automatic_var_34 ;
              GGS_bool automatic_var_35 ;
              const GGS_typeSemanticAttributesMap  temp_278356 = var_cas_tableAttributs ;
              if (temp_278356.isBuilt ()) {
                temp_278356 (HERE)->method_searchKey (inLexique, var_cas_sortAttribute, var_cas_definitionType, automatic_var_34, automatic_var_35 COMMA_SOURCE_FILE_AT_LINE (7240)) ;
              }
              const GGS_AC_galgasType  temp_278460 = var_cas_definitionType ;
              if (temp_278460.isBuilt ()) {
                temp_278460 (HERE)->method_acceptToBeSortKeyInSortedListDefinition (inLexique, var_cas_sortAttribute COMMA_SOURCE_FILE_AT_LINE (7241)) ;
              }
              var_cas_usedSortedAttributes.addAssign_operation (var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7242))) ;
            }
            GGS_bool var_cas_ascendingOrder ;
            switch (select_semantics_parser_75 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (true) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (false) ;
                } break ;
              default :
                break ;
            }
            var_cas_sortDescriptorList.addAssign_operation (var_cas_sortAttribute, var_cas_ascendingOrder) ;
          switch (select_repeat_semantics_parser_74 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_74 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7258)) ;
      GGS_typeEntityToGenerate  var_cas_def ;
      var_cas_def = GGS_C_sortedListTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_sortDescriptorList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7185_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7280)) COMMA_SOURCE_FILE_AT_LINE (7280))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7280)) COMMA_SOURCE_FILE_AT_LINE (7280)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t ;
        var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7282)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel ;
      var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature ;
      var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_280553 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_280553 = NULL ;
        while (((operand_280553 = enumerator_280553.nextObject ()))) {
          macroValidPointer (operand_280553) ;
          var_cas_extractSignature.addAssign_operation (operand_280553->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c ;
      var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_74 = true ;
        while (syntaxRepeat_74) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_75 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_74 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_74 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite ;
      var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7324)) ;
      GGS_TypeModel  var_cas_t ;
      var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7326)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7185_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_74 = true ;
        while (syntaxRepeat_74) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_75 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_74 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_74 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'attributes_definition_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7336_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                GGS_typeListModel  &var_cas_outAttributeListModel,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeAttributsSemantiquesCourants,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap) {
  var_cas_listeAttributsSemantiquesCourants = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_outAttributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_76 = true ;
    while (syntaxRepeat_76) {
      switch (select_repeat_semantics_parser_76 (inLexique)) {
        case 2 : {
          GGS_AC_galgasType  var_cas_definitionType ;
          GGS_lstring  var_cas_typeName ;
          nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_bool var_cas_hasSetter ;
          var_cas_hasSetter = GGS_bool (false) ;
          GGS_bool var_cas_hasGetter ;
          var_cas_hasGetter = GGS_bool (true) ;
          switch (select_semantics_parser_77 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_78 = true ;
                while (syntaxRepeat_78) {
                    GGS_lstring  var_cas_directiveName ;
                    inLexique.assignFromAttribute_tokenString (var_cas_directiveName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    if (((var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7368))).operator_isEqual (GGS_string ("nogetter"))).isBuiltAndTrue ()) {
                      if (((var_cas_hasGetter).operator_not ()).isBuiltAndTrue ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'nogetter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7371)) ;
                      }
                      var_cas_hasGetter = GGS_bool (false) ;
                    }else if (((var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7373))).operator_isEqual (GGS_string ("setter"))).isBuiltAndTrue ()) {
                      if ((var_cas_hasSetter).isBuiltAndTrue ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'setter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7376)) ;
                      }
                      var_cas_hasSetter = GGS_bool (true) ;
                    }else{
                      var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'setter' or 'nogetter' feature names are allowed here") COMMA_SOURCE_FILE_AT_LINE (7380)) ;
                    }
                  switch (select_repeat_semantics_parser_78 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_78 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          var_cas_tableAttributs.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_definitionType, var_cas_hasSetter, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (7385)) ;
          var_cas_listeTousAttributsSemantiques.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_listeAttributsSemantiquesCourants.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_outAttributeListModel.addAssign_operation (var_cas_typeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_76 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7336_33_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_76 = true ;
    while (syntaxRepeat_76) {
      switch (select_repeat_semantics_parser_76 (inLexique)) {
        case 2 : {
          nt_type_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_77 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_78 = true ;
                while (syntaxRepeat_78) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_semantics_parser_78 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_78 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_76 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7399_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_284775 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_284775.isBuilt ()) {
    temp_284775 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7416)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7417)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7417)) ;
  GGS_typeGalgasListType  var_cas_listType ;
  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7418)) ;
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7424)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7426)) ;
  GGS_typeEntityToGenerate  var_cas_def ;
  var_cas_def = GGS_typeGalgasListmapToImplement ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7430)) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7399_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_286056 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_286056.isBuilt ()) {
    temp_286056 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7450)) ;
  }
  GGS_AC_galgasType  var_cas_type ;
  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7451)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7451)) ;
  GGS_typeGalgasListType  var_cas_listType ;
  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7452)) ;
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7458)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7460)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7399_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7469_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel ;
  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7502)) ;
  GGS_typeEntityToGenerate  var_cas_def ;
  var_cas_def = GGS_C_structToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7469_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel ;
  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7541)) ;
  GGS_TypeModel  var_cas_t ;
  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7543)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7469_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  nt_attributes_definition_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "recursivelyEnumerateDirectories"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyEnumerateDirectories (C_Compiler & inLexique,
                                const GGS_string  var_cas_inAbsoluteSourcePath,
                                const GGS_string  var_cas_inPathInWrapper,
                                const GGS_wrapperExtensionMap   var_cas_inExtensionMap,
                                GGS_wrapperFileSortedList  & var_cas_outWrapperFileSortedList,
                                GGS_wrapperDirectorySortedList  & var_cas_outWrapperDirectorySortedList,
                                GGS_uint  & var_cas_ioWrapperFileIndex,
                                GGS_uint  & var_cas_ioWrapperDirectoryIndex,
                                GGS_M_regularFiles  & var_cas_ioRegularFileMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyEnumerateDirectories at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentDirectoryIndex ;
  var_cas_currentDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
  var_cas_ioWrapperDirectoryIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7563)) ;
  GGS_stringlist  var_cas_files ;
  var_cas_files = var_cas_inAbsoluteSourcePath.reader_regularFiles (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7565)) ;
  var_cas_outWrapperFileSortedList = GGS_wrapperFileSortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_290792 (var_cas_files, true) ;
    const GGS_stringlist::cElement * operand_290792 = NULL ;
    while (((operand_290792 = enumerator_290792.nextObject ()))) {
      macroValidPointer (operand_290792) ;
      if ((var_cas_inExtensionMap.reader_hasKey (inLexique, operand_290792->mValue.reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7568)) COMMA_SOURCE_FILE_AT_LINE (7568))).isBuiltAndTrue ()) {
        GGS_string var_cas_absoluteFilePath ;
        var_cas_absoluteFilePath = ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_290792->mValue) ;
        var_cas_outWrapperFileSortedList.addAssign_operation (operand_290792->mValue, var_cas_absoluteFilePath, var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex) ;
        var_cas_ioRegularFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_inPathInWrapper).operator_concat (operand_290792->mValue), GGS_location (inLexique) COMMA_HERE), var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (7577)) ;
        var_cas_ioWrapperFileIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7582)) ;
      }
    }
  }
  GGS_stringlist  var_cas_directories ;
  var_cas_directories = var_cas_inAbsoluteSourcePath.reader_directories (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7586)) ;
  var_cas_outWrapperDirectorySortedList = GGS_wrapperDirectorySortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_291546 (var_cas_directories, true) ;
    const GGS_stringlist::cElement * operand_291546 = NULL ;
    while (((operand_291546 = enumerator_291546.nextObject ()))) {
      macroValidPointer (operand_291546) ;
      GGS_wrapperFileSortedList  var_cas_internalWrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_internalWrapperDirectorySortedList ;
      GGS_uint  var_cas_theDirectoryIndex ;
      var_cas_theDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_291546->mValue),  ((var_cas_inPathInWrapper).operator_concat (operand_291546->mValue)).operator_concat (GGS_string ("/")),  var_cas_inExtensionMap,  var_cas_internalWrapperFileSortedList,  var_cas_internalWrapperDirectorySortedList,  var_cas_ioWrapperFileIndex,  var_cas_ioWrapperDirectoryIndex,  var_cas_ioRegularFileMap COMMA_SOURCE_FILE_AT_LINE (7592)) ;
      var_cas_outWrapperDirectorySortedList.addAssign_operation (operand_291546->mValue, var_cas_internalWrapperFileSortedList, var_cas_internalWrapperDirectorySortedList, var_cas_theDirectoryIndex) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyEnumerateDirectories\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7613_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap ;
  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_79 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_80 = true ;
        while (syntaxRepeat_80) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7635)) ;
          switch (select_repeat_semantics_parser_80 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_80 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap ;
  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_absoluteSourcePath ;
  if (((var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7644))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
    var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7645)) ;
  }else{
    var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7647))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7647))) ;
  }
  if (((var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7649))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7651)) ;
  }else{
    GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
    GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
    GGS_uint  var_cas_wrapperFileIndex ;
    var_cas_wrapperFileIndex = GGS_uint (0U) ;
    GGS_uint  var_cas_wrapperDirectoryIndex ;
    var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
    ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7657)) ;
    GGS_typeEntityToGenerate  var_cas_w ;
    var_cas_w = GGS_C_wrapperToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7670)), var_cas_extensionMap, var_cas_wrapperFileSortedList, var_cas_wrapperDirectorySortedList COMMA_HERE) ;
    var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_w) ;
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap ;
  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_81 = true ;
    while (syntaxRepeat_81) {
      switch (select_repeat_semantics_parser_81 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_lstring  var_cas_templateAbsolutePath ;
          var_cas_templateAbsolutePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_templatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7690))), var_cas_templatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7691)) COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_templateArgumentTypesList ;
          var_cas_templateArgumentTypesList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
          var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_templateVariableMap ;
          var_cas_templateVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_82 = true ;
            while (syntaxRepeat_82) {
              switch (select_repeat_semantics_parser_82 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  GGS_bool var_cas_parameterIsUsed ;
                  switch (select_semantics_parser_83 (inLexique)) {
                    case 1 : {
                      var_cas_parameterIsUsed = GGS_bool (true) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      var_cas_parameterIsUsed = GGS_bool (false) ;
                      } break ;
                    default :
                      break ;
                  }
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_cppName ;
                  var_cas_cppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_parameterName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7718)), var_cas_parameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7718)) COMMA_HERE) ;
                  var_cas_templateArgumentTypesList.addAssign_operation (var_cas_type_semantique, GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE), var_cas_cppName, GGS_bool (true), var_cas_parameterName) ;
                  if ((var_cas_parameterIsUsed).isBuiltAndTrue ()) {
                    var_cas_templateVariableMap.modifier_insertConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7721)) ;
                  }else{
                    var_cas_templateVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7723)) ;
                  }
                  } break ;
                default :
                  syntaxRepeat_82 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7726)) ;
          GGS_templateInstructionList  var_cas_templateInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            galgasTemplateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          var_cas_templateAbsolutePath,
                                          var_cas_templateVariableMap,
                                          var_cas_ioSemanticContext,
                                          var_cas_ioComponentSemanticsEntitiesMap,
                                          var_cas_inOptionsComponentsMapForUse,
                                          var_cas_templateInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (7728)) ;
          }
          var_cas_listeEntitesAengendrer.addAssign_operation (GGS_C_filewrapperTemplateToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_templateName, var_cas_templateArgumentTypesList, var_cas_templateInstructionList COMMA_HERE)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_81 = false ;
          break ;
      }
    }
  }
  var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7744)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7613_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap ;
  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_79 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_80 = true ;
        while (syntaxRepeat_80) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7768)) ;
          switch (select_repeat_semantics_parser_80 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_80 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap ;
  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7775)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7775)) COMMA_SOURCE_FILE_AT_LINE (7775))).operator_not ()).isBuiltAndTrue ()) {
    GGS_string var_cas_absoluteSourcePath ;
    if (((var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7778))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7779)) ;
    }else{
      var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7781))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7781))) ;
    }
    if (((var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7783))).operator_not ()).isBuiltAndTrue ()) {
      var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7785)) ;
    }else{
      GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
      GGS_uint  var_cas_wrapperFileIndex ;
      var_cas_wrapperFileIndex = GGS_uint (0U) ;
      GGS_uint  var_cas_wrapperDirectoryIndex ;
      var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7791)) ;
    }
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap ;
  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_81 = true ;
    while (syntaxRepeat_81) {
      switch (select_repeat_semantics_parser_81 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
          var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_82 = true ;
            while (syntaxRepeat_82) {
              switch (select_repeat_semantics_parser_82 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  switch (select_semantics_parser_83 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_82 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7832)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_81 = false ;
          break ;
      }
    }
  }
  if (((var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7836)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7836)) COMMA_SOURCE_FILE_AT_LINE (7836))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7837)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7613_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  switch (select_semantics_parser_79 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_80 = true ;
        while (syntaxRepeat_80) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_80 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_80 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_81 = true ;
    while (syntaxRepeat_81) {
      switch (select_repeat_semantics_parser_81 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          { bool syntaxRepeat_82 = true ;
            while (syntaxRepeat_82) {
              switch (select_repeat_semantics_parser_82 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  switch (select_semantics_parser_83 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_82 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_81 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7848_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7848_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7848_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7892_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_modifiersMap ;
  var_cas_modifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap ;
  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall ;
  var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList ;
  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_constructorsMap ;
  var_cas_constructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_84 = true ;
    while (syntaxRepeat_84) {
      switch (select_repeat_semantics_parser_84 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList ;
          var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_85 = true ;
            while (syntaxRepeat_85) {
              switch (select_repeat_semantics_parser_85 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  } break ;
                default :
                  syntaxRepeat_85 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_constructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (7933)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_methodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7953)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_86 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_methodName ;
              inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
              var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              var_cas_modifiersMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7973)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              GGS_location  var_cas_errorLocation ;
              var_cas_errorLocation = GGS_location (inLexique) ;
              { bool syntaxRepeat_87 = true ;
                while (syntaxRepeat_87) {
                  switch (select_repeat_semantics_parser_87 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      } break ;
                    default :
                      syntaxRepeat_87 = false ;
                      break ;
                  }
                }
              }
              if ((var_cas_acceptAddAssignOperatorCall).isBuiltAndTrue ()) {
                var_cas_errorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (7994)) ;
              }else{
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_84 = false ;
          break ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_t ;
  var_cas_t = GGS_typeExternTypeToGenerate ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_t) ;
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e ;
  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8020)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7892_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_EXmodifiersMap ;
  var_cas_EXmodifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap ;
  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall ;
  var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList ;
  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_EXconstructorsMap ;
  var_cas_EXconstructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_constructorMap  var_cas_constructorMap ;
  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_readerMap  var_cas_readerMap ;
  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_modifierMap  var_cas_modifierMap ;
  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_addAssignFormalInputArgumentList ;
  var_cas_addAssignFormalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_84 = true ;
    while (syntaxRepeat_84) {
      switch (select_repeat_semantics_parser_84 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList ;
          var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeListModel  var_cas_formalInputArgumentList ;
          var_cas_formalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
          { bool syntaxRepeat_85 = true ;
            while (syntaxRepeat_85) {
              switch (select_repeat_semantics_parser_85 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  var_cas_formalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                  } break ;
                default :
                  syntaxRepeat_85 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_EXconstructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (8069)) ;
          var_cas_constructorMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_formalInputArgumentList COMMA_SOURCE_FILE_AT_LINE (8070)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
          var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signature ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8090)) ;
          var_cas_readerMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8091)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_86 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_modifierName ;
              inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
              var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_L_signature  var_cas_signature ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
              var_cas_EXmodifiersMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8111)) ;
              var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8112)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              if (((var_cas_addAssignFormalInputArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (8115))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (8117)) ;
              }else{
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              { bool syntaxRepeat_87 = true ;
                while (syntaxRepeat_87) {
                  switch (select_repeat_semantics_parser_87 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      var_cas_addAssignFormalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                      } break ;
                    default :
                      syntaxRepeat_87 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_84 = false ;
          break ;
      }
    }
  }
  GGS_AC_galgasType  var_cas_c ;
  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_EXconstructorsMap, var_cas_EXmodifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e ;
  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8149)) ;
  GGS_TypeModel  var_cas_t ;
  var_cas_t = GGS_ExternTypeModel ::constructor_new (inLexique, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_addAssignFormalInputArgumentList COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (8151)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7892_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_84 = true ;
    while (syntaxRepeat_84) {
      switch (select_repeat_semantics_parser_84 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_85 = true ;
            while (syntaxRepeat_85) {
              switch (select_repeat_semantics_parser_85 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_85 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_86 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              { bool syntaxRepeat_87 = true ;
                while (syntaxRepeat_87) {
                  switch (select_repeat_semantics_parser_87 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      nt_formal_argument_type_parse (inLexique) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_87 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_84 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8159_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8166)) COMMA_SOURCE_FILE_AT_LINE (8166))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_311255 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_311255.isBuilt ()) {
      temp_311255 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8168)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8169)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8169)) ;
  }else{
    const GGS_typeTableEnAvant  temp_311447 = var_cas_tableEnAvant ;
    if (temp_311447.isBuilt ()) {
      temp_311447 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8171)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8159_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8159_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8181_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8189)) COMMA_SOURCE_FILE_AT_LINE (8189))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_312088 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_312088.isBuilt ()) {
      temp_312088 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8191)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8192)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8192)) ;
  }else{
    const GGS_typeTableEnAvant  temp_312280 = var_cas_tableEnAvant ;
    if (temp_312280.isBuilt ()) {
      temp_312280 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8194)) ;
    }
    GGS_typeGalgasUndefinedListType  var_cas_x ;
    var_cas_x = GGS_typeGalgasUndefinedListType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8195)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8181_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8181_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8206_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8214)) COMMA_SOURCE_FILE_AT_LINE (8214))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_313058 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_313058.isBuilt ()) {
      temp_313058 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8216)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8217)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8217)) ;
  }else{
    const GGS_typeTableEnAvant  temp_313250 = var_cas_tableEnAvant ;
    if (temp_313250.isBuilt ()) {
      temp_313250 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8219)) ;
    }
    GGS_typeGalgasUndefinedMapType  var_cas_x ;
    var_cas_x = GGS_typeGalgasUndefinedMapType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8220)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8206_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8206_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8231_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8240)) COMMA_SOURCE_FILE_AT_LINE (8240))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_314043 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_314043.isBuilt ()) {
      temp_314043 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8242)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8243)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8243)) ;
  }else{
    const GGS_typeTableEnAvant  temp_314235 = var_cas_tableEnAvant ;
    if (temp_314235.isBuilt ()) {
      temp_314235 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8245)) ;
    }
    GGS_typeGalgasUndefinedClassType  var_cas_x ;
    var_cas_x = GGS_typeGalgasUndefinedClassType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8246)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8231_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8231_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8262_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_36 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_36) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8286)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeRoutineExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8262_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8315)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8316)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8262_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8326_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_37 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_37) ;
  GGS_L_EXsignature  var_cas_returnedTypes ;
  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_318382 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_318382 = NULL ;
    while (((operand_318382 = enumerator_318382.nextObject ()))) {
      macroValidPointer (operand_318382) ;
      if (((operand_318382->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_318382->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8355)) ;
      }else if (((operand_318382->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_318382->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8357)) ;
      }
    }
  }
  GGS_EXformalArgumentPassingMode var_cas_passingMode ;
  var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom ;
  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8371)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8371)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8372)) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8375)) ;
  GGS_typeEntityToGenerate  var_cas_ea ;
  var_cas_ea = GGS_typeFonctionExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8326_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode ;
  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes ;
  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_320641 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_320641 = NULL ;
    while (((operand_320641 = enumerator_320641.nextObject ()))) {
      macroValidPointer (operand_320641) ;
      if (((operand_320641->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_320641->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8409)) ;
      }else if (((operand_320641->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_320641->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8411)) ;
      }
    }
  }
  GGS_EXformalArgumentPassingMode var_cas_passingMode ;
  var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom ;
  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8425)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8425)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8426)) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8429)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8430)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8326_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8440_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap ;
  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_88 = true ;
    while (syntaxRepeat_88) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_89 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_90 = true ;
          while (syntaxRepeat_90) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8467)) ;
            switch (select_repeat_semantics_parser_90 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_90 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_88 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_88 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_enumMessageMap ;
  var_cas_enumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap ;
  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap ;
  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap ;
  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_91 = true ;
    while (syntaxRepeat_91) {
      switch (select_repeat_semantics_parser_91 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap ;
          var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_92 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8494))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8496)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique ;
              var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn ;
              var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_93 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8503)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8503)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8505)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8509)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8509)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8511)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList ;
          var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_94 = true ;
            while (syntaxRepeat_94) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_38 ;
                const GGS_enumConstantMap  temp_325171 = var_cas_constantMap ;
                if (temp_325171.isBuilt ()) {
                  temp_325171 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_38 COMMA_SOURCE_FILE_AT_LINE (8521)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_39 ;
                const GGS_enumConstantMap  temp_325364 = var_cas_constantMap ;
                if (temp_325364.isBuilt ()) {
                  temp_325364 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_39 COMMA_SOURCE_FILE_AT_LINE (8526)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_40 ;
                const GGS_enumConstantMap  temp_325563 = var_cas_constantMap ;
                if (temp_325563.isBuilt ()) {
                  temp_325563 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_40 COMMA_SOURCE_FILE_AT_LINE (8531)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList ;
                var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_95 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_94 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_94 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8563)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap ;
          var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_96 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8577))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8579)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique ;
              var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn ;
              var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_97 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8586)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8586)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8588)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8592)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8592)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8594)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap ;
          var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList ;
          var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_98 = true ;
            while (syntaxRepeat_98) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_41 ;
                const GGS_enumConstantMap  temp_328210 = var_cas_constantMap ;
                if (temp_328210.isBuilt ()) {
                  temp_328210 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_41 COMMA_SOURCE_FILE_AT_LINE (8604)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8605)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_42 ;
                const GGS_enumConstantMap  temp_328383 = var_cas_constantMap ;
                if (temp_328383.isBuilt ()) {
                  temp_328383 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_42 COMMA_SOURCE_FILE_AT_LINE (8609)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList ;
                var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_99 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_98 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_98 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_329116 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_329116 = NULL ;
            while (((operand_329116 = enumerator_329116.nextObject ()))) {
              macroValidPointer (operand_329116) ;
              if (((var_cas_definedSourceMap.reader_hasKey (inLexique, operand_329116->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8635)) COMMA_SOURCE_FILE_AT_LINE (8635))).operator_not ()).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_329116->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8636)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8637)) ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8640)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap ;
          var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_100 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8654))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8656)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique ;
              var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn ;
              var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_101 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8663)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8663)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8665)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8669)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8669)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8671)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap ;
          var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList ;
          var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_102 = true ;
            while (syntaxRepeat_102) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_43 ;
                const GGS_enumConstantMap  temp_331151 = var_cas_constantMap ;
                if (temp_331151.isBuilt ()) {
                  temp_331151 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_43 COMMA_SOURCE_FILE_AT_LINE (8681)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8682)) ;
                GGS_typeInstructionList  var_cas_instructionList ;
                var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_103 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_102 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_102 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_331923 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_331923 = NULL ;
            while (((operand_331923 = enumerator_331923.nextObject ()))) {
              macroValidPointer (operand_331923) ;
              if (((var_cas_definedSourceMap.reader_hasKey (inLexique, operand_331923->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8708)) COMMA_SOURCE_FILE_AT_LINE (8708))).operator_not ()).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_331923->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8709)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8710)) ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8713)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeEnumCstMessageStringMap  var_cas_cstMessageStringMap ;
          var_cas_cstMessageStringMap = GGS_typeEnumCstMessageStringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_104 = true ;
            while (syntaxRepeat_104) {
                GGS_lstring  var_cas_cstName ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_cstString ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstString) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                var_cas_cstMessageStringMap.modifier_insertKey (inLexique, var_cas_cstName, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8727)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_104 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_104 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_lstringlist  var_cas_messageStringList ;
          var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          {
            GGS_enumConstantMap::cEnumerator enumerator_332798 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_332798 = NULL ;
            while (((operand_332798 = enumerator_332798.nextObject ()))) {
              macroValidPointer (operand_332798) ;
              GGS_lstring  var_cas_name ;
              var_cas_name = GGS_lstring ::constructor_new (inLexique, operand_332798->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8737)), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_cstString ;
              const GGS_typeEnumCstMessageStringMap  temp_332960 = var_cas_cstMessageStringMap ;
              if (temp_332960.isBuilt ()) {
                temp_332960 (HERE)->method_searchKey (inLexique, var_cas_name, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8739)) ;
              }
              var_cas_messageStringList.addAssign_operation (var_cas_cstString) ;
            }
          }
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (8743)) ;
          } break ;
        default :
          syntaxRepeat_91 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_typeEntityToGenerate  var_cas_e ;
  var_cas_e = GGS_enumGalgasType ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
  GGS_AC_galgasType  var_cas_t ;
  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_ee ;
  var_cas_ee = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_ee COMMA_SOURCE_FILE_AT_LINE (8767)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8440_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap ;
  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_88 = true ;
    while (syntaxRepeat_88) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_89 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_90 = true ;
          while (syntaxRepeat_90) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8795)) ;
            switch (select_repeat_semantics_parser_90 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_90 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_88 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_88 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_exEnumMessageMap ;
  var_cas_exEnumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap ;
  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap ;
  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMessageMap  var_cas_enumMessageMap ;
  var_cas_enumMessageMap = GGS_enumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap ;
  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_91 = true ;
    while (syntaxRepeat_91) {
      switch (select_repeat_semantics_parser_91 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap ;
          var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_92 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8823))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8825)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique ;
              var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn ;
              var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_93 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8832)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8832)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8834)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom ;
                  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8838)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8838)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8840)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList ;
          var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_94 = true ;
            while (syntaxRepeat_94) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_44 ;
                const GGS_enumConstantMap  temp_336679 = var_cas_constantMap ;
                if (temp_336679.isBuilt ()) {
                  temp_336679 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_44 COMMA_SOURCE_FILE_AT_LINE (8850)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_45 ;
                const GGS_enumConstantMap  temp_336872 = var_cas_constantMap ;
                if (temp_336872.isBuilt ()) {
                  temp_336872 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_45 COMMA_SOURCE_FILE_AT_LINE (8855)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_46 ;
                const GGS_enumConstantMap  temp_337071 = var_cas_constantMap ;
                if (temp_337071.isBuilt ()) {
                  temp_337071 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_46 COMMA_SOURCE_FILE_AT_LINE (8860)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList ;
                var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_95 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_94 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_94 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8880)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_96 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_97 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap ;
          var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList ;
          var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_98 = true ;
            while (syntaxRepeat_98) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_47 ;
                const GGS_enumConstantMap  temp_338413 = var_cas_constantMap ;
                if (temp_338413.isBuilt ()) {
                  temp_338413 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_47 COMMA_SOURCE_FILE_AT_LINE (8907)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8908)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_48 ;
                const GGS_enumConstantMap  temp_338586 = var_cas_constantMap ;
                if (temp_338586.isBuilt ()) {
                  temp_338586 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_48 COMMA_SOURCE_FILE_AT_LINE (8912)) ;
                }
                switch (select_semantics_parser_99 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_98 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_98 = false ;
                  break ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8924)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature ;
          var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList ;
          var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_100 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_101 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap ;
          var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList ;
          var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_102 = true ;
            while (syntaxRepeat_102) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_49 ;
                const GGS_enumConstantMap  temp_339737 = var_cas_constantMap ;
                if (temp_339737.isBuilt ()) {
                  temp_339737 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_49 COMMA_SOURCE_FILE_AT_LINE (8951)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8952)) ;
                switch (select_semantics_parser_103 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_102 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_102 = false ;
                  break ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8964)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (8971)) ;
          GGS_lstringlist  var_cas_messageStringList ;
          var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          var_cas_exEnumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (8973)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_104 = true ;
            while (syntaxRepeat_104) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_104 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_104 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_91 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_t ;
  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_exEnumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e ;
  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8997)) ;
  GGS_TypeModel  var_cas_type ;
  var_cas_type = GGS_EnumModel ::constructor_new (inLexique, var_cas_constantMap, var_cas_enumMessageMap COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (8999)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8440_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_88 = true ;
    while (syntaxRepeat_88) {
        switch (select_semantics_parser_89 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_90 = true ;
          while (syntaxRepeat_90) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_90 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_90 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_88 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_88 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_91 = true ;
    while (syntaxRepeat_91) {
      switch (select_repeat_semantics_parser_91 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_92 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_93 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_94 = true ;
            while (syntaxRepeat_94) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_95 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_94 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_94 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_96 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_97 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_98 = true ;
            while (syntaxRepeat_98) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_99 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_98 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_98 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_100 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_101 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_102 = true ;
            while (syntaxRepeat_102) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_103 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_102 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_102 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_104 = true ;
            while (syntaxRepeat_104) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_104 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_104 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_91 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

